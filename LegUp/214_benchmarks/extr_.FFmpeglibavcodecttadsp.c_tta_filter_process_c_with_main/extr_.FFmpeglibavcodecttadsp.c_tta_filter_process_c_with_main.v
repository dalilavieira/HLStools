//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:52:45 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module tta_filter_process_c
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_qm,
	arg_dx,
	arg_dl,
	arg_error,
	arg_in,
	arg_shift,
	arg_round
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_0_2 = 7'd2;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_0_3 = 7'd3;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_4 = 7'd4;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_5 = 7'd5;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_6 = 7'd6;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_7 = 7'd7;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_8 = 7'd8;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_9 = 7'd9;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_10 = 7'd10;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_11 = 7'd11;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_12 = 7'd12;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_13 = 7'd13;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_14 = 7'd14;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_15 = 7'd15;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_16 = 7'd16;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_17 = 7'd17;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_18 = 7'd18;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_19 = 7'd19;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_20 = 7'd20;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_21 = 7'd21;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_22 = 7'd22;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_23 = 7'd23;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_24 = 7'd24;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_25 = 7'd25;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_26 = 7'd26;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_27 = 7'd27;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_3_28 = 7'd28;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_42_29 = 7'd29;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB___crit_edge_30 = 7'd30;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB___crit_edge_31 = 7'd31;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB___crit_edge_32 = 7'd32;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB___crit_edge_33 = 7'd33;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB___crit_edge_34 = 7'd34;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB___crit_edge_35 = 7'd35;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_36 = 7'd36;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_37 = 7'd37;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_38 = 7'd38;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_39 = 7'd39;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_40 = 7'd40;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_41 = 7'd41;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_42 = 7'd42;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_43 = 7'd43;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_44 = 7'd44;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_45 = 7'd45;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_46 = 7'd46;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_47 = 7'd47;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_48 = 7'd48;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_49 = 7'd49;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_50 = 7'd50;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_51 = 7'd51;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_52 = 7'd52;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_53 = 7'd53;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_54 = 7'd54;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_55 = 7'd55;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_56 = 7'd56;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_57 = 7'd57;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_58 = 7'd58;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_59 = 7'd59;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_44_60 = 7'd60;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_61 = 7'd61;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_62 = 7'd62;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_63 = 7'd63;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_64 = 7'd64;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_65 = 7'd65;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_66 = 7'd66;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_67 = 7'd67;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_68 = 7'd68;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_69 = 7'd69;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_70 = 7'd70;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_71 = 7'd71;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_72 = 7'd72;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_73 = 7'd73;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_74 = 7'd74;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_75 = 7'd75;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_76 = 7'd76;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_77 = 7'd77;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_78 = 7'd78;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_79 = 7'd79;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_80 = 7'd80;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_81 = 7'd81;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_82 = 7'd82;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_83 = 7'd83;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_84 = 7'd84;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_85 = 7'd85;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_86 = 7'd86;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_87 = 7'd87;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_88 = 7'd88;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_89 = 7'd89;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_90 = 7'd90;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_91 = 7'd91;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_92 = 7'd92;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_93 = 7'd93;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_94 = 7'd94;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_95 = 7'd95;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_96 = 7'd96;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_97 = 7'd97;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_98 = 7'd98;
parameter [6:0] LEGUP_F_tta_filter_process_c_BB_83_99 = 7'd99;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_qm;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_dx;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_dl;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_error;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_in;
input [31:0] arg_shift;
input [31:0] arg_round;
reg [6:0] cur_state;
reg [31:0] tta_filter_process_c_0_1;
reg [31:0] tta_filter_process_c_0_1_reg;
reg  tta_filter_process_c_0_2;
reg  tta_filter_process_c_0_2_reg;
reg [31:0] tta_filter_process_c_3_4;
reg [31:0] tta_filter_process_c_3_4_reg;
reg [31:0] tta_filter_process_c_3_5;
reg [31:0] tta_filter_process_c_3_5_reg;
reg [31:0] tta_filter_process_c_3_6;
reg [31:0] tta_filter_process_c_3_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_7_reg;
reg [31:0] tta_filter_process_c_3_8;
reg [31:0] tta_filter_process_c_3_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_9_reg;
reg [31:0] tta_filter_process_c_3_10;
reg [31:0] tta_filter_process_c_3_10_reg;
reg [31:0] tta_filter_process_c_3_11;
reg [31:0] tta_filter_process_c_3_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_12_reg;
reg [31:0] tta_filter_process_c_3_13;
reg [31:0] tta_filter_process_c_3_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_14_reg;
reg [31:0] tta_filter_process_c_3_15;
reg [31:0] tta_filter_process_c_3_15_reg;
reg [31:0] tta_filter_process_c_3_16;
reg [31:0] tta_filter_process_c_3_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_17_reg;
reg [31:0] tta_filter_process_c_3_18;
reg [31:0] tta_filter_process_c_3_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_19_reg;
reg [31:0] tta_filter_process_c_3_20;
reg [31:0] tta_filter_process_c_3_20_reg;
reg [31:0] tta_filter_process_c_3_21;
reg [31:0] tta_filter_process_c_3_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_22_reg;
reg [31:0] tta_filter_process_c_3_23;
reg [31:0] tta_filter_process_c_3_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_24_reg;
reg [31:0] tta_filter_process_c_3_25;
reg [31:0] tta_filter_process_c_3_25_reg;
reg [31:0] tta_filter_process_c_3_26;
reg [31:0] tta_filter_process_c_3_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_27_reg;
reg [31:0] tta_filter_process_c_3_28;
reg [31:0] tta_filter_process_c_3_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_29_reg;
reg [31:0] tta_filter_process_c_3_30;
reg [31:0] tta_filter_process_c_3_30_reg;
reg [31:0] tta_filter_process_c_3_31;
reg [31:0] tta_filter_process_c_3_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_32_reg;
reg [31:0] tta_filter_process_c_3_33;
reg [31:0] tta_filter_process_c_3_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_34_reg;
reg [31:0] tta_filter_process_c_3_35;
reg [31:0] tta_filter_process_c_3_35_reg;
reg [31:0] tta_filter_process_c_3_36;
reg [31:0] tta_filter_process_c_3_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_37_reg;
reg [31:0] tta_filter_process_c_3_38;
reg [31:0] tta_filter_process_c_3_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_3_39_reg;
reg [31:0] tta_filter_process_c_3_40;
reg [31:0] tta_filter_process_c_3_40_reg;
reg [31:0] tta_filter_process_c_3_41;
reg [31:0] tta_filter_process_c_3_41_reg;
reg  tta_filter_process_c_42_43;
reg  tta_filter_process_c_42_43_reg;
reg [31:0] tta_filter_process_c___crit_edge__pre;
reg [31:0] tta_filter_process_c___crit_edge__pre_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__phi_trans_insert;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__phi_trans_insert_reg;
reg [31:0] tta_filter_process_c___crit_edge__pre1;
reg [31:0] tta_filter_process_c___crit_edge__pre1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__phi_trans_insert2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__phi_trans_insert2_reg;
reg [31:0] tta_filter_process_c___crit_edge__pre3;
reg [31:0] tta_filter_process_c___crit_edge__pre3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__phi_trans_insert4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__phi_trans_insert4_reg;
reg [31:0] tta_filter_process_c___crit_edge__pre5;
reg [31:0] tta_filter_process_c___crit_edge__pre5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__phi_trans_insert6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__phi_trans_insert6_reg;
reg [31:0] tta_filter_process_c___crit_edge__pre7;
reg [31:0] tta_filter_process_c___crit_edge__pre7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__phi_trans_insert8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__phi_trans_insert8_reg;
reg [31:0] tta_filter_process_c___crit_edge__pre9;
reg [31:0] tta_filter_process_c___crit_edge__pre9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__phi_trans_insert10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__phi_trans_insert10_reg;
reg [31:0] tta_filter_process_c___crit_edge__pre11;
reg [31:0] tta_filter_process_c___crit_edge__pre11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__phi_trans_insert12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__phi_trans_insert12_reg;
reg [31:0] tta_filter_process_c___crit_edge__pre13;
reg [31:0] tta_filter_process_c___crit_edge__pre13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__pre14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__pre14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__pre15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__pre15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__pre17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__pre17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__pre19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__pre19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__pre21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__pre21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__pre23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__pre23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__pre25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c___crit_edge__pre25_reg;
reg [31:0] tta_filter_process_c_44_45;
reg [31:0] tta_filter_process_c_44_45_reg;
reg [31:0] tta_filter_process_c_44_46;
reg [31:0] tta_filter_process_c_44_46_reg;
reg [31:0] tta_filter_process_c_44_47;
reg [31:0] tta_filter_process_c_44_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_48_reg;
reg [31:0] tta_filter_process_c_44_49;
reg [31:0] tta_filter_process_c_44_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_50_reg;
reg [31:0] tta_filter_process_c_44_51;
reg [31:0] tta_filter_process_c_44_51_reg;
reg [31:0] tta_filter_process_c_44_52;
reg [31:0] tta_filter_process_c_44_52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_53_reg;
reg [31:0] tta_filter_process_c_44_54;
reg [31:0] tta_filter_process_c_44_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_55_reg;
reg [31:0] tta_filter_process_c_44_56;
reg [31:0] tta_filter_process_c_44_56_reg;
reg [31:0] tta_filter_process_c_44_57;
reg [31:0] tta_filter_process_c_44_57_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_58_reg;
reg [31:0] tta_filter_process_c_44_59;
reg [31:0] tta_filter_process_c_44_59_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_60_reg;
reg [31:0] tta_filter_process_c_44_61;
reg [31:0] tta_filter_process_c_44_61_reg;
reg [31:0] tta_filter_process_c_44_62;
reg [31:0] tta_filter_process_c_44_62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_63_reg;
reg [31:0] tta_filter_process_c_44_64;
reg [31:0] tta_filter_process_c_44_64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_65_reg;
reg [31:0] tta_filter_process_c_44_66;
reg [31:0] tta_filter_process_c_44_66_reg;
reg [31:0] tta_filter_process_c_44_67;
reg [31:0] tta_filter_process_c_44_67_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_68_reg;
reg [31:0] tta_filter_process_c_44_69;
reg [31:0] tta_filter_process_c_44_69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_70_reg;
reg [31:0] tta_filter_process_c_44_71;
reg [31:0] tta_filter_process_c_44_71_reg;
reg [31:0] tta_filter_process_c_44_72;
reg [31:0] tta_filter_process_c_44_72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_73_reg;
reg [31:0] tta_filter_process_c_44_74;
reg [31:0] tta_filter_process_c_44_74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_75_reg;
reg [31:0] tta_filter_process_c_44_76;
reg [31:0] tta_filter_process_c_44_76_reg;
reg [31:0] tta_filter_process_c_44_77;
reg [31:0] tta_filter_process_c_44_77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_78_reg;
reg [31:0] tta_filter_process_c_44_79;
reg [31:0] tta_filter_process_c_44_79_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_80;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_44_80_reg;
reg [31:0] tta_filter_process_c_44_81;
reg [31:0] tta_filter_process_c_44_81_reg;
reg [31:0] tta_filter_process_c_44_82;
reg [31:0] tta_filter_process_c_44_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83__pre_phi26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83__pre_phi26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83__pre_phi24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83__pre_phi24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83__pre_phi22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83__pre_phi22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83__pre_phi20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83__pre_phi20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83__pre_phi18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83__pre_phi18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83__pre_phi16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83__pre_phi16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83__pre_phi;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83__pre_phi_reg;
reg [31:0] tta_filter_process_c_83_84;
reg [31:0] tta_filter_process_c_83_84_reg;
reg [31:0] tta_filter_process_c_83_85;
reg [31:0] tta_filter_process_c_83_85_reg;
reg [31:0] tta_filter_process_c_83_86;
reg [31:0] tta_filter_process_c_83_86_reg;
reg [31:0] tta_filter_process_c_83_87;
reg [31:0] tta_filter_process_c_83_87_reg;
reg [31:0] tta_filter_process_c_83_88;
reg [31:0] tta_filter_process_c_83_88_reg;
reg [31:0] tta_filter_process_c_83_89;
reg [31:0] tta_filter_process_c_83_89_reg;
reg [31:0] tta_filter_process_c_83_90;
reg [31:0] tta_filter_process_c_83_90_reg;
reg [31:0] tta_filter_process_c_83_91;
reg [31:0] tta_filter_process_c_83_91_reg;
reg [31:0] tta_filter_process_c_83_92;
reg [31:0] tta_filter_process_c_83_92_reg;
reg [31:0] tta_filter_process_c_83_93;
reg [31:0] tta_filter_process_c_83_93_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83_94;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83_94_reg;
reg [31:0] tta_filter_process_c_83_95;
reg [31:0] tta_filter_process_c_83_95_reg;
reg [31:0] tta_filter_process_c_83_96;
reg [31:0] tta_filter_process_c_83_96_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83_97;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83_97_reg;
reg [31:0] tta_filter_process_c_83_98;
reg [31:0] tta_filter_process_c_83_98_reg;
reg [31:0] tta_filter_process_c_83_99;
reg [31:0] tta_filter_process_c_83_99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83_100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83_100_reg;
reg [31:0] tta_filter_process_c_83_101;
reg [31:0] tta_filter_process_c_83_101_reg;
reg [31:0] tta_filter_process_c_83_102;
reg [31:0] tta_filter_process_c_83_102_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83_103;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83_103_reg;
reg [31:0] tta_filter_process_c_83_104;
reg [31:0] tta_filter_process_c_83_104_reg;
reg [31:0] tta_filter_process_c_83_105;
reg [31:0] tta_filter_process_c_83_105_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83_106;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83_106_reg;
reg [31:0] tta_filter_process_c_83_107;
reg [31:0] tta_filter_process_c_83_107_reg;
reg [31:0] tta_filter_process_c_83_108;
reg [31:0] tta_filter_process_c_83_108_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83_109;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83_109_reg;
reg [31:0] tta_filter_process_c_83_110;
reg [31:0] tta_filter_process_c_83_110_reg;
reg [31:0] tta_filter_process_c_83_111;
reg [31:0] tta_filter_process_c_83_111_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83_112;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_83_112_reg;
reg [31:0] tta_filter_process_c_83_113;
reg [31:0] tta_filter_process_c_83_113_reg;
reg [31:0] tta_filter_process_c_83_114;
reg [31:0] tta_filter_process_c_83_114_reg;
reg [31:0] tta_filter_process_c_83_115;
reg [31:0] tta_filter_process_c_83_115_reg;
reg [31:0] tta_filter_process_c_83_116;
reg [31:0] tta_filter_process_c_83_116_reg;
reg [31:0] tta_filter_process_c_83_117;
reg [31:0] tta_filter_process_c_83_117_reg;
reg [31:0] tta_filter_process_c_83_118;
reg [31:0] tta_filter_process_c_83_118_reg;
reg [31:0] tta_filter_process_c_83_119;
reg [31:0] tta_filter_process_c_83_119_reg;
reg [31:0] tta_filter_process_c_83_120;
reg [31:0] tta_filter_process_c_83_120_reg;
reg [31:0] tta_filter_process_c_83_121;
reg [31:0] tta_filter_process_c_83_121_reg;
reg [31:0] tta_filter_process_c_83_122;
reg [31:0] tta_filter_process_c_83_122_reg;
reg [31:0] tta_filter_process_c_83_123;
reg [31:0] tta_filter_process_c_83_123_reg;
reg [31:0] tta_filter_process_c_83_124;
reg [31:0] tta_filter_process_c_83_124_reg;
reg [31:0] tta_filter_process_c_83_125;
reg [31:0] tta_filter_process_c_83_125_reg;
reg [31:0] tta_filter_process_c_83_126;
reg [31:0] tta_filter_process_c_83_126_reg;
reg [31:0] tta_filter_process_c_83_127;
reg [31:0] tta_filter_process_c_83_127_reg;
reg [31:0] tta_filter_process_c_83_128;
reg [31:0] tta_filter_process_c_83_128_reg;
reg [31:0] tta_filter_process_c_83_129;
reg [31:0] tta_filter_process_c_83_129_reg;
reg [31:0] tta_filter_process_c_83_130;
reg [31:0] tta_filter_process_c_83_130_reg;
reg [31:0] tta_filter_process_c_83_131;
reg [31:0] tta_filter_process_c_83_131_reg;
reg [31:0] tta_filter_process_c_83_132;
reg [31:0] tta_filter_process_c_83_132_reg;
reg [31:0] tta_filter_process_c_83_133;
reg [31:0] tta_filter_process_c_83_133_reg;
reg [31:0] tta_filter_process_c_83_134;
reg [31:0] tta_filter_process_c_83_134_reg;
reg [31:0] tta_filter_process_c_83_135;
reg [31:0] tta_filter_process_c_83_135_reg;
reg [31:0] tta_filter_process_c_83_136;
reg [31:0] tta_filter_process_c_83_136_reg;
reg [31:0] tta_filter_process_c_83_137;
reg [31:0] tta_filter_process_c_83_137_reg;
reg [31:0] tta_filter_process_c_83_138;
reg [31:0] tta_filter_process_c_83_138_reg;
reg [31:0] tta_filter_process_c_83_139;
reg [31:0] tta_filter_process_c_83_139_reg;
reg [31:0] tta_filter_process_c_83_140;
reg [31:0] tta_filter_process_c_83_140_reg;
reg [31:0] tta_filter_process_c_83_141;
reg [31:0] tta_filter_process_c_83_141_reg;
reg [31:0] tta_filter_process_c_83_142;
reg [31:0] tta_filter_process_c_83_142_reg;
reg [31:0] tta_filter_process_c_83_143;
reg [31:0] tta_filter_process_c_83_143_reg;
reg [31:0] tta_filter_process_c_83_144;
reg [31:0] tta_filter_process_c_83_144_reg;
reg [31:0] tta_filter_process_c_83_145;
reg [31:0] tta_filter_process_c_83_145_reg;
reg [31:0] tta_filter_process_c_83_146;
reg [31:0] tta_filter_process_c_83_146_reg;
reg [31:0] tta_filter_process_c_83_147;
reg [31:0] tta_filter_process_c_83_147_reg;
reg [31:0] tta_filter_process_c_83_148;
reg [31:0] tta_filter_process_c_83_148_reg;
reg [31:0] tta_filter_process_c_83_149;
reg [31:0] tta_filter_process_c_83_149_reg;
reg [31:0] tta_filter_process_c_83_150;
reg [31:0] tta_filter_process_c_83_150_reg;
reg [31:0] tta_filter_process_c_83_151;
reg [31:0] tta_filter_process_c_83_151_reg;
reg [31:0] tta_filter_process_c_83_152;
reg [31:0] tta_filter_process_c_83_152_reg;
reg [31:0] tta_filter_process_c_83_153;
reg [31:0] tta_filter_process_c_83_153_reg;
reg [31:0] tta_filter_process_c_83_154;
reg [31:0] tta_filter_process_c_83_154_reg;
reg [31:0] tta_filter_process_c_83_155;
reg [31:0] tta_filter_process_c_83_155_reg;
reg [31:0] tta_filter_process_c_83_156;
reg [31:0] tta_filter_process_c_83_156_reg;
reg [31:0] tta_filter_process_c_83_157;
reg [31:0] tta_filter_process_c_83_157_reg;
reg [31:0] tta_filter_process_c_83_158;
reg [31:0] tta_filter_process_c_83_158_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg  lpm_mult_tta_filter_process_c_83_93_en;
reg [31:0] tta_filter_process_c_83_93_stage0_reg;
reg  lpm_mult_tta_filter_process_c_83_96_en;
reg [31:0] tta_filter_process_c_83_96_stage0_reg;
reg  lpm_mult_tta_filter_process_c_83_99_en;
reg [31:0] tta_filter_process_c_83_99_stage0_reg;
reg  lpm_mult_tta_filter_process_c_83_102_en;
reg [31:0] tta_filter_process_c_83_102_stage0_reg;
reg  lpm_mult_tta_filter_process_c_83_105_en;
reg [31:0] tta_filter_process_c_83_105_stage0_reg;
reg  lpm_mult_tta_filter_process_c_83_108_en;
reg [31:0] tta_filter_process_c_83_108_stage0_reg;
reg  lpm_mult_tta_filter_process_c_83_111_en;
reg [31:0] tta_filter_process_c_83_111_stage0_reg;
reg  lpm_mult_tta_filter_process_c_83_114_en;
reg [31:0] tta_filter_process_c_83_114_stage0_reg;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_tta_filter_process_c_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (tta_filter_process_c_0_2 == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_4;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_tta_filter_process_c_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (tta_filter_process_c_0_2 == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_42_29;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_42_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_4;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_5;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_5;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_6;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_6;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_7;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_7;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_8;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_8;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_9;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_9;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_10;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_10;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_11;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_11;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_12;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_12;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_13;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_13;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_14;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_14;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_15;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_15;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_16;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_16;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_17;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_17;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_18;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_18;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_19;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_19;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_20;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_20;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_21;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_21;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_22;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_22;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_23;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_23;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_24;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_24;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_25;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_25;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_26;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_26;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_27;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_27;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_28;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_3_28;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_3_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_61;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_42_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_42_29;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_42_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_tta_filter_process_c_BB_42_29) & (memory_controller_waitrequest == 1'd0)) & (tta_filter_process_c_42_43 == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_36;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_tta_filter_process_c_BB_42_29) & (memory_controller_waitrequest == 1'd0)) & (tta_filter_process_c_42_43 == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB___crit_edge_30;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB___crit_edge_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB___crit_edge_30;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB___crit_edge_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB___crit_edge_31;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB___crit_edge_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB___crit_edge_31;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB___crit_edge_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB___crit_edge_32;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB___crit_edge_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB___crit_edge_32;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB___crit_edge_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB___crit_edge_33;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB___crit_edge_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB___crit_edge_33;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB___crit_edge_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB___crit_edge_34;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB___crit_edge_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB___crit_edge_34;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB___crit_edge_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB___crit_edge_35;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB___crit_edge_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB___crit_edge_35;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB___crit_edge_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_61;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_36;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_37;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_37;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_38;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_38;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_39;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_39;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_40;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_40;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_41;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_41;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_42;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_42;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_43;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_43;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_44;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_44;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_45;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_45;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_46;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_46;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_47;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_47;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_48;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_48;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_49;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_49;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_50;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_50;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_51;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_51;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_52;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_52;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_53;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_53;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_54;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_54;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_55;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_55;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_56;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_56;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_57;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_57;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_58;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_58;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_59;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_59;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_60;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_44_60;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_44_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_61;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_61;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_62;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_62;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_63;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_63;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_64;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_64;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_65;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_65;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_66;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_66;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_67;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_67;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_68;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_68;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_69;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_69;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_70;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_70;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_71;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_71;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_72;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_72;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_73;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_73;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_74;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_74;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_75;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_75;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_76;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_76;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_77;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_77;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_78;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_78;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_79;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_79;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_80;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_80;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_81;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_81;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_82;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_82;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_83;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_83;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_84;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_84;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_85;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_85;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_86;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_86;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_87;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_87;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_88;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_88;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_89;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_89;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_90;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_90;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_91;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_91;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_92;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_92;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_93;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_93;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_94;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_94;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_95;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_95;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_96;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_96;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_97;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_97;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_98;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_98;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_99;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tta_filter_process_c_BB_83_99;
if (reset == 1'b0 && ^(LEGUP_F_tta_filter_process_c_BB_83_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_83_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (reset == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %0*/
/*   %1 = load i32* %error, align 4, !tbaa !0*/
begin
tta_filter_process_c_0_1 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %0*/
/*   %1 = load i32* %error, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_0_3))
begin
tta_filter_process_c_0_1_reg <= tta_filter_process_c_0_1;
if (reset == 1'b0 && ^(tta_filter_process_c_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_0_1_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %0*/
/*   %2 = icmp slt i32 %1, 0*/
begin
tta_filter_process_c_0_2 = ($signed(tta_filter_process_c_0_1) < $signed(32'd0));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %0*/
/*   %2 = icmp slt i32 %1, 0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_0_3))
begin
tta_filter_process_c_0_2_reg <= tta_filter_process_c_0_2;
if (reset == 1'b0 && ^(tta_filter_process_c_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_0_2_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %4 = load i32* %dx, align 4, !tbaa !0*/
begin
tta_filter_process_c_3_4 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %4 = load i32* %dx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_6))
begin
tta_filter_process_c_3_4_reg <= tta_filter_process_c_3_4;
if (reset == 1'b0 && ^(tta_filter_process_c_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_4_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %5 = load i32* %qm, align 4, !tbaa !0*/
begin
tta_filter_process_c_3_5 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %5 = load i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_6))
begin
tta_filter_process_c_3_5_reg <= tta_filter_process_c_3_5;
if (reset == 1'b0 && ^(tta_filter_process_c_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_5_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %6 = sub nsw i32 %5, %4*/
begin
tta_filter_process_c_3_6 = (tta_filter_process_c_3_5 - tta_filter_process_c_3_4);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %6 = sub nsw i32 %5, %4*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_6))
begin
tta_filter_process_c_3_6_reg <= tta_filter_process_c_3_6;
if (reset == 1'b0 && ^(tta_filter_process_c_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_6_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %7 = getelementptr inbounds i32* %dx, i32 1*/
begin
tta_filter_process_c_3_7 = (arg_dx + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %7 = getelementptr inbounds i32* %dx, i32 1*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_4))
begin
tta_filter_process_c_3_7_reg <= tta_filter_process_c_3_7;
if (reset == 1'b0 && ^(tta_filter_process_c_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_7_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
begin
tta_filter_process_c_3_8 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_9))
begin
tta_filter_process_c_3_8_reg <= tta_filter_process_c_3_8;
if (reset == 1'b0 && ^(tta_filter_process_c_3_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_8_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %9 = getelementptr inbounds i32* %qm, i32 1*/
begin
tta_filter_process_c_3_9 = (arg_qm + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %9 = getelementptr inbounds i32* %qm, i32 1*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_4))
begin
tta_filter_process_c_3_9_reg <= tta_filter_process_c_3_9;
if (reset == 1'b0 && ^(tta_filter_process_c_3_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_9_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %10 = load i32* %9, align 4, !tbaa !0*/
begin
tta_filter_process_c_3_10 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %10 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_9))
begin
tta_filter_process_c_3_10_reg <= tta_filter_process_c_3_10;
if (reset == 1'b0 && ^(tta_filter_process_c_3_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_10_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %11 = sub nsw i32 %10, %8*/
begin
tta_filter_process_c_3_11 = (tta_filter_process_c_3_10 - tta_filter_process_c_3_8);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %11 = sub nsw i32 %10, %8*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_9))
begin
tta_filter_process_c_3_11_reg <= tta_filter_process_c_3_11;
if (reset == 1'b0 && ^(tta_filter_process_c_3_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_11_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %12 = getelementptr inbounds i32* %dx, i32 2*/
begin
tta_filter_process_c_3_12 = (arg_dx + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %12 = getelementptr inbounds i32* %dx, i32 2*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_4))
begin
tta_filter_process_c_3_12_reg <= tta_filter_process_c_3_12;
if (reset == 1'b0 && ^(tta_filter_process_c_3_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_12_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
begin
tta_filter_process_c_3_13 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_12))
begin
tta_filter_process_c_3_13_reg <= tta_filter_process_c_3_13;
if (reset == 1'b0 && ^(tta_filter_process_c_3_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_13_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %14 = getelementptr inbounds i32* %qm, i32 2*/
begin
tta_filter_process_c_3_14 = (arg_qm + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %14 = getelementptr inbounds i32* %qm, i32 2*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_4))
begin
tta_filter_process_c_3_14_reg <= tta_filter_process_c_3_14;
if (reset == 1'b0 && ^(tta_filter_process_c_3_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_14_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
begin
tta_filter_process_c_3_15 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_12))
begin
tta_filter_process_c_3_15_reg <= tta_filter_process_c_3_15;
if (reset == 1'b0 && ^(tta_filter_process_c_3_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_15_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %16 = sub nsw i32 %15, %13*/
begin
tta_filter_process_c_3_16 = (tta_filter_process_c_3_15 - tta_filter_process_c_3_13);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %16 = sub nsw i32 %15, %13*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_12))
begin
tta_filter_process_c_3_16_reg <= tta_filter_process_c_3_16;
if (reset == 1'b0 && ^(tta_filter_process_c_3_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_16_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %17 = getelementptr inbounds i32* %dx, i32 3*/
begin
tta_filter_process_c_3_17 = (arg_dx + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %17 = getelementptr inbounds i32* %dx, i32 3*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_4))
begin
tta_filter_process_c_3_17_reg <= tta_filter_process_c_3_17;
if (reset == 1'b0 && ^(tta_filter_process_c_3_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_17_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %18 = load i32* %17, align 4, !tbaa !0*/
begin
tta_filter_process_c_3_18 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %18 = load i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_15))
begin
tta_filter_process_c_3_18_reg <= tta_filter_process_c_3_18;
if (reset == 1'b0 && ^(tta_filter_process_c_3_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_18_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %19 = getelementptr inbounds i32* %qm, i32 3*/
begin
tta_filter_process_c_3_19 = (arg_qm + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %19 = getelementptr inbounds i32* %qm, i32 3*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_4))
begin
tta_filter_process_c_3_19_reg <= tta_filter_process_c_3_19;
if (reset == 1'b0 && ^(tta_filter_process_c_3_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_19_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
begin
tta_filter_process_c_3_20 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_15))
begin
tta_filter_process_c_3_20_reg <= tta_filter_process_c_3_20;
if (reset == 1'b0 && ^(tta_filter_process_c_3_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_20_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %21 = sub nsw i32 %20, %18*/
begin
tta_filter_process_c_3_21 = (tta_filter_process_c_3_20 - tta_filter_process_c_3_18);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %21 = sub nsw i32 %20, %18*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_15))
begin
tta_filter_process_c_3_21_reg <= tta_filter_process_c_3_21;
if (reset == 1'b0 && ^(tta_filter_process_c_3_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_21_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %22 = getelementptr inbounds i32* %dx, i32 4*/
begin
tta_filter_process_c_3_22 = (arg_dx + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %22 = getelementptr inbounds i32* %dx, i32 4*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_4))
begin
tta_filter_process_c_3_22_reg <= tta_filter_process_c_3_22;
if (reset == 1'b0 && ^(tta_filter_process_c_3_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_22_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
begin
tta_filter_process_c_3_23 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_18))
begin
tta_filter_process_c_3_23_reg <= tta_filter_process_c_3_23;
if (reset == 1'b0 && ^(tta_filter_process_c_3_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_23_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %24 = getelementptr inbounds i32* %qm, i32 4*/
begin
tta_filter_process_c_3_24 = (arg_qm + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %24 = getelementptr inbounds i32* %qm, i32 4*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_4))
begin
tta_filter_process_c_3_24_reg <= tta_filter_process_c_3_24;
if (reset == 1'b0 && ^(tta_filter_process_c_3_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_24_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
begin
tta_filter_process_c_3_25 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_18))
begin
tta_filter_process_c_3_25_reg <= tta_filter_process_c_3_25;
if (reset == 1'b0 && ^(tta_filter_process_c_3_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_25_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %26 = sub nsw i32 %25, %23*/
begin
tta_filter_process_c_3_26 = (tta_filter_process_c_3_25 - tta_filter_process_c_3_23);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %26 = sub nsw i32 %25, %23*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_18))
begin
tta_filter_process_c_3_26_reg <= tta_filter_process_c_3_26;
if (reset == 1'b0 && ^(tta_filter_process_c_3_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_26_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %27 = getelementptr inbounds i32* %dx, i32 5*/
begin
tta_filter_process_c_3_27 = (arg_dx + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %27 = getelementptr inbounds i32* %dx, i32 5*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_4))
begin
tta_filter_process_c_3_27_reg <= tta_filter_process_c_3_27;
if (reset == 1'b0 && ^(tta_filter_process_c_3_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_27_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
begin
tta_filter_process_c_3_28 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_21))
begin
tta_filter_process_c_3_28_reg <= tta_filter_process_c_3_28;
if (reset == 1'b0 && ^(tta_filter_process_c_3_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_28_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %29 = getelementptr inbounds i32* %qm, i32 5*/
begin
tta_filter_process_c_3_29 = (arg_qm + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %29 = getelementptr inbounds i32* %qm, i32 5*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_4))
begin
tta_filter_process_c_3_29_reg <= tta_filter_process_c_3_29;
if (reset == 1'b0 && ^(tta_filter_process_c_3_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_29_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %30 = load i32* %29, align 4, !tbaa !0*/
begin
tta_filter_process_c_3_30 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %30 = load i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_21))
begin
tta_filter_process_c_3_30_reg <= tta_filter_process_c_3_30;
if (reset == 1'b0 && ^(tta_filter_process_c_3_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_30_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %31 = sub nsw i32 %30, %28*/
begin
tta_filter_process_c_3_31 = (tta_filter_process_c_3_30 - tta_filter_process_c_3_28);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %31 = sub nsw i32 %30, %28*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_21))
begin
tta_filter_process_c_3_31_reg <= tta_filter_process_c_3_31;
if (reset == 1'b0 && ^(tta_filter_process_c_3_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_31_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %32 = getelementptr inbounds i32* %dx, i32 6*/
begin
tta_filter_process_c_3_32 = (arg_dx + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %32 = getelementptr inbounds i32* %dx, i32 6*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_4))
begin
tta_filter_process_c_3_32_reg <= tta_filter_process_c_3_32;
if (reset == 1'b0 && ^(tta_filter_process_c_3_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_32_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %33 = load i32* %32, align 4, !tbaa !0*/
begin
tta_filter_process_c_3_33 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %33 = load i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_24))
begin
tta_filter_process_c_3_33_reg <= tta_filter_process_c_3_33;
if (reset == 1'b0 && ^(tta_filter_process_c_3_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_33_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %34 = getelementptr inbounds i32* %qm, i32 6*/
begin
tta_filter_process_c_3_34 = (arg_qm + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %34 = getelementptr inbounds i32* %qm, i32 6*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_4))
begin
tta_filter_process_c_3_34_reg <= tta_filter_process_c_3_34;
if (reset == 1'b0 && ^(tta_filter_process_c_3_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_34_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %35 = load i32* %34, align 4, !tbaa !0*/
begin
tta_filter_process_c_3_35 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %35 = load i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_24))
begin
tta_filter_process_c_3_35_reg <= tta_filter_process_c_3_35;
if (reset == 1'b0 && ^(tta_filter_process_c_3_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_35_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %36 = sub nsw i32 %35, %33*/
begin
tta_filter_process_c_3_36 = (tta_filter_process_c_3_35 - tta_filter_process_c_3_33);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %36 = sub nsw i32 %35, %33*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_24))
begin
tta_filter_process_c_3_36_reg <= tta_filter_process_c_3_36;
if (reset == 1'b0 && ^(tta_filter_process_c_3_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_36_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %37 = getelementptr inbounds i32* %dx, i32 7*/
begin
tta_filter_process_c_3_37 = (arg_dx + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %37 = getelementptr inbounds i32* %dx, i32 7*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_4))
begin
tta_filter_process_c_3_37_reg <= tta_filter_process_c_3_37;
if (reset == 1'b0 && ^(tta_filter_process_c_3_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_37_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
begin
tta_filter_process_c_3_38 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_27))
begin
tta_filter_process_c_3_38_reg <= tta_filter_process_c_3_38;
if (reset == 1'b0 && ^(tta_filter_process_c_3_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_38_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %39 = getelementptr inbounds i32* %qm, i32 7*/
begin
tta_filter_process_c_3_39 = (arg_qm + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %39 = getelementptr inbounds i32* %qm, i32 7*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_4))
begin
tta_filter_process_c_3_39_reg <= tta_filter_process_c_3_39;
if (reset == 1'b0 && ^(tta_filter_process_c_3_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_39_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %40 = load i32* %39, align 4, !tbaa !0*/
begin
tta_filter_process_c_3_40 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %40 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_27))
begin
tta_filter_process_c_3_40_reg <= tta_filter_process_c_3_40;
if (reset == 1'b0 && ^(tta_filter_process_c_3_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_40_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %3*/
/*   %41 = sub nsw i32 %40, %38*/
begin
tta_filter_process_c_3_41 = (tta_filter_process_c_3_40 - tta_filter_process_c_3_38);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %3*/
/*   %41 = sub nsw i32 %40, %38*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_27))
begin
tta_filter_process_c_3_41_reg <= tta_filter_process_c_3_41;
if (reset == 1'b0 && ^(tta_filter_process_c_3_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_3_41_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %42*/
/*   %43 = icmp sgt i32 %1, 0*/
begin
tta_filter_process_c_42_43 = ($signed(tta_filter_process_c_0_1_reg) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %42*/
/*   %43 = icmp sgt i32 %1, 0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_42_29))
begin
tta_filter_process_c_42_43_reg <= tta_filter_process_c_42_43;
if (reset == 1'b0 && ^(tta_filter_process_c_42_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_42_43_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre = load i32* %qm, align 4, !tbaa !0*/
begin
tta_filter_process_c___crit_edge__pre = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre = load i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_32))
begin
tta_filter_process_c___crit_edge__pre_reg <= tta_filter_process_c___crit_edge__pre;
if (reset == 1'b0 && ^(tta_filter_process_c___crit_edge__pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c___crit_edge__pre_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.phi.trans.insert = getelementptr inbounds i32* %qm, i32 1*/
begin
tta_filter_process_c___crit_edge__phi_trans_insert = (arg_qm + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.phi.trans.insert = getelementptr inbounds i32* %qm, i32 1*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_30))
begin
tta_filter_process_c___crit_edge__phi_trans_insert_reg <= tta_filter_process_c___crit_edge__phi_trans_insert;
if (reset == 1'b0 && ^(tta_filter_process_c___crit_edge__phi_trans_insert) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c___crit_edge__phi_trans_insert_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre1 = load i32* %.phi.trans.insert, align 4, !tbaa !0*/
begin
tta_filter_process_c___crit_edge__pre1 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre1 = load i32* %.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_32))
begin
tta_filter_process_c___crit_edge__pre1_reg <= tta_filter_process_c___crit_edge__pre1;
if (reset == 1'b0 && ^(tta_filter_process_c___crit_edge__pre1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c___crit_edge__pre1_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.phi.trans.insert2 = getelementptr inbounds i32* %qm, i32 2*/
begin
tta_filter_process_c___crit_edge__phi_trans_insert2 = (arg_qm + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.phi.trans.insert2 = getelementptr inbounds i32* %qm, i32 2*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_30))
begin
tta_filter_process_c___crit_edge__phi_trans_insert2_reg <= tta_filter_process_c___crit_edge__phi_trans_insert2;
if (reset == 1'b0 && ^(tta_filter_process_c___crit_edge__phi_trans_insert2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c___crit_edge__phi_trans_insert2_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre3 = load i32* %.phi.trans.insert2, align 4, !tbaa !0*/
begin
tta_filter_process_c___crit_edge__pre3 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre3 = load i32* %.phi.trans.insert2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_33))
begin
tta_filter_process_c___crit_edge__pre3_reg <= tta_filter_process_c___crit_edge__pre3;
if (reset == 1'b0 && ^(tta_filter_process_c___crit_edge__pre3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c___crit_edge__pre3_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.phi.trans.insert4 = getelementptr inbounds i32* %qm, i32 3*/
begin
tta_filter_process_c___crit_edge__phi_trans_insert4 = (arg_qm + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.phi.trans.insert4 = getelementptr inbounds i32* %qm, i32 3*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_30))
begin
tta_filter_process_c___crit_edge__phi_trans_insert4_reg <= tta_filter_process_c___crit_edge__phi_trans_insert4;
if (reset == 1'b0 && ^(tta_filter_process_c___crit_edge__phi_trans_insert4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c___crit_edge__phi_trans_insert4_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre5 = load i32* %.phi.trans.insert4, align 4, !tbaa !0*/
begin
tta_filter_process_c___crit_edge__pre5 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre5 = load i32* %.phi.trans.insert4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_33))
begin
tta_filter_process_c___crit_edge__pre5_reg <= tta_filter_process_c___crit_edge__pre5;
if (reset == 1'b0 && ^(tta_filter_process_c___crit_edge__pre5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c___crit_edge__pre5_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.phi.trans.insert6 = getelementptr inbounds i32* %qm, i32 4*/
begin
tta_filter_process_c___crit_edge__phi_trans_insert6 = (arg_qm + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.phi.trans.insert6 = getelementptr inbounds i32* %qm, i32 4*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_30))
begin
tta_filter_process_c___crit_edge__phi_trans_insert6_reg <= tta_filter_process_c___crit_edge__phi_trans_insert6;
if (reset == 1'b0 && ^(tta_filter_process_c___crit_edge__phi_trans_insert6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c___crit_edge__phi_trans_insert6_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre7 = load i32* %.phi.trans.insert6, align 4, !tbaa !0*/
begin
tta_filter_process_c___crit_edge__pre7 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre7 = load i32* %.phi.trans.insert6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_34))
begin
tta_filter_process_c___crit_edge__pre7_reg <= tta_filter_process_c___crit_edge__pre7;
if (reset == 1'b0 && ^(tta_filter_process_c___crit_edge__pre7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c___crit_edge__pre7_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.phi.trans.insert8 = getelementptr inbounds i32* %qm, i32 5*/
begin
tta_filter_process_c___crit_edge__phi_trans_insert8 = (arg_qm + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.phi.trans.insert8 = getelementptr inbounds i32* %qm, i32 5*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_30))
begin
tta_filter_process_c___crit_edge__phi_trans_insert8_reg <= tta_filter_process_c___crit_edge__phi_trans_insert8;
if (reset == 1'b0 && ^(tta_filter_process_c___crit_edge__phi_trans_insert8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c___crit_edge__phi_trans_insert8_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre9 = load i32* %.phi.trans.insert8, align 4, !tbaa !0*/
begin
tta_filter_process_c___crit_edge__pre9 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre9 = load i32* %.phi.trans.insert8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_34))
begin
tta_filter_process_c___crit_edge__pre9_reg <= tta_filter_process_c___crit_edge__pre9;
if (reset == 1'b0 && ^(tta_filter_process_c___crit_edge__pre9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c___crit_edge__pre9_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.phi.trans.insert10 = getelementptr inbounds i32* %qm, i32 6*/
begin
tta_filter_process_c___crit_edge__phi_trans_insert10 = (arg_qm + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.phi.trans.insert10 = getelementptr inbounds i32* %qm, i32 6*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_30))
begin
tta_filter_process_c___crit_edge__phi_trans_insert10_reg <= tta_filter_process_c___crit_edge__phi_trans_insert10;
if (reset == 1'b0 && ^(tta_filter_process_c___crit_edge__phi_trans_insert10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c___crit_edge__phi_trans_insert10_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre11 = load i32* %.phi.trans.insert10, align 4, !tbaa !0*/
begin
tta_filter_process_c___crit_edge__pre11 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre11 = load i32* %.phi.trans.insert10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35))
begin
tta_filter_process_c___crit_edge__pre11_reg <= tta_filter_process_c___crit_edge__pre11;
if (reset == 1'b0 && ^(tta_filter_process_c___crit_edge__pre11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c___crit_edge__pre11_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.phi.trans.insert12 = getelementptr inbounds i32* %qm, i32 7*/
begin
tta_filter_process_c___crit_edge__phi_trans_insert12 = (arg_qm + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.phi.trans.insert12 = getelementptr inbounds i32* %qm, i32 7*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_30))
begin
tta_filter_process_c___crit_edge__phi_trans_insert12_reg <= tta_filter_process_c___crit_edge__phi_trans_insert12;
if (reset == 1'b0 && ^(tta_filter_process_c___crit_edge__phi_trans_insert12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c___crit_edge__phi_trans_insert12_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre13 = load i32* %.phi.trans.insert12, align 4, !tbaa !0*/
begin
tta_filter_process_c___crit_edge__pre13 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre13 = load i32* %.phi.trans.insert12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35))
begin
tta_filter_process_c___crit_edge__pre13_reg <= tta_filter_process_c___crit_edge__pre13;
if (reset == 1'b0 && ^(tta_filter_process_c___crit_edge__pre13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c___crit_edge__pre13_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre14 = getelementptr inbounds i32* %dx, i32 1*/
begin
tta_filter_process_c___crit_edge__pre14 = (arg_dx + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre14 = getelementptr inbounds i32* %dx, i32 1*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_30))
begin
tta_filter_process_c___crit_edge__pre14_reg <= tta_filter_process_c___crit_edge__pre14;
if (reset == 1'b0 && ^(tta_filter_process_c___crit_edge__pre14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c___crit_edge__pre14_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre15 = getelementptr inbounds i32* %dx, i32 2*/
begin
tta_filter_process_c___crit_edge__pre15 = (arg_dx + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre15 = getelementptr inbounds i32* %dx, i32 2*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_30))
begin
tta_filter_process_c___crit_edge__pre15_reg <= tta_filter_process_c___crit_edge__pre15;
if (reset == 1'b0 && ^(tta_filter_process_c___crit_edge__pre15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c___crit_edge__pre15_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre17 = getelementptr inbounds i32* %dx, i32 3*/
begin
tta_filter_process_c___crit_edge__pre17 = (arg_dx + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre17 = getelementptr inbounds i32* %dx, i32 3*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_30))
begin
tta_filter_process_c___crit_edge__pre17_reg <= tta_filter_process_c___crit_edge__pre17;
if (reset == 1'b0 && ^(tta_filter_process_c___crit_edge__pre17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c___crit_edge__pre17_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre19 = getelementptr inbounds i32* %dx, i32 4*/
begin
tta_filter_process_c___crit_edge__pre19 = (arg_dx + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre19 = getelementptr inbounds i32* %dx, i32 4*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_30))
begin
tta_filter_process_c___crit_edge__pre19_reg <= tta_filter_process_c___crit_edge__pre19;
if (reset == 1'b0 && ^(tta_filter_process_c___crit_edge__pre19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c___crit_edge__pre19_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre21 = getelementptr inbounds i32* %dx, i32 5*/
begin
tta_filter_process_c___crit_edge__pre21 = (arg_dx + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre21 = getelementptr inbounds i32* %dx, i32 5*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_30))
begin
tta_filter_process_c___crit_edge__pre21_reg <= tta_filter_process_c___crit_edge__pre21;
if (reset == 1'b0 && ^(tta_filter_process_c___crit_edge__pre21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c___crit_edge__pre21_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre23 = getelementptr inbounds i32* %dx, i32 6*/
begin
tta_filter_process_c___crit_edge__pre23 = (arg_dx + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre23 = getelementptr inbounds i32* %dx, i32 6*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_30))
begin
tta_filter_process_c___crit_edge__pre23_reg <= tta_filter_process_c___crit_edge__pre23;
if (reset == 1'b0 && ^(tta_filter_process_c___crit_edge__pre23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c___crit_edge__pre23_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre25 = getelementptr inbounds i32* %dx, i32 7*/
begin
tta_filter_process_c___crit_edge__pre25 = (arg_dx + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre25 = getelementptr inbounds i32* %dx, i32 7*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_30))
begin
tta_filter_process_c___crit_edge__pre25_reg <= tta_filter_process_c___crit_edge__pre25;
if (reset == 1'b0 && ^(tta_filter_process_c___crit_edge__pre25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c___crit_edge__pre25_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %45 = load i32* %dx, align 4, !tbaa !0*/
begin
tta_filter_process_c_44_45 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %45 = load i32* %dx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_38))
begin
tta_filter_process_c_44_45_reg <= tta_filter_process_c_44_45;
if (reset == 1'b0 && ^(tta_filter_process_c_44_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_45_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %46 = load i32* %qm, align 4, !tbaa !0*/
begin
tta_filter_process_c_44_46 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %46 = load i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_38))
begin
tta_filter_process_c_44_46_reg <= tta_filter_process_c_44_46;
if (reset == 1'b0 && ^(tta_filter_process_c_44_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_46_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %47 = add nsw i32 %46, %45*/
begin
tta_filter_process_c_44_47 = (tta_filter_process_c_44_46 + tta_filter_process_c_44_45);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %47 = add nsw i32 %46, %45*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_38))
begin
tta_filter_process_c_44_47_reg <= tta_filter_process_c_44_47;
if (reset == 1'b0 && ^(tta_filter_process_c_44_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_47_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %48 = getelementptr inbounds i32* %dx, i32 1*/
begin
tta_filter_process_c_44_48 = (arg_dx + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %48 = getelementptr inbounds i32* %dx, i32 1*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_36))
begin
tta_filter_process_c_44_48_reg <= tta_filter_process_c_44_48;
if (reset == 1'b0 && ^(tta_filter_process_c_44_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_48_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %49 = load i32* %48, align 4, !tbaa !0*/
begin
tta_filter_process_c_44_49 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %49 = load i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_41))
begin
tta_filter_process_c_44_49_reg <= tta_filter_process_c_44_49;
if (reset == 1'b0 && ^(tta_filter_process_c_44_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_49_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %50 = getelementptr inbounds i32* %qm, i32 1*/
begin
tta_filter_process_c_44_50 = (arg_qm + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %50 = getelementptr inbounds i32* %qm, i32 1*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_36))
begin
tta_filter_process_c_44_50_reg <= tta_filter_process_c_44_50;
if (reset == 1'b0 && ^(tta_filter_process_c_44_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_50_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %51 = load i32* %50, align 4, !tbaa !0*/
begin
tta_filter_process_c_44_51 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %51 = load i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_41))
begin
tta_filter_process_c_44_51_reg <= tta_filter_process_c_44_51;
if (reset == 1'b0 && ^(tta_filter_process_c_44_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_51_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %52 = add nsw i32 %51, %49*/
begin
tta_filter_process_c_44_52 = (tta_filter_process_c_44_51 + tta_filter_process_c_44_49);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %52 = add nsw i32 %51, %49*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_41))
begin
tta_filter_process_c_44_52_reg <= tta_filter_process_c_44_52;
if (reset == 1'b0 && ^(tta_filter_process_c_44_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_52_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %53 = getelementptr inbounds i32* %dx, i32 2*/
begin
tta_filter_process_c_44_53 = (arg_dx + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %53 = getelementptr inbounds i32* %dx, i32 2*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_36))
begin
tta_filter_process_c_44_53_reg <= tta_filter_process_c_44_53;
if (reset == 1'b0 && ^(tta_filter_process_c_44_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_53_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %54 = load i32* %53, align 4, !tbaa !0*/
begin
tta_filter_process_c_44_54 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %54 = load i32* %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_44))
begin
tta_filter_process_c_44_54_reg <= tta_filter_process_c_44_54;
if (reset == 1'b0 && ^(tta_filter_process_c_44_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_54_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %55 = getelementptr inbounds i32* %qm, i32 2*/
begin
tta_filter_process_c_44_55 = (arg_qm + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %55 = getelementptr inbounds i32* %qm, i32 2*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_36))
begin
tta_filter_process_c_44_55_reg <= tta_filter_process_c_44_55;
if (reset == 1'b0 && ^(tta_filter_process_c_44_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_55_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %56 = load i32* %55, align 4, !tbaa !0*/
begin
tta_filter_process_c_44_56 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %56 = load i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_44))
begin
tta_filter_process_c_44_56_reg <= tta_filter_process_c_44_56;
if (reset == 1'b0 && ^(tta_filter_process_c_44_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_56_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %57 = add nsw i32 %56, %54*/
begin
tta_filter_process_c_44_57 = (tta_filter_process_c_44_56 + tta_filter_process_c_44_54);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %57 = add nsw i32 %56, %54*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_44))
begin
tta_filter_process_c_44_57_reg <= tta_filter_process_c_44_57;
if (reset == 1'b0 && ^(tta_filter_process_c_44_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_57_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %58 = getelementptr inbounds i32* %dx, i32 3*/
begin
tta_filter_process_c_44_58 = (arg_dx + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %58 = getelementptr inbounds i32* %dx, i32 3*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_36))
begin
tta_filter_process_c_44_58_reg <= tta_filter_process_c_44_58;
if (reset == 1'b0 && ^(tta_filter_process_c_44_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_58_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
begin
tta_filter_process_c_44_59 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_47))
begin
tta_filter_process_c_44_59_reg <= tta_filter_process_c_44_59;
if (reset == 1'b0 && ^(tta_filter_process_c_44_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_59_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %60 = getelementptr inbounds i32* %qm, i32 3*/
begin
tta_filter_process_c_44_60 = (arg_qm + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %60 = getelementptr inbounds i32* %qm, i32 3*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_36))
begin
tta_filter_process_c_44_60_reg <= tta_filter_process_c_44_60;
if (reset == 1'b0 && ^(tta_filter_process_c_44_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_60_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
begin
tta_filter_process_c_44_61 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_47))
begin
tta_filter_process_c_44_61_reg <= tta_filter_process_c_44_61;
if (reset == 1'b0 && ^(tta_filter_process_c_44_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_61_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %62 = add nsw i32 %61, %59*/
begin
tta_filter_process_c_44_62 = (tta_filter_process_c_44_61 + tta_filter_process_c_44_59);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %62 = add nsw i32 %61, %59*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_47))
begin
tta_filter_process_c_44_62_reg <= tta_filter_process_c_44_62;
if (reset == 1'b0 && ^(tta_filter_process_c_44_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_62_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %63 = getelementptr inbounds i32* %dx, i32 4*/
begin
tta_filter_process_c_44_63 = (arg_dx + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %63 = getelementptr inbounds i32* %dx, i32 4*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_36))
begin
tta_filter_process_c_44_63_reg <= tta_filter_process_c_44_63;
if (reset == 1'b0 && ^(tta_filter_process_c_44_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_63_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %64 = load i32* %63, align 4, !tbaa !0*/
begin
tta_filter_process_c_44_64 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %64 = load i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_50))
begin
tta_filter_process_c_44_64_reg <= tta_filter_process_c_44_64;
if (reset == 1'b0 && ^(tta_filter_process_c_44_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_64_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %65 = getelementptr inbounds i32* %qm, i32 4*/
begin
tta_filter_process_c_44_65 = (arg_qm + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %65 = getelementptr inbounds i32* %qm, i32 4*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_36))
begin
tta_filter_process_c_44_65_reg <= tta_filter_process_c_44_65;
if (reset == 1'b0 && ^(tta_filter_process_c_44_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_65_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %66 = load i32* %65, align 4, !tbaa !0*/
begin
tta_filter_process_c_44_66 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %66 = load i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_50))
begin
tta_filter_process_c_44_66_reg <= tta_filter_process_c_44_66;
if (reset == 1'b0 && ^(tta_filter_process_c_44_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_66_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %67 = add nsw i32 %66, %64*/
begin
tta_filter_process_c_44_67 = (tta_filter_process_c_44_66 + tta_filter_process_c_44_64);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %67 = add nsw i32 %66, %64*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_50))
begin
tta_filter_process_c_44_67_reg <= tta_filter_process_c_44_67;
if (reset == 1'b0 && ^(tta_filter_process_c_44_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_67_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %68 = getelementptr inbounds i32* %dx, i32 5*/
begin
tta_filter_process_c_44_68 = (arg_dx + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %68 = getelementptr inbounds i32* %dx, i32 5*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_36))
begin
tta_filter_process_c_44_68_reg <= tta_filter_process_c_44_68;
if (reset == 1'b0 && ^(tta_filter_process_c_44_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_68_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
begin
tta_filter_process_c_44_69 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_53))
begin
tta_filter_process_c_44_69_reg <= tta_filter_process_c_44_69;
if (reset == 1'b0 && ^(tta_filter_process_c_44_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_69_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %70 = getelementptr inbounds i32* %qm, i32 5*/
begin
tta_filter_process_c_44_70 = (arg_qm + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %70 = getelementptr inbounds i32* %qm, i32 5*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_36))
begin
tta_filter_process_c_44_70_reg <= tta_filter_process_c_44_70;
if (reset == 1'b0 && ^(tta_filter_process_c_44_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_70_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
begin
tta_filter_process_c_44_71 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_53))
begin
tta_filter_process_c_44_71_reg <= tta_filter_process_c_44_71;
if (reset == 1'b0 && ^(tta_filter_process_c_44_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_71_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %72 = add nsw i32 %71, %69*/
begin
tta_filter_process_c_44_72 = (tta_filter_process_c_44_71 + tta_filter_process_c_44_69);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %72 = add nsw i32 %71, %69*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_53))
begin
tta_filter_process_c_44_72_reg <= tta_filter_process_c_44_72;
if (reset == 1'b0 && ^(tta_filter_process_c_44_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_72_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %73 = getelementptr inbounds i32* %dx, i32 6*/
begin
tta_filter_process_c_44_73 = (arg_dx + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %73 = getelementptr inbounds i32* %dx, i32 6*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_36))
begin
tta_filter_process_c_44_73_reg <= tta_filter_process_c_44_73;
if (reset == 1'b0 && ^(tta_filter_process_c_44_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_73_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %74 = load i32* %73, align 4, !tbaa !0*/
begin
tta_filter_process_c_44_74 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %74 = load i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_56))
begin
tta_filter_process_c_44_74_reg <= tta_filter_process_c_44_74;
if (reset == 1'b0 && ^(tta_filter_process_c_44_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_74_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %75 = getelementptr inbounds i32* %qm, i32 6*/
begin
tta_filter_process_c_44_75 = (arg_qm + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %75 = getelementptr inbounds i32* %qm, i32 6*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_36))
begin
tta_filter_process_c_44_75_reg <= tta_filter_process_c_44_75;
if (reset == 1'b0 && ^(tta_filter_process_c_44_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_75_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %76 = load i32* %75, align 4, !tbaa !0*/
begin
tta_filter_process_c_44_76 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %76 = load i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_56))
begin
tta_filter_process_c_44_76_reg <= tta_filter_process_c_44_76;
if (reset == 1'b0 && ^(tta_filter_process_c_44_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_76_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %77 = add nsw i32 %76, %74*/
begin
tta_filter_process_c_44_77 = (tta_filter_process_c_44_76 + tta_filter_process_c_44_74);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %77 = add nsw i32 %76, %74*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_56))
begin
tta_filter_process_c_44_77_reg <= tta_filter_process_c_44_77;
if (reset == 1'b0 && ^(tta_filter_process_c_44_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_77_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %78 = getelementptr inbounds i32* %dx, i32 7*/
begin
tta_filter_process_c_44_78 = (arg_dx + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %78 = getelementptr inbounds i32* %dx, i32 7*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_36))
begin
tta_filter_process_c_44_78_reg <= tta_filter_process_c_44_78;
if (reset == 1'b0 && ^(tta_filter_process_c_44_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_78_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %79 = load i32* %78, align 4, !tbaa !0*/
begin
tta_filter_process_c_44_79 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %79 = load i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_59))
begin
tta_filter_process_c_44_79_reg <= tta_filter_process_c_44_79;
if (reset == 1'b0 && ^(tta_filter_process_c_44_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_79_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %80 = getelementptr inbounds i32* %qm, i32 7*/
begin
tta_filter_process_c_44_80 = (arg_qm + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %80 = getelementptr inbounds i32* %qm, i32 7*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_36))
begin
tta_filter_process_c_44_80_reg <= tta_filter_process_c_44_80;
if (reset == 1'b0 && ^(tta_filter_process_c_44_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_80_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %81 = load i32* %80, align 4, !tbaa !0*/
begin
tta_filter_process_c_44_81 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %81 = load i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_59))
begin
tta_filter_process_c_44_81_reg <= tta_filter_process_c_44_81;
if (reset == 1'b0 && ^(tta_filter_process_c_44_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_81_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %44*/
/*   %82 = add nsw i32 %81, %79*/
begin
tta_filter_process_c_44_82 = (tta_filter_process_c_44_81 + tta_filter_process_c_44_79);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %44*/
/*   %82 = add nsw i32 %81, %79*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_59))
begin
tta_filter_process_c_44_82_reg <= tta_filter_process_c_44_82;
if (reset == 1'b0 && ^(tta_filter_process_c_44_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_44_82_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %.pre-phi26 = phi i32* [ %.pre25, %._crit_edge ], [ %78, %44 ], [ %37, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi26 = tta_filter_process_c_3_37_reg;
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi26 = phi i32* [ %.pre25, %._crit_edge ], [ %78, %44 ], [ %37, %3 ]*/
else if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi26 = tta_filter_process_c___crit_edge__pre25_reg;
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi26 = phi i32* [ %.pre25, %._crit_edge ], [ %78, %44 ], [ %37, %3 ]*/
else /* if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0))) */
begin
tta_filter_process_c_83__pre_phi26 = tta_filter_process_c_44_78_reg;
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %.pre-phi26 = phi i32* [ %.pre25, %._crit_edge ], [ %78, %44 ], [ %37, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi26_reg <= tta_filter_process_c_83__pre_phi26;
if (reset == 1'b0 && ^(tta_filter_process_c_83__pre_phi26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83__pre_phi26_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi26 = phi i32* [ %.pre25, %._crit_edge ], [ %78, %44 ], [ %37, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi26_reg <= tta_filter_process_c_83__pre_phi26;
if (reset == 1'b0 && ^(tta_filter_process_c_83__pre_phi26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83__pre_phi26_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi26 = phi i32* [ %.pre25, %._crit_edge ], [ %78, %44 ], [ %37, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi26_reg <= tta_filter_process_c_83__pre_phi26;
if (reset == 1'b0 && ^(tta_filter_process_c_83__pre_phi26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83__pre_phi26_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %.pre-phi24 = phi i32* [ %.pre23, %._crit_edge ], [ %73, %44 ], [ %32, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi24 = tta_filter_process_c_3_32_reg;
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi24 = phi i32* [ %.pre23, %._crit_edge ], [ %73, %44 ], [ %32, %3 ]*/
else if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi24 = tta_filter_process_c___crit_edge__pre23_reg;
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi24 = phi i32* [ %.pre23, %._crit_edge ], [ %73, %44 ], [ %32, %3 ]*/
else /* if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0))) */
begin
tta_filter_process_c_83__pre_phi24 = tta_filter_process_c_44_73_reg;
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %.pre-phi24 = phi i32* [ %.pre23, %._crit_edge ], [ %73, %44 ], [ %32, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi24_reg <= tta_filter_process_c_83__pre_phi24;
if (reset == 1'b0 && ^(tta_filter_process_c_83__pre_phi24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83__pre_phi24_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi24 = phi i32* [ %.pre23, %._crit_edge ], [ %73, %44 ], [ %32, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi24_reg <= tta_filter_process_c_83__pre_phi24;
if (reset == 1'b0 && ^(tta_filter_process_c_83__pre_phi24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83__pre_phi24_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi24 = phi i32* [ %.pre23, %._crit_edge ], [ %73, %44 ], [ %32, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi24_reg <= tta_filter_process_c_83__pre_phi24;
if (reset == 1'b0 && ^(tta_filter_process_c_83__pre_phi24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83__pre_phi24_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %.pre-phi22 = phi i32* [ %.pre21, %._crit_edge ], [ %68, %44 ], [ %27, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi22 = tta_filter_process_c_3_27_reg;
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi22 = phi i32* [ %.pre21, %._crit_edge ], [ %68, %44 ], [ %27, %3 ]*/
else if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi22 = tta_filter_process_c___crit_edge__pre21_reg;
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi22 = phi i32* [ %.pre21, %._crit_edge ], [ %68, %44 ], [ %27, %3 ]*/
else /* if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0))) */
begin
tta_filter_process_c_83__pre_phi22 = tta_filter_process_c_44_68_reg;
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %.pre-phi22 = phi i32* [ %.pre21, %._crit_edge ], [ %68, %44 ], [ %27, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi22_reg <= tta_filter_process_c_83__pre_phi22;
if (reset == 1'b0 && ^(tta_filter_process_c_83__pre_phi22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83__pre_phi22_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi22 = phi i32* [ %.pre21, %._crit_edge ], [ %68, %44 ], [ %27, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi22_reg <= tta_filter_process_c_83__pre_phi22;
if (reset == 1'b0 && ^(tta_filter_process_c_83__pre_phi22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83__pre_phi22_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi22 = phi i32* [ %.pre21, %._crit_edge ], [ %68, %44 ], [ %27, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi22_reg <= tta_filter_process_c_83__pre_phi22;
if (reset == 1'b0 && ^(tta_filter_process_c_83__pre_phi22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83__pre_phi22_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %.pre-phi20 = phi i32* [ %.pre19, %._crit_edge ], [ %63, %44 ], [ %22, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi20 = tta_filter_process_c_3_22_reg;
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi20 = phi i32* [ %.pre19, %._crit_edge ], [ %63, %44 ], [ %22, %3 ]*/
else if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi20 = tta_filter_process_c___crit_edge__pre19_reg;
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi20 = phi i32* [ %.pre19, %._crit_edge ], [ %63, %44 ], [ %22, %3 ]*/
else /* if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0))) */
begin
tta_filter_process_c_83__pre_phi20 = tta_filter_process_c_44_63_reg;
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %.pre-phi20 = phi i32* [ %.pre19, %._crit_edge ], [ %63, %44 ], [ %22, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi20_reg <= tta_filter_process_c_83__pre_phi20;
if (reset == 1'b0 && ^(tta_filter_process_c_83__pre_phi20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83__pre_phi20_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi20 = phi i32* [ %.pre19, %._crit_edge ], [ %63, %44 ], [ %22, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi20_reg <= tta_filter_process_c_83__pre_phi20;
if (reset == 1'b0 && ^(tta_filter_process_c_83__pre_phi20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83__pre_phi20_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi20 = phi i32* [ %.pre19, %._crit_edge ], [ %63, %44 ], [ %22, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi20_reg <= tta_filter_process_c_83__pre_phi20;
if (reset == 1'b0 && ^(tta_filter_process_c_83__pre_phi20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83__pre_phi20_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %.pre-phi18 = phi i32* [ %.pre17, %._crit_edge ], [ %58, %44 ], [ %17, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi18 = tta_filter_process_c_3_17_reg;
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi18 = phi i32* [ %.pre17, %._crit_edge ], [ %58, %44 ], [ %17, %3 ]*/
else if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi18 = tta_filter_process_c___crit_edge__pre17_reg;
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi18 = phi i32* [ %.pre17, %._crit_edge ], [ %58, %44 ], [ %17, %3 ]*/
else /* if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0))) */
begin
tta_filter_process_c_83__pre_phi18 = tta_filter_process_c_44_58_reg;
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %.pre-phi18 = phi i32* [ %.pre17, %._crit_edge ], [ %58, %44 ], [ %17, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi18_reg <= tta_filter_process_c_83__pre_phi18;
if (reset == 1'b0 && ^(tta_filter_process_c_83__pre_phi18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83__pre_phi18_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi18 = phi i32* [ %.pre17, %._crit_edge ], [ %58, %44 ], [ %17, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi18_reg <= tta_filter_process_c_83__pre_phi18;
if (reset == 1'b0 && ^(tta_filter_process_c_83__pre_phi18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83__pre_phi18_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi18 = phi i32* [ %.pre17, %._crit_edge ], [ %58, %44 ], [ %17, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi18_reg <= tta_filter_process_c_83__pre_phi18;
if (reset == 1'b0 && ^(tta_filter_process_c_83__pre_phi18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83__pre_phi18_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %.pre-phi16 = phi i32* [ %.pre15, %._crit_edge ], [ %53, %44 ], [ %12, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi16 = tta_filter_process_c_3_12_reg;
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi16 = phi i32* [ %.pre15, %._crit_edge ], [ %53, %44 ], [ %12, %3 ]*/
else if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi16 = tta_filter_process_c___crit_edge__pre15_reg;
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi16 = phi i32* [ %.pre15, %._crit_edge ], [ %53, %44 ], [ %12, %3 ]*/
else /* if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0))) */
begin
tta_filter_process_c_83__pre_phi16 = tta_filter_process_c_44_53_reg;
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %.pre-phi16 = phi i32* [ %.pre15, %._crit_edge ], [ %53, %44 ], [ %12, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi16_reg <= tta_filter_process_c_83__pre_phi16;
if (reset == 1'b0 && ^(tta_filter_process_c_83__pre_phi16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83__pre_phi16_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi16 = phi i32* [ %.pre15, %._crit_edge ], [ %53, %44 ], [ %12, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi16_reg <= tta_filter_process_c_83__pre_phi16;
if (reset == 1'b0 && ^(tta_filter_process_c_83__pre_phi16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83__pre_phi16_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi16 = phi i32* [ %.pre15, %._crit_edge ], [ %53, %44 ], [ %12, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi16_reg <= tta_filter_process_c_83__pre_phi16;
if (reset == 1'b0 && ^(tta_filter_process_c_83__pre_phi16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83__pre_phi16_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %.pre-phi = phi i32* [ %.pre14, %._crit_edge ], [ %48, %44 ], [ %7, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi = tta_filter_process_c_3_7_reg;
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi = phi i32* [ %.pre14, %._crit_edge ], [ %48, %44 ], [ %7, %3 ]*/
else if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi = tta_filter_process_c___crit_edge__pre14_reg;
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi = phi i32* [ %.pre14, %._crit_edge ], [ %48, %44 ], [ %7, %3 ]*/
else /* if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0))) */
begin
tta_filter_process_c_83__pre_phi = tta_filter_process_c_44_48_reg;
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %.pre-phi = phi i32* [ %.pre14, %._crit_edge ], [ %48, %44 ], [ %7, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi_reg <= tta_filter_process_c_83__pre_phi;
if (reset == 1'b0 && ^(tta_filter_process_c_83__pre_phi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83__pre_phi_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi = phi i32* [ %.pre14, %._crit_edge ], [ %48, %44 ], [ %7, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi_reg <= tta_filter_process_c_83__pre_phi;
if (reset == 1'b0 && ^(tta_filter_process_c_83__pre_phi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83__pre_phi_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %.pre-phi = phi i32* [ %.pre14, %._crit_edge ], [ %48, %44 ], [ %7, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83__pre_phi_reg <= tta_filter_process_c_83__pre_phi;
if (reset == 1'b0 && ^(tta_filter_process_c_83__pre_phi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83__pre_phi_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %84 = phi i32 [ %.pre13, %._crit_edge ], [ %82, %44 ], [ %41, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_84 = tta_filter_process_c_3_41_reg;
end
/* tta_filter_process_c: %83*/
/*   %84 = phi i32 [ %.pre13, %._crit_edge ], [ %82, %44 ], [ %41, %3 ]*/
else if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_84 = tta_filter_process_c___crit_edge__pre13;
end
/* tta_filter_process_c: %83*/
/*   %84 = phi i32 [ %.pre13, %._crit_edge ], [ %82, %44 ], [ %41, %3 ]*/
else /* if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0))) */
begin
tta_filter_process_c_83_84 = tta_filter_process_c_44_82_reg;
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %84 = phi i32 [ %.pre13, %._crit_edge ], [ %82, %44 ], [ %41, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_84_reg <= tta_filter_process_c_83_84;
if (reset == 1'b0 && ^(tta_filter_process_c_83_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_84_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %84 = phi i32 [ %.pre13, %._crit_edge ], [ %82, %44 ], [ %41, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_84_reg <= tta_filter_process_c_83_84;
if (reset == 1'b0 && ^(tta_filter_process_c_83_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_84_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %84 = phi i32 [ %.pre13, %._crit_edge ], [ %82, %44 ], [ %41, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_84_reg <= tta_filter_process_c_83_84;
if (reset == 1'b0 && ^(tta_filter_process_c_83_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_84_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %85 = phi i32 [ %.pre11, %._crit_edge ], [ %77, %44 ], [ %36, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_85 = tta_filter_process_c_3_36_reg;
end
/* tta_filter_process_c: %83*/
/*   %85 = phi i32 [ %.pre11, %._crit_edge ], [ %77, %44 ], [ %36, %3 ]*/
else if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_85 = tta_filter_process_c___crit_edge__pre11;
end
/* tta_filter_process_c: %83*/
/*   %85 = phi i32 [ %.pre11, %._crit_edge ], [ %77, %44 ], [ %36, %3 ]*/
else /* if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0))) */
begin
tta_filter_process_c_83_85 = tta_filter_process_c_44_77_reg;
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %85 = phi i32 [ %.pre11, %._crit_edge ], [ %77, %44 ], [ %36, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_85_reg <= tta_filter_process_c_83_85;
if (reset == 1'b0 && ^(tta_filter_process_c_83_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_85_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %85 = phi i32 [ %.pre11, %._crit_edge ], [ %77, %44 ], [ %36, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_85_reg <= tta_filter_process_c_83_85;
if (reset == 1'b0 && ^(tta_filter_process_c_83_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_85_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %85 = phi i32 [ %.pre11, %._crit_edge ], [ %77, %44 ], [ %36, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_85_reg <= tta_filter_process_c_83_85;
if (reset == 1'b0 && ^(tta_filter_process_c_83_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_85_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %86 = phi i32 [ %.pre9, %._crit_edge ], [ %72, %44 ], [ %31, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_86 = tta_filter_process_c_3_31_reg;
end
/* tta_filter_process_c: %83*/
/*   %86 = phi i32 [ %.pre9, %._crit_edge ], [ %72, %44 ], [ %31, %3 ]*/
else if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_86 = tta_filter_process_c___crit_edge__pre9_reg;
end
/* tta_filter_process_c: %83*/
/*   %86 = phi i32 [ %.pre9, %._crit_edge ], [ %72, %44 ], [ %31, %3 ]*/
else /* if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0))) */
begin
tta_filter_process_c_83_86 = tta_filter_process_c_44_72_reg;
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %86 = phi i32 [ %.pre9, %._crit_edge ], [ %72, %44 ], [ %31, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_86_reg <= tta_filter_process_c_83_86;
if (reset == 1'b0 && ^(tta_filter_process_c_83_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_86_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %86 = phi i32 [ %.pre9, %._crit_edge ], [ %72, %44 ], [ %31, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_86_reg <= tta_filter_process_c_83_86;
if (reset == 1'b0 && ^(tta_filter_process_c_83_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_86_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %86 = phi i32 [ %.pre9, %._crit_edge ], [ %72, %44 ], [ %31, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_86_reg <= tta_filter_process_c_83_86;
if (reset == 1'b0 && ^(tta_filter_process_c_83_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_86_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %87 = phi i32 [ %.pre7, %._crit_edge ], [ %67, %44 ], [ %26, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_87 = tta_filter_process_c_3_26_reg;
end
/* tta_filter_process_c: %83*/
/*   %87 = phi i32 [ %.pre7, %._crit_edge ], [ %67, %44 ], [ %26, %3 ]*/
else if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_87 = tta_filter_process_c___crit_edge__pre7_reg;
end
/* tta_filter_process_c: %83*/
/*   %87 = phi i32 [ %.pre7, %._crit_edge ], [ %67, %44 ], [ %26, %3 ]*/
else /* if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0))) */
begin
tta_filter_process_c_83_87 = tta_filter_process_c_44_67_reg;
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %87 = phi i32 [ %.pre7, %._crit_edge ], [ %67, %44 ], [ %26, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_87_reg <= tta_filter_process_c_83_87;
if (reset == 1'b0 && ^(tta_filter_process_c_83_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_87_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %87 = phi i32 [ %.pre7, %._crit_edge ], [ %67, %44 ], [ %26, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_87_reg <= tta_filter_process_c_83_87;
if (reset == 1'b0 && ^(tta_filter_process_c_83_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_87_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %87 = phi i32 [ %.pre7, %._crit_edge ], [ %67, %44 ], [ %26, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_87_reg <= tta_filter_process_c_83_87;
if (reset == 1'b0 && ^(tta_filter_process_c_83_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_87_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %88 = phi i32 [ %.pre5, %._crit_edge ], [ %62, %44 ], [ %21, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_88 = tta_filter_process_c_3_21_reg;
end
/* tta_filter_process_c: %83*/
/*   %88 = phi i32 [ %.pre5, %._crit_edge ], [ %62, %44 ], [ %21, %3 ]*/
else if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_88 = tta_filter_process_c___crit_edge__pre5_reg;
end
/* tta_filter_process_c: %83*/
/*   %88 = phi i32 [ %.pre5, %._crit_edge ], [ %62, %44 ], [ %21, %3 ]*/
else /* if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0))) */
begin
tta_filter_process_c_83_88 = tta_filter_process_c_44_62_reg;
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %88 = phi i32 [ %.pre5, %._crit_edge ], [ %62, %44 ], [ %21, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_88_reg <= tta_filter_process_c_83_88;
if (reset == 1'b0 && ^(tta_filter_process_c_83_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_88_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %88 = phi i32 [ %.pre5, %._crit_edge ], [ %62, %44 ], [ %21, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_88_reg <= tta_filter_process_c_83_88;
if (reset == 1'b0 && ^(tta_filter_process_c_83_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_88_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %88 = phi i32 [ %.pre5, %._crit_edge ], [ %62, %44 ], [ %21, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_88_reg <= tta_filter_process_c_83_88;
if (reset == 1'b0 && ^(tta_filter_process_c_83_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_88_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %89 = phi i32 [ %.pre3, %._crit_edge ], [ %57, %44 ], [ %16, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_89 = tta_filter_process_c_3_16_reg;
end
/* tta_filter_process_c: %83*/
/*   %89 = phi i32 [ %.pre3, %._crit_edge ], [ %57, %44 ], [ %16, %3 ]*/
else if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_89 = tta_filter_process_c___crit_edge__pre3_reg;
end
/* tta_filter_process_c: %83*/
/*   %89 = phi i32 [ %.pre3, %._crit_edge ], [ %57, %44 ], [ %16, %3 ]*/
else /* if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0))) */
begin
tta_filter_process_c_83_89 = tta_filter_process_c_44_57_reg;
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %89 = phi i32 [ %.pre3, %._crit_edge ], [ %57, %44 ], [ %16, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_89_reg <= tta_filter_process_c_83_89;
if (reset == 1'b0 && ^(tta_filter_process_c_83_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_89_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %89 = phi i32 [ %.pre3, %._crit_edge ], [ %57, %44 ], [ %16, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_89_reg <= tta_filter_process_c_83_89;
if (reset == 1'b0 && ^(tta_filter_process_c_83_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_89_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %89 = phi i32 [ %.pre3, %._crit_edge ], [ %57, %44 ], [ %16, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_89_reg <= tta_filter_process_c_83_89;
if (reset == 1'b0 && ^(tta_filter_process_c_83_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_89_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %90 = phi i32 [ %.pre1, %._crit_edge ], [ %52, %44 ], [ %11, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_90 = tta_filter_process_c_3_11_reg;
end
/* tta_filter_process_c: %83*/
/*   %90 = phi i32 [ %.pre1, %._crit_edge ], [ %52, %44 ], [ %11, %3 ]*/
else if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_90 = tta_filter_process_c___crit_edge__pre1_reg;
end
/* tta_filter_process_c: %83*/
/*   %90 = phi i32 [ %.pre1, %._crit_edge ], [ %52, %44 ], [ %11, %3 ]*/
else /* if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0))) */
begin
tta_filter_process_c_83_90 = tta_filter_process_c_44_52_reg;
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %90 = phi i32 [ %.pre1, %._crit_edge ], [ %52, %44 ], [ %11, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_90_reg <= tta_filter_process_c_83_90;
if (reset == 1'b0 && ^(tta_filter_process_c_83_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_90_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %90 = phi i32 [ %.pre1, %._crit_edge ], [ %52, %44 ], [ %11, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_90_reg <= tta_filter_process_c_83_90;
if (reset == 1'b0 && ^(tta_filter_process_c_83_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_90_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %90 = phi i32 [ %.pre1, %._crit_edge ], [ %52, %44 ], [ %11, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_90_reg <= tta_filter_process_c_83_90;
if (reset == 1'b0 && ^(tta_filter_process_c_83_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_90_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %91 = phi i32 [ %.pre, %._crit_edge ], [ %47, %44 ], [ %6, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_91 = tta_filter_process_c_3_6_reg;
end
/* tta_filter_process_c: %83*/
/*   %91 = phi i32 [ %.pre, %._crit_edge ], [ %47, %44 ], [ %6, %3 ]*/
else if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_91 = tta_filter_process_c___crit_edge__pre_reg;
end
/* tta_filter_process_c: %83*/
/*   %91 = phi i32 [ %.pre, %._crit_edge ], [ %47, %44 ], [ %6, %3 ]*/
else /* if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0))) */
begin
tta_filter_process_c_83_91 = tta_filter_process_c_44_47_reg;
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %91 = phi i32 [ %.pre, %._crit_edge ], [ %47, %44 ], [ %6, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_3_28) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_91_reg <= tta_filter_process_c_83_91;
if (reset == 1'b0 && ^(tta_filter_process_c_83_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_91_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %91 = phi i32 [ %.pre, %._crit_edge ], [ %47, %44 ], [ %6, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_91_reg <= tta_filter_process_c_83_91;
if (reset == 1'b0 && ^(tta_filter_process_c_83_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_91_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %91 = phi i32 [ %.pre, %._crit_edge ], [ %47, %44 ], [ %6, %3 ]*/
if (((cur_state == LEGUP_F_tta_filter_process_c_BB_44_60) & (memory_controller_waitrequest == 1'd0)))
begin
tta_filter_process_c_83_91_reg <= tta_filter_process_c_83_91;
if (reset == 1'b0 && ^(tta_filter_process_c_83_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_91_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %92 = load i32* %dl, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_92 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %92 = load i32* %dl, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_63))
begin
tta_filter_process_c_83_92_reg <= tta_filter_process_c_83_92;
if (reset == 1'b0 && ^(tta_filter_process_c_83_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_92_reg"); $finish; end
end
end
always @(*) begin
tta_filter_process_c_83_93 = tta_filter_process_c_83_93_stage0_reg;
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %93 = mul nsw i32 %91, %92*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_64))
begin
tta_filter_process_c_83_93_reg <= tta_filter_process_c_83_93;
if (reset == 1'b0 && ^(tta_filter_process_c_83_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_93_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %93 = mul nsw i32 %91, %92*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_64))
begin
tta_filter_process_c_83_93_reg <= tta_filter_process_c_83_93;
if (reset == 1'b0 && ^(tta_filter_process_c_83_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_93_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %94 = getelementptr inbounds i32* %dl, i32 1*/
begin
tta_filter_process_c_83_94 = (arg_dl + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %94 = getelementptr inbounds i32* %dl, i32 1*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_61))
begin
tta_filter_process_c_83_94_reg <= tta_filter_process_c_83_94;
if (reset == 1'b0 && ^(tta_filter_process_c_83_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_94_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %95 = load i32* %94, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_95 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %95 = load i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_63))
begin
tta_filter_process_c_83_95_reg <= tta_filter_process_c_83_95;
if (reset == 1'b0 && ^(tta_filter_process_c_83_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_95_reg"); $finish; end
end
end
always @(*) begin
tta_filter_process_c_83_96 = tta_filter_process_c_83_96_stage0_reg;
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %96 = mul nsw i32 %90, %95*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_64))
begin
tta_filter_process_c_83_96_reg <= tta_filter_process_c_83_96;
if (reset == 1'b0 && ^(tta_filter_process_c_83_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_96_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %96 = mul nsw i32 %90, %95*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_64))
begin
tta_filter_process_c_83_96_reg <= tta_filter_process_c_83_96;
if (reset == 1'b0 && ^(tta_filter_process_c_83_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_96_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %97 = getelementptr inbounds i32* %dl, i32 2*/
begin
tta_filter_process_c_83_97 = (arg_dl + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %97 = getelementptr inbounds i32* %dl, i32 2*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_61))
begin
tta_filter_process_c_83_97_reg <= tta_filter_process_c_83_97;
if (reset == 1'b0 && ^(tta_filter_process_c_83_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_97_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %98 = load i32* %97, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_98 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %98 = load i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_64))
begin
tta_filter_process_c_83_98_reg <= tta_filter_process_c_83_98;
if (reset == 1'b0 && ^(tta_filter_process_c_83_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_98_reg"); $finish; end
end
end
always @(*) begin
tta_filter_process_c_83_99 = tta_filter_process_c_83_99_stage0_reg;
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %99 = mul nsw i32 %89, %98*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_65))
begin
tta_filter_process_c_83_99_reg <= tta_filter_process_c_83_99;
if (reset == 1'b0 && ^(tta_filter_process_c_83_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_99_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %99 = mul nsw i32 %89, %98*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_65))
begin
tta_filter_process_c_83_99_reg <= tta_filter_process_c_83_99;
if (reset == 1'b0 && ^(tta_filter_process_c_83_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_99_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %100 = getelementptr inbounds i32* %dl, i32 3*/
begin
tta_filter_process_c_83_100 = (arg_dl + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %100 = getelementptr inbounds i32* %dl, i32 3*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_61))
begin
tta_filter_process_c_83_100_reg <= tta_filter_process_c_83_100;
if (reset == 1'b0 && ^(tta_filter_process_c_83_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_100_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_101 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_64))
begin
tta_filter_process_c_83_101_reg <= tta_filter_process_c_83_101;
if (reset == 1'b0 && ^(tta_filter_process_c_83_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_101_reg"); $finish; end
end
end
always @(*) begin
tta_filter_process_c_83_102 = tta_filter_process_c_83_102_stage0_reg;
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %102 = mul nsw i32 %88, %101*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_65))
begin
tta_filter_process_c_83_102_reg <= tta_filter_process_c_83_102;
if (reset == 1'b0 && ^(tta_filter_process_c_83_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_102_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %102 = mul nsw i32 %88, %101*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_65))
begin
tta_filter_process_c_83_102_reg <= tta_filter_process_c_83_102;
if (reset == 1'b0 && ^(tta_filter_process_c_83_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_102_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %103 = getelementptr inbounds i32* %dl, i32 4*/
begin
tta_filter_process_c_83_103 = (arg_dl + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %103 = getelementptr inbounds i32* %dl, i32 4*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_61))
begin
tta_filter_process_c_83_103_reg <= tta_filter_process_c_83_103;
if (reset == 1'b0 && ^(tta_filter_process_c_83_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_103_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %104 = load i32* %103, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_104 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %104 = load i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_65))
begin
tta_filter_process_c_83_104_reg <= tta_filter_process_c_83_104;
if (reset == 1'b0 && ^(tta_filter_process_c_83_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_104_reg"); $finish; end
end
end
always @(*) begin
tta_filter_process_c_83_105 = tta_filter_process_c_83_105_stage0_reg;
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %105 = mul nsw i32 %87, %104*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_66))
begin
tta_filter_process_c_83_105_reg <= tta_filter_process_c_83_105;
if (reset == 1'b0 && ^(tta_filter_process_c_83_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_105_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %105 = mul nsw i32 %87, %104*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_66))
begin
tta_filter_process_c_83_105_reg <= tta_filter_process_c_83_105;
if (reset == 1'b0 && ^(tta_filter_process_c_83_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_105_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %106 = getelementptr inbounds i32* %dl, i32 5*/
begin
tta_filter_process_c_83_106 = (arg_dl + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %106 = getelementptr inbounds i32* %dl, i32 5*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_61))
begin
tta_filter_process_c_83_106_reg <= tta_filter_process_c_83_106;
if (reset == 1'b0 && ^(tta_filter_process_c_83_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_106_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %107 = load i32* %106, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_107 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %107 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_65))
begin
tta_filter_process_c_83_107_reg <= tta_filter_process_c_83_107;
if (reset == 1'b0 && ^(tta_filter_process_c_83_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_107_reg"); $finish; end
end
end
always @(*) begin
tta_filter_process_c_83_108 = tta_filter_process_c_83_108_stage0_reg;
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %108 = mul nsw i32 %86, %107*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_66))
begin
tta_filter_process_c_83_108_reg <= tta_filter_process_c_83_108;
if (reset == 1'b0 && ^(tta_filter_process_c_83_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_108_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %108 = mul nsw i32 %86, %107*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_66))
begin
tta_filter_process_c_83_108_reg <= tta_filter_process_c_83_108;
if (reset == 1'b0 && ^(tta_filter_process_c_83_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_108_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %109 = getelementptr inbounds i32* %dl, i32 6*/
begin
tta_filter_process_c_83_109 = (arg_dl + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %109 = getelementptr inbounds i32* %dl, i32 6*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_61))
begin
tta_filter_process_c_83_109_reg <= tta_filter_process_c_83_109;
if (reset == 1'b0 && ^(tta_filter_process_c_83_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_109_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %110 = load i32* %109, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_110 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %110 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_66))
begin
tta_filter_process_c_83_110_reg <= tta_filter_process_c_83_110;
if (reset == 1'b0 && ^(tta_filter_process_c_83_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_110_reg"); $finish; end
end
end
always @(*) begin
tta_filter_process_c_83_111 = tta_filter_process_c_83_111_stage0_reg;
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %111 = mul nsw i32 %85, %110*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_67))
begin
tta_filter_process_c_83_111_reg <= tta_filter_process_c_83_111;
if (reset == 1'b0 && ^(tta_filter_process_c_83_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_111_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %111 = mul nsw i32 %85, %110*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_67))
begin
tta_filter_process_c_83_111_reg <= tta_filter_process_c_83_111;
if (reset == 1'b0 && ^(tta_filter_process_c_83_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_111_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %112 = getelementptr inbounds i32* %dl, i32 7*/
begin
tta_filter_process_c_83_112 = (arg_dl + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %112 = getelementptr inbounds i32* %dl, i32 7*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_61))
begin
tta_filter_process_c_83_112_reg <= tta_filter_process_c_83_112;
if (reset == 1'b0 && ^(tta_filter_process_c_83_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_112_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %113 = load i32* %112, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_113 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %113 = load i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_66))
begin
tta_filter_process_c_83_113_reg <= tta_filter_process_c_83_113;
if (reset == 1'b0 && ^(tta_filter_process_c_83_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_113_reg"); $finish; end
end
end
always @(*) begin
tta_filter_process_c_83_114 = tta_filter_process_c_83_114_stage0_reg;
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %114 = mul nsw i32 %84, %113*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_67))
begin
tta_filter_process_c_83_114_reg <= tta_filter_process_c_83_114;
if (reset == 1'b0 && ^(tta_filter_process_c_83_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_114_reg"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   %114 = mul nsw i32 %84, %113*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_67))
begin
tta_filter_process_c_83_114_reg <= tta_filter_process_c_83_114;
if (reset == 1'b0 && ^(tta_filter_process_c_83_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_114_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %115 = add i32 %93, %round*/
begin
tta_filter_process_c_83_115 = (tta_filter_process_c_83_93 + arg_round);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %115 = add i32 %93, %round*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_64))
begin
tta_filter_process_c_83_115_reg <= tta_filter_process_c_83_115;
if (reset == 1'b0 && ^(tta_filter_process_c_83_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_115_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %116 = add i32 %115, %96*/
begin
tta_filter_process_c_83_116 = (tta_filter_process_c_83_115 + tta_filter_process_c_83_96);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %116 = add i32 %115, %96*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_64))
begin
tta_filter_process_c_83_116_reg <= tta_filter_process_c_83_116;
if (reset == 1'b0 && ^(tta_filter_process_c_83_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_116_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %117 = add i32 %116, %99*/
begin
tta_filter_process_c_83_117 = (tta_filter_process_c_83_116_reg + tta_filter_process_c_83_99);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %117 = add i32 %116, %99*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_65))
begin
tta_filter_process_c_83_117_reg <= tta_filter_process_c_83_117;
if (reset == 1'b0 && ^(tta_filter_process_c_83_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_117_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %118 = add i32 %117, %102*/
begin
tta_filter_process_c_83_118 = (tta_filter_process_c_83_117 + tta_filter_process_c_83_102);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %118 = add i32 %117, %102*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_65))
begin
tta_filter_process_c_83_118_reg <= tta_filter_process_c_83_118;
if (reset == 1'b0 && ^(tta_filter_process_c_83_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_118_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %119 = add i32 %118, %105*/
begin
tta_filter_process_c_83_119 = (tta_filter_process_c_83_118_reg + tta_filter_process_c_83_105);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %119 = add i32 %118, %105*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_66))
begin
tta_filter_process_c_83_119_reg <= tta_filter_process_c_83_119;
if (reset == 1'b0 && ^(tta_filter_process_c_83_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_119_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %120 = add i32 %119, %108*/
begin
tta_filter_process_c_83_120 = (tta_filter_process_c_83_119 + tta_filter_process_c_83_108);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %120 = add i32 %119, %108*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_66))
begin
tta_filter_process_c_83_120_reg <= tta_filter_process_c_83_120;
if (reset == 1'b0 && ^(tta_filter_process_c_83_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_120_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %121 = add i32 %120, %111*/
begin
tta_filter_process_c_83_121 = (tta_filter_process_c_83_120_reg + tta_filter_process_c_83_111);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %121 = add i32 %120, %111*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_67))
begin
tta_filter_process_c_83_121_reg <= tta_filter_process_c_83_121;
if (reset == 1'b0 && ^(tta_filter_process_c_83_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_121_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %122 = add i32 %121, %114*/
begin
tta_filter_process_c_83_122 = (tta_filter_process_c_83_121 + tta_filter_process_c_83_114);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %122 = add i32 %121, %114*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_67))
begin
tta_filter_process_c_83_122_reg <= tta_filter_process_c_83_122;
if (reset == 1'b0 && ^(tta_filter_process_c_83_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_122_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %123 = load i32* %.pre-phi, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_123 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %123 = load i32* %.pre-phi, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_67))
begin
tta_filter_process_c_83_123_reg <= tta_filter_process_c_83_123;
if (reset == 1'b0 && ^(tta_filter_process_c_83_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_123_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %124 = load i32* %.pre-phi16, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_124 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %124 = load i32* %.pre-phi16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_67))
begin
tta_filter_process_c_83_124_reg <= tta_filter_process_c_83_124;
if (reset == 1'b0 && ^(tta_filter_process_c_83_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_124_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %125 = load i32* %.pre-phi18, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_125 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %125 = load i32* %.pre-phi18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_68))
begin
tta_filter_process_c_83_125_reg <= tta_filter_process_c_83_125;
if (reset == 1'b0 && ^(tta_filter_process_c_83_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_125_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %126 = load i32* %.pre-phi20, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_126 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %126 = load i32* %.pre-phi20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_68))
begin
tta_filter_process_c_83_126_reg <= tta_filter_process_c_83_126;
if (reset == 1'b0 && ^(tta_filter_process_c_83_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_126_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %127 = load i32* %94, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_127 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %127 = load i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_71))
begin
tta_filter_process_c_83_127_reg <= tta_filter_process_c_83_127;
if (reset == 1'b0 && ^(tta_filter_process_c_83_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_127_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %128 = load i32* %97, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_128 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %128 = load i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_71))
begin
tta_filter_process_c_83_128_reg <= tta_filter_process_c_83_128;
if (reset == 1'b0 && ^(tta_filter_process_c_83_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_128_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %129 = load i32* %100, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_129 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %129 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_72))
begin
tta_filter_process_c_83_129_reg <= tta_filter_process_c_83_129;
if (reset == 1'b0 && ^(tta_filter_process_c_83_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_129_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %130 = load i32* %103, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_130 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %130 = load i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_72))
begin
tta_filter_process_c_83_130_reg <= tta_filter_process_c_83_130;
if (reset == 1'b0 && ^(tta_filter_process_c_83_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_130_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %131 = ashr i32 %130, 30*/
begin
tta_filter_process_c_83_131 = ($signed(tta_filter_process_c_83_130) >>> 32'd30);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %131 = ashr i32 %130, 30*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_72))
begin
tta_filter_process_c_83_131_reg <= tta_filter_process_c_83_131;
if (reset == 1'b0 && ^(tta_filter_process_c_83_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_131_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %132 = or i32 %131, 1*/
begin
tta_filter_process_c_83_132 = (tta_filter_process_c_83_131 | 32'd1);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %132 = or i32 %131, 1*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_72))
begin
tta_filter_process_c_83_132_reg <= tta_filter_process_c_83_132;
if (reset == 1'b0 && ^(tta_filter_process_c_83_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_132_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %133 = load i32* %106, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_133 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %133 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_76))
begin
tta_filter_process_c_83_133_reg <= tta_filter_process_c_83_133;
if (reset == 1'b0 && ^(tta_filter_process_c_83_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_133_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %134 = ashr i32 %133, 30*/
begin
tta_filter_process_c_83_134 = ($signed(tta_filter_process_c_83_133) >>> 32'd30);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %134 = ashr i32 %133, 30*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_76))
begin
tta_filter_process_c_83_134_reg <= tta_filter_process_c_83_134;
if (reset == 1'b0 && ^(tta_filter_process_c_83_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_134_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %135 = and i32 %134, -4*/
begin
tta_filter_process_c_83_135 = (tta_filter_process_c_83_134 & -32'd4);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %135 = and i32 %134, -4*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_76))
begin
tta_filter_process_c_83_135_reg <= tta_filter_process_c_83_135;
if (reset == 1'b0 && ^(tta_filter_process_c_83_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_135_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %136 = or i32 %135, 2*/
begin
tta_filter_process_c_83_136 = (tta_filter_process_c_83_135 | 32'd2);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %136 = or i32 %135, 2*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_76))
begin
tta_filter_process_c_83_136_reg <= tta_filter_process_c_83_136;
if (reset == 1'b0 && ^(tta_filter_process_c_83_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_136_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %137 = load i32* %109, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_137 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %137 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_79))
begin
tta_filter_process_c_83_137_reg <= tta_filter_process_c_83_137;
if (reset == 1'b0 && ^(tta_filter_process_c_83_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_137_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %138 = ashr i32 %137, 30*/
begin
tta_filter_process_c_83_138 = ($signed(tta_filter_process_c_83_137) >>> 32'd30);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %138 = ashr i32 %137, 30*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_79))
begin
tta_filter_process_c_83_138_reg <= tta_filter_process_c_83_138;
if (reset == 1'b0 && ^(tta_filter_process_c_83_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_138_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %139 = and i32 %138, -4*/
begin
tta_filter_process_c_83_139 = (tta_filter_process_c_83_138 & -32'd4);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %139 = and i32 %138, -4*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_79))
begin
tta_filter_process_c_83_139_reg <= tta_filter_process_c_83_139;
if (reset == 1'b0 && ^(tta_filter_process_c_83_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_139_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %140 = or i32 %139, 2*/
begin
tta_filter_process_c_83_140 = (tta_filter_process_c_83_139 | 32'd2);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %140 = or i32 %139, 2*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_79))
begin
tta_filter_process_c_83_140_reg <= tta_filter_process_c_83_140;
if (reset == 1'b0 && ^(tta_filter_process_c_83_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_140_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %141 = load i32* %112, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_141 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %141 = load i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_82))
begin
tta_filter_process_c_83_141_reg <= tta_filter_process_c_83_141;
if (reset == 1'b0 && ^(tta_filter_process_c_83_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_141_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %142 = ashr i32 %141, 30*/
begin
tta_filter_process_c_83_142 = ($signed(tta_filter_process_c_83_141) >>> 32'd30);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %142 = ashr i32 %141, 30*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_82))
begin
tta_filter_process_c_83_142_reg <= tta_filter_process_c_83_142;
if (reset == 1'b0 && ^(tta_filter_process_c_83_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_142_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %143 = and i32 %142, -8*/
begin
tta_filter_process_c_83_143 = (tta_filter_process_c_83_142 & -32'd8);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %143 = and i32 %142, -8*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_82))
begin
tta_filter_process_c_83_143_reg <= tta_filter_process_c_83_143;
if (reset == 1'b0 && ^(tta_filter_process_c_83_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_143_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %144 = or i32 %143, 4*/
begin
tta_filter_process_c_83_144 = (tta_filter_process_c_83_143 | 32'd4);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %144 = or i32 %143, 4*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_82))
begin
tta_filter_process_c_83_144_reg <= tta_filter_process_c_83_144;
if (reset == 1'b0 && ^(tta_filter_process_c_83_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_144_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %145 = load i32* %in, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_145 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %145 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_85))
begin
tta_filter_process_c_83_145_reg <= tta_filter_process_c_83_145;
if (reset == 1'b0 && ^(tta_filter_process_c_83_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_145_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %146 = ashr i32 %122, %shift*/
begin
tta_filter_process_c_83_146 = ($signed(tta_filter_process_c_83_122) >>> arg_shift);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %146 = ashr i32 %122, %shift*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_67))
begin
tta_filter_process_c_83_146_reg <= tta_filter_process_c_83_146;
if (reset == 1'b0 && ^(tta_filter_process_c_83_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_146_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %147 = load i32* %in, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_147 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %147 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_88))
begin
tta_filter_process_c_83_147_reg <= tta_filter_process_c_83_147;
if (reset == 1'b0 && ^(tta_filter_process_c_83_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_147_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %148 = add nsw i32 %147, %146*/
begin
tta_filter_process_c_83_148 = (tta_filter_process_c_83_147 + tta_filter_process_c_83_146_reg);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %148 = add nsw i32 %147, %146*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_88))
begin
tta_filter_process_c_83_148_reg <= tta_filter_process_c_83_148;
if (reset == 1'b0 && ^(tta_filter_process_c_83_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_148_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %149 = load i32* %106, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_149 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %149 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_91))
begin
tta_filter_process_c_83_149_reg <= tta_filter_process_c_83_149;
if (reset == 1'b0 && ^(tta_filter_process_c_83_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_149_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %150 = sub nsw i32 0, %149*/
begin
tta_filter_process_c_83_150 = (32'd0 - tta_filter_process_c_83_149);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %150 = sub nsw i32 0, %149*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_91))
begin
tta_filter_process_c_83_150_reg <= tta_filter_process_c_83_150;
if (reset == 1'b0 && ^(tta_filter_process_c_83_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_150_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %151 = load i32* %109, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_151 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %151 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_91))
begin
tta_filter_process_c_83_151_reg <= tta_filter_process_c_83_151;
if (reset == 1'b0 && ^(tta_filter_process_c_83_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_151_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %152 = sub nsw i32 0, %151*/
begin
tta_filter_process_c_83_152 = (32'd0 - tta_filter_process_c_83_151);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %152 = sub nsw i32 0, %151*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_91))
begin
tta_filter_process_c_83_152_reg <= tta_filter_process_c_83_152;
if (reset == 1'b0 && ^(tta_filter_process_c_83_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_152_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %153 = load i32* %in, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_153 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %153 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_94))
begin
tta_filter_process_c_83_153_reg <= tta_filter_process_c_83_153;
if (reset == 1'b0 && ^(tta_filter_process_c_83_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_153_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %154 = load i32* %112, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_154 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %154 = load i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_94))
begin
tta_filter_process_c_83_154_reg <= tta_filter_process_c_83_154;
if (reset == 1'b0 && ^(tta_filter_process_c_83_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_154_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %155 = sub nsw i32 %153, %154*/
begin
tta_filter_process_c_83_155 = (tta_filter_process_c_83_153 - tta_filter_process_c_83_154);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %155 = sub nsw i32 %153, %154*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_94))
begin
tta_filter_process_c_83_155_reg <= tta_filter_process_c_83_155;
if (reset == 1'b0 && ^(tta_filter_process_c_83_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_155_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %156 = load i32* %in, align 4, !tbaa !0*/
begin
tta_filter_process_c_83_156 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %156 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_97))
begin
tta_filter_process_c_83_156_reg <= tta_filter_process_c_83_156;
if (reset == 1'b0 && ^(tta_filter_process_c_83_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_156_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %157 = sub i32 %155, %151*/
begin
tta_filter_process_c_83_157 = (tta_filter_process_c_83_155 - tta_filter_process_c_83_151_reg);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %157 = sub i32 %155, %151*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_94))
begin
tta_filter_process_c_83_157_reg <= tta_filter_process_c_83_157;
if (reset == 1'b0 && ^(tta_filter_process_c_83_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_157_reg"); $finish; end
end
end
always @(*) begin
/* tta_filter_process_c: %83*/
/*   %158 = sub i32 %157, %149*/
begin
tta_filter_process_c_83_158 = (tta_filter_process_c_83_157 - tta_filter_process_c_83_149_reg);
end
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %158 = sub i32 %157, %149*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_94))
begin
tta_filter_process_c_83_158_reg <= tta_filter_process_c_83_158;
if (reset == 1'b0 && ^(tta_filter_process_c_83_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_83_158_reg"); $finish; end
end
end
always @(*) begin
lpm_mult_tta_filter_process_c_83_93_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %93 = mul nsw i32 %91, %92*/
if ((lpm_mult_tta_filter_process_c_83_93_en == 1'd1))
begin
tta_filter_process_c_83_93_stage0_reg <= (tta_filter_process_c_83_91_reg * tta_filter_process_c_83_92);
end
end
always @(*) begin
lpm_mult_tta_filter_process_c_83_96_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %96 = mul nsw i32 %90, %95*/
if ((lpm_mult_tta_filter_process_c_83_96_en == 1'd1))
begin
tta_filter_process_c_83_96_stage0_reg <= (tta_filter_process_c_83_90_reg * tta_filter_process_c_83_95);
end
end
always @(*) begin
lpm_mult_tta_filter_process_c_83_99_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %99 = mul nsw i32 %89, %98*/
if ((lpm_mult_tta_filter_process_c_83_99_en == 1'd1))
begin
tta_filter_process_c_83_99_stage0_reg <= (tta_filter_process_c_83_89_reg * tta_filter_process_c_83_98);
end
end
always @(*) begin
lpm_mult_tta_filter_process_c_83_102_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %102 = mul nsw i32 %88, %101*/
if ((lpm_mult_tta_filter_process_c_83_102_en == 1'd1))
begin
tta_filter_process_c_83_102_stage0_reg <= (tta_filter_process_c_83_88_reg * tta_filter_process_c_83_101);
end
end
always @(*) begin
lpm_mult_tta_filter_process_c_83_105_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %105 = mul nsw i32 %87, %104*/
if ((lpm_mult_tta_filter_process_c_83_105_en == 1'd1))
begin
tta_filter_process_c_83_105_stage0_reg <= (tta_filter_process_c_83_87_reg * tta_filter_process_c_83_104);
end
end
always @(*) begin
lpm_mult_tta_filter_process_c_83_108_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %108 = mul nsw i32 %86, %107*/
if ((lpm_mult_tta_filter_process_c_83_108_en == 1'd1))
begin
tta_filter_process_c_83_108_stage0_reg <= (tta_filter_process_c_83_86_reg * tta_filter_process_c_83_107);
end
end
always @(*) begin
lpm_mult_tta_filter_process_c_83_111_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %111 = mul nsw i32 %85, %110*/
if ((lpm_mult_tta_filter_process_c_83_111_en == 1'd1))
begin
tta_filter_process_c_83_111_stage0_reg <= (tta_filter_process_c_83_85_reg * tta_filter_process_c_83_110);
end
end
always @(*) begin
lpm_mult_tta_filter_process_c_83_114_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* tta_filter_process_c: %83*/
/*   %114 = mul nsw i32 %84, %113*/
if ((lpm_mult_tta_filter_process_c_83_114_en == 1'd1))
begin
tta_filter_process_c_83_114_stage0_reg <= (tta_filter_process_c_83_84_reg * tta_filter_process_c_83_113);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* tta_filter_process_c: %83*/
/*   ret void*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_99))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* tta_filter_process_c: %0*/
/*   %1 = load i32* %error, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   %4 = load i32* %dx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_4))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   store i32 %6, i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_6))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_7))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_10))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   %18 = load i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_13))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_16))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_19))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   %33 = load i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_22))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_25))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre = load i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_30))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre3 = load i32* %.phi.trans.insert2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_31))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre7 = load i32* %.phi.trans.insert6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_32))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre11 = load i32* %.phi.trans.insert10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_33))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   %45 = load i32* %dx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_36))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   store i32 %47, i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_38))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   %49 = load i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_39))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   %54 = load i32* %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_42))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_45))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   %64 = load i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_48))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_51))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   store i32 %72, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_53))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   %74 = load i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_54))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   %79 = load i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_57))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %92 = load i32* %dl, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_61))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %98 = load i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_62))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %104 = load i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_63))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %110 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_64))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %123 = load i32* %.pre-phi, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_65))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %125 = load i32* %.pre-phi18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_66))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %124, i32* %.pre-phi, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_67))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %126, i32* %.pre-phi18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_68))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %128 = load i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_69))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %130 = load i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_70))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %127, i32* %dl, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_71))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %129, i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_72))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %132, i32* %.pre-phi20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_73))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %136, i32* %.pre-phi22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_76))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %137 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_77))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %140, i32* %.pre-phi24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_79))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %144, i32* %.pre-phi26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_82))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %145 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_83))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %145, i32* %error, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_85))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %147 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_86))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %148, i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_88))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %151 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_89))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %150, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_91))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %153 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_92))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %155, i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_94))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %156 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_95))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %156, i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_97))
begin
memory_controller_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %158, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_98))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* tta_filter_process_c: %0*/
/*   %1 = load i32* %error, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_0_1))
begin
memory_controller_address_a = arg_error;
end
/* tta_filter_process_c: %3*/
/*   %4 = load i32* %dx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_4))
begin
memory_controller_address_a = arg_dx;
end
/* tta_filter_process_c: %3*/
/*   store i32 %6, i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_6))
begin
memory_controller_address_a = arg_qm;
end
/* tta_filter_process_c: %3*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_7))
begin
memory_controller_address_a = tta_filter_process_c_3_7_reg;
end
/* tta_filter_process_c: %3*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_10))
begin
memory_controller_address_a = tta_filter_process_c_3_12_reg;
end
/* tta_filter_process_c: %3*/
/*   %18 = load i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_13))
begin
memory_controller_address_a = tta_filter_process_c_3_17_reg;
end
/* tta_filter_process_c: %3*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_16))
begin
memory_controller_address_a = tta_filter_process_c_3_22_reg;
end
/* tta_filter_process_c: %3*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_19))
begin
memory_controller_address_a = tta_filter_process_c_3_27_reg;
end
/* tta_filter_process_c: %3*/
/*   %33 = load i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_22))
begin
memory_controller_address_a = tta_filter_process_c_3_32_reg;
end
/* tta_filter_process_c: %3*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_25))
begin
memory_controller_address_a = tta_filter_process_c_3_37_reg;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre = load i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_30))
begin
memory_controller_address_a = arg_qm;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre3 = load i32* %.phi.trans.insert2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_31))
begin
memory_controller_address_a = tta_filter_process_c___crit_edge__phi_trans_insert2_reg;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre7 = load i32* %.phi.trans.insert6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_32))
begin
memory_controller_address_a = tta_filter_process_c___crit_edge__phi_trans_insert6_reg;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre11 = load i32* %.phi.trans.insert10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_33))
begin
memory_controller_address_a = tta_filter_process_c___crit_edge__phi_trans_insert10_reg;
end
/* tta_filter_process_c: %44*/
/*   %45 = load i32* %dx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_36))
begin
memory_controller_address_a = arg_dx;
end
/* tta_filter_process_c: %44*/
/*   store i32 %47, i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_38))
begin
memory_controller_address_a = arg_qm;
end
/* tta_filter_process_c: %44*/
/*   %49 = load i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_39))
begin
memory_controller_address_a = tta_filter_process_c_44_48_reg;
end
/* tta_filter_process_c: %44*/
/*   %54 = load i32* %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_42))
begin
memory_controller_address_a = tta_filter_process_c_44_53_reg;
end
/* tta_filter_process_c: %44*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_45))
begin
memory_controller_address_a = tta_filter_process_c_44_58_reg;
end
/* tta_filter_process_c: %44*/
/*   %64 = load i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_48))
begin
memory_controller_address_a = tta_filter_process_c_44_63_reg;
end
/* tta_filter_process_c: %44*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_51))
begin
memory_controller_address_a = tta_filter_process_c_44_68_reg;
end
/* tta_filter_process_c: %44*/
/*   store i32 %72, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_53))
begin
memory_controller_address_a = tta_filter_process_c_44_70_reg;
end
/* tta_filter_process_c: %44*/
/*   %74 = load i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_54))
begin
memory_controller_address_a = tta_filter_process_c_44_73_reg;
end
/* tta_filter_process_c: %44*/
/*   %79 = load i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_57))
begin
memory_controller_address_a = tta_filter_process_c_44_78_reg;
end
/* tta_filter_process_c: %83*/
/*   %92 = load i32* %dl, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_61))
begin
memory_controller_address_a = arg_dl;
end
/* tta_filter_process_c: %83*/
/*   %98 = load i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_62))
begin
memory_controller_address_a = tta_filter_process_c_83_97_reg;
end
/* tta_filter_process_c: %83*/
/*   %104 = load i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_63))
begin
memory_controller_address_a = tta_filter_process_c_83_103_reg;
end
/* tta_filter_process_c: %83*/
/*   %110 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_64))
begin
memory_controller_address_a = tta_filter_process_c_83_109_reg;
end
/* tta_filter_process_c: %83*/
/*   %123 = load i32* %.pre-phi, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_65))
begin
memory_controller_address_a = tta_filter_process_c_83__pre_phi_reg;
end
/* tta_filter_process_c: %83*/
/*   %125 = load i32* %.pre-phi18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_66))
begin
memory_controller_address_a = tta_filter_process_c_83__pre_phi18_reg;
end
/* tta_filter_process_c: %83*/
/*   store i32 %124, i32* %.pre-phi, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_67))
begin
memory_controller_address_a = tta_filter_process_c_83__pre_phi_reg;
end
/* tta_filter_process_c: %83*/
/*   store i32 %126, i32* %.pre-phi18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_68))
begin
memory_controller_address_a = tta_filter_process_c_83__pre_phi18_reg;
end
/* tta_filter_process_c: %83*/
/*   %128 = load i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_69))
begin
memory_controller_address_a = tta_filter_process_c_83_97_reg;
end
/* tta_filter_process_c: %83*/
/*   %130 = load i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_70))
begin
memory_controller_address_a = tta_filter_process_c_83_103_reg;
end
/* tta_filter_process_c: %83*/
/*   store i32 %127, i32* %dl, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_71))
begin
memory_controller_address_a = arg_dl;
end
/* tta_filter_process_c: %83*/
/*   store i32 %129, i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_72))
begin
memory_controller_address_a = tta_filter_process_c_83_97_reg;
end
/* tta_filter_process_c: %83*/
/*   store i32 %132, i32* %.pre-phi20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_73))
begin
memory_controller_address_a = tta_filter_process_c_83__pre_phi20_reg;
end
/* tta_filter_process_c: %83*/
/*   store i32 %136, i32* %.pre-phi22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_76))
begin
memory_controller_address_a = tta_filter_process_c_83__pre_phi22_reg;
end
/* tta_filter_process_c: %83*/
/*   %137 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_77))
begin
memory_controller_address_a = tta_filter_process_c_83_109_reg;
end
/* tta_filter_process_c: %83*/
/*   store i32 %140, i32* %.pre-phi24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_79))
begin
memory_controller_address_a = tta_filter_process_c_83__pre_phi24_reg;
end
/* tta_filter_process_c: %83*/
/*   store i32 %144, i32* %.pre-phi26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_82))
begin
memory_controller_address_a = tta_filter_process_c_83__pre_phi26_reg;
end
/* tta_filter_process_c: %83*/
/*   %145 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_83))
begin
memory_controller_address_a = arg_in;
end
/* tta_filter_process_c: %83*/
/*   store i32 %145, i32* %error, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_85))
begin
memory_controller_address_a = arg_error;
end
/* tta_filter_process_c: %83*/
/*   %147 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_86))
begin
memory_controller_address_a = arg_in;
end
/* tta_filter_process_c: %83*/
/*   store i32 %148, i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_88))
begin
memory_controller_address_a = arg_in;
end
/* tta_filter_process_c: %83*/
/*   %151 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_89))
begin
memory_controller_address_a = tta_filter_process_c_83_109_reg;
end
/* tta_filter_process_c: %83*/
/*   store i32 %150, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_91))
begin
memory_controller_address_a = tta_filter_process_c_83_103_reg;
end
/* tta_filter_process_c: %83*/
/*   %153 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_92))
begin
memory_controller_address_a = arg_in;
end
/* tta_filter_process_c: %83*/
/*   store i32 %155, i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_94))
begin
memory_controller_address_a = tta_filter_process_c_83_109_reg;
end
/* tta_filter_process_c: %83*/
/*   %156 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_95))
begin
memory_controller_address_a = arg_in;
end
/* tta_filter_process_c: %83*/
/*   store i32 %156, i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_97))
begin
memory_controller_address_a = tta_filter_process_c_83_112_reg;
end
/* tta_filter_process_c: %83*/
/*   store i32 %158, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_98))
begin
memory_controller_address_a = tta_filter_process_c_83_103_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %0*/
/*   %1 = load i32* %error, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %3*/
/*   %4 = load i32* %dx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %3*/
/*   store i32 %6, i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_6))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_7))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %3*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_10))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %3*/
/*   %18 = load i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_13))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %3*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_16))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %3*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_19))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %3*/
/*   %33 = load i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_22))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %3*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_25))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre = load i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_30))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre3 = load i32* %.phi.trans.insert2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_31))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre7 = load i32* %.phi.trans.insert6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_32))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre11 = load i32* %.phi.trans.insert10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_33))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %44*/
/*   %45 = load i32* %dx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_36))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %44*/
/*   store i32 %47, i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_38))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   %49 = load i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_39))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %44*/
/*   %54 = load i32* %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_42))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %44*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_45))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %44*/
/*   %64 = load i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_48))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %44*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_51))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %44*/
/*   store i32 %72, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_53))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   %74 = load i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_54))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %44*/
/*   %79 = load i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_57))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   %92 = load i32* %dl, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_61))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   %98 = load i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_62))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   %104 = load i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_63))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   %110 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_64))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   %123 = load i32* %.pre-phi, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_65))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   %125 = load i32* %.pre-phi18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_66))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   store i32 %124, i32* %.pre-phi, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_67))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %126, i32* %.pre-phi18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_68))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %128 = load i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_69))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   %130 = load i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_70))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   store i32 %127, i32* %dl, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_71))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %129, i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_72))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %132, i32* %.pre-phi20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_73))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %136, i32* %.pre-phi22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_76))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %137 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_77))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   store i32 %140, i32* %.pre-phi24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_79))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %144, i32* %.pre-phi26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_82))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %145 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_83))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   store i32 %145, i32* %error, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_85))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %147 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_86))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   store i32 %148, i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_88))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %151 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_89))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   store i32 %150, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_91))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %153 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_92))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   store i32 %155, i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_94))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %156 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_95))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   store i32 %156, i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_97))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %158, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_98))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* tta_filter_process_c: %3*/
/*   store i32 %6, i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_6))
begin
memory_controller_in_a = tta_filter_process_c_3_6;
end
/* tta_filter_process_c: %44*/
/*   store i32 %47, i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_38))
begin
memory_controller_in_a = tta_filter_process_c_44_47;
end
/* tta_filter_process_c: %44*/
/*   store i32 %72, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_53))
begin
memory_controller_in_a = tta_filter_process_c_44_72;
end
/* tta_filter_process_c: %83*/
/*   store i32 %124, i32* %.pre-phi, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_67))
begin
memory_controller_in_a = tta_filter_process_c_83_124;
end
/* tta_filter_process_c: %83*/
/*   store i32 %126, i32* %.pre-phi18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_68))
begin
memory_controller_in_a = tta_filter_process_c_83_126;
end
/* tta_filter_process_c: %83*/
/*   store i32 %127, i32* %dl, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_71))
begin
memory_controller_in_a = tta_filter_process_c_83_127;
end
/* tta_filter_process_c: %83*/
/*   store i32 %129, i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_72))
begin
memory_controller_in_a = tta_filter_process_c_83_129;
end
/* tta_filter_process_c: %83*/
/*   store i32 %132, i32* %.pre-phi20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_73))
begin
memory_controller_in_a = tta_filter_process_c_83_132_reg;
end
/* tta_filter_process_c: %83*/
/*   store i32 %136, i32* %.pre-phi22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_76))
begin
memory_controller_in_a = tta_filter_process_c_83_136;
end
/* tta_filter_process_c: %83*/
/*   store i32 %140, i32* %.pre-phi24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_79))
begin
memory_controller_in_a = tta_filter_process_c_83_140;
end
/* tta_filter_process_c: %83*/
/*   store i32 %144, i32* %.pre-phi26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_82))
begin
memory_controller_in_a = tta_filter_process_c_83_144;
end
/* tta_filter_process_c: %83*/
/*   store i32 %145, i32* %error, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_85))
begin
memory_controller_in_a = tta_filter_process_c_83_145;
end
/* tta_filter_process_c: %83*/
/*   store i32 %148, i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_88))
begin
memory_controller_in_a = tta_filter_process_c_83_148;
end
/* tta_filter_process_c: %83*/
/*   store i32 %150, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_91))
begin
memory_controller_in_a = tta_filter_process_c_83_150;
end
/* tta_filter_process_c: %83*/
/*   store i32 %155, i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_94))
begin
memory_controller_in_a = tta_filter_process_c_83_155;
end
/* tta_filter_process_c: %83*/
/*   store i32 %156, i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_97))
begin
memory_controller_in_a = tta_filter_process_c_83_156;
end
/* tta_filter_process_c: %83*/
/*   store i32 %158, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_98))
begin
memory_controller_in_a = tta_filter_process_c_83_158_reg;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* tta_filter_process_c: %0*/
/*   %1 = load i32* %error, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %3*/
/*   %4 = load i32* %dx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_4))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %3*/
/*   store i32 %6, i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_6))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %3*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_7))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %3*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_10))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %3*/
/*   %18 = load i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_13))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %3*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_16))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %3*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_19))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %3*/
/*   %33 = load i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_22))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %3*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_25))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre = load i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_30))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre3 = load i32* %.phi.trans.insert2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_31))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre7 = load i32* %.phi.trans.insert6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_32))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre11 = load i32* %.phi.trans.insert10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_33))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %44*/
/*   %45 = load i32* %dx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_36))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %44*/
/*   store i32 %47, i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_38))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %44*/
/*   %49 = load i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_39))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %44*/
/*   %54 = load i32* %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_42))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %44*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_45))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %44*/
/*   %64 = load i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_48))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %44*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_51))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %44*/
/*   store i32 %72, i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_53))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %44*/
/*   %74 = load i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_54))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %44*/
/*   %79 = load i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_57))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %92 = load i32* %dl, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_61))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %98 = load i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_62))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %104 = load i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_63))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %110 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_64))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %123 = load i32* %.pre-phi, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_65))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %125 = load i32* %.pre-phi18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_66))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   store i32 %124, i32* %.pre-phi, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_67))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   store i32 %126, i32* %.pre-phi18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_68))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %128 = load i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_69))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %130 = load i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_70))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   store i32 %127, i32* %dl, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_71))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   store i32 %129, i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_72))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   store i32 %132, i32* %.pre-phi20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_73))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   store i32 %136, i32* %.pre-phi22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_76))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %137 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_77))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   store i32 %140, i32* %.pre-phi24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_79))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   store i32 %144, i32* %.pre-phi26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_82))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %145 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_83))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   store i32 %145, i32* %error, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_85))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %147 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_86))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   store i32 %148, i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_88))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %151 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_89))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   store i32 %150, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_91))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %153 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_92))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   store i32 %155, i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_94))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %156 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_95))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   store i32 %156, i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_97))
begin
memory_controller_size_a = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   store i32 %158, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_98))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* tta_filter_process_c: %3*/
/*   %5 = load i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_4))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   %10 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_7))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   store i32 %11, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_9))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_10))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   store i32 %16, i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_12))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_13))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   store i32 %21, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_15))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_16))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   store i32 %26, i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_18))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   %30 = load i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_19))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   store i32 %31, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_21))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   %35 = load i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_22))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   store i32 %36, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_24))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   %40 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_25))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   store i32 %41, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_27))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre1 = load i32* %.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_30))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre5 = load i32* %.phi.trans.insert4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_31))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre9 = load i32* %.phi.trans.insert8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_32))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre13 = load i32* %.phi.trans.insert12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_33))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   %46 = load i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_36))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   %51 = load i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_39))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   store i32 %52, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_41))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   %56 = load i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_42))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   store i32 %57, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_44))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_45))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   store i32 %62, i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_47))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   %66 = load i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_48))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   store i32 %67, i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_50))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_51))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   %76 = load i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_54))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   store i32 %77, i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_56))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   %81 = load i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_57))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   store i32 %82, i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_59))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %95 = load i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_61))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_62))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %107 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_63))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %113 = load i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_64))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %124 = load i32* %.pre-phi16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_65))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %126 = load i32* %.pre-phi20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_66))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %123, i32* %dx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_67))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %125, i32* %.pre-phi16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_68))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %127 = load i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_69))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %129 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_70))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %128, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_71))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %130, i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_72))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %133 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_74))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %141 = load i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_80))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %149 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_89))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %152, i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_91))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %154 = load i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_92))
begin
memory_controller_enable_b = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %157, i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_97))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* tta_filter_process_c: %3*/
/*   %5 = load i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_4))
begin
memory_controller_address_b = arg_qm;
end
/* tta_filter_process_c: %3*/
/*   %10 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_7))
begin
memory_controller_address_b = tta_filter_process_c_3_9_reg;
end
/* tta_filter_process_c: %3*/
/*   store i32 %11, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_9))
begin
memory_controller_address_b = tta_filter_process_c_3_9_reg;
end
/* tta_filter_process_c: %3*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_10))
begin
memory_controller_address_b = tta_filter_process_c_3_14_reg;
end
/* tta_filter_process_c: %3*/
/*   store i32 %16, i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_12))
begin
memory_controller_address_b = tta_filter_process_c_3_14_reg;
end
/* tta_filter_process_c: %3*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_13))
begin
memory_controller_address_b = tta_filter_process_c_3_19_reg;
end
/* tta_filter_process_c: %3*/
/*   store i32 %21, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_15))
begin
memory_controller_address_b = tta_filter_process_c_3_19_reg;
end
/* tta_filter_process_c: %3*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_16))
begin
memory_controller_address_b = tta_filter_process_c_3_24_reg;
end
/* tta_filter_process_c: %3*/
/*   store i32 %26, i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_18))
begin
memory_controller_address_b = tta_filter_process_c_3_24_reg;
end
/* tta_filter_process_c: %3*/
/*   %30 = load i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_19))
begin
memory_controller_address_b = tta_filter_process_c_3_29_reg;
end
/* tta_filter_process_c: %3*/
/*   store i32 %31, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_21))
begin
memory_controller_address_b = tta_filter_process_c_3_29_reg;
end
/* tta_filter_process_c: %3*/
/*   %35 = load i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_22))
begin
memory_controller_address_b = tta_filter_process_c_3_34_reg;
end
/* tta_filter_process_c: %3*/
/*   store i32 %36, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_24))
begin
memory_controller_address_b = tta_filter_process_c_3_34_reg;
end
/* tta_filter_process_c: %3*/
/*   %40 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_25))
begin
memory_controller_address_b = tta_filter_process_c_3_39_reg;
end
/* tta_filter_process_c: %3*/
/*   store i32 %41, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_27))
begin
memory_controller_address_b = tta_filter_process_c_3_39_reg;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre1 = load i32* %.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_30))
begin
memory_controller_address_b = tta_filter_process_c___crit_edge__phi_trans_insert;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre5 = load i32* %.phi.trans.insert4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_31))
begin
memory_controller_address_b = tta_filter_process_c___crit_edge__phi_trans_insert4_reg;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre9 = load i32* %.phi.trans.insert8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_32))
begin
memory_controller_address_b = tta_filter_process_c___crit_edge__phi_trans_insert8_reg;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre13 = load i32* %.phi.trans.insert12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_33))
begin
memory_controller_address_b = tta_filter_process_c___crit_edge__phi_trans_insert12_reg;
end
/* tta_filter_process_c: %44*/
/*   %46 = load i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_36))
begin
memory_controller_address_b = arg_qm;
end
/* tta_filter_process_c: %44*/
/*   %51 = load i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_39))
begin
memory_controller_address_b = tta_filter_process_c_44_50_reg;
end
/* tta_filter_process_c: %44*/
/*   store i32 %52, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_41))
begin
memory_controller_address_b = tta_filter_process_c_44_50_reg;
end
/* tta_filter_process_c: %44*/
/*   %56 = load i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_42))
begin
memory_controller_address_b = tta_filter_process_c_44_55_reg;
end
/* tta_filter_process_c: %44*/
/*   store i32 %57, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_44))
begin
memory_controller_address_b = tta_filter_process_c_44_55_reg;
end
/* tta_filter_process_c: %44*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_45))
begin
memory_controller_address_b = tta_filter_process_c_44_60_reg;
end
/* tta_filter_process_c: %44*/
/*   store i32 %62, i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_47))
begin
memory_controller_address_b = tta_filter_process_c_44_60_reg;
end
/* tta_filter_process_c: %44*/
/*   %66 = load i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_48))
begin
memory_controller_address_b = tta_filter_process_c_44_65_reg;
end
/* tta_filter_process_c: %44*/
/*   store i32 %67, i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_50))
begin
memory_controller_address_b = tta_filter_process_c_44_65_reg;
end
/* tta_filter_process_c: %44*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_51))
begin
memory_controller_address_b = tta_filter_process_c_44_70_reg;
end
/* tta_filter_process_c: %44*/
/*   %76 = load i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_54))
begin
memory_controller_address_b = tta_filter_process_c_44_75_reg;
end
/* tta_filter_process_c: %44*/
/*   store i32 %77, i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_56))
begin
memory_controller_address_b = tta_filter_process_c_44_75_reg;
end
/* tta_filter_process_c: %44*/
/*   %81 = load i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_57))
begin
memory_controller_address_b = tta_filter_process_c_44_80_reg;
end
/* tta_filter_process_c: %44*/
/*   store i32 %82, i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_59))
begin
memory_controller_address_b = tta_filter_process_c_44_80_reg;
end
/* tta_filter_process_c: %83*/
/*   %95 = load i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_61))
begin
memory_controller_address_b = tta_filter_process_c_83_94;
end
/* tta_filter_process_c: %83*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_62))
begin
memory_controller_address_b = tta_filter_process_c_83_100_reg;
end
/* tta_filter_process_c: %83*/
/*   %107 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_63))
begin
memory_controller_address_b = tta_filter_process_c_83_106_reg;
end
/* tta_filter_process_c: %83*/
/*   %113 = load i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_64))
begin
memory_controller_address_b = tta_filter_process_c_83_112_reg;
end
/* tta_filter_process_c: %83*/
/*   %124 = load i32* %.pre-phi16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_65))
begin
memory_controller_address_b = tta_filter_process_c_83__pre_phi16_reg;
end
/* tta_filter_process_c: %83*/
/*   %126 = load i32* %.pre-phi20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_66))
begin
memory_controller_address_b = tta_filter_process_c_83__pre_phi20_reg;
end
/* tta_filter_process_c: %83*/
/*   store i32 %123, i32* %dx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_67))
begin
memory_controller_address_b = arg_dx;
end
/* tta_filter_process_c: %83*/
/*   store i32 %125, i32* %.pre-phi16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_68))
begin
memory_controller_address_b = tta_filter_process_c_83__pre_phi16_reg;
end
/* tta_filter_process_c: %83*/
/*   %127 = load i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_69))
begin
memory_controller_address_b = tta_filter_process_c_83_94_reg;
end
/* tta_filter_process_c: %83*/
/*   %129 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_70))
begin
memory_controller_address_b = tta_filter_process_c_83_100_reg;
end
/* tta_filter_process_c: %83*/
/*   store i32 %128, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_71))
begin
memory_controller_address_b = tta_filter_process_c_83_94_reg;
end
/* tta_filter_process_c: %83*/
/*   store i32 %130, i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_72))
begin
memory_controller_address_b = tta_filter_process_c_83_100_reg;
end
/* tta_filter_process_c: %83*/
/*   %133 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_74))
begin
memory_controller_address_b = tta_filter_process_c_83_106_reg;
end
/* tta_filter_process_c: %83*/
/*   %141 = load i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_80))
begin
memory_controller_address_b = tta_filter_process_c_83_112_reg;
end
/* tta_filter_process_c: %83*/
/*   %149 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_89))
begin
memory_controller_address_b = tta_filter_process_c_83_106_reg;
end
/* tta_filter_process_c: %83*/
/*   store i32 %152, i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_91))
begin
memory_controller_address_b = tta_filter_process_c_83_106_reg;
end
/* tta_filter_process_c: %83*/
/*   %154 = load i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_92))
begin
memory_controller_address_b = tta_filter_process_c_83_112_reg;
end
/* tta_filter_process_c: %83*/
/*   store i32 %157, i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_97))
begin
memory_controller_address_b = tta_filter_process_c_83_106_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %3*/
/*   %5 = load i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_4))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %3*/
/*   %10 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_7))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %3*/
/*   store i32 %11, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_9))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_10))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %3*/
/*   store i32 %16, i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_12))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_13))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %3*/
/*   store i32 %21, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_15))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_16))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %3*/
/*   store i32 %26, i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_18))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   %30 = load i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_19))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %3*/
/*   store i32 %31, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_21))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   %35 = load i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_22))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %3*/
/*   store i32 %36, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_24))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tta_filter_process_c: %3*/
/*   %40 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_25))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %3*/
/*   store i32 %41, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_27))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre1 = load i32* %.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_30))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre5 = load i32* %.phi.trans.insert4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_31))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre9 = load i32* %.phi.trans.insert8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_32))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre13 = load i32* %.phi.trans.insert12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_33))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %44*/
/*   %46 = load i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_36))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %44*/
/*   %51 = load i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_39))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %44*/
/*   store i32 %52, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_41))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   %56 = load i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_42))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %44*/
/*   store i32 %57, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_44))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_45))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %44*/
/*   store i32 %62, i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_47))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   %66 = load i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_48))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %44*/
/*   store i32 %67, i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_50))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_51))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %44*/
/*   %76 = load i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_54))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %44*/
/*   store i32 %77, i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_56))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tta_filter_process_c: %44*/
/*   %81 = load i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_57))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %44*/
/*   store i32 %82, i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_59))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %95 = load i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_61))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_62))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   %107 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_63))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   %113 = load i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_64))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   %124 = load i32* %.pre-phi16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_65))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   %126 = load i32* %.pre-phi20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_66))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   store i32 %123, i32* %dx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_67))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %125, i32* %.pre-phi16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_68))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %127 = load i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_69))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   %129 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_70))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   store i32 %128, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_71))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   store i32 %130, i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_72))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %133 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_74))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   %141 = load i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_80))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   %149 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_89))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   store i32 %152, i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_91))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tta_filter_process_c: %83*/
/*   %154 = load i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_92))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tta_filter_process_c: %83*/
/*   store i32 %157, i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_97))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* tta_filter_process_c: %3*/
/*   store i32 %11, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_9))
begin
memory_controller_in_b = tta_filter_process_c_3_11;
end
/* tta_filter_process_c: %3*/
/*   store i32 %16, i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_12))
begin
memory_controller_in_b = tta_filter_process_c_3_16;
end
/* tta_filter_process_c: %3*/
/*   store i32 %21, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_15))
begin
memory_controller_in_b = tta_filter_process_c_3_21;
end
/* tta_filter_process_c: %3*/
/*   store i32 %26, i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_18))
begin
memory_controller_in_b = tta_filter_process_c_3_26;
end
/* tta_filter_process_c: %3*/
/*   store i32 %31, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_21))
begin
memory_controller_in_b = tta_filter_process_c_3_31;
end
/* tta_filter_process_c: %3*/
/*   store i32 %36, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_24))
begin
memory_controller_in_b = tta_filter_process_c_3_36;
end
/* tta_filter_process_c: %3*/
/*   store i32 %41, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_27))
begin
memory_controller_in_b = tta_filter_process_c_3_41;
end
/* tta_filter_process_c: %44*/
/*   store i32 %52, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_41))
begin
memory_controller_in_b = tta_filter_process_c_44_52;
end
/* tta_filter_process_c: %44*/
/*   store i32 %57, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_44))
begin
memory_controller_in_b = tta_filter_process_c_44_57;
end
/* tta_filter_process_c: %44*/
/*   store i32 %62, i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_47))
begin
memory_controller_in_b = tta_filter_process_c_44_62;
end
/* tta_filter_process_c: %44*/
/*   store i32 %67, i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_50))
begin
memory_controller_in_b = tta_filter_process_c_44_67;
end
/* tta_filter_process_c: %44*/
/*   store i32 %77, i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_56))
begin
memory_controller_in_b = tta_filter_process_c_44_77;
end
/* tta_filter_process_c: %44*/
/*   store i32 %82, i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_59))
begin
memory_controller_in_b = tta_filter_process_c_44_82;
end
/* tta_filter_process_c: %83*/
/*   store i32 %123, i32* %dx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_67))
begin
memory_controller_in_b = tta_filter_process_c_83_123;
end
/* tta_filter_process_c: %83*/
/*   store i32 %125, i32* %.pre-phi16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_68))
begin
memory_controller_in_b = tta_filter_process_c_83_125;
end
/* tta_filter_process_c: %83*/
/*   store i32 %128, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_71))
begin
memory_controller_in_b = tta_filter_process_c_83_128;
end
/* tta_filter_process_c: %83*/
/*   store i32 %130, i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_72))
begin
memory_controller_in_b = tta_filter_process_c_83_130;
end
/* tta_filter_process_c: %83*/
/*   store i32 %152, i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_91))
begin
memory_controller_in_b = tta_filter_process_c_83_152;
end
/* tta_filter_process_c: %83*/
/*   store i32 %157, i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_97))
begin
memory_controller_in_b = tta_filter_process_c_83_157_reg;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* tta_filter_process_c: %3*/
/*   %5 = load i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_4))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %3*/
/*   %10 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_7))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %3*/
/*   store i32 %11, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_9))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %3*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_10))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %3*/
/*   store i32 %16, i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_12))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %3*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_13))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %3*/
/*   store i32 %21, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_15))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %3*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_16))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %3*/
/*   store i32 %26, i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_18))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %3*/
/*   %30 = load i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_19))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %3*/
/*   store i32 %31, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_21))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %3*/
/*   %35 = load i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_22))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %3*/
/*   store i32 %36, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_24))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %3*/
/*   %40 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_25))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %3*/
/*   store i32 %41, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_3_27))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre1 = load i32* %.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_30))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre5 = load i32* %.phi.trans.insert4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_31))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre9 = load i32* %.phi.trans.insert8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_32))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %._crit_edge*/
/*   %.pre13 = load i32* %.phi.trans.insert12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB___crit_edge_33))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %44*/
/*   %46 = load i32* %qm, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_36))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %44*/
/*   %51 = load i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_39))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %44*/
/*   store i32 %52, i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_41))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %44*/
/*   %56 = load i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_42))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %44*/
/*   store i32 %57, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_44))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %44*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_45))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %44*/
/*   store i32 %62, i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_47))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %44*/
/*   %66 = load i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_48))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %44*/
/*   store i32 %67, i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_50))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %44*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_51))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %44*/
/*   %76 = load i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_54))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %44*/
/*   store i32 %77, i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_56))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %44*/
/*   %81 = load i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_57))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %44*/
/*   store i32 %82, i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_44_59))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %95 = load i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_61))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_62))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %107 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_63))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %113 = load i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_64))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %124 = load i32* %.pre-phi16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_65))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %126 = load i32* %.pre-phi20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_66))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   store i32 %123, i32* %dx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_67))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   store i32 %125, i32* %.pre-phi16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_68))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %127 = load i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_69))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %129 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_70))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   store i32 %128, i32* %94, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_71))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   store i32 %130, i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_72))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %133 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_74))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %141 = load i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_80))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %149 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_89))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   store i32 %152, i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_91))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   %154 = load i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_92))
begin
memory_controller_size_b = 2'd2;
end
/* tta_filter_process_c: %83*/
/*   store i32 %157, i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tta_filter_process_c_BB_83_97))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg  tta_filter_process_c_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_arg_qm;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_arg_dx;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_arg_dl;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_arg_error;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_arg_in;
reg [31:0] tta_filter_process_c_arg_shift;
reg [31:0] tta_filter_process_c_arg_round;
wire  tta_filter_process_c_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_memory_controller_address_a;
wire  tta_filter_process_c_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] tta_filter_process_c_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] tta_filter_process_c_memory_controller_out_a;
wire [1:0] tta_filter_process_c_memory_controller_size_a;
wire  tta_filter_process_c_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tta_filter_process_c_memory_controller_address_b;
wire  tta_filter_process_c_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] tta_filter_process_c_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] tta_filter_process_c_memory_controller_out_b;
wire [1:0] tta_filter_process_c_memory_controller_size_b;
reg  tta_filter_process_c_memory_controller_waitrequest;
wire  tta_filter_process_c_finish;
reg  tta_filter_process_c_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


tta_filter_process_c tta_filter_process_c_inst (
	.memory_controller_enable_a (tta_filter_process_c_memory_controller_enable_a),
	.memory_controller_address_a (tta_filter_process_c_memory_controller_address_a),
	.memory_controller_write_enable_a (tta_filter_process_c_memory_controller_write_enable_a),
	.memory_controller_in_a (tta_filter_process_c_memory_controller_in_a),
	.memory_controller_size_a (tta_filter_process_c_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (tta_filter_process_c_memory_controller_enable_b),
	.memory_controller_address_b (tta_filter_process_c_memory_controller_address_b),
	.memory_controller_write_enable_b (tta_filter_process_c_memory_controller_write_enable_b),
	.memory_controller_in_b (tta_filter_process_c_memory_controller_in_b),
	.memory_controller_size_b (tta_filter_process_c_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (tta_filter_process_c_start),
	.finish (tta_filter_process_c_finish),
	.arg_qm (tta_filter_process_c_arg_qm),
	.arg_dx (tta_filter_process_c_arg_dx),
	.arg_dl (tta_filter_process_c_arg_dl),
	.arg_error (tta_filter_process_c_arg_error),
	.arg_in (tta_filter_process_c_arg_in),
	.arg_shift (tta_filter_process_c_arg_shift),
	.arg_round (tta_filter_process_c_arg_round)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (tta_filter_process_c_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (tta_filter_process_c_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
tta_filter_process_c_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_start"); $finish; end
end
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
tta_filter_process_c_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
tta_filter_process_c_arg_qm <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_arg_qm"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
tta_filter_process_c_arg_dx <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_arg_dx"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
tta_filter_process_c_arg_dl <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_arg_dl"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
tta_filter_process_c_arg_error <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_arg_error"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
tta_filter_process_c_arg_in <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_arg_in"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
tta_filter_process_c_arg_shift <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_arg_shift"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
tta_filter_process_c_arg_round <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tta_filter_process_c_arg_round"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
begin
tta_filter_process_c_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
begin
tta_filter_process_c_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
tta_filter_process_c_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
tta_filter_process_c_finish_final = tta_filter_process_c_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = tta_filter_process_c_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = tta_filter_process_c_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = tta_filter_process_c_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = tta_filter_process_c_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = tta_filter_process_c_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = tta_filter_process_c_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = tta_filter_process_c_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = tta_filter_process_c_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = tta_filter_process_c_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = tta_filter_process_c_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = tta_filter_process_c_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = tta_filter_process_c_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = tta_filter_process_c_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = tta_filter_process_c_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = tta_filter_process_c_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = tta_filter_process_c_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = tta_filter_process_c_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = tta_filter_process_c_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = tta_filter_process_c_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @tta_filter_process_c(i32* undef, i32* undef, i32* undef, i32* undef, i32* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = tta_filter_process_c_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
