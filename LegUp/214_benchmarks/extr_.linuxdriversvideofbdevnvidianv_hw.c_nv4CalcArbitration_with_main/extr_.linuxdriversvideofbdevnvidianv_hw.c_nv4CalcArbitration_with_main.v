//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:56:34 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module nv4CalcArbitration
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_fifo,
	arg_arb
);

parameter [8:0] LEGUP_0 = 9'd0;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_1 = 9'd1;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_2 = 9'd2;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_3 = 9'd3;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_4 = 9'd4;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_5 = 9'd5;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_6 = 9'd6;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_7 = 9'd7;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_8 = 9'd8;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_9 = 9'd9;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_10 = 9'd10;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_11 = 9'd11;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_12 = 9'd12;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_13 = 9'd13;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_14 = 9'd14;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_15 = 9'd15;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_16 = 9'd16;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_17 = 9'd17;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_18 = 9'd18;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_19 = 9'd19;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_20 = 9'd20;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_21 = 9'd21;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_22 = 9'd22;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_23 = 9'd23;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_24 = 9'd24;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_25 = 9'd25;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_26 = 9'd26;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_27 = 9'd27;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_28 = 9'd28;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_29 = 9'd29;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_30 = 9'd30;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_31 = 9'd31;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_32 = 9'd32;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_33 = 9'd33;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_34 = 9'd34;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_35 = 9'd35;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_36 = 9'd36;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_37 = 9'd37;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_38 = 9'd38;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_39 = 9'd39;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_40 = 9'd40;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_0_41 = 9'd41;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_42 = 9'd42;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_43 = 9'd43;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_44 = 9'd44;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_45 = 9'd45;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_46 = 9'd46;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_47 = 9'd47;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_48 = 9'd48;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_49 = 9'd49;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_50 = 9'd50;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_51 = 9'd51;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_52 = 9'd52;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_53 = 9'd53;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_54 = 9'd54;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_55 = 9'd55;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_56 = 9'd56;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_57 = 9'd57;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_58 = 9'd58;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_59 = 9'd59;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_60 = 9'd60;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_61 = 9'd61;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_62 = 9'd62;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_63 = 9'd63;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_64 = 9'd64;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_65 = 9'd65;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_66 = 9'd66;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_67 = 9'd67;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_68 = 9'd68;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_69 = 9'd69;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_70 = 9'd70;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_71 = 9'd71;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_72 = 9'd72;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_73 = 9'd73;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_74 = 9'd74;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_38_75 = 9'd75;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_42_76 = 9'd76;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_77 = 9'd77;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_78 = 9'd78;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_79 = 9'd79;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_80 = 9'd80;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_81 = 9'd81;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_82 = 9'd82;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_83 = 9'd83;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_84 = 9'd84;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_85 = 9'd85;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_86 = 9'd86;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_87 = 9'd87;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_88 = 9'd88;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_89 = 9'd89;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_90 = 9'd90;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_91 = 9'd91;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_92 = 9'd92;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_93 = 9'd93;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_94 = 9'd94;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_95 = 9'd95;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_96 = 9'd96;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_97 = 9'd97;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_98 = 9'd98;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_99 = 9'd99;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_100 = 9'd100;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_101 = 9'd101;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_102 = 9'd102;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_103 = 9'd103;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_104 = 9'd104;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_105 = 9'd105;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_106 = 9'd106;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_107 = 9'd107;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_108 = 9'd108;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_43_109 = 9'd109;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_110 = 9'd110;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_111 = 9'd111;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_112 = 9'd112;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_113 = 9'd113;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_114 = 9'd114;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_115 = 9'd115;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_116 = 9'd116;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_117 = 9'd117;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_118 = 9'd118;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_119 = 9'd119;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_120 = 9'd120;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_121 = 9'd121;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_122 = 9'd122;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_123 = 9'd123;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_124 = 9'd124;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_125 = 9'd125;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_126 = 9'd126;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_127 = 9'd127;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_128 = 9'd128;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_129 = 9'd129;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_130 = 9'd130;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_131 = 9'd131;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_132 = 9'd132;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_133 = 9'd133;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_134 = 9'd134;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_135 = 9'd135;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_136 = 9'd136;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_137 = 9'd137;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_138 = 9'd138;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_139 = 9'd139;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_140 = 9'd140;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_141 = 9'd141;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_142 = 9'd142;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_143 = 9'd143;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_144 = 9'd144;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_145 = 9'd145;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_146 = 9'd146;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_147 = 9'd147;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_148 = 9'd148;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_149 = 9'd149;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_150 = 9'd150;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_151 = 9'd151;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_152 = 9'd152;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_153 = 9'd153;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_154 = 9'd154;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_155 = 9'd155;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_156 = 9'd156;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_157 = 9'd157;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_158 = 9'd158;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_159 = 9'd159;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_160 = 9'd160;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_161 = 9'd161;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_162 = 9'd162;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_163 = 9'd163;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_164 = 9'd164;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_165 = 9'd165;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_166 = 9'd166;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_167 = 9'd167;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_168 = 9'd168;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_169 = 9'd169;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_170 = 9'd170;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_171 = 9'd171;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_172 = 9'd172;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_173 = 9'd173;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_45_174 = 9'd174;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_175 = 9'd175;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_176 = 9'd176;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_177 = 9'd177;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_178 = 9'd178;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_179 = 9'd179;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_180 = 9'd180;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_181 = 9'd181;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_182 = 9'd182;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_183 = 9'd183;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_184 = 9'd184;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_185 = 9'd185;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_186 = 9'd186;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_187 = 9'd187;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_188 = 9'd188;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_189 = 9'd189;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_190 = 9'd190;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_191 = 9'd191;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_192 = 9'd192;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_193 = 9'd193;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_194 = 9'd194;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_195 = 9'd195;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_196 = 9'd196;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_197 = 9'd197;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_198 = 9'd198;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_199 = 9'd199;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_200 = 9'd200;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_201 = 9'd201;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_202 = 9'd202;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_203 = 9'd203;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_204 = 9'd204;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_205 = 9'd205;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_206 = 9'd206;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_207 = 9'd207;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_208 = 9'd208;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_209 = 9'd209;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_210 = 9'd210;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_48_211 = 9'd211;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_212 = 9'd212;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_213 = 9'd213;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_214 = 9'd214;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_215 = 9'd215;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_216 = 9'd216;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_217 = 9'd217;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_218 = 9'd218;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_219 = 9'd219;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_220 = 9'd220;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_221 = 9'd221;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_222 = 9'd222;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_223 = 9'd223;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_224 = 9'd224;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_225 = 9'd225;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_226 = 9'd226;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_227 = 9'd227;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_228 = 9'd228;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_229 = 9'd229;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_230 = 9'd230;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_231 = 9'd231;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_232 = 9'd232;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_233 = 9'd233;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_234 = 9'd234;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_235 = 9'd235;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_236 = 9'd236;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_237 = 9'd237;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_238 = 9'd238;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_239 = 9'd239;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_240 = 9'd240;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_241 = 9'd241;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_242 = 9'd242;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_243 = 9'd243;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_59_244 = 9'd244;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_245 = 9'd245;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_246 = 9'd246;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_247 = 9'd247;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_248 = 9'd248;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_249 = 9'd249;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_250 = 9'd250;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_251 = 9'd251;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_252 = 9'd252;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_253 = 9'd253;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_254 = 9'd254;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_255 = 9'd255;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_256 = 9'd256;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_257 = 9'd257;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_258 = 9'd258;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_259 = 9'd259;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_260 = 9'd260;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_261 = 9'd261;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_262 = 9'd262;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_263 = 9'd263;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_264 = 9'd264;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_265 = 9'd265;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_266 = 9'd266;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_267 = 9'd267;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_268 = 9'd268;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_269 = 9'd269;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_270 = 9'd270;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_271 = 9'd271;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_272 = 9'd272;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_273 = 9'd273;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_274 = 9'd274;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_275 = 9'd275;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_276 = 9'd276;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_277 = 9'd277;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_278 = 9'd278;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_279 = 9'd279;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_280 = 9'd280;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_281 = 9'd281;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_282 = 9'd282;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_283 = 9'd283;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_284 = 9'd284;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_285 = 9'd285;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_286 = 9'd286;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_287 = 9'd287;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_288 = 9'd288;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_289 = 9'd289;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_290 = 9'd290;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_291 = 9'd291;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_292 = 9'd292;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_293 = 9'd293;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_294 = 9'd294;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_295 = 9'd295;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_296 = 9'd296;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_297 = 9'd297;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_298 = 9'd298;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_299 = 9'd299;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_300 = 9'd300;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_301 = 9'd301;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_302 = 9'd302;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_303 = 9'd303;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_304 = 9'd304;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_305 = 9'd305;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_306 = 9'd306;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_307 = 9'd307;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_308 = 9'd308;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_62_309 = 9'd309;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_310 = 9'd310;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_311 = 9'd311;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_312 = 9'd312;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_313 = 9'd313;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_314 = 9'd314;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_315 = 9'd315;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_316 = 9'd316;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_317 = 9'd317;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_318 = 9'd318;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_319 = 9'd319;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_320 = 9'd320;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_321 = 9'd321;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_322 = 9'd322;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_323 = 9'd323;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_324 = 9'd324;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_325 = 9'd325;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_326 = 9'd326;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_327 = 9'd327;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_328 = 9'd328;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_329 = 9'd329;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_330 = 9'd330;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_331 = 9'd331;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_332 = 9'd332;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_333 = 9'd333;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_334 = 9'd334;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_335 = 9'd335;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_336 = 9'd336;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_337 = 9'd337;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_338 = 9'd338;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_339 = 9'd339;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_340 = 9'd340;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_341 = 9'd341;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_65_342 = 9'd342;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_70_343 = 9'd343;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_344 = 9'd344;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_345 = 9'd345;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_346 = 9'd346;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_347 = 9'd347;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_348 = 9'd348;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_349 = 9'd349;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_350 = 9'd350;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_351 = 9'd351;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_352 = 9'd352;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_353 = 9'd353;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_354 = 9'd354;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_355 = 9'd355;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_356 = 9'd356;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_357 = 9'd357;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_358 = 9'd358;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_359 = 9'd359;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_360 = 9'd360;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_361 = 9'd361;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_362 = 9'd362;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_363 = 9'd363;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_364 = 9'd364;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_365 = 9'd365;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_366 = 9'd366;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_367 = 9'd367;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_368 = 9'd368;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_369 = 9'd369;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_370 = 9'd370;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_371 = 9'd371;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_372 = 9'd372;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_373 = 9'd373;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_374 = 9'd374;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_375 = 9'd375;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_376 = 9'd376;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_377 = 9'd377;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_378 = 9'd378;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_379 = 9'd379;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_380 = 9'd380;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_381 = 9'd381;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_382 = 9'd382;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_383 = 9'd383;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_384 = 9'd384;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_385 = 9'd385;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_386 = 9'd386;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_387 = 9'd387;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_388 = 9'd388;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_389 = 9'd389;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_390 = 9'd390;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_391 = 9'd391;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_392 = 9'd392;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_393 = 9'd393;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_394 = 9'd394;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_395 = 9'd395;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_396 = 9'd396;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_397 = 9'd397;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_398 = 9'd398;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_399 = 9'd399;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_400 = 9'd400;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_401 = 9'd401;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_402 = 9'd402;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_403 = 9'd403;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_404 = 9'd404;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_405 = 9'd405;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_406 = 9'd406;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_407 = 9'd407;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_408 = 9'd408;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_409 = 9'd409;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_410 = 9'd410;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_411 = 9'd411;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_412 = 9'd412;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_413 = 9'd413;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_414 = 9'd414;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_415 = 9'd415;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_416 = 9'd416;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_417 = 9'd417;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_418 = 9'd418;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_419 = 9'd419;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_420 = 9'd420;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_421 = 9'd421;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_422 = 9'd422;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_423 = 9'd423;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_424 = 9'd424;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_425 = 9'd425;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_426 = 9'd426;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_427 = 9'd427;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_428 = 9'd428;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_429 = 9'd429;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_430 = 9'd430;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_431 = 9'd431;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_432 = 9'd432;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_433 = 9'd433;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_434 = 9'd434;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_435 = 9'd435;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_436 = 9'd436;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_437 = 9'd437;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_438 = 9'd438;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_439 = 9'd439;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_440 = 9'd440;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_441 = 9'd441;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_442 = 9'd442;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_74_443 = 9'd443;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_82_444 = 9'd444;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_84_445 = 9'd445;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_85_446 = 9'd446;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_88_447 = 9'd447;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_90_448 = 9'd448;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_92_449 = 9'd449;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB__thread_450 = 9'd450;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB_95_451 = 9'd451;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB__loopexit_loopexit_452 = 9'd452;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB__loopexit_453 = 9'd453;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB__loopexit_454 = 9'd454;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB__loopexit_455 = 9'd455;
parameter [8:0] LEGUP_F_nv4CalcArbitration_BB__loopexit_456 = 9'd456;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_fifo;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_arb;
reg [8:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_0_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_0_2_reg;
reg [31:0] nv4CalcArbitration_0_3;
reg [31:0] nv4CalcArbitration_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_0_4_reg;
reg [31:0] nv4CalcArbitration_0_5;
reg [31:0] nv4CalcArbitration_0_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_0_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_0_6_reg;
reg [31:0] nv4CalcArbitration_0_7;
reg [31:0] nv4CalcArbitration_0_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_0_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_0_8_reg;
reg [31:0] nv4CalcArbitration_0_9;
reg [31:0] nv4CalcArbitration_0_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_0_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_0_10_reg;
reg [31:0] nv4CalcArbitration_0_11;
reg [31:0] nv4CalcArbitration_0_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_0_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_0_12_reg;
reg [31:0] nv4CalcArbitration_0_13;
reg [31:0] nv4CalcArbitration_0_13_reg;
reg [31:0] nv4CalcArbitration_0_14;
reg [31:0] nv4CalcArbitration_0_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_0_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_0_15_reg;
reg [31:0] nv4CalcArbitration_0_16;
reg [31:0] nv4CalcArbitration_0_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_0_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_0_17_reg;
reg [31:0] nv4CalcArbitration_0_18;
reg [31:0] nv4CalcArbitration_0_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_0_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_0_19_reg;
reg [31:0] nv4CalcArbitration_0_20;
reg [31:0] nv4CalcArbitration_0_20_reg;
reg  nv4CalcArbitration_0_21;
reg  nv4CalcArbitration_0_21_reg;
reg [31:0] nv4CalcArbitration_0___v;
reg [31:0] nv4CalcArbitration_0___v_reg;
reg [31:0] nv4CalcArbitration_0__;
reg [31:0] nv4CalcArbitration_0___reg;
reg [31:0] nv4CalcArbitration_0_22;
reg [31:0] nv4CalcArbitration_0_22_reg;
reg [31:0] nv4CalcArbitration_0_23;
reg [31:0] nv4CalcArbitration_0_23_reg;
reg  nv4CalcArbitration_0_24;
reg  nv4CalcArbitration_0_24_reg;
reg [31:0] nv4CalcArbitration_0_25;
reg [31:0] nv4CalcArbitration_0_25_reg;
reg [31:0] nv4CalcArbitration_0_26;
reg [31:0] nv4CalcArbitration_0_26_reg;
reg [31:0] nv4CalcArbitration_0_27;
reg [31:0] nv4CalcArbitration_0_27_reg;
reg [31:0] nv4CalcArbitration_0_28;
reg [31:0] nv4CalcArbitration_0_28_reg;
reg [31:0] nv4CalcArbitration_0_29;
reg [31:0] nv4CalcArbitration_0_29_reg;
reg  nv4CalcArbitration_0_30;
reg  nv4CalcArbitration_0_30_reg;
reg [31:0] nv4CalcArbitration_0_31;
reg [31:0] nv4CalcArbitration_0_31_reg;
reg [31:0] nv4CalcArbitration_0_32;
reg [31:0] nv4CalcArbitration_0_32_reg;
reg [31:0] nv4CalcArbitration_0_33;
reg [31:0] nv4CalcArbitration_0_33_reg;
reg [31:0] nv4CalcArbitration_0_34;
reg [31:0] nv4CalcArbitration_0_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_0_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_0_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_0_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_0_36_reg;
reg [31:0] nv4CalcArbitration_0_37;
reg [31:0] nv4CalcArbitration_0_37_reg;
reg [31:0] nv4CalcArbitration_38_vlwm_05;
reg [31:0] nv4CalcArbitration_38_vlwm_05_reg;
reg [31:0] nv4CalcArbitration_38_mclk_extra_04;
reg [31:0] nv4CalcArbitration_38_mclk_extra_04_reg;
reg [31:0] nv4CalcArbitration_38_vbs_03;
reg [31:0] nv4CalcArbitration_38_vbs_03_reg;
reg [31:0] nv4CalcArbitration_38_39;
reg [31:0] nv4CalcArbitration_38_39_reg;
reg [31:0] nv4CalcArbitration_38_40;
reg [31:0] nv4CalcArbitration_38_40_reg;
reg [31:0] nv4CalcArbitration_38_41;
reg [31:0] nv4CalcArbitration_38_41_reg;
reg [31:0] nv4CalcArbitration_43_44;
reg [31:0] nv4CalcArbitration_43_44_reg;
reg [31:0] nv4CalcArbitration_45_46;
reg [31:0] nv4CalcArbitration_45_46_reg;
reg [31:0] nv4CalcArbitration_45_47;
reg [31:0] nv4CalcArbitration_45_47_reg;
reg [31:0] nv4CalcArbitration_48_video_fill_us_0;
reg [31:0] nv4CalcArbitration_48_video_fill_us_0_reg;
reg [31:0] nv4CalcArbitration_48_49;
reg [31:0] nv4CalcArbitration_48_49_reg;
reg [31:0] nv4CalcArbitration_48_50;
reg [31:0] nv4CalcArbitration_48_50_reg;
reg [31:0] nv4CalcArbitration_48_51;
reg [31:0] nv4CalcArbitration_48_51_reg;
reg [31:0] nv4CalcArbitration_48_52;
reg [31:0] nv4CalcArbitration_48_52_reg;
reg [31:0] nv4CalcArbitration_48_53;
reg [31:0] nv4CalcArbitration_48_53_reg;
reg [31:0] nv4CalcArbitration_48_54;
reg [31:0] nv4CalcArbitration_48_54_reg;
reg [31:0] nv4CalcArbitration_48_55;
reg [31:0] nv4CalcArbitration_48_55_reg;
reg  nv4CalcArbitration_48_56;
reg  nv4CalcArbitration_48_56_reg;
reg [31:0] nv4CalcArbitration_48_vbs_1;
reg [31:0] nv4CalcArbitration_48_vbs_1_reg;
reg  nv4CalcArbitration_48_57;
reg  nv4CalcArbitration_48_57_reg;
reg [31:0] nv4CalcArbitration_48_vbs_2;
reg [31:0] nv4CalcArbitration_48_vbs_2_reg;
reg [31:0] nv4CalcArbitration_48_58;
reg [31:0] nv4CalcArbitration_48_58_reg;
reg [31:0] nv4CalcArbitration_59_60;
reg [31:0] nv4CalcArbitration_59_60_reg;
reg [31:0] nv4CalcArbitration_59_61;
reg [31:0] nv4CalcArbitration_59_61_reg;
reg [31:0] nv4CalcArbitration_62_63;
reg [31:0] nv4CalcArbitration_62_63_reg;
reg [31:0] nv4CalcArbitration_62_64;
reg [31:0] nv4CalcArbitration_62_64_reg;
reg [31:0] nv4CalcArbitration_65_video_fill_us_1;
reg [31:0] nv4CalcArbitration_65_video_fill_us_1_reg;
reg [31:0] nv4CalcArbitration_65_66;
reg [31:0] nv4CalcArbitration_65_66_reg;
reg [31:0] nv4CalcArbitration_65_67;
reg [31:0] nv4CalcArbitration_65_67_reg;
reg [31:0] nv4CalcArbitration_65_68;
reg [31:0] nv4CalcArbitration_65_68_reg;
reg [31:0] nv4CalcArbitration_65_69;
reg [31:0] nv4CalcArbitration_65_69_reg;
reg [31:0] nv4CalcArbitration_70_71;
reg [31:0] nv4CalcArbitration_70_71_reg;
reg [31:0] nv4CalcArbitration_70_72;
reg [31:0] nv4CalcArbitration_70_72_reg;
reg [31:0] nv4CalcArbitration_70_73;
reg [31:0] nv4CalcArbitration_70_73_reg;
reg [31:0] nv4CalcArbitration_74_vbs_3;
reg [31:0] nv4CalcArbitration_74_vbs_3_reg;
reg [31:0] nv4CalcArbitration_74_vlwm_1;
reg [31:0] nv4CalcArbitration_74_vlwm_1_reg;
reg [31:0] nv4CalcArbitration_74__pn;
reg [31:0] nv4CalcArbitration_74__pn_reg;
reg [31:0] nv4CalcArbitration_74_clwm_0_in_in;
reg [31:0] nv4CalcArbitration_74_clwm_0_in_in_reg;
reg [31:0] nv4CalcArbitration_74_clwm_0_in;
reg [31:0] nv4CalcArbitration_74_clwm_0_in_reg;
reg [31:0] nv4CalcArbitration_74_clwm_0;
reg [31:0] nv4CalcArbitration_74_clwm_0_reg;
reg [31:0] nv4CalcArbitration_74_75;
reg [31:0] nv4CalcArbitration_74_75_reg;
reg [31:0] nv4CalcArbitration_74_76;
reg [31:0] nv4CalcArbitration_74_76_reg;
reg [31:0] nv4CalcArbitration_74_77;
reg [31:0] nv4CalcArbitration_74_77_reg;
reg [31:0] nv4CalcArbitration_74_78;
reg [31:0] nv4CalcArbitration_74_78_reg;
reg [31:0] nv4CalcArbitration_74_79;
reg [31:0] nv4CalcArbitration_74_79_reg;
reg  nv4CalcArbitration_74_80;
reg  nv4CalcArbitration_74_80_reg;
reg  nv4CalcArbitration_74_81;
reg  nv4CalcArbitration_74_81_reg;
reg  nv4CalcArbitration_74_or_cond;
reg  nv4CalcArbitration_74_or_cond_reg;
reg  nv4CalcArbitration_82_83;
reg  nv4CalcArbitration_82_83_reg;
reg [31:0] nv4CalcArbitration_82_found_1;
reg [31:0] nv4CalcArbitration_82_found_1_reg;
reg  nv4CalcArbitration_85_86;
reg  nv4CalcArbitration_85_86_reg;
reg  nv4CalcArbitration_85_87;
reg  nv4CalcArbitration_85_87_reg;
reg  nv4CalcArbitration_85_or_cond2;
reg  nv4CalcArbitration_85_or_cond2_reg;
reg  nv4CalcArbitration_88_89;
reg  nv4CalcArbitration_88_89_reg;
reg [31:0] nv4CalcArbitration_88_found_2;
reg [31:0] nv4CalcArbitration_88_found_2_reg;
reg  nv4CalcArbitration_90_91;
reg  nv4CalcArbitration_90_91_reg;
reg  nv4CalcArbitration_92_93;
reg  nv4CalcArbitration_92_93_reg;
reg [31:0] nv4CalcArbitration_92_found_3;
reg [31:0] nv4CalcArbitration_92_found_3_reg;
reg  nv4CalcArbitration__thread_94;
reg  nv4CalcArbitration__thread_94_reg;
reg [31:0] nv4CalcArbitration__thread_vlwm_211;
reg [31:0] nv4CalcArbitration__thread_vlwm_211_reg;
reg [31:0] nv4CalcArbitration_95_found_4;
reg [31:0] nv4CalcArbitration_95_found_4_reg;
reg [31:0] nv4CalcArbitration_95_mclk_extra_1;
reg [31:0] nv4CalcArbitration_95_mclk_extra_1_reg;
reg  nv4CalcArbitration_95_96;
reg  nv4CalcArbitration_95_96_reg;
reg [31:0] nv4CalcArbitration_95_vlwm_2;
reg [31:0] nv4CalcArbitration_95_vlwm_2_reg;
reg  nv4CalcArbitration_95_97;
reg  nv4CalcArbitration_95_97_reg;
reg [31:0] nv4CalcArbitration__loopexit_vlwm_212;
reg [31:0] nv4CalcArbitration__loopexit_vlwm_212_reg;
reg [31:0] nv4CalcArbitration__loopexit_98;
reg [31:0] nv4CalcArbitration__loopexit_98_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration__loopexit_99;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration__loopexit_99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration__loopexit_100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration__loopexit_100_reg;
reg  nv4CalcArbitration__loopexit_101;
reg  nv4CalcArbitration__loopexit_101_reg;
reg [31:0] nv4CalcArbitration__loopexit_clwm_1;
reg [31:0] nv4CalcArbitration__loopexit_clwm_1_reg;
reg [31:0] nv4CalcArbitration__loopexit_102;
reg [31:0] nv4CalcArbitration__loopexit_102_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg [31:0] nv4CalcArbitration_signed_divide_32_0_op0;
reg [31:0] nv4CalcArbitration_signed_divide_32_0_op1;
wire [31:0] lpm_divide_nv4CalcArbitration_48_54_temp_out;
wire [31:0] nv4CalcArbitration_48_54_unused;
reg  lpm_divide_nv4CalcArbitration_48_54_en;
reg [31:0] lpm_divide_nv4CalcArbitration_48_54_out;
reg [31:0] nv4CalcArbitration_signed_divide_32_0;
reg  lpm_mult_nv4CalcArbitration_0_27_en;
reg [31:0] nv4CalcArbitration_0_27_stage0_reg;
reg  lpm_mult_nv4CalcArbitration_0_32_en;
reg [31:0] nv4CalcArbitration_0_32_stage0_reg;
reg  lpm_mult_nv4CalcArbitration_0_25_en;
reg [31:0] nv4CalcArbitration_0_25_stage0_reg;
reg  lpm_divide_nv4CalcArbitration_0_22_en;
reg  lpm_mult_nv4CalcArbitration_0_29_en;
reg [31:0] nv4CalcArbitration_0_29_stage0_reg;
reg  lpm_divide_nv4CalcArbitration_0_23_en;
reg  lpm_divide_nv4CalcArbitration_0_26_en;
reg  lpm_divide_nv4CalcArbitration_0_37_en;
reg  lpm_mult_nv4CalcArbitration_38_40_en;
reg [31:0] nv4CalcArbitration_38_40_stage0_reg;
reg  lpm_divide_nv4CalcArbitration_38_41_en;
reg  lpm_divide_nv4CalcArbitration_43_44_en;
reg  lpm_divide_nv4CalcArbitration_45_46_en;
reg  lpm_divide_nv4CalcArbitration_45_47_en;
reg  lpm_mult_nv4CalcArbitration_48_53_en;
reg [31:0] nv4CalcArbitration_48_53_stage0_reg;
reg  lpm_mult_nv4CalcArbitration_48_58_en;
reg [31:0] nv4CalcArbitration_48_58_stage0_reg;
reg  lpm_divide_nv4CalcArbitration_59_61_en;
reg  lpm_divide_nv4CalcArbitration_62_63_en;
reg  lpm_divide_nv4CalcArbitration_62_64_en;
reg  lpm_divide_nv4CalcArbitration_65_66_en;
reg  lpm_mult_nv4CalcArbitration_74_clwm_0_in_in_en;
reg [31:0] nv4CalcArbitration_74_clwm_0_in_in_stage0_reg;
reg  lpm_divide_nv4CalcArbitration_74_clwm_0_in_en;
reg  lpm_mult_nv4CalcArbitration_74_76_en;
reg [31:0] nv4CalcArbitration_74_76_stage0_reg;
reg  lpm_divide_nv4CalcArbitration_74_77_en;
reg  lpm_mult_nv4CalcArbitration_74_78_en;
reg [31:0] nv4CalcArbitration_74_78_stage0_reg;
reg  lpm_divide_nv4CalcArbitration_74_79_en;

/*   %54 = sdiv i32 %53, 1000000*/
lpm_divide lpm_divide_nv4CalcArbitration_48_54 (
	.quotient (lpm_divide_nv4CalcArbitration_48_54_temp_out),
	.remain (nv4CalcArbitration_48_54_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_nv4CalcArbitration_48_54_en),
	.numer (nv4CalcArbitration_signed_divide_32_0_op0),
	.denom (nv4CalcArbitration_signed_divide_32_0_op1)
);

defparam
	lpm_divide_nv4CalcArbitration_48_54.lpm_pipeline = 32,
	lpm_divide_nv4CalcArbitration_48_54.lpm_widthn = 32,
	lpm_divide_nv4CalcArbitration_48_54.lpm_widthd = 32,
	lpm_divide_nv4CalcArbitration_48_54.lpm_drepresentation = "SIGNED",
	lpm_divide_nv4CalcArbitration_48_54.lpm_nrepresentation = "SIGNED",
	lpm_divide_nv4CalcArbitration_48_54.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_37;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_37;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_38;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_38;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_39;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_39;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_40;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_40;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_41;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_0_41;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_42;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_42;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_43;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_43;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_44;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_44;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_45;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_45;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_46;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_46;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_47;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_47;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_48;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_48;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_49;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_49;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_50;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_50;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_51;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_51;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_52;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_52;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_53;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_53;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_54;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_54;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_55;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_55;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_56;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_56;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_57;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_57;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_58;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_58;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_59;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_59;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_60;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_60;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_61;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_61;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_62;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_62;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_63;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_63;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_64;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_64;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_65;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_65;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_66;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_66;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_67;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_67;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_68;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_68;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_69;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_69;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_70;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_70;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_71;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_71;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_72;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_72;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_73;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_73;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_74;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_74;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_75;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_75;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_75) & (memory_controller_waitrequest == 1'd0)) & (nv4CalcArbitration_0_24_reg == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_42_76;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_42_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_75) & (memory_controller_waitrequest == 1'd0)) & (nv4CalcArbitration_0_24_reg == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_70_343;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_70_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_42_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_42_76;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_42_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv4CalcArbitration_BB_42_76) & (memory_controller_waitrequest == 1'd0)) & (nv4CalcArbitration_0_30_reg == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_77;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv4CalcArbitration_BB_42_76) & (memory_controller_waitrequest == 1'd0)) & (nv4CalcArbitration_0_30_reg == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_110;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_77;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_78;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_78;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_79;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_79;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_80;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_80;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_81;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_81;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_82;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_82;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_83;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_83;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_84;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_84;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_85;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_85;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_86;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_86;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_87;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_87;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_88;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_88;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_89;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_89;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_90;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_90;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_91;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_91;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_92;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_92;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_93;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_93;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_94;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_94;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_95;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_95;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_96;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_96;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_97;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_97;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_98;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_98;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_99;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_99;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_100;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_100;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_101;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_101;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_102;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_102;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_103;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_103;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_104;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_104;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_105;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_105;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_106;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_106;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_107;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_107;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_108;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_108;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_109;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_43_109;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_43_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_175;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_110;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_111;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_111;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_112;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_112;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_113;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_113;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_114;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_114;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_114) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_115;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_115;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_115) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_116;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_116;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_116) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_117;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_117;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_118;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_118;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_119;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_119;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_120;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_120;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_121;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_121;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_121) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_122;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_122;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_122) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_123;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_123;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_123) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_124;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_124;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_125;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_125;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_125) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_126;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_126) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_126;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_126) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_127;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_127) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_127;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_127) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_128;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_128) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_128;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_128) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_129;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_129) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_129;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_129) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_130;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_130) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_130;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_130) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_131;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_131) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_131;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_131) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_132;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_132) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_132;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_132) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_133;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_133) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_133;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_133) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_134;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_134) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_134;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_134) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_135;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_135) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_135;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_135) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_136;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_136) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_136;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_136) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_137;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_137) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_137;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_137) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_138;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_138) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_138;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_138) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_139;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_139) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_139;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_139) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_140;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_140) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_140;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_140) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_141;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_141) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_141;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_141) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_142;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_142) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_142;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_142) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_143;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_143) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_143;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_143) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_144;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_144) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_144;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_144) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_145;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_145) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_145;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_145) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_146;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_146) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_146;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_146) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_147;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_147) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_147;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_147) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_148;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_148) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_148;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_148) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_149;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_149) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_149;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_149) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_150;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_150) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_150;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_150) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_151;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_151) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_151;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_151) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_152;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_152) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_152;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_152) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_153;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_153) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_153;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_153) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_154;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_154) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_154;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_154) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_155;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_155) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_155;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_155) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_156;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_156) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_156;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_156) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_157;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_157) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_157;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_157) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_158;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_158) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_158;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_158) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_159;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_159) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_159;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_159) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_160;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_160) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_160;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_160) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_161;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_161) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_161;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_161) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_162;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_162) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_162;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_162) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_163;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_163) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_163;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_163) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_164;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_164) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_164;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_164) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_165;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_165) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_165;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_165) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_166;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_166) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_166;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_166) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_167;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_167) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_167;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_167) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_168;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_168) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_168;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_168) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_169;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_169) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_169;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_169) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_170;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_170) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_170;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_170) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_171;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_171) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_171;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_171) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_172;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_172) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_172;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_172) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_173;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_173) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_173;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_173) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_174;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_174) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_45_174;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_45_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_174) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_175;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_175) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_175;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_175) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_176;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_176) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_176;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_176) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_177;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_177) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_177;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_177) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_178;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_178) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_178;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_178) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_179;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_179) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_179;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_179) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_180;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_180) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_180;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_180) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_181;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_181) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_181;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_181) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_182;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_182) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_182;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_182) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_183;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_183) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_183;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_183) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_184;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_184) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_184;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_184) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_185;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_185) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_185;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_185) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_186;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_186) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_186;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_186) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_187;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_187) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_187;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_187) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_188;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_188) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_188;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_188) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_189;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_189) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_189;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_189) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_190;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_190) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_190;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_190) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_191;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_191) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_191;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_191) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_192;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_192) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_192;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_192) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_193;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_193) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_193;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_193) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_194;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_194) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_194;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_194) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_195;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_195) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_195;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_195) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_196;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_196) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_196;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_196) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_197;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_197) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_197;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_197) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_198;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_198) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_198;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_198) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_199;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_199) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_199;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_199) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_200;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_200) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_200;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_200) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_201;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_201) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_201;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_201) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_202;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_202) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_202;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_202) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_203;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_203) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_203;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_203) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_204;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_204) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_204;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_204) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_205;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_205) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_205;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_205) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_206;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_206) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_206;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_206) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_207;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_207) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_207;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_207) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_208;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_208) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_208;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_208) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_209;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_209) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_209;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_209) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_210;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_210) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_210;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_210) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_211;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_211) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_48_211;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_48_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_211) & (memory_controller_waitrequest == 1'd0)) & (nv4CalcArbitration_0_30_reg == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_212;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_211) & (memory_controller_waitrequest == 1'd0)) & (nv4CalcArbitration_0_30_reg == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_245;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_212) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_212;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_212) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_213;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_213) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_213;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_213) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_214;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_214) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_214;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_214) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_215;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_215) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_215;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_215) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_216;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_216) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_216;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_216) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_217;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_217) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_217;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_217) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_218;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_218) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_218;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_218) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_219;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_219) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_219;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_219) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_220;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_220) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_220;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_220) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_221;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_221) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_221;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_221) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_222;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_222) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_222;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_222) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_223;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_223) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_223;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_223) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_224;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_224) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_224;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_224) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_225;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_225) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_225;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_225) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_226;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_226) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_226;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_226) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_227;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_227) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_227;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_227) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_228;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_228) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_228;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_228) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_229;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_229) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_229;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_229) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_230;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_230) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_230;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_230) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_231;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_231) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_231;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_231) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_232;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_232) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_232;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_232) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_233;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_233) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_233;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_233) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_234;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_234) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_234;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_234) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_235;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_235) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_235;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_235) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_236;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_236) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_236;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_236) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_237;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_237) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_237;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_237) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_238;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_238) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_238;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_238) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_239;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_239) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_239;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_239) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_240;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_240) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_240;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_240) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_241;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_241) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_241;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_241) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_242;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_242) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_242;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_242) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_243;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_243) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_243;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_243) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_244;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_244) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_59_244;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_59_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_244) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_310;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_245) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_245;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_245) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_246;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_246) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_246;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_246) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_247;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_247) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_247;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_247) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_248;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_248) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_248;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_248) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_249;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_249) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_249;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_249) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_250;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_250) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_250;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_250) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_251;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_251) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_251;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_251) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_252;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_252) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_252;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_252) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_253;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_253) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_253;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_253) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_254;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_254) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_254;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_254) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_255;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_255) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_255;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_255) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_256;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_256) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_256;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_256) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_257;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_257) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_257;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_257) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_258;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_258) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_258;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_258) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_259;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_259) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_259;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_259) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_260;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_260) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_260;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_260) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_261;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_261) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_261;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_261) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_262;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_262) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_262;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_262) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_263;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_263) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_263;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_263) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_264;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_264) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_264;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_264) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_265;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_265) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_265;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_265) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_266;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_266) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_266;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_266) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_267;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_267) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_267;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_267) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_268;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_268) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_268;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_268) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_269;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_269) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_269;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_269) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_270;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_270) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_270;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_270) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_271;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_271) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_271;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_271) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_272;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_272) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_272;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_272) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_273;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_273) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_273;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_273) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_274;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_274) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_274;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_274) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_275;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_275) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_275;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_275) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_276;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_276) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_276;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_276) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_277;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_277) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_277;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_277) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_278;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_278) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_278;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_278) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_279;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_279) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_279;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_279) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_280;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_280) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_280;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_280) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_281;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_281) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_281;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_281) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_282;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_282) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_282;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_282) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_283;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_283) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_283;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_283) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_284;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_284) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_284;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_284) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_285;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_285) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_285;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_285) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_286;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_286) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_286;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_286) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_287;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_287) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_287;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_287) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_288;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_288) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_288;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_288) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_289;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_289) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_289;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_289) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_290;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_290) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_290;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_290) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_291;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_291) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_291;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_291) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_292;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_292) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_292;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_292) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_293;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_293) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_293;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_293) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_294;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_294) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_294;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_294) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_295;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_295) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_295;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_295) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_296;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_296) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_296;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_296) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_297;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_297) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_297;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_297) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_298;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_298) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_298;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_298) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_299;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_299) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_299;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_299) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_300;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_300) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_300;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_300) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_301;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_301) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_301;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_301) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_302;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_302) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_302;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_302) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_303;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_303) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_303;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_303) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_304;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_304) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_304;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_304) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_305;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_305) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_305;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_305) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_306;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_306) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_306;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_306) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_307;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_307) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_307;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_307) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_308;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_308) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_308;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_308) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_309;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_309) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_62_309;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_62_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_309) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_310;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_310) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_310;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_310) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_311;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_311) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_311;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_311) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_312;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_312) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_312;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_312) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_313;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_313) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_313;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_313) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_314;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_314) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_314;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_314) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_315;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_315) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_315;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_315) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_316;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_316) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_316;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_316) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_317;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_317) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_317;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_317) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_318;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_318) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_318;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_318) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_319;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_319) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_319;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_319) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_320;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_320) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_320;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_320) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_321;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_321) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_321;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_321) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_322;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_322) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_322;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_322) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_323;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_323) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_323;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_323) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_324;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_324) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_324;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_324) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_325;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_325) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_325;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_325) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_326;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_326) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_326;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_326) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_327;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_327) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_327;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_327) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_328;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_328) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_328;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_328) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_329;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_329) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_329;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_329) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_330;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_330) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_330;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_330) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_331;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_331) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_331;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_331) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_332;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_332) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_332;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_332) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_333;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_333) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_333;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_333) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_334;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_334) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_334;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_334) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_335;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_335) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_335;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_335) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_336;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_336) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_336;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_336) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_337;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_337) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_337;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_337) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_338;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_338) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_338;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_338) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_339;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_339) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_339;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_339) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_340;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_340) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_340;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_340) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_341;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_341) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_341;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_341) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_342;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_342) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_65_342;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_65_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_342) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_344;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_70_343) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_70_343;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_70_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_70_343) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_344;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_344) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_344;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_344) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_345;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_345) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_345;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_345) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_346;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_346) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_346;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_346) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_347;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_347) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_347;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_347) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_348;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_348) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_348;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_348) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_349;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_349) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_349;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_349) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_350;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_350) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_350;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_350) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_351;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_351) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_351;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_351) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_352;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_352) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_352;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_352) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_353;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_353) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_353;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_353) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_354;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_354) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_354;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_354) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_355;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_355) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_355;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_355) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_356;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_356) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_356;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_356) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_357;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_357) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_357;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_357) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_358;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_358) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_358;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_358) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_359;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_359) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_359;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_359) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_360;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_360) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_360;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_360) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_361;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_361) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_361) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_361;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_361) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_361) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_362;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_362) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_362) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_362;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_362) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_362) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_363;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_363) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_363;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_363) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_364;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_364) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_364;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_364) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_365;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_365) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_365) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_365;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_365) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_365) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_366;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_366) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_366;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_366) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_367;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_367) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_367) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_367;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_367) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_367) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_368;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_368) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_368) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_368;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_368) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_368) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_369;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_369) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_369;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_369) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_370;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_370) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_370;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_370) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_371;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_371) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_371;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_371) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_372;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_372) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_372;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_372) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_373;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_373) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_373;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_373) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_374;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_374) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_374;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_374) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_375;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_375) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_375;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_375) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_376;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_376) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_376;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_376) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_377;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_377) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_377;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_377) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_378;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_378) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_378;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_378) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_379;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_379) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_379) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_379;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_379) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_379) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_380;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_380) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_380) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_380;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_380) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_380) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_381;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_381) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_381;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_381) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_382;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_382) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_382;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_382) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_383;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_383) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_383) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_383;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_383) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_383) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_384;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_384) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_384;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_384) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_385;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_385) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_385) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_385;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_385) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_385) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_386;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_386) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_386;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_386) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_387;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_387) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_387) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_387;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_387) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_387) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_388;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_388) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_388;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_388) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_389;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_389) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_389) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_389;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_389) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_389) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_390;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_390) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_390;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_390) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_391;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_391) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_391) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_391;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_391) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_391) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_392;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_392) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_392) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_392;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_392) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_392) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_393;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_393) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_393) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_393;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_393) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_393) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_394;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_394) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_394;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_394) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_395;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_395) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_395;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_395) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_396;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_396) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_396;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_396) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_397;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_397) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_397) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_397;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_397) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_397) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_398;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_398) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_398) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_398;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_398) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_398) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_399;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_399) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_399;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_399) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_400;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_400) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_400;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_400) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_401;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_401) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_401) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_401;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_401) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_401) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_402;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_402) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_402) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_402;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_402) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_402) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_403;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_403) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_403) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_403;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_403) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_403) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_404;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_404) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_404) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_404;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_404) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_404) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_405;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_405) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_405) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_405;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_405) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_405) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_406;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_406) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_406) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_406;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_406) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_406) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_407;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_407) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_407) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_407;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_407) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_407) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_408;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_408) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_408) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_408;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_408) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_408) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_409;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_409) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_409) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_409;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_409) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_409) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_410;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_410) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_410) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_410;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_410) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_410) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_411;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_411) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_411) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_411;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_411) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_411) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_412;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_412) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_412) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_412;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_412) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_412) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_413;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_413) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_413) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_413;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_413) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_413) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_414;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_414) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_414) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_414;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_414) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_414) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_415;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_415) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_415) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_415;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_415) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_415) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_416;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_416) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_416) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_416;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_416) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_416) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_417;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_417) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_417) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_417;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_417) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_417) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_418;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_418) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_418) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_418;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_418) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_418) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_419;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_419) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_419) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_419;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_419) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_419) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_420;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_420) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_420) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_420;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_420) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_420) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_421;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_421) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_421) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_421;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_421) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_421) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_422;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_422) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_422) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_422;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_422) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_422) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_423;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_423) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_423) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_423;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_423) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_423) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_424;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_424) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_424) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_424;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_424) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_424) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_425;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_425) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_425) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_425;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_425) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_425) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_426;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_426) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_426) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_426;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_426) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_426) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_427;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_427) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_427) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_427;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_427) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_427) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_428;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_428) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_428) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_428;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_428) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_428) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_429;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_429) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_429) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_429;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_429) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_429) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_430;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_430) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_430) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_430;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_430) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_430) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_431;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_431) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_431) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_431;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_431) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_431) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_432;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_432) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_432) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_432;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_432) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_432) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_433;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_433) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_433) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_433;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_433) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_433) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_434;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_434) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_434) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_434;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_434) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_434) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_435;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_435) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_435) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_435;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_435) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_435) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_436;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_436) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_436) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_436;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_436) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_436) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_437;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_437) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_437) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_437;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_437) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_437) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_438;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_438) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_438) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_438;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_438) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_438) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_439;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_439) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_439) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_439;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_439) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_439) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_440;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_440) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_440) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_440;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_440) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_440) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_441;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_441) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_441) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_441;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_441) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_441) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_442;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_442) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_442) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_442;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_442) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_442) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_443;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_443) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_443) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_74_443;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_74_443) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_443) & (memory_controller_waitrequest == 1'd0)) & (nv4CalcArbitration_74_or_cond == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_82_444;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_82_444) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_443) & (memory_controller_waitrequest == 1'd0)) & (nv4CalcArbitration_74_or_cond == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_84_445;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_84_445) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_82_444) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_82_444;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_82_444) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_82_444) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_95_451;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_95_451) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_84_445) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_84_445;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_84_445) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv4CalcArbitration_BB_84_445) & (memory_controller_waitrequest == 1'd0)) & (nv4CalcArbitration_0_24_reg == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_85_446;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_85_446) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv4CalcArbitration_BB_84_445) & (memory_controller_waitrequest == 1'd0)) & (nv4CalcArbitration_0_24_reg == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_90_448;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_90_448) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_85_446) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_85_446;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_85_446) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv4CalcArbitration_BB_85_446) & (memory_controller_waitrequest == 1'd0)) & (nv4CalcArbitration_85_or_cond2 == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_88_447;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_88_447) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv4CalcArbitration_BB_85_446) & (memory_controller_waitrequest == 1'd0)) & (nv4CalcArbitration_85_or_cond2 == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB__thread_450;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB__thread_450) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_88_447) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_88_447;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_88_447) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_88_447) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_95_451;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_95_451) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_90_448) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_90_448;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_90_448) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv4CalcArbitration_BB_90_448) & (memory_controller_waitrequest == 1'd0)) & (nv4CalcArbitration_90_91 == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_92_449;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_92_449) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv4CalcArbitration_BB_90_448) & (memory_controller_waitrequest == 1'd0)) & (nv4CalcArbitration_90_91 == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB__thread_450;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB__thread_450) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_92_449) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_92_449;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_92_449) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_92_449) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_95_451;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_95_451) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB__thread_450) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB__thread_450;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB__thread_450) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB__thread_450) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB__loopexit_453;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB__loopexit_453) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_95_451) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_95_451;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_95_451) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv4CalcArbitration_BB_95_451) & (memory_controller_waitrequest == 1'd0)) & (nv4CalcArbitration_95_97 == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB__loopexit_loopexit_452;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB__loopexit_loopexit_452) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv4CalcArbitration_BB_95_451) & (memory_controller_waitrequest == 1'd0)) & (nv4CalcArbitration_95_97 == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB_38_42;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB_38_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_loopexit_452) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB__loopexit_loopexit_452;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB__loopexit_loopexit_452) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_loopexit_452) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB__loopexit_453;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB__loopexit_453) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_453) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB__loopexit_453;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB__loopexit_453) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_453) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB__loopexit_454;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB__loopexit_454) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_454) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB__loopexit_454;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB__loopexit_454) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_454) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB__loopexit_455;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB__loopexit_455) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_455) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB__loopexit_455;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB__loopexit_455) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_455) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB__loopexit_456;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB__loopexit_456) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_456) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv4CalcArbitration_BB__loopexit_456;
if (reset == 1'b0 && ^(LEGUP_F_nv4CalcArbitration_BB__loopexit_456) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_456) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 9'd0;
if (reset == 1'b0 && ^(9'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_6__* %fifo, i32 0, i32 0*/
begin
nv4CalcArbitration_0_1 = arg_fifo;
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_6__* %fifo, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_1))
begin
nv4CalcArbitration_0_1_reg <= nv4CalcArbitration_0_1;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_1_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %2 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 0*/
begin
nv4CalcArbitration_0_2 = arg_arb;
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %2 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_1))
begin
nv4CalcArbitration_0_2_reg <= nv4CalcArbitration_0_2;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_2_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
begin
nv4CalcArbitration_0_3 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_4))
begin
nv4CalcArbitration_0_3_reg <= nv4CalcArbitration_0_3;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_3_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %4 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 1*/
begin
nv4CalcArbitration_0_4 = (arg_arb + 4);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %4 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 1*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_1))
begin
nv4CalcArbitration_0_4_reg <= nv4CalcArbitration_0_4;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_4_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
begin
nv4CalcArbitration_0_5 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_5))
begin
nv4CalcArbitration_0_5_reg <= nv4CalcArbitration_0_5;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_5_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %6 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 2*/
begin
nv4CalcArbitration_0_6 = (arg_arb + 8);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %6 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 2*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_1))
begin
nv4CalcArbitration_0_6_reg <= nv4CalcArbitration_0_6;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_6_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
begin
nv4CalcArbitration_0_7 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_6))
begin
nv4CalcArbitration_0_7_reg <= nv4CalcArbitration_0_7;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_7_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %8 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 3*/
begin
nv4CalcArbitration_0_8 = (arg_arb + 12);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %8 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 3*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_1))
begin
nv4CalcArbitration_0_8_reg <= nv4CalcArbitration_0_8;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_8_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
begin
nv4CalcArbitration_0_9 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_4))
begin
nv4CalcArbitration_0_9_reg <= nv4CalcArbitration_0_9;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_9_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %10 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 4*/
begin
nv4CalcArbitration_0_10 = (arg_arb + 16);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %10 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_1))
begin
nv4CalcArbitration_0_10_reg <= nv4CalcArbitration_0_10;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_10_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
begin
nv4CalcArbitration_0_11 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_7))
begin
nv4CalcArbitration_0_11_reg <= nv4CalcArbitration_0_11;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_11_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %12 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 5*/
begin
nv4CalcArbitration_0_12 = (arg_arb + 20);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %12 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 5*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_1))
begin
nv4CalcArbitration_0_12_reg <= nv4CalcArbitration_0_12;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_12_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
begin
nv4CalcArbitration_0_13 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_6))
begin
nv4CalcArbitration_0_13_reg <= nv4CalcArbitration_0_13;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_13_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %14 = ashr i32 %13, 6*/
begin
nv4CalcArbitration_0_14 = ($signed(nv4CalcArbitration_0_13) >>> 32'd6);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %14 = ashr i32 %13, 6*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_6))
begin
nv4CalcArbitration_0_14_reg <= nv4CalcArbitration_0_14;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_14_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %15 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 6*/
begin
nv4CalcArbitration_0_15 = (arg_arb + 24);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %15 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 6*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_1))
begin
nv4CalcArbitration_0_15_reg <= nv4CalcArbitration_0_15;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_15_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %16 = load i32* %15, align 4, !tbaa !0*/
begin
nv4CalcArbitration_0_16 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %16 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_7))
begin
nv4CalcArbitration_0_16_reg <= nv4CalcArbitration_0_16;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_16_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %17 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 7*/
begin
nv4CalcArbitration_0_17 = (arg_arb + 28);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %17 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 7*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_1))
begin
nv4CalcArbitration_0_17_reg <= nv4CalcArbitration_0_17;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_17_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %18 = load i32* %17, align 4, !tbaa !0*/
begin
nv4CalcArbitration_0_18 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %18 = load i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_5))
begin
nv4CalcArbitration_0_18_reg <= nv4CalcArbitration_0_18;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_18_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %19 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 8*/
begin
nv4CalcArbitration_0_19 = (arg_arb + 32);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %19 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 8*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_1))
begin
nv4CalcArbitration_0_19_reg <= nv4CalcArbitration_0_19;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_19_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
begin
nv4CalcArbitration_0_20 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_8))
begin
nv4CalcArbitration_0_20_reg <= nv4CalcArbitration_0_20;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_20_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %21 = icmp eq i32 %20, 0*/
begin
nv4CalcArbitration_0_21 = (nv4CalcArbitration_0_20 == 32'd0);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %21 = icmp eq i32 %20, 0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_8))
begin
nv4CalcArbitration_0_21_reg <= nv4CalcArbitration_0_21;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_21_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %..v = select i1 %21, i32 13, i32 17*/
begin
nv4CalcArbitration_0___v = (nv4CalcArbitration_0_21 ? 32'd13 : 32'd17);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %..v = select i1 %21, i32 13, i32 17*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_8))
begin
nv4CalcArbitration_0___v_reg <= nv4CalcArbitration_0___v;
if (reset == 1'b0 && ^(nv4CalcArbitration_0___v) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0___v_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %. = add i32 %..v, %11*/
begin
nv4CalcArbitration_0__ = (nv4CalcArbitration_0___v + nv4CalcArbitration_0_11_reg);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %. = add i32 %..v, %11*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_8))
begin
nv4CalcArbitration_0___reg <= nv4CalcArbitration_0__;
if (reset == 1'b0 && ^(nv4CalcArbitration_0__) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0___reg"); $finish; end
end
end
always @(*) begin
nv4CalcArbitration_0_22 = nv4CalcArbitration_signed_divide_32_0;
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %22 = sdiv i32 10000000, %7*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_38))
begin
nv4CalcArbitration_0_22_reg <= nv4CalcArbitration_0_22;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_22_reg"); $finish; end
end
/* nv4CalcArbitration: %0*/
/*   %22 = sdiv i32 10000000, %7*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_38))
begin
nv4CalcArbitration_0_22_reg <= nv4CalcArbitration_0_22;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_22_reg"); $finish; end
end
end
always @(*) begin
nv4CalcArbitration_0_23 = nv4CalcArbitration_signed_divide_32_0;
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %23 = sdiv i32 10000000, %3*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_39))
begin
nv4CalcArbitration_0_23_reg <= nv4CalcArbitration_0_23;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_23_reg"); $finish; end
end
/* nv4CalcArbitration: %0*/
/*   %23 = sdiv i32 10000000, %3*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_39))
begin
nv4CalcArbitration_0_23_reg <= nv4CalcArbitration_0_23;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_23_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %24 = icmp ne i32 %16, 0*/
begin
nv4CalcArbitration_0_24 = (nv4CalcArbitration_0_16 != 32'd0);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %24 = icmp ne i32 %16, 0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_7))
begin
nv4CalcArbitration_0_24_reg <= nv4CalcArbitration_0_24;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_24_reg"); $finish; end
end
end
always @(*) begin
nv4CalcArbitration_0_25 = nv4CalcArbitration_0_25_stage0_reg;
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %25 = mul nsw i32 %18, %3*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_6))
begin
nv4CalcArbitration_0_25_reg <= nv4CalcArbitration_0_25;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_25_reg"); $finish; end
end
/* nv4CalcArbitration: %0*/
/*   %25 = mul nsw i32 %18, %3*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_6))
begin
nv4CalcArbitration_0_25_reg <= nv4CalcArbitration_0_25;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_25_reg"); $finish; end
end
end
always @(*) begin
nv4CalcArbitration_0_26 = nv4CalcArbitration_signed_divide_32_0;
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %26 = sdiv i32 %25, 8*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_40))
begin
nv4CalcArbitration_0_26_reg <= nv4CalcArbitration_0_26;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_26_reg"); $finish; end
end
/* nv4CalcArbitration: %0*/
/*   %26 = sdiv i32 %25, 8*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_40))
begin
nv4CalcArbitration_0_26_reg <= nv4CalcArbitration_0_26;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_26_reg"); $finish; end
end
end
always @(*) begin
nv4CalcArbitration_0_27 = nv4CalcArbitration_0_27_stage0_reg;
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %27 = mul i32 %9, 3000000*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_5))
begin
nv4CalcArbitration_0_27_reg <= nv4CalcArbitration_0_27;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_27_reg"); $finish; end
end
/* nv4CalcArbitration: %0*/
/*   %27 = mul i32 %9, 3000000*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_5))
begin
nv4CalcArbitration_0_27_reg <= nv4CalcArbitration_0_27;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_27_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %28 = shl nsw i32 %7, 1*/
begin
nv4CalcArbitration_0_28 = (nv4CalcArbitration_0_7 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %28 = shl nsw i32 %7, 1*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_6))
begin
nv4CalcArbitration_0_28_reg <= nv4CalcArbitration_0_28;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_28_reg"); $finish; end
end
end
always @(*) begin
nv4CalcArbitration_0_29 = nv4CalcArbitration_0_29_stage0_reg;
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %29 = mul nsw i32 %14, %5*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_7))
begin
nv4CalcArbitration_0_29_reg <= nv4CalcArbitration_0_29;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_29_reg"); $finish; end
end
/* nv4CalcArbitration: %0*/
/*   %29 = mul nsw i32 %14, %5*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_7))
begin
nv4CalcArbitration_0_29_reg <= nv4CalcArbitration_0_29;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_29_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %30 = icmp sgt i32 %28, %29*/
begin
nv4CalcArbitration_0_30 = ($signed(nv4CalcArbitration_0_28_reg) > $signed(nv4CalcArbitration_0_29));
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %30 = icmp sgt i32 %28, %29*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_7))
begin
nv4CalcArbitration_0_30_reg <= nv4CalcArbitration_0_30;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_30_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %31 = shl i32 %3, 1*/
begin
nv4CalcArbitration_0_31 = (nv4CalcArbitration_0_3 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %31 = shl i32 %3, 1*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_4))
begin
nv4CalcArbitration_0_31_reg <= nv4CalcArbitration_0_31;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_31_reg"); $finish; end
end
end
always @(*) begin
nv4CalcArbitration_0_32 = nv4CalcArbitration_0_32_stage0_reg;
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %32 = mul i32 %9, 2000000*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_5))
begin
nv4CalcArbitration_0_32_reg <= nv4CalcArbitration_0_32;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_32_reg"); $finish; end
end
/* nv4CalcArbitration: %0*/
/*   %32 = mul i32 %9, 2000000*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_5))
begin
nv4CalcArbitration_0_32_reg <= nv4CalcArbitration_0_32;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_32_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %33 = ashr i32 %13, 3*/
begin
nv4CalcArbitration_0_33 = ($signed(nv4CalcArbitration_0_13) >>> 32'd3);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %33 = ashr i32 %13, 3*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_6))
begin
nv4CalcArbitration_0_33_reg <= nv4CalcArbitration_0_33;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_33_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %34 = and i32 %33, -8*/
begin
nv4CalcArbitration_0_34 = (nv4CalcArbitration_0_33 & -32'd8);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %34 = and i32 %33, -8*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_6))
begin
nv4CalcArbitration_0_34_reg <= nv4CalcArbitration_0_34;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_34_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %35 = getelementptr inbounds %struct.TYPE_6__* %fifo, i32 0, i32 1*/
begin
nv4CalcArbitration_0_35 = (arg_fifo + 4);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %35 = getelementptr inbounds %struct.TYPE_6__* %fifo, i32 0, i32 1*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_1))
begin
nv4CalcArbitration_0_35_reg <= nv4CalcArbitration_0_35;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_35_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %36 = getelementptr inbounds %struct.TYPE_6__* %fifo, i32 0, i32 3*/
begin
nv4CalcArbitration_0_36 = (arg_fifo + 12);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %36 = getelementptr inbounds %struct.TYPE_6__* %fifo, i32 0, i32 3*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_1))
begin
nv4CalcArbitration_0_36_reg <= nv4CalcArbitration_0_36;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_36_reg"); $finish; end
end
end
always @(*) begin
nv4CalcArbitration_0_37 = nv4CalcArbitration_signed_divide_32_0;
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %37 = sdiv i32 %27, %5*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_41))
begin
nv4CalcArbitration_0_37_reg <= nv4CalcArbitration_0_37;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_37_reg"); $finish; end
end
/* nv4CalcArbitration: %0*/
/*   %37 = sdiv i32 %27, %5*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_41))
begin
nv4CalcArbitration_0_37_reg <= nv4CalcArbitration_0_37;
if (reset == 1'b0 && ^(nv4CalcArbitration_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_0_37_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %38*/
/*   %vlwm.05 = phi i32 [ 0, %0 ], [ %vlwm.2, %95 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_41) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_38_vlwm_05 = 32'd0;
end
/* nv4CalcArbitration: %38*/
/*   %vlwm.05 = phi i32 [ 0, %0 ], [ %vlwm.2, %95 ]*/
else /* if ((((cur_state == LEGUP_F_nv4CalcArbitration_BB_95_451) & (memory_controller_waitrequest == 1'd0)) & (nv4CalcArbitration_95_97 == 1'd0))) */
begin
nv4CalcArbitration_38_vlwm_05 = nv4CalcArbitration_95_vlwm_2;
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %38*/
/*   %vlwm.05 = phi i32 [ 0, %0 ], [ %vlwm.2, %95 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_41) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_38_vlwm_05_reg <= nv4CalcArbitration_38_vlwm_05;
if (reset == 1'b0 && ^(nv4CalcArbitration_38_vlwm_05) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_38_vlwm_05_reg"); $finish; end
end
/* nv4CalcArbitration: %38*/
/*   %vlwm.05 = phi i32 [ 0, %0 ], [ %vlwm.2, %95 ]*/
if ((((cur_state == LEGUP_F_nv4CalcArbitration_BB_95_451) & (memory_controller_waitrequest == 1'd0)) & (nv4CalcArbitration_95_97 == 1'd0)))
begin
nv4CalcArbitration_38_vlwm_05_reg <= nv4CalcArbitration_38_vlwm_05;
if (reset == 1'b0 && ^(nv4CalcArbitration_38_vlwm_05) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_38_vlwm_05_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %38*/
/*   %mclk_extra.04 = phi i32 [ 3, %0 ], [ %mclk_extra.1, %95 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_41) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_38_mclk_extra_04 = 32'd3;
end
/* nv4CalcArbitration: %38*/
/*   %mclk_extra.04 = phi i32 [ 3, %0 ], [ %mclk_extra.1, %95 ]*/
else /* if ((((cur_state == LEGUP_F_nv4CalcArbitration_BB_95_451) & (memory_controller_waitrequest == 1'd0)) & (nv4CalcArbitration_95_97 == 1'd0))) */
begin
nv4CalcArbitration_38_mclk_extra_04 = nv4CalcArbitration_95_mclk_extra_1;
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %38*/
/*   %mclk_extra.04 = phi i32 [ 3, %0 ], [ %mclk_extra.1, %95 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_41) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_38_mclk_extra_04_reg <= nv4CalcArbitration_38_mclk_extra_04;
if (reset == 1'b0 && ^(nv4CalcArbitration_38_mclk_extra_04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_38_mclk_extra_04_reg"); $finish; end
end
/* nv4CalcArbitration: %38*/
/*   %mclk_extra.04 = phi i32 [ 3, %0 ], [ %mclk_extra.1, %95 ]*/
if ((((cur_state == LEGUP_F_nv4CalcArbitration_BB_95_451) & (memory_controller_waitrequest == 1'd0)) & (nv4CalcArbitration_95_97 == 1'd0)))
begin
nv4CalcArbitration_38_mclk_extra_04_reg <= nv4CalcArbitration_38_mclk_extra_04;
if (reset == 1'b0 && ^(nv4CalcArbitration_38_mclk_extra_04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_38_mclk_extra_04_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %38*/
/*   %vbs.03 = phi i32 [ 0, %0 ], [ %vbs.3, %95 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_41) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_38_vbs_03 = 32'd0;
end
/* nv4CalcArbitration: %38*/
/*   %vbs.03 = phi i32 [ 0, %0 ], [ %vbs.3, %95 ]*/
else /* if ((((cur_state == LEGUP_F_nv4CalcArbitration_BB_95_451) & (memory_controller_waitrequest == 1'd0)) & (nv4CalcArbitration_95_97 == 1'd0))) */
begin
nv4CalcArbitration_38_vbs_03 = nv4CalcArbitration_74_vbs_3_reg;
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %38*/
/*   %vbs.03 = phi i32 [ 0, %0 ], [ %vbs.3, %95 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_41) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_38_vbs_03_reg <= nv4CalcArbitration_38_vbs_03;
if (reset == 1'b0 && ^(nv4CalcArbitration_38_vbs_03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_38_vbs_03_reg"); $finish; end
end
/* nv4CalcArbitration: %38*/
/*   %vbs.03 = phi i32 [ 0, %0 ], [ %vbs.3, %95 ]*/
if ((((cur_state == LEGUP_F_nv4CalcArbitration_BB_95_451) & (memory_controller_waitrequest == 1'd0)) & (nv4CalcArbitration_95_97 == 1'd0)))
begin
nv4CalcArbitration_38_vbs_03_reg <= nv4CalcArbitration_38_vbs_03;
if (reset == 1'b0 && ^(nv4CalcArbitration_38_vbs_03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_38_vbs_03_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %38*/
/*   %39 = add i32 %., %mclk_extra.04*/
begin
nv4CalcArbitration_38_39 = (nv4CalcArbitration_0___reg + nv4CalcArbitration_38_mclk_extra_04_reg);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %38*/
/*   %39 = add i32 %., %mclk_extra.04*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_42))
begin
nv4CalcArbitration_38_39_reg <= nv4CalcArbitration_38_39;
if (reset == 1'b0 && ^(nv4CalcArbitration_38_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_38_39_reg"); $finish; end
end
end
always @(*) begin
nv4CalcArbitration_38_40 = nv4CalcArbitration_38_40_stage0_reg;
end
always @(posedge clk) begin
/* nv4CalcArbitration: %38*/
/*   %40 = mul i32 %39, 1000000*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_43))
begin
nv4CalcArbitration_38_40_reg <= nv4CalcArbitration_38_40;
if (reset == 1'b0 && ^(nv4CalcArbitration_38_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_38_40_reg"); $finish; end
end
/* nv4CalcArbitration: %38*/
/*   %40 = mul i32 %39, 1000000*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_43))
begin
nv4CalcArbitration_38_40_reg <= nv4CalcArbitration_38_40;
if (reset == 1'b0 && ^(nv4CalcArbitration_38_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_38_40_reg"); $finish; end
end
end
always @(*) begin
nv4CalcArbitration_38_41 = nv4CalcArbitration_signed_divide_32_0;
end
always @(posedge clk) begin
/* nv4CalcArbitration: %38*/
/*   %41 = sdiv i32 %40, %5*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_75))
begin
nv4CalcArbitration_38_41_reg <= nv4CalcArbitration_38_41;
if (reset == 1'b0 && ^(nv4CalcArbitration_38_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_38_41_reg"); $finish; end
end
/* nv4CalcArbitration: %38*/
/*   %41 = sdiv i32 %40, %5*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_75))
begin
nv4CalcArbitration_38_41_reg <= nv4CalcArbitration_38_41;
if (reset == 1'b0 && ^(nv4CalcArbitration_38_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_38_41_reg"); $finish; end
end
/* nv4CalcArbitration: %62*/
/*   %63 = sdiv i32 %58, %34*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_277))
begin
nv4CalcArbitration_38_41_reg <= nv4CalcArbitration_62_63;
if (reset == 1'b0 && ^(nv4CalcArbitration_62_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_38_41_reg"); $finish; end
end
/* nv4CalcArbitration: %74*/
/*   %77 = sdiv i32 %76, %5*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_410))
begin
nv4CalcArbitration_38_41_reg <= nv4CalcArbitration_74_77;
if (reset == 1'b0 && ^(nv4CalcArbitration_74_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_38_41_reg"); $finish; end
end
end
always @(*) begin
nv4CalcArbitration_43_44 = nv4CalcArbitration_signed_divide_32_0;
end
always @(*) begin
/* nv4CalcArbitration: %43*/
/*   %44 = sdiv i32 8000000, %7*/
nv4CalcArbitration_43_44_reg = nv4CalcArbitration_48_54_reg;
end
always @(*) begin
nv4CalcArbitration_45_46 = nv4CalcArbitration_signed_divide_32_0;
end
always @(posedge clk) begin
/* nv4CalcArbitration: %45*/
/*   %46 = sdiv i32 128000000, %34*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_142))
begin
nv4CalcArbitration_45_46_reg <= nv4CalcArbitration_45_46;
if (reset == 1'b0 && ^(nv4CalcArbitration_45_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_45_46_reg"); $finish; end
end
/* nv4CalcArbitration: %45*/
/*   %46 = sdiv i32 128000000, %34*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_142))
begin
nv4CalcArbitration_45_46_reg <= nv4CalcArbitration_45_46;
if (reset == 1'b0 && ^(nv4CalcArbitration_45_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_45_46_reg"); $finish; end
end
end
always @(*) begin
nv4CalcArbitration_45_47 = nv4CalcArbitration_signed_divide_32_0;
end
always @(posedge clk) begin
/* nv4CalcArbitration: %45*/
/*   %47 = sdiv i32 %46, %5*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_174))
begin
nv4CalcArbitration_45_47_reg <= nv4CalcArbitration_45_47;
if (reset == 1'b0 && ^(nv4CalcArbitration_45_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_45_47_reg"); $finish; end
end
/* nv4CalcArbitration: %45*/
/*   %47 = sdiv i32 %46, %5*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_174))
begin
nv4CalcArbitration_45_47_reg <= nv4CalcArbitration_45_47;
if (reset == 1'b0 && ^(nv4CalcArbitration_45_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_45_47_reg"); $finish; end
end
/* nv4CalcArbitration: %62*/
/*   %64 = sdiv i32 %63, %5*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_309))
begin
nv4CalcArbitration_45_47_reg <= nv4CalcArbitration_62_64;
if (reset == 1'b0 && ^(nv4CalcArbitration_62_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_45_47_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %48*/
/*   %video_fill_us.0 = phi i32 [ %44, %43 ], [ %47, %45 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_109) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_48_video_fill_us_0 = nv4CalcArbitration_43_44;
end
/* nv4CalcArbitration: %48*/
/*   %video_fill_us.0 = phi i32 [ %44, %43 ], [ %47, %45 ]*/
else /* if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_174) & (memory_controller_waitrequest == 1'd0))) */
begin
nv4CalcArbitration_48_video_fill_us_0 = nv4CalcArbitration_45_47;
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %48*/
/*   %video_fill_us.0 = phi i32 [ %44, %43 ], [ %47, %45 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_109) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_48_video_fill_us_0_reg <= nv4CalcArbitration_48_video_fill_us_0;
if (reset == 1'b0 && ^(nv4CalcArbitration_48_video_fill_us_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_48_video_fill_us_0_reg"); $finish; end
end
/* nv4CalcArbitration: %48*/
/*   %video_fill_us.0 = phi i32 [ %44, %43 ], [ %47, %45 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_174) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_48_video_fill_us_0_reg <= nv4CalcArbitration_48_video_fill_us_0;
if (reset == 1'b0 && ^(nv4CalcArbitration_48_video_fill_us_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_48_video_fill_us_0_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %48*/
/*   %49 = add i32 %22, %41*/
begin
nv4CalcArbitration_48_49 = (nv4CalcArbitration_0_22_reg + nv4CalcArbitration_38_41_reg);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %48*/
/*   %49 = add i32 %22, %41*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_175))
begin
nv4CalcArbitration_48_49_reg <= nv4CalcArbitration_48_49;
if (reset == 1'b0 && ^(nv4CalcArbitration_48_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_48_49_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %48*/
/*   %50 = add i32 %49, %23*/
begin
nv4CalcArbitration_48_50 = (nv4CalcArbitration_48_49 + nv4CalcArbitration_0_23_reg);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %48*/
/*   %50 = add i32 %49, %23*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_175))
begin
nv4CalcArbitration_48_50_reg <= nv4CalcArbitration_48_50;
if (reset == 1'b0 && ^(nv4CalcArbitration_48_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_48_50_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %48*/
/*   %51 = add i32 %50, %37*/
begin
nv4CalcArbitration_48_51 = (nv4CalcArbitration_48_50 + nv4CalcArbitration_0_37_reg);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %48*/
/*   %51 = add i32 %50, %37*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_175))
begin
nv4CalcArbitration_48_51_reg <= nv4CalcArbitration_48_51;
if (reset == 1'b0 && ^(nv4CalcArbitration_48_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_48_51_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %48*/
/*   %52 = add i32 %51, %video_fill_us.0*/
begin
nv4CalcArbitration_48_52 = (nv4CalcArbitration_48_51_reg + nv4CalcArbitration_48_video_fill_us_0_reg);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %48*/
/*   %52 = add i32 %51, %video_fill_us.0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_176))
begin
nv4CalcArbitration_48_52_reg <= nv4CalcArbitration_48_52;
if (reset == 1'b0 && ^(nv4CalcArbitration_48_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_48_52_reg"); $finish; end
end
end
always @(*) begin
nv4CalcArbitration_48_53 = nv4CalcArbitration_48_53_stage0_reg;
end
always @(posedge clk) begin
/* nv4CalcArbitration: %48*/
/*   %53 = mul i32 %31, %52*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_177))
begin
nv4CalcArbitration_48_53_reg <= nv4CalcArbitration_48_53;
if (reset == 1'b0 && ^(nv4CalcArbitration_48_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_48_53_reg"); $finish; end
end
/* nv4CalcArbitration: %48*/
/*   %53 = mul i32 %31, %52*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_177))
begin
nv4CalcArbitration_48_53_reg <= nv4CalcArbitration_48_53;
if (reset == 1'b0 && ^(nv4CalcArbitration_48_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_48_53_reg"); $finish; end
end
end
always @(*) begin
nv4CalcArbitration_48_54 = nv4CalcArbitration_signed_divide_32_0;
end
always @(posedge clk) begin
/* nv4CalcArbitration: %48*/
/*   %54 = sdiv i32 %53, 1000000*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_209))
begin
nv4CalcArbitration_48_54_reg <= nv4CalcArbitration_48_54;
if (reset == 1'b0 && ^(nv4CalcArbitration_48_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_48_54_reg"); $finish; end
end
/* nv4CalcArbitration: %48*/
/*   %54 = sdiv i32 %53, 1000000*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_209))
begin
nv4CalcArbitration_48_54_reg <= nv4CalcArbitration_48_54;
if (reset == 1'b0 && ^(nv4CalcArbitration_48_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_48_54_reg"); $finish; end
end
/* nv4CalcArbitration: %59*/
/*   %61 = sdiv i32 %60, %7*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_244))
begin
nv4CalcArbitration_48_54_reg <= nv4CalcArbitration_59_61;
if (reset == 1'b0 && ^(nv4CalcArbitration_59_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_48_54_reg"); $finish; end
end
/* nv4CalcArbitration: %43*/
/*   %44 = sdiv i32 8000000, %7*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_109))
begin
nv4CalcArbitration_48_54_reg <= nv4CalcArbitration_43_44;
if (reset == 1'b0 && ^(nv4CalcArbitration_43_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_48_54_reg"); $finish; end
end
/* nv4CalcArbitration: %65*/
/*   %66 = sdiv i32 %32, %5*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_342))
begin
nv4CalcArbitration_48_54_reg <= nv4CalcArbitration_65_66;
if (reset == 1'b0 && ^(nv4CalcArbitration_65_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_48_54_reg"); $finish; end
end
/* nv4CalcArbitration: %74*/
/*   %clwm.0.in = sdiv i32 %clwm.0.in.in, 1000000*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_377))
begin
nv4CalcArbitration_48_54_reg <= nv4CalcArbitration_74_clwm_0_in;
if (reset == 1'b0 && ^(nv4CalcArbitration_74_clwm_0_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_48_54_reg"); $finish; end
end
/* nv4CalcArbitration: %74*/
/*   %79 = sdiv i32 %78, 8*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_443))
begin
nv4CalcArbitration_48_54_reg <= nv4CalcArbitration_74_79;
if (reset == 1'b0 && ^(nv4CalcArbitration_74_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_48_54_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %48*/
/*   %55 = add nsw i32 %54, 1*/
begin
nv4CalcArbitration_48_55 = (nv4CalcArbitration_48_54 + 32'd1);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %48*/
/*   %55 = add nsw i32 %54, 1*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_209))
begin
nv4CalcArbitration_48_55_reg <= nv4CalcArbitration_48_55;
if (reset == 1'b0 && ^(nv4CalcArbitration_48_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_48_55_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %48*/
/*   %56 = icmp sgt i32 %55, 128*/
begin
nv4CalcArbitration_48_56 = ($signed(nv4CalcArbitration_48_55) > $signed(32'd128));
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %48*/
/*   %56 = icmp sgt i32 %55, 128*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_209))
begin
nv4CalcArbitration_48_56_reg <= nv4CalcArbitration_48_56;
if (reset == 1'b0 && ^(nv4CalcArbitration_48_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_48_56_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %48*/
/*   %vbs.1 = select i1 %56, i32 64, i32 128*/
begin
nv4CalcArbitration_48_vbs_1 = (nv4CalcArbitration_48_56 ? 32'd64 : 32'd128);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %48*/
/*   %vbs.1 = select i1 %56, i32 64, i32 128*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_209))
begin
nv4CalcArbitration_48_vbs_1_reg <= nv4CalcArbitration_48_vbs_1;
if (reset == 1'b0 && ^(nv4CalcArbitration_48_vbs_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_48_vbs_1_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %48*/
/*   %57 = icmp sgt i32 %55, 192*/
begin
nv4CalcArbitration_48_57 = ($signed(nv4CalcArbitration_48_55) > $signed(32'd192));
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %48*/
/*   %57 = icmp sgt i32 %55, 192*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_209))
begin
nv4CalcArbitration_48_57_reg <= nv4CalcArbitration_48_57;
if (reset == 1'b0 && ^(nv4CalcArbitration_48_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_48_57_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %48*/
/*   %vbs.2 = select i1 %57, i32 32, i32 %vbs.1*/
begin
nv4CalcArbitration_48_vbs_2 = (nv4CalcArbitration_48_57_reg ? 32'd32 : nv4CalcArbitration_48_vbs_1_reg);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %48*/
/*   %vbs.2 = select i1 %57, i32 32, i32 %vbs.1*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_210))
begin
nv4CalcArbitration_48_vbs_2_reg <= nv4CalcArbitration_48_vbs_2;
if (reset == 1'b0 && ^(nv4CalcArbitration_48_vbs_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_48_vbs_2_reg"); $finish; end
end
end
always @(*) begin
nv4CalcArbitration_48_58 = nv4CalcArbitration_48_58_stage0_reg;
end
always @(posedge clk) begin
/* nv4CalcArbitration: %48*/
/*   %58 = mul i32 %vbs.2, 1000000*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_211))
begin
nv4CalcArbitration_48_58_reg <= nv4CalcArbitration_48_58;
if (reset == 1'b0 && ^(nv4CalcArbitration_48_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_48_58_reg"); $finish; end
end
/* nv4CalcArbitration: %48*/
/*   %58 = mul i32 %vbs.2, 1000000*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_211))
begin
nv4CalcArbitration_48_58_reg <= nv4CalcArbitration_48_58;
if (reset == 1'b0 && ^(nv4CalcArbitration_48_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_48_58_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %59*/
/*   %60 = lshr exact i32 %58, 4*/
begin
nv4CalcArbitration_59_60 = (nv4CalcArbitration_48_58_reg >>> (32'd4 % 32));
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %59*/
/*   %60 = lshr exact i32 %58, 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_212))
begin
nv4CalcArbitration_59_60_reg <= nv4CalcArbitration_59_60;
if (reset == 1'b0 && ^(nv4CalcArbitration_59_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_59_60_reg"); $finish; end
end
end
always @(*) begin
nv4CalcArbitration_59_61 = nv4CalcArbitration_signed_divide_32_0;
end
always @(*) begin
/* nv4CalcArbitration: %59*/
/*   %61 = sdiv i32 %60, %7*/
nv4CalcArbitration_59_61_reg = nv4CalcArbitration_48_54_reg;
end
always @(*) begin
nv4CalcArbitration_62_63 = nv4CalcArbitration_signed_divide_32_0;
end
always @(*) begin
/* nv4CalcArbitration: %62*/
/*   %63 = sdiv i32 %58, %34*/
nv4CalcArbitration_62_63_reg = nv4CalcArbitration_38_41_reg;
end
always @(*) begin
nv4CalcArbitration_62_64 = nv4CalcArbitration_signed_divide_32_0;
end
always @(*) begin
/* nv4CalcArbitration: %62*/
/*   %64 = sdiv i32 %63, %5*/
nv4CalcArbitration_62_64_reg = nv4CalcArbitration_45_47_reg;
end
always @(*) begin
/* nv4CalcArbitration: %65*/
/*   %video_fill_us.1 = phi i32 [ %61, %59 ], [ %64, %62 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_244) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_65_video_fill_us_1 = nv4CalcArbitration_59_61;
end
/* nv4CalcArbitration: %65*/
/*   %video_fill_us.1 = phi i32 [ %61, %59 ], [ %64, %62 ]*/
else /* if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_309) & (memory_controller_waitrequest == 1'd0))) */
begin
nv4CalcArbitration_65_video_fill_us_1 = nv4CalcArbitration_62_64;
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %65*/
/*   %video_fill_us.1 = phi i32 [ %61, %59 ], [ %64, %62 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_244) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_65_video_fill_us_1_reg <= nv4CalcArbitration_65_video_fill_us_1;
if (reset == 1'b0 && ^(nv4CalcArbitration_65_video_fill_us_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_65_video_fill_us_1_reg"); $finish; end
end
/* nv4CalcArbitration: %65*/
/*   %video_fill_us.1 = phi i32 [ %61, %59 ], [ %64, %62 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_309) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_65_video_fill_us_1_reg <= nv4CalcArbitration_65_video_fill_us_1;
if (reset == 1'b0 && ^(nv4CalcArbitration_65_video_fill_us_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_65_video_fill_us_1_reg"); $finish; end
end
end
always @(*) begin
nv4CalcArbitration_65_66 = nv4CalcArbitration_signed_divide_32_0;
end
always @(*) begin
/* nv4CalcArbitration: %65*/
/*   %66 = sdiv i32 %32, %5*/
nv4CalcArbitration_65_66_reg = nv4CalcArbitration_48_54_reg;
end
always @(*) begin
/* nv4CalcArbitration: %65*/
/*   %67 = add i32 %50, %52*/
begin
nv4CalcArbitration_65_67 = (nv4CalcArbitration_48_50_reg + nv4CalcArbitration_48_52_reg);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %65*/
/*   %67 = add i32 %50, %52*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_310))
begin
nv4CalcArbitration_65_67_reg <= nv4CalcArbitration_65_67;
if (reset == 1'b0 && ^(nv4CalcArbitration_65_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_65_67_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %65*/
/*   %68 = add i32 %67, %video_fill_us.1*/
begin
nv4CalcArbitration_65_68 = (nv4CalcArbitration_65_67 + nv4CalcArbitration_65_video_fill_us_1_reg);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %65*/
/*   %68 = add i32 %67, %video_fill_us.1*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_310))
begin
nv4CalcArbitration_65_68_reg <= nv4CalcArbitration_65_68;
if (reset == 1'b0 && ^(nv4CalcArbitration_65_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_65_68_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %65*/
/*   %69 = add i32 %68, %66*/
begin
nv4CalcArbitration_65_69 = (nv4CalcArbitration_65_68_reg + nv4CalcArbitration_65_66);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %65*/
/*   %69 = add i32 %68, %66*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_342))
begin
nv4CalcArbitration_65_69_reg <= nv4CalcArbitration_65_69;
if (reset == 1'b0 && ^(nv4CalcArbitration_65_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_65_69_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %70*/
/*   %71 = add i32 %22, %41*/
begin
nv4CalcArbitration_70_71 = (nv4CalcArbitration_0_22_reg + nv4CalcArbitration_38_41_reg);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %70*/
/*   %71 = add i32 %22, %41*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_70_343))
begin
nv4CalcArbitration_70_71_reg <= nv4CalcArbitration_70_71;
if (reset == 1'b0 && ^(nv4CalcArbitration_70_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_70_71_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %70*/
/*   %72 = add i32 %71, %23*/
begin
nv4CalcArbitration_70_72 = (nv4CalcArbitration_70_71 + nv4CalcArbitration_0_23_reg);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %70*/
/*   %72 = add i32 %71, %23*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_70_343))
begin
nv4CalcArbitration_70_72_reg <= nv4CalcArbitration_70_72;
if (reset == 1'b0 && ^(nv4CalcArbitration_70_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_70_72_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %70*/
/*   %73 = add i32 %72, %37*/
begin
nv4CalcArbitration_70_73 = (nv4CalcArbitration_70_72 + nv4CalcArbitration_0_37_reg);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %70*/
/*   %73 = add i32 %72, %37*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_70_343))
begin
nv4CalcArbitration_70_73_reg <= nv4CalcArbitration_70_73;
if (reset == 1'b0 && ^(nv4CalcArbitration_70_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_70_73_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %74*/
/*   %vbs.3 = phi i32 [ %vbs.2, %65 ], [ %vbs.03, %70 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_342) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_74_vbs_3 = nv4CalcArbitration_48_vbs_2_reg;
end
/* nv4CalcArbitration: %74*/
/*   %vbs.3 = phi i32 [ %vbs.2, %65 ], [ %vbs.03, %70 ]*/
else /* if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_70_343) & (memory_controller_waitrequest == 1'd0))) */
begin
nv4CalcArbitration_74_vbs_3 = nv4CalcArbitration_38_vbs_03_reg;
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %74*/
/*   %vbs.3 = phi i32 [ %vbs.2, %65 ], [ %vbs.03, %70 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_342) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_74_vbs_3_reg <= nv4CalcArbitration_74_vbs_3;
if (reset == 1'b0 && ^(nv4CalcArbitration_74_vbs_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_74_vbs_3_reg"); $finish; end
end
/* nv4CalcArbitration: %74*/
/*   %vbs.3 = phi i32 [ %vbs.2, %65 ], [ %vbs.03, %70 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_70_343) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_74_vbs_3_reg <= nv4CalcArbitration_74_vbs_3;
if (reset == 1'b0 && ^(nv4CalcArbitration_74_vbs_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_74_vbs_3_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %74*/
/*   %vlwm.1 = phi i32 [ %55, %65 ], [ %vlwm.05, %70 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_342) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_74_vlwm_1 = nv4CalcArbitration_48_55_reg;
end
/* nv4CalcArbitration: %74*/
/*   %vlwm.1 = phi i32 [ %55, %65 ], [ %vlwm.05, %70 ]*/
else /* if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_70_343) & (memory_controller_waitrequest == 1'd0))) */
begin
nv4CalcArbitration_74_vlwm_1 = nv4CalcArbitration_38_vlwm_05_reg;
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %74*/
/*   %vlwm.1 = phi i32 [ %55, %65 ], [ %vlwm.05, %70 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_342) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_74_vlwm_1_reg <= nv4CalcArbitration_74_vlwm_1;
if (reset == 1'b0 && ^(nv4CalcArbitration_74_vlwm_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_74_vlwm_1_reg"); $finish; end
end
/* nv4CalcArbitration: %74*/
/*   %vlwm.1 = phi i32 [ %55, %65 ], [ %vlwm.05, %70 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_70_343) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_74_vlwm_1_reg <= nv4CalcArbitration_74_vlwm_1;
if (reset == 1'b0 && ^(nv4CalcArbitration_74_vlwm_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_74_vlwm_1_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %74*/
/*   %.pn = phi i32 [ %69, %65 ], [ %73, %70 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_342) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_74__pn = nv4CalcArbitration_65_69;
end
/* nv4CalcArbitration: %74*/
/*   %.pn = phi i32 [ %69, %65 ], [ %73, %70 ]*/
else /* if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_70_343) & (memory_controller_waitrequest == 1'd0))) */
begin
nv4CalcArbitration_74__pn = nv4CalcArbitration_70_73;
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %74*/
/*   %.pn = phi i32 [ %69, %65 ], [ %73, %70 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_342) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_74__pn_reg <= nv4CalcArbitration_74__pn;
if (reset == 1'b0 && ^(nv4CalcArbitration_74__pn) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_74__pn_reg"); $finish; end
end
/* nv4CalcArbitration: %74*/
/*   %.pn = phi i32 [ %69, %65 ], [ %73, %70 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_70_343) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_74__pn_reg <= nv4CalcArbitration_74__pn;
if (reset == 1'b0 && ^(nv4CalcArbitration_74__pn) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_74__pn_reg"); $finish; end
end
end
always @(*) begin
nv4CalcArbitration_74_clwm_0_in_in = nv4CalcArbitration_74_clwm_0_in_in_stage0_reg;
end
always @(posedge clk) begin
/* nv4CalcArbitration: %74*/
/*   %clwm.0.in.in = mul nsw i32 %.pn, %26*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_345))
begin
nv4CalcArbitration_74_clwm_0_in_in_reg <= nv4CalcArbitration_74_clwm_0_in_in;
if (reset == 1'b0 && ^(nv4CalcArbitration_74_clwm_0_in_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_74_clwm_0_in_in_reg"); $finish; end
end
/* nv4CalcArbitration: %74*/
/*   %clwm.0.in.in = mul nsw i32 %.pn, %26*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_345))
begin
nv4CalcArbitration_74_clwm_0_in_in_reg <= nv4CalcArbitration_74_clwm_0_in_in;
if (reset == 1'b0 && ^(nv4CalcArbitration_74_clwm_0_in_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_74_clwm_0_in_in_reg"); $finish; end
end
end
always @(*) begin
nv4CalcArbitration_74_clwm_0_in = nv4CalcArbitration_signed_divide_32_0;
end
always @(*) begin
/* nv4CalcArbitration: %74*/
/*   %clwm.0.in = sdiv i32 %clwm.0.in.in, 1000000*/
nv4CalcArbitration_74_clwm_0_in_reg = nv4CalcArbitration_48_54_reg;
end
always @(*) begin
/* nv4CalcArbitration: %74*/
/*   %clwm.0 = add nsw i32 %clwm.0.in, 1*/
begin
nv4CalcArbitration_74_clwm_0 = (nv4CalcArbitration_74_clwm_0_in + 32'd1);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %74*/
/*   %clwm.0 = add nsw i32 %clwm.0.in, 1*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_377))
begin
nv4CalcArbitration_74_clwm_0_reg <= nv4CalcArbitration_74_clwm_0;
if (reset == 1'b0 && ^(nv4CalcArbitration_74_clwm_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_74_clwm_0_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %74*/
/*   %75 = add i32 %clwm.0.in, -383*/
begin
nv4CalcArbitration_74_75 = (nv4CalcArbitration_74_clwm_0_in + -32'd383);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %74*/
/*   %75 = add i32 %clwm.0.in, -383*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_377))
begin
nv4CalcArbitration_74_75_reg <= nv4CalcArbitration_74_75;
if (reset == 1'b0 && ^(nv4CalcArbitration_74_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_74_75_reg"); $finish; end
end
end
always @(*) begin
nv4CalcArbitration_74_76 = nv4CalcArbitration_74_76_stage0_reg;
end
always @(posedge clk) begin
/* nv4CalcArbitration: %74*/
/*   %76 = mul nsw i32 %75, %3*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_378))
begin
nv4CalcArbitration_74_76_reg <= nv4CalcArbitration_74_76;
if (reset == 1'b0 && ^(nv4CalcArbitration_74_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_74_76_reg"); $finish; end
end
/* nv4CalcArbitration: %74*/
/*   %76 = mul nsw i32 %75, %3*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_378))
begin
nv4CalcArbitration_74_76_reg <= nv4CalcArbitration_74_76;
if (reset == 1'b0 && ^(nv4CalcArbitration_74_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_74_76_reg"); $finish; end
end
end
always @(*) begin
nv4CalcArbitration_74_77 = nv4CalcArbitration_signed_divide_32_0;
end
always @(*) begin
/* nv4CalcArbitration: %74*/
/*   %77 = sdiv i32 %76, %5*/
nv4CalcArbitration_74_77_reg = nv4CalcArbitration_38_41_reg;
end
always @(*) begin
nv4CalcArbitration_74_78 = nv4CalcArbitration_74_78_stage0_reg;
end
always @(posedge clk) begin
/* nv4CalcArbitration: %74*/
/*   %78 = mul nsw i32 %77, %18*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_411))
begin
nv4CalcArbitration_74_78_reg <= nv4CalcArbitration_74_78;
if (reset == 1'b0 && ^(nv4CalcArbitration_74_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_74_78_reg"); $finish; end
end
/* nv4CalcArbitration: %74*/
/*   %78 = mul nsw i32 %77, %18*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_411))
begin
nv4CalcArbitration_74_78_reg <= nv4CalcArbitration_74_78;
if (reset == 1'b0 && ^(nv4CalcArbitration_74_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_74_78_reg"); $finish; end
end
end
always @(*) begin
nv4CalcArbitration_74_79 = nv4CalcArbitration_signed_divide_32_0;
end
always @(*) begin
/* nv4CalcArbitration: %74*/
/*   %79 = sdiv i32 %78, 8*/
nv4CalcArbitration_74_79_reg = nv4CalcArbitration_48_54_reg;
end
always @(*) begin
/* nv4CalcArbitration: %74*/
/*   %80 = icmp slt i32 %79, %75*/
begin
nv4CalcArbitration_74_80 = ($signed(nv4CalcArbitration_74_79) < $signed(nv4CalcArbitration_74_75_reg));
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %74*/
/*   %80 = icmp slt i32 %79, %75*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_443))
begin
nv4CalcArbitration_74_80_reg <= nv4CalcArbitration_74_80;
if (reset == 1'b0 && ^(nv4CalcArbitration_74_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_74_80_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %74*/
/*   %81 = icmp sgt i32 %75, 0*/
begin
nv4CalcArbitration_74_81 = ($signed(nv4CalcArbitration_74_75) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %74*/
/*   %81 = icmp sgt i32 %75, 0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_377))
begin
nv4CalcArbitration_74_81_reg <= nv4CalcArbitration_74_81;
if (reset == 1'b0 && ^(nv4CalcArbitration_74_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_74_81_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %74*/
/*   %or.cond = and i1 %80, %81*/
begin
nv4CalcArbitration_74_or_cond = (nv4CalcArbitration_74_80 & nv4CalcArbitration_74_81_reg);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %74*/
/*   %or.cond = and i1 %80, %81*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_443))
begin
nv4CalcArbitration_74_or_cond_reg <= nv4CalcArbitration_74_or_cond;
if (reset == 1'b0 && ^(nv4CalcArbitration_74_or_cond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_74_or_cond_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %82*/
/*   %83 = icmp eq i32 %mclk_extra.04, 0*/
begin
nv4CalcArbitration_82_83 = (nv4CalcArbitration_38_mclk_extra_04_reg == 32'd0);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %82*/
/*   %83 = icmp eq i32 %mclk_extra.04, 0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_82_444))
begin
nv4CalcArbitration_82_83_reg <= nv4CalcArbitration_82_83;
if (reset == 1'b0 && ^(nv4CalcArbitration_82_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_82_83_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %82*/
/*   %found.1 = zext i1 %83 to i32*/
begin
nv4CalcArbitration_82_found_1 = nv4CalcArbitration_82_83;
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %82*/
/*   %found.1 = zext i1 %83 to i32*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_82_444))
begin
nv4CalcArbitration_82_found_1_reg <= nv4CalcArbitration_82_found_1;
if (reset == 1'b0 && ^(nv4CalcArbitration_82_found_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_82_found_1_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %85*/
/*   %86 = icmp sgt i32 %clwm.0, 511*/
begin
nv4CalcArbitration_85_86 = ($signed(nv4CalcArbitration_74_clwm_0_reg) > $signed(32'd511));
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %85*/
/*   %86 = icmp sgt i32 %clwm.0, 511*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_85_446))
begin
nv4CalcArbitration_85_86_reg <= nv4CalcArbitration_85_86;
if (reset == 1'b0 && ^(nv4CalcArbitration_85_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_85_86_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %85*/
/*   %87 = icmp sgt i32 %vlwm.1, 255*/
begin
nv4CalcArbitration_85_87 = ($signed(nv4CalcArbitration_74_vlwm_1_reg) > $signed(32'd255));
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %85*/
/*   %87 = icmp sgt i32 %vlwm.1, 255*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_85_446))
begin
nv4CalcArbitration_85_87_reg <= nv4CalcArbitration_85_87;
if (reset == 1'b0 && ^(nv4CalcArbitration_85_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_85_87_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %85*/
/*   %or.cond2 = or i1 %86, %87*/
begin
nv4CalcArbitration_85_or_cond2 = (nv4CalcArbitration_85_86 | nv4CalcArbitration_85_87);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %85*/
/*   %or.cond2 = or i1 %86, %87*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_85_446))
begin
nv4CalcArbitration_85_or_cond2_reg <= nv4CalcArbitration_85_or_cond2;
if (reset == 1'b0 && ^(nv4CalcArbitration_85_or_cond2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_85_or_cond2_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %88*/
/*   %89 = icmp eq i32 %mclk_extra.04, 0*/
begin
nv4CalcArbitration_88_89 = (nv4CalcArbitration_38_mclk_extra_04_reg == 32'd0);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %88*/
/*   %89 = icmp eq i32 %mclk_extra.04, 0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_88_447))
begin
nv4CalcArbitration_88_89_reg <= nv4CalcArbitration_88_89;
if (reset == 1'b0 && ^(nv4CalcArbitration_88_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_88_89_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %88*/
/*   %found.2 = zext i1 %89 to i32*/
begin
nv4CalcArbitration_88_found_2 = nv4CalcArbitration_88_89;
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %88*/
/*   %found.2 = zext i1 %89 to i32*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_88_447))
begin
nv4CalcArbitration_88_found_2_reg <= nv4CalcArbitration_88_found_2;
if (reset == 1'b0 && ^(nv4CalcArbitration_88_found_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_88_found_2_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %90*/
/*   %91 = icmp sgt i32 %clwm.0, 519*/
begin
nv4CalcArbitration_90_91 = ($signed(nv4CalcArbitration_74_clwm_0_reg) > $signed(32'd519));
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %90*/
/*   %91 = icmp sgt i32 %clwm.0, 519*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_90_448))
begin
nv4CalcArbitration_90_91_reg <= nv4CalcArbitration_90_91;
if (reset == 1'b0 && ^(nv4CalcArbitration_90_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_90_91_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %92*/
/*   %93 = icmp eq i32 %mclk_extra.04, 0*/
begin
nv4CalcArbitration_92_93 = (nv4CalcArbitration_38_mclk_extra_04_reg == 32'd0);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %92*/
/*   %93 = icmp eq i32 %mclk_extra.04, 0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_92_449))
begin
nv4CalcArbitration_92_93_reg <= nv4CalcArbitration_92_93;
if (reset == 1'b0 && ^(nv4CalcArbitration_92_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_92_93_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %92*/
/*   %found.3 = zext i1 %93 to i32*/
begin
nv4CalcArbitration_92_found_3 = nv4CalcArbitration_92_93;
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %92*/
/*   %found.3 = zext i1 %93 to i32*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_92_449))
begin
nv4CalcArbitration_92_found_3_reg <= nv4CalcArbitration_92_found_3;
if (reset == 1'b0 && ^(nv4CalcArbitration_92_found_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_92_found_3_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %.thread*/
/*   %94 = icmp slt i32 %vlwm.1, 128*/
begin
nv4CalcArbitration__thread_94 = ($signed(nv4CalcArbitration_74_vlwm_1_reg) < $signed(32'd128));
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %.thread*/
/*   %94 = icmp slt i32 %vlwm.1, 128*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__thread_450))
begin
nv4CalcArbitration__thread_94_reg <= nv4CalcArbitration__thread_94;
if (reset == 1'b0 && ^(nv4CalcArbitration__thread_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration__thread_94_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %.thread*/
/*   %vlwm.211 = select i1 %94, i32 128, i32 %vlwm.1*/
begin
nv4CalcArbitration__thread_vlwm_211 = (nv4CalcArbitration__thread_94 ? 32'd128 : nv4CalcArbitration_74_vlwm_1_reg);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %.thread*/
/*   %vlwm.211 = select i1 %94, i32 128, i32 %vlwm.1*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__thread_450))
begin
nv4CalcArbitration__thread_vlwm_211_reg <= nv4CalcArbitration__thread_vlwm_211;
if (reset == 1'b0 && ^(nv4CalcArbitration__thread_vlwm_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration__thread_vlwm_211_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %95*/
/*   %found.4 = phi i32 [ %found.1, %82 ], [ %found.2, %88 ], [ %found.3, %92 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_82_444) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_95_found_4 = nv4CalcArbitration_82_found_1;
end
/* nv4CalcArbitration: %95*/
/*   %found.4 = phi i32 [ %found.1, %82 ], [ %found.2, %88 ], [ %found.3, %92 ]*/
else if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_88_447) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_95_found_4 = nv4CalcArbitration_88_found_2;
end
/* nv4CalcArbitration: %95*/
/*   %found.4 = phi i32 [ %found.1, %82 ], [ %found.2, %88 ], [ %found.3, %92 ]*/
else /* if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_92_449) & (memory_controller_waitrequest == 1'd0))) */
begin
nv4CalcArbitration_95_found_4 = nv4CalcArbitration_92_found_3;
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %95*/
/*   %found.4 = phi i32 [ %found.1, %82 ], [ %found.2, %88 ], [ %found.3, %92 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_82_444) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_95_found_4_reg <= nv4CalcArbitration_95_found_4;
if (reset == 1'b0 && ^(nv4CalcArbitration_95_found_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_95_found_4_reg"); $finish; end
end
/* nv4CalcArbitration: %95*/
/*   %found.4 = phi i32 [ %found.1, %82 ], [ %found.2, %88 ], [ %found.3, %92 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_88_447) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_95_found_4_reg <= nv4CalcArbitration_95_found_4;
if (reset == 1'b0 && ^(nv4CalcArbitration_95_found_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_95_found_4_reg"); $finish; end
end
/* nv4CalcArbitration: %95*/
/*   %found.4 = phi i32 [ %found.1, %82 ], [ %found.2, %88 ], [ %found.3, %92 ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB_92_449) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration_95_found_4_reg <= nv4CalcArbitration_95_found_4;
if (reset == 1'b0 && ^(nv4CalcArbitration_95_found_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_95_found_4_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %95*/
/*   %mclk_extra.1 = add nsw i32 %mclk_extra.04, -1*/
begin
nv4CalcArbitration_95_mclk_extra_1 = (nv4CalcArbitration_38_mclk_extra_04_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %95*/
/*   %mclk_extra.1 = add nsw i32 %mclk_extra.04, -1*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_95_451))
begin
nv4CalcArbitration_95_mclk_extra_1_reg <= nv4CalcArbitration_95_mclk_extra_1;
if (reset == 1'b0 && ^(nv4CalcArbitration_95_mclk_extra_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_95_mclk_extra_1_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %95*/
/*   %96 = icmp slt i32 %vlwm.1, 128*/
begin
nv4CalcArbitration_95_96 = ($signed(nv4CalcArbitration_74_vlwm_1_reg) < $signed(32'd128));
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %95*/
/*   %96 = icmp slt i32 %vlwm.1, 128*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_95_451))
begin
nv4CalcArbitration_95_96_reg <= nv4CalcArbitration_95_96;
if (reset == 1'b0 && ^(nv4CalcArbitration_95_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_95_96_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %95*/
/*   %vlwm.2 = select i1 %96, i32 128, i32 %vlwm.1*/
begin
nv4CalcArbitration_95_vlwm_2 = (nv4CalcArbitration_95_96 ? 32'd128 : nv4CalcArbitration_74_vlwm_1_reg);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %95*/
/*   %vlwm.2 = select i1 %96, i32 128, i32 %vlwm.1*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_95_451))
begin
nv4CalcArbitration_95_vlwm_2_reg <= nv4CalcArbitration_95_vlwm_2;
if (reset == 1'b0 && ^(nv4CalcArbitration_95_vlwm_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_95_vlwm_2_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %95*/
/*   %97 = icmp eq i32 %found.4, 1*/
begin
nv4CalcArbitration_95_97 = (nv4CalcArbitration_95_found_4_reg == 32'd1);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %95*/
/*   %97 = icmp eq i32 %found.4, 1*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_95_451))
begin
nv4CalcArbitration_95_97_reg <= nv4CalcArbitration_95_97;
if (reset == 1'b0 && ^(nv4CalcArbitration_95_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_95_97_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %.loopexit*/
/*   %vlwm.212 = phi i32 [ %vlwm.211, %.thread ], [ %vlwm.2, %.loopexit.loopexit ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB__thread_450) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration__loopexit_vlwm_212 = nv4CalcArbitration__thread_vlwm_211;
end
/* nv4CalcArbitration: %.loopexit*/
/*   %vlwm.212 = phi i32 [ %vlwm.211, %.thread ], [ %vlwm.2, %.loopexit.loopexit ]*/
else /* if (((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_loopexit_452) & (memory_controller_waitrequest == 1'd0))) */
begin
nv4CalcArbitration__loopexit_vlwm_212 = nv4CalcArbitration_95_vlwm_2_reg;
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %.loopexit*/
/*   %vlwm.212 = phi i32 [ %vlwm.211, %.thread ], [ %vlwm.2, %.loopexit.loopexit ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB__thread_450) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration__loopexit_vlwm_212_reg <= nv4CalcArbitration__loopexit_vlwm_212;
if (reset == 1'b0 && ^(nv4CalcArbitration__loopexit_vlwm_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration__loopexit_vlwm_212_reg"); $finish; end
end
/* nv4CalcArbitration: %.loopexit*/
/*   %vlwm.212 = phi i32 [ %vlwm.211, %.thread ], [ %vlwm.2, %.loopexit.loopexit ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_loopexit_452) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration__loopexit_vlwm_212_reg <= nv4CalcArbitration__loopexit_vlwm_212;
if (reset == 1'b0 && ^(nv4CalcArbitration__loopexit_vlwm_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration__loopexit_vlwm_212_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %.loopexit*/
/*   %98 = phi i32 [ 1, %.thread ], [ 0, %.loopexit.loopexit ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB__thread_450) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration__loopexit_98 = 32'd1;
end
/* nv4CalcArbitration: %.loopexit*/
/*   %98 = phi i32 [ 1, %.thread ], [ 0, %.loopexit.loopexit ]*/
else /* if (((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_loopexit_452) & (memory_controller_waitrequest == 1'd0))) */
begin
nv4CalcArbitration__loopexit_98 = 32'd0;
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %.loopexit*/
/*   %98 = phi i32 [ 1, %.thread ], [ 0, %.loopexit.loopexit ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB__thread_450) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration__loopexit_98_reg <= nv4CalcArbitration__loopexit_98;
if (reset == 1'b0 && ^(nv4CalcArbitration__loopexit_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration__loopexit_98_reg"); $finish; end
end
/* nv4CalcArbitration: %.loopexit*/
/*   %98 = phi i32 [ 1, %.thread ], [ 0, %.loopexit.loopexit ]*/
if (((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_loopexit_452) & (memory_controller_waitrequest == 1'd0)))
begin
nv4CalcArbitration__loopexit_98_reg <= nv4CalcArbitration__loopexit_98;
if (reset == 1'b0 && ^(nv4CalcArbitration__loopexit_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration__loopexit_98_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %.loopexit*/
/*   %99 = getelementptr inbounds %struct.TYPE_6__* %fifo, i32 0, i32 2*/
begin
nv4CalcArbitration__loopexit_99 = (arg_fifo + 8);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %.loopexit*/
/*   %99 = getelementptr inbounds %struct.TYPE_6__* %fifo, i32 0, i32 2*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_453))
begin
nv4CalcArbitration__loopexit_99_reg <= nv4CalcArbitration__loopexit_99;
if (reset == 1'b0 && ^(nv4CalcArbitration__loopexit_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration__loopexit_99_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %.loopexit*/
/*   %100 = getelementptr inbounds %struct.TYPE_6__* %fifo, i32 0, i32 4*/
begin
nv4CalcArbitration__loopexit_100 = (arg_fifo + 16);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %.loopexit*/
/*   %100 = getelementptr inbounds %struct.TYPE_6__* %fifo, i32 0, i32 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_453))
begin
nv4CalcArbitration__loopexit_100_reg <= nv4CalcArbitration__loopexit_100;
if (reset == 1'b0 && ^(nv4CalcArbitration__loopexit_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration__loopexit_100_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %.loopexit*/
/*   %101 = icmp slt i32 %clwm.0, 384*/
begin
nv4CalcArbitration__loopexit_101 = ($signed(nv4CalcArbitration_74_clwm_0_reg) < $signed(32'd384));
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %.loopexit*/
/*   %101 = icmp slt i32 %clwm.0, 384*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_453))
begin
nv4CalcArbitration__loopexit_101_reg <= nv4CalcArbitration__loopexit_101;
if (reset == 1'b0 && ^(nv4CalcArbitration__loopexit_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration__loopexit_101_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %.loopexit*/
/*   %clwm.1 = select i1 %101, i32 384, i32 %clwm.0*/
begin
nv4CalcArbitration__loopexit_clwm_1 = (nv4CalcArbitration__loopexit_101 ? 32'd384 : nv4CalcArbitration_74_clwm_0_reg);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %.loopexit*/
/*   %clwm.1 = select i1 %101, i32 384, i32 %clwm.0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_453))
begin
nv4CalcArbitration__loopexit_clwm_1_reg <= nv4CalcArbitration__loopexit_clwm_1;
if (reset == 1'b0 && ^(nv4CalcArbitration__loopexit_clwm_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration__loopexit_clwm_1_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %.loopexit*/
/*   %102 = add nsw i32 %vlwm.212, 15*/
begin
nv4CalcArbitration__loopexit_102 = (nv4CalcArbitration__loopexit_vlwm_212_reg + 32'd15);
end
end
always @(posedge clk) begin
/* nv4CalcArbitration: %.loopexit*/
/*   %102 = add nsw i32 %vlwm.212, 15*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_453))
begin
nv4CalcArbitration__loopexit_102_reg <= nv4CalcArbitration__loopexit_102;
if (reset == 1'b0 && ^(nv4CalcArbitration__loopexit_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration__loopexit_102_reg"); $finish; end
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %22 = sdiv i32 10000000, %7*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_6))
begin
nv4CalcArbitration_signed_divide_32_0_op0 = 32'd10000000;
end
/* nv4CalcArbitration: %0*/
/*   %23 = sdiv i32 10000000, %3*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_7))
begin
nv4CalcArbitration_signed_divide_32_0_op0 = 32'd10000000;
end
/* nv4CalcArbitration: %0*/
/*   %26 = sdiv i32 %25, 8*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_8))
begin
nv4CalcArbitration_signed_divide_32_0_op0 = nv4CalcArbitration_0_25_reg;
end
/* nv4CalcArbitration: %0*/
/*   %37 = sdiv i32 %27, %5*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_9))
begin
nv4CalcArbitration_signed_divide_32_0_op0 = nv4CalcArbitration_0_27_reg;
end
/* nv4CalcArbitration: %38*/
/*   %41 = sdiv i32 %40, %5*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_43))
begin
nv4CalcArbitration_signed_divide_32_0_op0 = nv4CalcArbitration_38_40;
end
/* nv4CalcArbitration: %43*/
/*   %44 = sdiv i32 8000000, %7*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_77))
begin
nv4CalcArbitration_signed_divide_32_0_op0 = 32'd8000000;
end
/* nv4CalcArbitration: %45*/
/*   %46 = sdiv i32 128000000, %34*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_110))
begin
nv4CalcArbitration_signed_divide_32_0_op0 = 32'd128000000;
end
/* nv4CalcArbitration: %45*/
/*   %47 = sdiv i32 %46, %5*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_142))
begin
nv4CalcArbitration_signed_divide_32_0_op0 = nv4CalcArbitration_45_46;
end
/* nv4CalcArbitration: %48*/
/*   %54 = sdiv i32 %53, 1000000*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_177))
begin
nv4CalcArbitration_signed_divide_32_0_op0 = nv4CalcArbitration_48_53;
end
/* nv4CalcArbitration: %59*/
/*   %61 = sdiv i32 %60, %7*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_212))
begin
nv4CalcArbitration_signed_divide_32_0_op0 = nv4CalcArbitration_59_60;
end
/* nv4CalcArbitration: %62*/
/*   %63 = sdiv i32 %58, %34*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_245))
begin
nv4CalcArbitration_signed_divide_32_0_op0 = nv4CalcArbitration_48_58_reg;
end
/* nv4CalcArbitration: %62*/
/*   %64 = sdiv i32 %63, %5*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_277))
begin
nv4CalcArbitration_signed_divide_32_0_op0 = nv4CalcArbitration_62_63;
end
/* nv4CalcArbitration: %65*/
/*   %66 = sdiv i32 %32, %5*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_310))
begin
nv4CalcArbitration_signed_divide_32_0_op0 = nv4CalcArbitration_0_32_reg;
end
/* nv4CalcArbitration: %74*/
/*   %clwm.0.in = sdiv i32 %clwm.0.in.in, 1000000*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_345))
begin
nv4CalcArbitration_signed_divide_32_0_op0 = nv4CalcArbitration_74_clwm_0_in_in;
end
/* nv4CalcArbitration: %74*/
/*   %77 = sdiv i32 %76, %5*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_378))
begin
nv4CalcArbitration_signed_divide_32_0_op0 = nv4CalcArbitration_74_76;
end
/* nv4CalcArbitration: %74*/
/*   %79 = sdiv i32 %78, 8*/
else /* if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_411)) */
begin
nv4CalcArbitration_signed_divide_32_0_op0 = nv4CalcArbitration_74_78;
end
end
always @(*) begin
/* nv4CalcArbitration: %0*/
/*   %22 = sdiv i32 10000000, %7*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_6))
begin
nv4CalcArbitration_signed_divide_32_0_op1 = nv4CalcArbitration_0_7;
end
/* nv4CalcArbitration: %0*/
/*   %23 = sdiv i32 10000000, %3*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_7))
begin
nv4CalcArbitration_signed_divide_32_0_op1 = nv4CalcArbitration_0_3_reg;
end
/* nv4CalcArbitration: %0*/
/*   %26 = sdiv i32 %25, 8*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_8))
begin
nv4CalcArbitration_signed_divide_32_0_op1 = 32'd8;
end
/* nv4CalcArbitration: %0*/
/*   %37 = sdiv i32 %27, %5*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_9))
begin
nv4CalcArbitration_signed_divide_32_0_op1 = nv4CalcArbitration_0_5_reg;
end
/* nv4CalcArbitration: %38*/
/*   %41 = sdiv i32 %40, %5*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_38_43))
begin
nv4CalcArbitration_signed_divide_32_0_op1 = nv4CalcArbitration_0_5_reg;
end
/* nv4CalcArbitration: %43*/
/*   %44 = sdiv i32 8000000, %7*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_43_77))
begin
nv4CalcArbitration_signed_divide_32_0_op1 = nv4CalcArbitration_0_7_reg;
end
/* nv4CalcArbitration: %45*/
/*   %46 = sdiv i32 128000000, %34*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_110))
begin
nv4CalcArbitration_signed_divide_32_0_op1 = nv4CalcArbitration_0_34_reg;
end
/* nv4CalcArbitration: %45*/
/*   %47 = sdiv i32 %46, %5*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_45_142))
begin
nv4CalcArbitration_signed_divide_32_0_op1 = nv4CalcArbitration_0_5_reg;
end
/* nv4CalcArbitration: %48*/
/*   %54 = sdiv i32 %53, 1000000*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_48_177))
begin
nv4CalcArbitration_signed_divide_32_0_op1 = 32'd1000000;
end
/* nv4CalcArbitration: %59*/
/*   %61 = sdiv i32 %60, %7*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_59_212))
begin
nv4CalcArbitration_signed_divide_32_0_op1 = nv4CalcArbitration_0_7_reg;
end
/* nv4CalcArbitration: %62*/
/*   %63 = sdiv i32 %58, %34*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_245))
begin
nv4CalcArbitration_signed_divide_32_0_op1 = nv4CalcArbitration_0_34_reg;
end
/* nv4CalcArbitration: %62*/
/*   %64 = sdiv i32 %63, %5*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_62_277))
begin
nv4CalcArbitration_signed_divide_32_0_op1 = nv4CalcArbitration_0_5_reg;
end
/* nv4CalcArbitration: %65*/
/*   %66 = sdiv i32 %32, %5*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_65_310))
begin
nv4CalcArbitration_signed_divide_32_0_op1 = nv4CalcArbitration_0_5_reg;
end
/* nv4CalcArbitration: %74*/
/*   %clwm.0.in = sdiv i32 %clwm.0.in.in, 1000000*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_345))
begin
nv4CalcArbitration_signed_divide_32_0_op1 = 32'd1000000;
end
/* nv4CalcArbitration: %74*/
/*   %77 = sdiv i32 %76, %5*/
else if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_378))
begin
nv4CalcArbitration_signed_divide_32_0_op1 = nv4CalcArbitration_0_5_reg;
end
/* nv4CalcArbitration: %74*/
/*   %79 = sdiv i32 %78, 8*/
else /* if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_74_411)) */
begin
nv4CalcArbitration_signed_divide_32_0_op1 = 32'd8;
end
end
always @(*) begin
lpm_divide_nv4CalcArbitration_48_54_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_nv4CalcArbitration_48_54_out = lpm_divide_nv4CalcArbitration_48_54_temp_out;
end
always @(*) begin
nv4CalcArbitration_signed_divide_32_0 = lpm_divide_nv4CalcArbitration_48_54_out;
end
always @(*) begin
lpm_mult_nv4CalcArbitration_0_27_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %27 = mul i32 %9, 3000000*/
if ((lpm_mult_nv4CalcArbitration_0_27_en == 1'd1))
begin
nv4CalcArbitration_0_27_stage0_reg <= (nv4CalcArbitration_0_9 * 32'd3000000);
end
end
always @(*) begin
lpm_mult_nv4CalcArbitration_0_32_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %32 = mul i32 %9, 2000000*/
if ((lpm_mult_nv4CalcArbitration_0_32_en == 1'd1))
begin
nv4CalcArbitration_0_32_stage0_reg <= (nv4CalcArbitration_0_9 * 32'd2000000);
end
end
always @(*) begin
lpm_mult_nv4CalcArbitration_0_25_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %25 = mul nsw i32 %18, %3*/
if ((lpm_mult_nv4CalcArbitration_0_25_en == 1'd1))
begin
nv4CalcArbitration_0_25_stage0_reg <= (nv4CalcArbitration_0_18 * nv4CalcArbitration_0_3_reg);
end
end
always @(*) begin
lpm_divide_nv4CalcArbitration_0_22_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_nv4CalcArbitration_0_29_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* nv4CalcArbitration: %0*/
/*   %29 = mul nsw i32 %14, %5*/
if ((lpm_mult_nv4CalcArbitration_0_29_en == 1'd1))
begin
nv4CalcArbitration_0_29_stage0_reg <= (nv4CalcArbitration_0_14 * nv4CalcArbitration_0_5_reg);
end
end
always @(*) begin
lpm_divide_nv4CalcArbitration_0_23_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_nv4CalcArbitration_0_26_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_nv4CalcArbitration_0_37_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_nv4CalcArbitration_38_40_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* nv4CalcArbitration: %38*/
/*   %40 = mul i32 %39, 1000000*/
if ((lpm_mult_nv4CalcArbitration_38_40_en == 1'd1))
begin
nv4CalcArbitration_38_40_stage0_reg <= (nv4CalcArbitration_38_39 * 32'd1000000);
end
end
always @(*) begin
lpm_divide_nv4CalcArbitration_38_41_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_nv4CalcArbitration_43_44_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_nv4CalcArbitration_45_46_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_nv4CalcArbitration_45_47_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_nv4CalcArbitration_48_53_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* nv4CalcArbitration: %48*/
/*   %53 = mul i32 %31, %52*/
if ((lpm_mult_nv4CalcArbitration_48_53_en == 1'd1))
begin
nv4CalcArbitration_48_53_stage0_reg <= (nv4CalcArbitration_0_31_reg * nv4CalcArbitration_48_52);
end
end
always @(*) begin
lpm_mult_nv4CalcArbitration_48_58_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* nv4CalcArbitration: %48*/
/*   %58 = mul i32 %vbs.2, 1000000*/
if ((lpm_mult_nv4CalcArbitration_48_58_en == 1'd1))
begin
nv4CalcArbitration_48_58_stage0_reg <= (nv4CalcArbitration_48_vbs_2 * 32'd1000000);
end
end
always @(*) begin
lpm_divide_nv4CalcArbitration_59_61_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_nv4CalcArbitration_62_63_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_nv4CalcArbitration_62_64_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_nv4CalcArbitration_65_66_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_nv4CalcArbitration_74_clwm_0_in_in_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* nv4CalcArbitration: %74*/
/*   %clwm.0.in.in = mul nsw i32 %.pn, %26*/
if ((lpm_mult_nv4CalcArbitration_74_clwm_0_in_in_en == 1'd1))
begin
nv4CalcArbitration_74_clwm_0_in_in_stage0_reg <= (nv4CalcArbitration_74__pn_reg * nv4CalcArbitration_0_26_reg);
end
end
always @(*) begin
lpm_divide_nv4CalcArbitration_74_clwm_0_in_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_nv4CalcArbitration_74_76_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* nv4CalcArbitration: %74*/
/*   %76 = mul nsw i32 %75, %3*/
if ((lpm_mult_nv4CalcArbitration_74_76_en == 1'd1))
begin
nv4CalcArbitration_74_76_stage0_reg <= (nv4CalcArbitration_74_75 * nv4CalcArbitration_0_3_reg);
end
end
always @(*) begin
lpm_divide_nv4CalcArbitration_74_77_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_nv4CalcArbitration_74_78_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* nv4CalcArbitration: %74*/
/*   %78 = mul nsw i32 %77, %18*/
if ((lpm_mult_nv4CalcArbitration_74_78_en == 1'd1))
begin
nv4CalcArbitration_74_78_stage0_reg <= (nv4CalcArbitration_74_77 * nv4CalcArbitration_0_18_reg);
end
end
always @(*) begin
lpm_divide_nv4CalcArbitration_74_79_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* nv4CalcArbitration: %.loopexit*/
/*   ret void*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_456))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* nv4CalcArbitration: %0*/
/*   store i32 1, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* nv4CalcArbitration: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_2))
begin
memory_controller_enable_a = 1'd1;
end
/* nv4CalcArbitration: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_3))
begin
memory_controller_enable_a = 1'd1;
end
/* nv4CalcArbitration: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_4))
begin
memory_controller_enable_a = 1'd1;
end
/* nv4CalcArbitration: %0*/
/*   %16 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_5))
begin
memory_controller_enable_a = 1'd1;
end
/* nv4CalcArbitration: %0*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_6))
begin
memory_controller_enable_a = 1'd1;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 %vbs.3, i32* %100, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_453))
begin
memory_controller_enable_a = 1'd1;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 128, i32* %99, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_454))
begin
memory_controller_enable_a = 1'd1;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 %98, i32* %1, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_455))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* nv4CalcArbitration: %0*/
/*   store i32 1, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_1))
begin
memory_controller_address_a = nv4CalcArbitration_0_1;
end
/* nv4CalcArbitration: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_2))
begin
memory_controller_address_a = nv4CalcArbitration_0_2_reg;
end
/* nv4CalcArbitration: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_3))
begin
memory_controller_address_a = nv4CalcArbitration_0_4_reg;
end
/* nv4CalcArbitration: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_4))
begin
memory_controller_address_a = nv4CalcArbitration_0_12_reg;
end
/* nv4CalcArbitration: %0*/
/*   %16 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_5))
begin
memory_controller_address_a = nv4CalcArbitration_0_15_reg;
end
/* nv4CalcArbitration: %0*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_6))
begin
memory_controller_address_a = nv4CalcArbitration_0_19_reg;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 %vbs.3, i32* %100, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_453))
begin
memory_controller_address_a = nv4CalcArbitration__loopexit_100;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 128, i32* %99, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_454))
begin
memory_controller_address_a = nv4CalcArbitration__loopexit_99_reg;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 %98, i32* %1, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_455))
begin
memory_controller_address_a = nv4CalcArbitration_0_1_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nv4CalcArbitration: %0*/
/*   store i32 1, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_1))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nv4CalcArbitration: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_2))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nv4CalcArbitration: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nv4CalcArbitration: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nv4CalcArbitration: %0*/
/*   %16 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_5))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nv4CalcArbitration: %0*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_6))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 %vbs.3, i32* %100, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_453))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 128, i32* %99, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_454))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 %98, i32* %1, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_455))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* nv4CalcArbitration: %0*/
/*   store i32 1, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_1))
begin
memory_controller_in_a = 32'd1;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 %vbs.3, i32* %100, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_453))
begin
memory_controller_in_a = nv4CalcArbitration_74_vbs_3_reg;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 128, i32* %99, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_454))
begin
memory_controller_in_a = 32'd128;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 %98, i32* %1, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_455))
begin
memory_controller_in_a = nv4CalcArbitration__loopexit_98_reg;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* nv4CalcArbitration: %0*/
/*   store i32 1, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* nv4CalcArbitration: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_2))
begin
memory_controller_size_a = 2'd2;
end
/* nv4CalcArbitration: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_3))
begin
memory_controller_size_a = 2'd2;
end
/* nv4CalcArbitration: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_4))
begin
memory_controller_size_a = 2'd2;
end
/* nv4CalcArbitration: %0*/
/*   %16 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_5))
begin
memory_controller_size_a = 2'd2;
end
/* nv4CalcArbitration: %0*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_6))
begin
memory_controller_size_a = 2'd2;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 %vbs.3, i32* %100, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_453))
begin
memory_controller_size_a = 2'd2;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 128, i32* %99, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_454))
begin
memory_controller_size_a = 2'd2;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 %98, i32* %1, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_455))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* nv4CalcArbitration: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_2))
begin
memory_controller_enable_b = 1'd1;
end
/* nv4CalcArbitration: %0*/
/*   %18 = load i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_3))
begin
memory_controller_enable_b = 1'd1;
end
/* nv4CalcArbitration: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_4))
begin
memory_controller_enable_b = 1'd1;
end
/* nv4CalcArbitration: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_5))
begin
memory_controller_enable_b = 1'd1;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 %102, i32* %36, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_453))
begin
memory_controller_enable_b = 1'd1;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 %clwm.1, i32* %35, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_454))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* nv4CalcArbitration: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_2))
begin
memory_controller_address_b = nv4CalcArbitration_0_8_reg;
end
/* nv4CalcArbitration: %0*/
/*   %18 = load i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_3))
begin
memory_controller_address_b = nv4CalcArbitration_0_17_reg;
end
/* nv4CalcArbitration: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_4))
begin
memory_controller_address_b = nv4CalcArbitration_0_6_reg;
end
/* nv4CalcArbitration: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_5))
begin
memory_controller_address_b = nv4CalcArbitration_0_10_reg;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 %102, i32* %36, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_453))
begin
memory_controller_address_b = nv4CalcArbitration_0_36_reg;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 %clwm.1, i32* %35, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_454))
begin
memory_controller_address_b = nv4CalcArbitration_0_35_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nv4CalcArbitration: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_2))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nv4CalcArbitration: %0*/
/*   %18 = load i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_3))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nv4CalcArbitration: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_4))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nv4CalcArbitration: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_5))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 %102, i32* %36, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_453))
begin
memory_controller_write_enable_b = 1'd1;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 %clwm.1, i32* %35, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_454))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 %102, i32* %36, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_453))
begin
memory_controller_in_b = nv4CalcArbitration__loopexit_102;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 %clwm.1, i32* %35, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_454))
begin
memory_controller_in_b = nv4CalcArbitration__loopexit_clwm_1_reg;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* nv4CalcArbitration: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_2))
begin
memory_controller_size_b = 2'd2;
end
/* nv4CalcArbitration: %0*/
/*   %18 = load i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_3))
begin
memory_controller_size_b = 2'd2;
end
/* nv4CalcArbitration: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_4))
begin
memory_controller_size_b = 2'd2;
end
/* nv4CalcArbitration: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB_0_5))
begin
memory_controller_size_b = 2'd2;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 %102, i32* %36, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_453))
begin
memory_controller_size_b = 2'd2;
end
/* nv4CalcArbitration: %.loopexit*/
/*   store i32 %clwm.1, i32* %35, align 4*/
if ((cur_state == LEGUP_F_nv4CalcArbitration_BB__loopexit_454))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg  nv4CalcArbitration_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_arg_fifo;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_arg_arb;
wire  nv4CalcArbitration_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_memory_controller_address_a;
wire  nv4CalcArbitration_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nv4CalcArbitration_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nv4CalcArbitration_memory_controller_out_a;
wire [1:0] nv4CalcArbitration_memory_controller_size_a;
wire  nv4CalcArbitration_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv4CalcArbitration_memory_controller_address_b;
wire  nv4CalcArbitration_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nv4CalcArbitration_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nv4CalcArbitration_memory_controller_out_b;
wire [1:0] nv4CalcArbitration_memory_controller_size_b;
reg  nv4CalcArbitration_memory_controller_waitrequest;
wire  nv4CalcArbitration_finish;
reg  nv4CalcArbitration_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


nv4CalcArbitration nv4CalcArbitration_inst (
	.memory_controller_enable_a (nv4CalcArbitration_memory_controller_enable_a),
	.memory_controller_address_a (nv4CalcArbitration_memory_controller_address_a),
	.memory_controller_write_enable_a (nv4CalcArbitration_memory_controller_write_enable_a),
	.memory_controller_in_a (nv4CalcArbitration_memory_controller_in_a),
	.memory_controller_size_a (nv4CalcArbitration_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (nv4CalcArbitration_memory_controller_enable_b),
	.memory_controller_address_b (nv4CalcArbitration_memory_controller_address_b),
	.memory_controller_write_enable_b (nv4CalcArbitration_memory_controller_write_enable_b),
	.memory_controller_in_b (nv4CalcArbitration_memory_controller_in_b),
	.memory_controller_size_b (nv4CalcArbitration_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (nv4CalcArbitration_start),
	.finish (nv4CalcArbitration_finish),
	.arg_fifo (nv4CalcArbitration_arg_fifo),
	.arg_arb (nv4CalcArbitration_arg_arb)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (nv4CalcArbitration_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (nv4CalcArbitration_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
nv4CalcArbitration_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_start"); $finish; end
end
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
nv4CalcArbitration_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
nv4CalcArbitration_arg_fifo <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_arg_fifo"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
nv4CalcArbitration_arg_arb <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv4CalcArbitration_arg_arb"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
begin
nv4CalcArbitration_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
begin
nv4CalcArbitration_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
nv4CalcArbitration_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
nv4CalcArbitration_finish_final = nv4CalcArbitration_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = nv4CalcArbitration_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = nv4CalcArbitration_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = nv4CalcArbitration_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = nv4CalcArbitration_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = nv4CalcArbitration_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = nv4CalcArbitration_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = nv4CalcArbitration_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = nv4CalcArbitration_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = nv4CalcArbitration_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = nv4CalcArbitration_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = nv4CalcArbitration_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = nv4CalcArbitration_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = nv4CalcArbitration_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = nv4CalcArbitration_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = nv4CalcArbitration_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = nv4CalcArbitration_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = nv4CalcArbitration_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = nv4CalcArbitration_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = nv4CalcArbitration_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @nv4CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = nv4CalcArbitration_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
