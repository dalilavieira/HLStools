//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:53:23 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module get_input
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_s,
	arg_fft_hdata,
	arg_in,
	arg_w,
	arg_h,
	arg_n,
	arg_plane,
	arg_scale
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_get_input_BB_0_1 = 8'd1;
parameter [7:0] LEGUP_F_get_input_BB_0_2 = 8'd2;
parameter [7:0] LEGUP_F_get_input_BB_0_3 = 8'd3;
parameter [7:0] LEGUP_F_get_input_BB_0_4 = 8'd4;
parameter [7:0] LEGUP_F_get_input_BB_0_5 = 8'd5;
parameter [7:0] LEGUP_F_get_input_BB_0_6 = 8'd6;
parameter [7:0] LEGUP_F_get_input_BB_0_7 = 8'd7;
parameter [7:0] LEGUP_F_get_input_BB_0_8 = 8'd8;
parameter [7:0] LEGUP_F_get_input_BB_0_9 = 8'd9;
parameter [7:0] LEGUP_F_get_input_BB_0_10 = 8'd10;
parameter [7:0] LEGUP_F_get_input_BB_0_11 = 8'd11;
parameter [7:0] LEGUP_F_get_input_BB_0_12 = 8'd12;
parameter [7:0] LEGUP_F_get_input_BB_0_13 = 8'd13;
parameter [7:0] LEGUP_F_get_input_BB_0_14 = 8'd14;
parameter [7:0] LEGUP_F_get_input_BB_0_15 = 8'd15;
parameter [7:0] LEGUP_F_get_input_BB_0_16 = 8'd16;
parameter [7:0] LEGUP_F_get_input_BB_0_17 = 8'd17;
parameter [7:0] LEGUP_F_get_input_BB_0_18 = 8'd18;
parameter [7:0] LEGUP_F_get_input_BB_0_19 = 8'd19;
parameter [7:0] LEGUP_F_get_input_BB_0_20 = 8'd20;
parameter [7:0] LEGUP_F_get_input_BB_0_21 = 8'd21;
parameter [7:0] LEGUP_F_get_input_BB_0_22 = 8'd22;
parameter [7:0] LEGUP_F_get_input_BB_0_23 = 8'd23;
parameter [7:0] LEGUP_F_get_input_BB_0_24 = 8'd24;
parameter [7:0] LEGUP_F_get_input_BB_0_25 = 8'd25;
parameter [7:0] LEGUP_F_get_input_BB_0_26 = 8'd26;
parameter [7:0] LEGUP_F_get_input_BB_0_27 = 8'd27;
parameter [7:0] LEGUP_F_get_input_BB_0_28 = 8'd28;
parameter [7:0] LEGUP_F_get_input_BB_0_29 = 8'd29;
parameter [7:0] LEGUP_F_get_input_BB_0_30 = 8'd30;
parameter [7:0] LEGUP_F_get_input_BB_0_31 = 8'd31;
parameter [7:0] LEGUP_F_get_input_BB_0_32 = 8'd32;
parameter [7:0] LEGUP_F_get_input_BB_0_33 = 8'd33;
parameter [7:0] LEGUP_F_get_input_BB_0_34 = 8'd34;
parameter [7:0] LEGUP_F_get_input_BB__preheader50_35 = 8'd35;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph52_36 = 8'd36;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph52_37 = 8'd37;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph52_38 = 8'd38;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph52_39 = 8'd39;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph52_40 = 8'd40;
parameter [7:0] LEGUP_F_get_input_BB__preheader23_41 = 8'd41;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph25_42 = 8'd42;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph25_43 = 8'd43;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph25_44 = 8'd44;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph25_45 = 8'd45;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph25_46 = 8'd46;
parameter [7:0] LEGUP_F_get_input_BB__preheader36_loopexit_47 = 8'd47;
parameter [7:0] LEGUP_F_get_input_BB__preheader36_48 = 8'd48;
parameter [7:0] LEGUP_F_get_input_BB__preheader32_lr_ph_split_us_49 = 8'd49;
parameter [7:0] LEGUP_F_get_input_BB__preheader32_lr_ph_split_us_50 = 8'd50;
parameter [7:0] LEGUP_F_get_input_BB_29_51 = 8'd51;
parameter [7:0] LEGUP_F_get_input_BB_31_52 = 8'd52;
parameter [7:0] LEGUP_F_get_input_BB_31_53 = 8'd53;
parameter [7:0] LEGUP_F_get_input_BB_31_54 = 8'd54;
parameter [7:0] LEGUP_F_get_input_BB_31_55 = 8'd55;
parameter [7:0] LEGUP_F_get_input_BB_31_56 = 8'd56;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph34_us_57 = 8'd57;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph34_us_58 = 8'd58;
parameter [7:0] LEGUP_F_get_input_BB_34_59 = 8'd59;
parameter [7:0] LEGUP_F_get_input_BB_34_60 = 8'd60;
parameter [7:0] LEGUP_F_get_input_BB_34_61 = 8'd61;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph42_62 = 8'd62;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph42_63 = 8'd63;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph42_64 = 8'd64;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph42_65 = 8'd65;
parameter [7:0] LEGUP_F_get_input_BB_36_66 = 8'd66;
parameter [7:0] LEGUP_F_get_input_BB_36_67 = 8'd67;
parameter [7:0] LEGUP_F_get_input_BB_36_68 = 8'd68;
parameter [7:0] LEGUP_F_get_input_BB_36_69 = 8'd69;
parameter [7:0] LEGUP_F_get_input_BB_36_70 = 8'd70;
parameter [7:0] LEGUP_F_get_input_BB_36_71 = 8'd71;
parameter [7:0] LEGUP_F_get_input_BB_36_72 = 8'd72;
parameter [7:0] LEGUP_F_get_input_BB_36_73 = 8'd73;
parameter [7:0] LEGUP_F_get_input_BB_36_74 = 8'd74;
parameter [7:0] LEGUP_F_get_input_BB_36_75 = 8'd75;
parameter [7:0] LEGUP_F_get_input_BB_36_76 = 8'd76;
parameter [7:0] LEGUP_F_get_input_BB_36_77 = 8'd77;
parameter [7:0] LEGUP_F_get_input_BB_36_78 = 8'd78;
parameter [7:0] LEGUP_F_get_input_BB_36_79 = 8'd79;
parameter [7:0] LEGUP_F_get_input_BB_36_80 = 8'd80;
parameter [7:0] LEGUP_F_get_input_BB_36_81 = 8'd81;
parameter [7:0] LEGUP_F_get_input_BB__loopexit39_loopexit_82 = 8'd82;
parameter [7:0] LEGUP_F_get_input_BB__loopexit39_83 = 8'd83;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph44_preheader_84 = 8'd84;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph44_85 = 8'd85;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph44_86 = 8'd86;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph44_87 = 8'd87;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph44_88 = 8'd88;
parameter [7:0] LEGUP_F_get_input_BB___crit_edge45_89 = 8'd89;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph48_preheader_90 = 8'd90;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph48_91 = 8'd91;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph48_92 = 8'd92;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph48_93 = 8'd93;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph48_94 = 8'd94;
parameter [7:0] LEGUP_F_get_input_BB___crit_edge49_loopexit_95 = 8'd95;
parameter [7:0] LEGUP_F_get_input_BB___crit_edge49_96 = 8'd96;
parameter [7:0] LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_97 = 8'd97;
parameter [7:0] LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_98 = 8'd98;
parameter [7:0] LEGUP_F_get_input_BB_44_99 = 8'd99;
parameter [7:0] LEGUP_F_get_input_BB_45_100 = 8'd100;
parameter [7:0] LEGUP_F_get_input_BB_45_101 = 8'd101;
parameter [7:0] LEGUP_F_get_input_BB_45_102 = 8'd102;
parameter [7:0] LEGUP_F_get_input_BB_45_103 = 8'd103;
parameter [7:0] LEGUP_F_get_input_BB_45_104 = 8'd104;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph28_us_105 = 8'd105;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph28_us_106 = 8'd106;
parameter [7:0] LEGUP_F_get_input_BB__preheader9_loopexit_107 = 8'd107;
parameter [7:0] LEGUP_F_get_input_BB__preheader9_108 = 8'd108;
parameter [7:0] LEGUP_F_get_input_BB__preheader5_lr_ph_split_us_109 = 8'd109;
parameter [7:0] LEGUP_F_get_input_BB__preheader5_lr_ph_split_us_110 = 8'd110;
parameter [7:0] LEGUP_F_get_input_BB_50_111 = 8'd111;
parameter [7:0] LEGUP_F_get_input_BB_52_112 = 8'd112;
parameter [7:0] LEGUP_F_get_input_BB_52_113 = 8'd113;
parameter [7:0] LEGUP_F_get_input_BB_52_114 = 8'd114;
parameter [7:0] LEGUP_F_get_input_BB_52_115 = 8'd115;
parameter [7:0] LEGUP_F_get_input_BB_52_116 = 8'd116;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph7_us_117 = 8'd117;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph7_us_118 = 8'd118;
parameter [7:0] LEGUP_F_get_input_BB_55_119 = 8'd119;
parameter [7:0] LEGUP_F_get_input_BB_55_120 = 8'd120;
parameter [7:0] LEGUP_F_get_input_BB_55_121 = 8'd121;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph15_122 = 8'd122;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph15_123 = 8'd123;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph15_124 = 8'd124;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph15_125 = 8'd125;
parameter [7:0] LEGUP_F_get_input_BB_57_126 = 8'd126;
parameter [7:0] LEGUP_F_get_input_BB_57_127 = 8'd127;
parameter [7:0] LEGUP_F_get_input_BB_57_128 = 8'd128;
parameter [7:0] LEGUP_F_get_input_BB_57_129 = 8'd129;
parameter [7:0] LEGUP_F_get_input_BB_57_130 = 8'd130;
parameter [7:0] LEGUP_F_get_input_BB_57_131 = 8'd131;
parameter [7:0] LEGUP_F_get_input_BB_57_132 = 8'd132;
parameter [7:0] LEGUP_F_get_input_BB_57_133 = 8'd133;
parameter [7:0] LEGUP_F_get_input_BB_57_134 = 8'd134;
parameter [7:0] LEGUP_F_get_input_BB_57_135 = 8'd135;
parameter [7:0] LEGUP_F_get_input_BB_57_136 = 8'd136;
parameter [7:0] LEGUP_F_get_input_BB_57_137 = 8'd137;
parameter [7:0] LEGUP_F_get_input_BB_57_138 = 8'd138;
parameter [7:0] LEGUP_F_get_input_BB_57_139 = 8'd139;
parameter [7:0] LEGUP_F_get_input_BB_57_140 = 8'd140;
parameter [7:0] LEGUP_F_get_input_BB_57_141 = 8'd141;
parameter [7:0] LEGUP_F_get_input_BB__loopexit12_loopexit_142 = 8'd142;
parameter [7:0] LEGUP_F_get_input_BB__loopexit12_143 = 8'd143;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph17_preheader_144 = 8'd144;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph17_145 = 8'd145;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph17_146 = 8'd146;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph17_147 = 8'd147;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph17_148 = 8'd148;
parameter [7:0] LEGUP_F_get_input_BB___crit_edge18_149 = 8'd149;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph21_preheader_150 = 8'd150;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph21_151 = 8'd151;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph21_152 = 8'd152;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph21_153 = 8'd153;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph21_154 = 8'd154;
parameter [7:0] LEGUP_F_get_input_BB___crit_edge22_loopexit_155 = 8'd155;
parameter [7:0] LEGUP_F_get_input_BB___crit_edge22_156 = 8'd156;
parameter [7:0] LEGUP_F_get_input_BB__preheader_lr_ph_split_us_157 = 8'd157;
parameter [7:0] LEGUP_F_get_input_BB__preheader_lr_ph_split_us_158 = 8'd158;
parameter [7:0] LEGUP_F_get_input_BB_65_159 = 8'd159;
parameter [7:0] LEGUP_F_get_input_BB_66_160 = 8'd160;
parameter [7:0] LEGUP_F_get_input_BB_66_161 = 8'd161;
parameter [7:0] LEGUP_F_get_input_BB_66_162 = 8'd162;
parameter [7:0] LEGUP_F_get_input_BB_66_163 = 8'd163;
parameter [7:0] LEGUP_F_get_input_BB_66_164 = 8'd164;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph_us_165 = 8'd165;
parameter [7:0] LEGUP_F_get_input_BB__lr_ph_us_166 = 8'd166;
parameter [7:0] LEGUP_F_get_input_BB__loopexit_loopexit_167 = 8'd167;
parameter [7:0] LEGUP_F_get_input_BB__loopexit_loopexit1_168 = 8'd168;
parameter [7:0] LEGUP_F_get_input_BB__loopexit_169 = 8'd169;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_s;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_fft_hdata;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_in;
input [31:0] arg_w;
input [31:0] arg_h;
input [31:0] arg_n;
input [31:0] arg_plane;
input [31:0] arg_scale;
reg [7:0] cur_state;
reg [31:0] get_input_0_1;
reg [31:0] get_input_0_1_reg;
reg [31:0] get_input_0_2;
reg [31:0] get_input_0_2_reg;
reg [31:0] get_input_0_3;
reg [31:0] get_input_0_3_reg;
reg [31:0] get_input_0_4;
reg [31:0] get_input_0_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_0_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_0_5_reg;
reg [31:0] get_input_0_6;
reg [31:0] get_input_0_6_reg;
reg  get_input_0_7;
reg  get_input_0_7_reg;
reg  get_input_0_8;
reg  get_input_0_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph52_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph52_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph52_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph52_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph52_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph52_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph52_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph52_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph52_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph52_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph52_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph52_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph52_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph52_15_reg;
reg  get_input__lr_ph52_16;
reg  get_input__lr_ph52_16_reg;
reg  get_input__lr_ph52_17;
reg  get_input__lr_ph52_17_reg;
reg  get_input__lr_ph52_tmp258;
reg  get_input__lr_ph52_tmp258_reg;
reg [31:0] get_input__lr_ph52_smax259;
reg [31:0] get_input__lr_ph52_smax259_reg;
reg [31:0] get_input__lr_ph52_tmp269;
reg [31:0] get_input__lr_ph52_tmp269_reg;
reg [31:0] get_input__lr_ph52_tmp270;
reg [31:0] get_input__lr_ph52_tmp270_reg;
reg  get_input__lr_ph52_tmp271;
reg  get_input__lr_ph52_tmp271_reg;
reg [31:0] get_input__lr_ph52_smax272;
reg [31:0] get_input__lr_ph52_smax272_reg;
reg [31:0] get_input__lr_ph52_tmp273;
reg [31:0] get_input__lr_ph52_tmp273_reg;
reg [31:0] get_input__lr_ph52_tmp274;
reg [31:0] get_input__lr_ph52_tmp274_reg;
reg [31:0] get_input__lr_ph52_tmp277;
reg [31:0] get_input__lr_ph52_tmp277_reg;
reg [31:0] get_input__lr_ph52_tmp278;
reg [31:0] get_input__lr_ph52_tmp278_reg;
reg [31:0] get_input__lr_ph52_tmp279;
reg [31:0] get_input__lr_ph52_tmp279_reg;
reg [31:0] get_input__lr_ph52_tmp292;
reg [31:0] get_input__lr_ph52_tmp292_reg;
reg [31:0] get_input__lr_ph52_tmp298;
reg [31:0] get_input__lr_ph52_tmp298_reg;
reg [31:0] get_input__lr_ph52_tmp307;
reg [31:0] get_input__lr_ph52_tmp307_reg;
reg [31:0] get_input__lr_ph52_tmp308;
reg [31:0] get_input__lr_ph52_tmp308_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph25_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph25_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph25_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph25_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph25_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph25_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph25_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph25_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph25_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph25_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph25_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph25_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph25_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph25_24_reg;
reg  get_input__lr_ph25_25;
reg  get_input__lr_ph25_25_reg;
reg  get_input__lr_ph25_26;
reg  get_input__lr_ph25_26_reg;
reg  get_input__lr_ph25_tmp173;
reg  get_input__lr_ph25_tmp173_reg;
reg [31:0] get_input__lr_ph25_smax174;
reg [31:0] get_input__lr_ph25_smax174_reg;
reg [31:0] get_input__lr_ph25_tmp184;
reg [31:0] get_input__lr_ph25_tmp184_reg;
reg [31:0] get_input__lr_ph25_tmp185;
reg [31:0] get_input__lr_ph25_tmp185_reg;
reg  get_input__lr_ph25_tmp186;
reg  get_input__lr_ph25_tmp186_reg;
reg [31:0] get_input__lr_ph25_smax187;
reg [31:0] get_input__lr_ph25_smax187_reg;
reg [31:0] get_input__lr_ph25_tmp188;
reg [31:0] get_input__lr_ph25_tmp188_reg;
reg [31:0] get_input__lr_ph25_tmp189;
reg [31:0] get_input__lr_ph25_tmp189_reg;
reg [31:0] get_input__lr_ph25_tmp192;
reg [31:0] get_input__lr_ph25_tmp192_reg;
reg [31:0] get_input__lr_ph25_tmp193;
reg [31:0] get_input__lr_ph25_tmp193_reg;
reg [31:0] get_input__lr_ph25_tmp194;
reg [31:0] get_input__lr_ph25_tmp194_reg;
reg [31:0] get_input__lr_ph25_tmp207;
reg [31:0] get_input__lr_ph25_tmp207_reg;
reg [31:0] get_input__lr_ph25_tmp213;
reg [31:0] get_input__lr_ph25_tmp213_reg;
reg [31:0] get_input__lr_ph25_tmp222;
reg [31:0] get_input__lr_ph25_tmp222_reg;
reg [31:0] get_input__lr_ph25_tmp223;
reg [31:0] get_input__lr_ph25_tmp223_reg;
reg  get_input__preheader36_27;
reg  get_input__preheader36_27_reg;
reg  get_input__preheader36_28;
reg  get_input__preheader36_28_reg;
reg  get_input__preheader36_or_cond;
reg  get_input__preheader36_or_cond_reg;
reg [31:0] get_input__preheader32_lr_ph_split_us_tmp56;
reg [31:0] get_input__preheader32_lr_ph_split_us_tmp56_reg;
reg  get_input__preheader32_lr_ph_split_us_tmp60;
reg  get_input__preheader32_lr_ph_split_us_tmp60_reg;
reg [31:0] get_input__preheader32_lr_ph_split_us_smax;
reg [31:0] get_input__preheader32_lr_ph_split_us_smax_reg;
reg [31:0] get_input_29_30;
reg [31:0] get_input_29_30_reg;
reg  get_input_29_exitcond61;
reg  get_input_29_exitcond61_reg;
reg [31:0] get_input_31_x_333_us;
reg [31:0] get_input_31_x_333_us_reg;
reg [31:0] get_input_31_tmp63;
reg [31:0] get_input_31_tmp63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_31_scevgep5455;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_31_scevgep5455_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_31_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_31_scevgep_reg;
reg [31:0] get_input_31_tmp57;
reg [31:0] get_input_31_tmp57_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_31_scevgep5859;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_31_scevgep5859_reg;
reg [31:0] get_input_31_32;
reg [31:0] get_input_31_32_reg;
reg [31:0] get_input_31_33;
reg [31:0] get_input_31_33_reg;
reg  get_input_31_exitcond;
reg  get_input_31_exitcond_reg;
reg [31:0] get_input__lr_ph34_us_y_137_us;
reg [31:0] get_input__lr_ph34_us_y_137_us_reg;
reg [31:0] get_input__lr_ph34_us_tmp62;
reg [31:0] get_input__lr_ph34_us_tmp62_reg;
reg [31:0] get_input_34_y_051;
reg [31:0] get_input_34_y_051_reg;
reg [31:0] get_input_34_tmp286;
reg [31:0] get_input_34_tmp286_reg;
reg [31:0] get_input_34_tmp287;
reg [31:0] get_input_34_tmp287_reg;
reg [31:0] get_input_34_tmp292315;
reg [31:0] get_input_34_tmp292315_reg;
reg [31:0] get_input_34_tmp293;
reg [31:0] get_input_34_tmp293_reg;
reg [31:0] get_input_34_tmp299;
reg [31:0] get_input_34_tmp299_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_34_scevgep305306;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_34_scevgep305306_reg;
reg [31:0] get_input_34_tmp309;
reg [31:0] get_input_34_tmp309_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_34_scevgep310311;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_34_scevgep310311_reg;
reg [31:0] get_input__lr_ph42_35;
reg [31:0] get_input__lr_ph42_35_reg;
reg [31:0] get_input__lr_ph42_tmp246;
reg [31:0] get_input__lr_ph42_tmp246_reg;
reg [31:0] get_input__lr_ph42_tmp247;
reg [31:0] get_input__lr_ph42_tmp247_reg;
reg [31:0] get_input_36_x_040;
reg [31:0] get_input_36_x_040_reg;
reg [31:0] get_input_36_tmp300;
reg [31:0] get_input_36_tmp300_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_36_scevgep256257;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_36_scevgep256257_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_36_scevgep255;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_36_scevgep255_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_36_scevgep244;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_36_scevgep244_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_36_scevgep244245;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_36_scevgep244245_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_36_uglygep248;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_36_uglygep248_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_36_uglygep248249;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_36_uglygep248249_reg;
reg [31:0] get_input_36_37;
reg [31:0] get_input_36_37_reg;
reg [31:0] get_input_36_38;
reg [31:0] get_input_36_38_reg;
reg [31:0] get_input_36_39;
reg [31:0] get_input_36_39_reg;
reg  get_input_36_exitcond243;
reg  get_input_36_exitcond243_reg;
reg [31:0] get_input__lr_ph44_x_143;
reg [31:0] get_input__lr_ph44_x_143_reg;
reg [31:0] get_input__lr_ph44_tmp294;
reg [31:0] get_input__lr_ph44_tmp294_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph44_scevgep265266;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph44_scevgep265266_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph44_scevgep264;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph44_scevgep264_reg;
reg [31:0] get_input__lr_ph44_40;
reg [31:0] get_input__lr_ph44_40_reg;
reg [31:0] get_input__lr_ph44_41;
reg [31:0] get_input__lr_ph44_41_reg;
reg  get_input__lr_ph44_exitcond260;
reg  get_input__lr_ph44_exitcond260_reg;
reg [31:0] get_input__lr_ph48_indvar267;
reg [31:0] get_input__lr_ph48_indvar267_reg;
reg [31:0] get_input__lr_ph48_tmp288;
reg [31:0] get_input__lr_ph48_tmp288_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph48_scevgep283284;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph48_scevgep283284_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph48_scevgep282;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph48_scevgep282_reg;
reg [31:0] get_input__lr_ph48_42;
reg [31:0] get_input__lr_ph48_42_reg;
reg [31:0] get_input__lr_ph48_indvar_next268;
reg [31:0] get_input__lr_ph48_indvar_next268_reg;
reg  get_input__lr_ph48_exitcond275;
reg  get_input__lr_ph48_exitcond275_reg;
reg [31:0] get_input___crit_edge49_43;
reg [31:0] get_input___crit_edge49_43_reg;
reg  get_input___crit_edge49_exitcond285;
reg  get_input___crit_edge49_exitcond285_reg;
reg [31:0] get_input__preheader26_lr_ph_split_us_tmp75;
reg [31:0] get_input__preheader26_lr_ph_split_us_tmp75_reg;
reg [31:0] get_input__preheader26_lr_ph_split_us_tmp76;
reg [31:0] get_input__preheader26_lr_ph_split_us_tmp76_reg;
reg [31:0] get_input__preheader26_lr_ph_split_us_tmp77;
reg [31:0] get_input__preheader26_lr_ph_split_us_tmp77_reg;
reg [31:0] get_input__preheader26_lr_ph_split_us_tmp81;
reg [31:0] get_input__preheader26_lr_ph_split_us_tmp81_reg;
reg [31:0] get_input__preheader26_lr_ph_split_us_tmp82;
reg [31:0] get_input__preheader26_lr_ph_split_us_tmp82_reg;
reg  get_input__preheader26_lr_ph_split_us_tmp83;
reg  get_input__preheader26_lr_ph_split_us_tmp83_reg;
reg [31:0] get_input__preheader26_lr_ph_split_us_smax84;
reg [31:0] get_input__preheader26_lr_ph_split_us_smax84_reg;
reg [31:0] get_input__preheader26_lr_ph_split_us_tmp85;
reg [31:0] get_input__preheader26_lr_ph_split_us_tmp85_reg;
reg [31:0] get_input__preheader26_lr_ph_split_us_tmp86;
reg [31:0] get_input__preheader26_lr_ph_split_us_tmp86_reg;
reg [31:0] get_input__preheader26_lr_ph_split_us_tmp89;
reg [31:0] get_input__preheader26_lr_ph_split_us_tmp89_reg;
reg [31:0] get_input_44_indvar_next;
reg [31:0] get_input_44_indvar_next_reg;
reg  get_input_44_exitcond87;
reg  get_input_44_exitcond87_reg;
reg [31:0] get_input_45_x_427_us;
reg [31:0] get_input_45_x_427_us_reg;
reg [31:0] get_input_45_tmp92;
reg [31:0] get_input_45_tmp92_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_45_scevgep7374;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_45_scevgep7374_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_45_scevgep72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_45_scevgep72_reg;
reg [31:0] get_input_45_tmp78;
reg [31:0] get_input_45_tmp78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_45_scevgep7980;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_45_scevgep7980_reg;
reg [31:0] get_input_45_46;
reg [31:0] get_input_45_46_reg;
reg [31:0] get_input_45_47;
reg [31:0] get_input_45_47_reg;
reg  get_input_45_exitcond67;
reg  get_input_45_exitcond67_reg;
reg [31:0] get_input__lr_ph28_us_indvar;
reg [31:0] get_input__lr_ph28_us_indvar_reg;
reg [31:0] get_input__lr_ph28_us_tmp90314;
reg [31:0] get_input__lr_ph28_us_tmp90314_reg;
reg [31:0] get_input__lr_ph28_us_tmp91;
reg [31:0] get_input__lr_ph28_us_tmp91_reg;
reg  get_input__preheader9_48;
reg  get_input__preheader9_48_reg;
reg  get_input__preheader9_49;
reg  get_input__preheader9_49_reg;
reg  get_input__preheader9_or_cond319;
reg  get_input__preheader9_or_cond319_reg;
reg [31:0] get_input__preheader5_lr_ph_split_us_tmp101;
reg [31:0] get_input__preheader5_lr_ph_split_us_tmp101_reg;
reg  get_input__preheader5_lr_ph_split_us_tmp105;
reg  get_input__preheader5_lr_ph_split_us_tmp105_reg;
reg [31:0] get_input__preheader5_lr_ph_split_us_smax106;
reg [31:0] get_input__preheader5_lr_ph_split_us_smax106_reg;
reg [31:0] get_input_50_51;
reg [31:0] get_input_50_51_reg;
reg  get_input_50_exitcond107;
reg  get_input_50_exitcond107_reg;
reg [31:0] get_input_52_x_86_us;
reg [31:0] get_input_52_x_86_us_reg;
reg [31:0] get_input_52_tmp109;
reg [31:0] get_input_52_tmp109_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_52_scevgep99100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_52_scevgep99100_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_52_scevgep98;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_52_scevgep98_reg;
reg [31:0] get_input_52_tmp102;
reg [31:0] get_input_52_tmp102_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_52_scevgep103104;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_52_scevgep103104_reg;
reg [31:0] get_input_52_53;
reg [31:0] get_input_52_53_reg;
reg [31:0] get_input_52_54;
reg [31:0] get_input_52_54_reg;
reg  get_input_52_exitcond96;
reg  get_input_52_exitcond96_reg;
reg [31:0] get_input__lr_ph7_us_y_410_us;
reg [31:0] get_input__lr_ph7_us_y_410_us_reg;
reg [31:0] get_input__lr_ph7_us_tmp108;
reg [31:0] get_input__lr_ph7_us_tmp108_reg;
reg [31:0] get_input_55_y_324;
reg [31:0] get_input_55_y_324_reg;
reg [31:0] get_input_55_tmp201;
reg [31:0] get_input_55_tmp201_reg;
reg [31:0] get_input_55_tmp202;
reg [31:0] get_input_55_tmp202_reg;
reg [31:0] get_input_55_tmp207313;
reg [31:0] get_input_55_tmp207313_reg;
reg [31:0] get_input_55_tmp208;
reg [31:0] get_input_55_tmp208_reg;
reg [31:0] get_input_55_tmp214;
reg [31:0] get_input_55_tmp214_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_55_scevgep220221;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_55_scevgep220221_reg;
reg [31:0] get_input_55_tmp224;
reg [31:0] get_input_55_tmp224_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_55_scevgep225226;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_55_scevgep225226_reg;
reg [31:0] get_input__lr_ph15_56;
reg [31:0] get_input__lr_ph15_56_reg;
reg [31:0] get_input__lr_ph15_tmp162;
reg [31:0] get_input__lr_ph15_tmp162_reg;
reg [31:0] get_input__lr_ph15_tmp163;
reg [31:0] get_input__lr_ph15_tmp163_reg;
reg [31:0] get_input_57_x_513;
reg [31:0] get_input_57_x_513_reg;
reg [31:0] get_input_57_tmp215;
reg [31:0] get_input_57_tmp215_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_57_scevgep171172;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_57_scevgep171172_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_57_scevgep170;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_57_scevgep170_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_57_scevgep160;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_57_scevgep160_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_57_scevgep160161;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_57_scevgep160161_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_57_uglygep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_57_uglygep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_57_uglygep164;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_57_uglygep164_reg;
reg [31:0] get_input_57_58;
reg [31:0] get_input_57_58_reg;
reg [31:0] get_input_57_59;
reg [31:0] get_input_57_59_reg;
reg [31:0] get_input_57_60;
reg [31:0] get_input_57_60_reg;
reg  get_input_57_exitcond159;
reg  get_input_57_exitcond159_reg;
reg [31:0] get_input__lr_ph17_x_616;
reg [31:0] get_input__lr_ph17_x_616_reg;
reg [31:0] get_input__lr_ph17_tmp209;
reg [31:0] get_input__lr_ph17_tmp209_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph17_scevgep180181;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph17_scevgep180181_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph17_scevgep179;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph17_scevgep179_reg;
reg [31:0] get_input__lr_ph17_61;
reg [31:0] get_input__lr_ph17_61_reg;
reg [31:0] get_input__lr_ph17_62;
reg [31:0] get_input__lr_ph17_62_reg;
reg  get_input__lr_ph17_exitcond175;
reg  get_input__lr_ph17_exitcond175_reg;
reg [31:0] get_input__lr_ph21_indvar182;
reg [31:0] get_input__lr_ph21_indvar182_reg;
reg [31:0] get_input__lr_ph21_tmp203;
reg [31:0] get_input__lr_ph21_tmp203_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph21_scevgep198199;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph21_scevgep198199_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph21_scevgep197;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input__lr_ph21_scevgep197_reg;
reg [31:0] get_input__lr_ph21_63;
reg [31:0] get_input__lr_ph21_63_reg;
reg [31:0] get_input__lr_ph21_indvar_next183;
reg [31:0] get_input__lr_ph21_indvar_next183_reg;
reg  get_input__lr_ph21_exitcond190;
reg  get_input__lr_ph21_exitcond190_reg;
reg [31:0] get_input___crit_edge22_64;
reg [31:0] get_input___crit_edge22_64_reg;
reg  get_input___crit_edge22_exitcond200;
reg  get_input___crit_edge22_exitcond200_reg;
reg [31:0] get_input__preheader_lr_ph_split_us_tmp123;
reg [31:0] get_input__preheader_lr_ph_split_us_tmp123_reg;
reg [31:0] get_input__preheader_lr_ph_split_us_tmp124;
reg [31:0] get_input__preheader_lr_ph_split_us_tmp124_reg;
reg [31:0] get_input__preheader_lr_ph_split_us_tmp125;
reg [31:0] get_input__preheader_lr_ph_split_us_tmp125_reg;
reg [31:0] get_input__preheader_lr_ph_split_us_tmp129;
reg [31:0] get_input__preheader_lr_ph_split_us_tmp129_reg;
reg [31:0] get_input__preheader_lr_ph_split_us_tmp130;
reg [31:0] get_input__preheader_lr_ph_split_us_tmp130_reg;
reg  get_input__preheader_lr_ph_split_us_tmp131;
reg  get_input__preheader_lr_ph_split_us_tmp131_reg;
reg [31:0] get_input__preheader_lr_ph_split_us_smax132;
reg [31:0] get_input__preheader_lr_ph_split_us_smax132_reg;
reg [31:0] get_input__preheader_lr_ph_split_us_tmp133;
reg [31:0] get_input__preheader_lr_ph_split_us_tmp133_reg;
reg [31:0] get_input__preheader_lr_ph_split_us_tmp134;
reg [31:0] get_input__preheader_lr_ph_split_us_tmp134_reg;
reg [31:0] get_input__preheader_lr_ph_split_us_tmp137;
reg [31:0] get_input__preheader_lr_ph_split_us_tmp137_reg;
reg [31:0] get_input_65_indvar_next115;
reg [31:0] get_input_65_indvar_next115_reg;
reg  get_input_65_exitcond135;
reg  get_input_65_exitcond135_reg;
reg [31:0] get_input_66_x_93_us;
reg [31:0] get_input_66_x_93_us_reg;
reg [31:0] get_input_66_tmp140;
reg [31:0] get_input_66_tmp140_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_66_scevgep121122;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_66_scevgep121122_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_66_scevgep120;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_66_scevgep120_reg;
reg [31:0] get_input_66_tmp126;
reg [31:0] get_input_66_tmp126_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_66_scevgep127128;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_66_scevgep127128_reg;
reg [31:0] get_input_66_67;
reg [31:0] get_input_66_67_reg;
reg [31:0] get_input_66_68;
reg [31:0] get_input_66_68_reg;
reg  get_input_66_exitcond113;
reg  get_input_66_exitcond113_reg;
reg [31:0] get_input__lr_ph_us_indvar114;
reg [31:0] get_input__lr_ph_us_indvar114_reg;
reg [31:0] get_input__lr_ph_us_tmp138312;
reg [31:0] get_input__lr_ph_us_tmp138312_reg;
reg [31:0] get_input__lr_ph_us_tmp139;
reg [31:0] get_input__lr_ph_us_tmp139_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg [31:0] get_input_signed_divide_32_0_op0;
reg [31:0] get_input_signed_divide_32_0_op1;
wire [31:0] lpm_divide_get_input_0_2_temp_out;
wire [31:0] get_input_0_2_unused;
reg  lpm_divide_get_input_0_2_en;
reg [31:0] lpm_divide_get_input_0_2_out;
reg [31:0] get_input_signed_divide_32_0;
reg [31:0] get_input_altfp_multiply_32_0_op0;
reg [31:0] get_input_altfp_multiply_32_0_op1;
wire [31:0] altfp_multiplier_get_input_57_59_out;
reg  altfp_get_input_57_59_en;
reg [31:0] get_input_altfp_multiply_32_0;
reg  lpm_divide_get_input_0_4_en;
reg  lpm_mult_get_input__lr_ph52_tmp278_en;
reg [31:0] get_input__lr_ph52_tmp278_stage0_reg;
reg  lpm_mult_get_input__lr_ph52_tmp292_en;
reg [31:0] get_input__lr_ph52_tmp292_stage0_reg;
reg  lpm_mult_get_input__lr_ph25_tmp193_en;
reg [31:0] get_input__lr_ph25_tmp193_stage0_reg;
reg  lpm_mult_get_input__lr_ph25_tmp207_en;
reg [31:0] get_input__lr_ph25_tmp207_stage0_reg;
reg  lpm_mult_get_input__preheader32_lr_ph_split_us_tmp56_en;
reg [31:0] get_input__preheader32_lr_ph_split_us_tmp56_stage0_reg;
reg  lpm_mult_get_input__lr_ph34_us_tmp62_en;
reg [31:0] get_input__lr_ph34_us_tmp62_stage0_reg;
reg  lpm_mult_get_input_34_tmp286_en;
reg [31:0] get_input_34_tmp286_stage0_reg;
reg  lpm_mult_get_input_34_tmp293_en;
reg [31:0] get_input_34_tmp293_stage0_reg;
reg  lpm_mult_get_input__lr_ph42_tmp247_en;
reg [31:0] get_input__lr_ph42_tmp247_stage0_reg;
reg  altfp_get_input_36_38_en;
reg  lpm_mult_get_input__preheader26_lr_ph_split_us_tmp77_en;
reg [31:0] get_input__preheader26_lr_ph_split_us_tmp77_stage0_reg;
reg  lpm_mult_get_input__lr_ph28_us_tmp91_en;
reg [31:0] get_input__lr_ph28_us_tmp91_stage0_reg;
reg  lpm_mult_get_input__preheader5_lr_ph_split_us_tmp101_en;
reg [31:0] get_input__preheader5_lr_ph_split_us_tmp101_stage0_reg;
reg  lpm_mult_get_input__lr_ph7_us_tmp108_en;
reg [31:0] get_input__lr_ph7_us_tmp108_stage0_reg;
reg  lpm_mult_get_input_55_tmp201_en;
reg [31:0] get_input_55_tmp201_stage0_reg;
reg  lpm_mult_get_input_55_tmp208_en;
reg [31:0] get_input_55_tmp208_stage0_reg;
reg  lpm_mult_get_input__lr_ph15_tmp163_en;
reg [31:0] get_input__lr_ph15_tmp163_stage0_reg;
reg  lpm_mult_get_input__preheader_lr_ph_split_us_tmp125_en;
reg [31:0] get_input__preheader_lr_ph_split_us_tmp125_stage0_reg;
reg  lpm_mult_get_input__lr_ph_us_tmp139_en;
reg [31:0] get_input__lr_ph_us_tmp139_stage0_reg;

/*   %2 = sdiv i32 %1, 2*/
lpm_divide lpm_divide_get_input_0_2 (
	.quotient (lpm_divide_get_input_0_2_temp_out),
	.remain (get_input_0_2_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_get_input_0_2_en),
	.numer (get_input_signed_divide_32_0_op0),
	.denom (get_input_signed_divide_32_0_op1)
);

defparam
	lpm_divide_get_input_0_2.lpm_pipeline = 32,
	lpm_divide_get_input_0_2.lpm_widthn = 32,
	lpm_divide_get_input_0_2.lpm_widthd = 32,
	lpm_divide_get_input_0_2.lpm_drepresentation = "SIGNED",
	lpm_divide_get_input_0_2.lpm_nrepresentation = "SIGNED",
	lpm_divide_get_input_0_2.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

/*   %59 = fmul float %58, %scale*/
altfp_multiplier_11 altfp_multiplier_11_get_input_57_59 (
	.result (altfp_multiplier_get_input_57_59_out),
	.dataa (get_input_altfp_multiply_32_0_op0),
	.datab (get_input_altfp_multiply_32_0_op1),
	.clock (clk),
	.clk_en (altfp_get_input_57_59_en)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_0_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_0_34) & (memory_controller_waitrequest == 1'd0)) & (get_input_0_7_reg == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader50_35;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader50_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_0_34) & (memory_controller_waitrequest == 1'd0)) & (get_input_0_7_reg == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader23_41;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader23_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__preheader50_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader50_35;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader50_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB__preheader50_35) & (memory_controller_waitrequest == 1'd0)) & (get_input_0_8_reg == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph52_36;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph52_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB__preheader50_35) & (memory_controller_waitrequest == 1'd0)) & (get_input_0_8_reg == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader36_48;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader36_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph52_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph52_36;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph52_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph52_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph52_37;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph52_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph52_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph52_37;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph52_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph52_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph52_38;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph52_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph52_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph52_38;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph52_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph52_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph52_39;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph52_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph52_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph52_39;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph52_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph52_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph52_40;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph52_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph52_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph52_40;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph52_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph52_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_34_59;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_34_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__preheader23_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader23_41;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader23_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB__preheader23_41) & (memory_controller_waitrequest == 1'd0)) & (get_input_0_8_reg == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph25_42;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph25_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB__preheader23_41) & (memory_controller_waitrequest == 1'd0)) & (get_input_0_8_reg == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader9_108;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader9_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph25_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph25_42;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph25_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph25_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph25_43;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph25_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph25_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph25_43;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph25_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph25_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph25_44;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph25_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph25_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph25_44;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph25_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph25_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph25_45;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph25_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph25_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph25_45;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph25_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph25_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph25_46;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph25_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph25_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph25_46;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph25_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph25_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_55_119;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_55_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__preheader36_loopexit_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader36_loopexit_47;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader36_loopexit_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__preheader36_loopexit_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader36_48;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader36_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__preheader36_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader36_48;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader36_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB__preheader36_48) & (memory_controller_waitrequest == 1'd0)) & (get_input__preheader36_or_cond == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader32_lr_ph_split_us_49;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader32_lr_ph_split_us_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB__preheader36_48) & (memory_controller_waitrequest == 1'd0)) & (get_input__preheader36_or_cond == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__loopexit_169;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__loopexit_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__preheader32_lr_ph_split_us_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader32_lr_ph_split_us_49;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader32_lr_ph_split_us_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__preheader32_lr_ph_split_us_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader32_lr_ph_split_us_50;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader32_lr_ph_split_us_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__preheader32_lr_ph_split_us_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader32_lr_ph_split_us_50;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader32_lr_ph_split_us_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__preheader32_lr_ph_split_us_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph34_us_57;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph34_us_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_29_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_29_51;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_29_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_29_51) & (memory_controller_waitrequest == 1'd0)) & (get_input_29_exitcond61 == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_97;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_29_51) & (memory_controller_waitrequest == 1'd0)) & (get_input_29_exitcond61 == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph34_us_57;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph34_us_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_31_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_31_52;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_31_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_31_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_31_53;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_31_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_31_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_31_53;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_31_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_31_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_31_54;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_31_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_31_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_31_54;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_31_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_31_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_31_55;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_31_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_31_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_31_55;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_31_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_31_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_31_56;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_31_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_31_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_31_56;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_31_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_31_56) & (memory_controller_waitrequest == 1'd0)) & (get_input_31_exitcond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_29_51;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_29_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_31_56) & (memory_controller_waitrequest == 1'd0)) & (get_input_31_exitcond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_31_52;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_31_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph34_us_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph34_us_57;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph34_us_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph34_us_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph34_us_58;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph34_us_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph34_us_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph34_us_58;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph34_us_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph34_us_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_31_52;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_31_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_34_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_34_59;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_34_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_34_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_34_60;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_34_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_34_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_34_60;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_34_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_34_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_34_61;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_34_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_34_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_34_61;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_34_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_34_61) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph52_16_reg == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph42_62;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph42_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_34_61) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph52_16_reg == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__loopexit39_83;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__loopexit39_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph42_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph42_62;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph42_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph42_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph42_63;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph42_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph42_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph42_63;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph42_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph42_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph42_64;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph42_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph42_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph42_64;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph42_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph42_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph42_65;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph42_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph42_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph42_65;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph42_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph42_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_36_66;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_36_66;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_36_67;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_36_67;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_36_68;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_36_68;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_36_69;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_36_69;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_36_70;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_36_70;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_36_71;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_36_71;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_36_72;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_36_72;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_36_73;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_36_73;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_36_74;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_36_74;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_36_75;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_36_75;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_36_76;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_36_76;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_36_77;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_36_77;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_36_78;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_36_78;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_36_79;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_36_79;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_36_80;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_36_80;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_36_81;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_36_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_36_81;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_36_81) & (memory_controller_waitrequest == 1'd0)) & (get_input_36_exitcond243_reg == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__loopexit39_loopexit_82;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__loopexit39_loopexit_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_36_81) & (memory_controller_waitrequest == 1'd0)) & (get_input_36_exitcond243_reg == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_36_66;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_36_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__loopexit39_loopexit_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__loopexit39_loopexit_82;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__loopexit39_loopexit_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__loopexit39_loopexit_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__loopexit39_83;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__loopexit39_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__loopexit39_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__loopexit39_83;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__loopexit39_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB__loopexit39_83) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph52_17_reg == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph44_preheader_84;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph44_preheader_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB__loopexit39_83) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph52_17_reg == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB___crit_edge49_96;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB___crit_edge49_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph44_preheader_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph44_preheader_84;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph44_preheader_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph44_preheader_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph44_85;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph44_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph44_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph44_85;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph44_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph44_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph44_86;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph44_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph44_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph44_86;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph44_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph44_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph44_87;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph44_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph44_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph44_87;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph44_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph44_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph44_88;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph44_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph44_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph44_88;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph44_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB__lr_ph44_88) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph44_exitcond260_reg == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB___crit_edge45_89;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB___crit_edge45_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB__lr_ph44_88) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph44_exitcond260_reg == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph44_85;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph44_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB___crit_edge45_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB___crit_edge45_89;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB___crit_edge45_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB___crit_edge45_89) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph52_17_reg == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph48_preheader_90;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph48_preheader_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB___crit_edge45_89) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph52_17_reg == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB___crit_edge49_96;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB___crit_edge49_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph48_preheader_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph48_preheader_90;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph48_preheader_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph48_preheader_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph48_91;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph48_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph48_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph48_91;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph48_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph48_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph48_92;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph48_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph48_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph48_92;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph48_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph48_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph48_93;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph48_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph48_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph48_93;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph48_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph48_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph48_94;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph48_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph48_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph48_94;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph48_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB__lr_ph48_94) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph48_exitcond275_reg == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB___crit_edge49_loopexit_95;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB___crit_edge49_loopexit_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB__lr_ph48_94) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph48_exitcond275_reg == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph48_91;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph48_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB___crit_edge49_loopexit_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB___crit_edge49_loopexit_95;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB___crit_edge49_loopexit_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB___crit_edge49_loopexit_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB___crit_edge49_96;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB___crit_edge49_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB___crit_edge49_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB___crit_edge49_96;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB___crit_edge49_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB___crit_edge49_96) & (memory_controller_waitrequest == 1'd0)) & (get_input___crit_edge49_exitcond285 == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader36_loopexit_47;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader36_loopexit_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB___crit_edge49_96) & (memory_controller_waitrequest == 1'd0)) & (get_input___crit_edge49_exitcond285 == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_34_59;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_34_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_97;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_98;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_98;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph28_us_105;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph28_us_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_44_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_44_99;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_44_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_44_99) & (memory_controller_waitrequest == 1'd0)) & (get_input_44_exitcond87 == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__loopexit_loopexit1_168;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__loopexit_loopexit1_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_44_99) & (memory_controller_waitrequest == 1'd0)) & (get_input_44_exitcond87 == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph28_us_105;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph28_us_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_45_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_45_100;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_45_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_45_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_45_101;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_45_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_45_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_45_101;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_45_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_45_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_45_102;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_45_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_45_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_45_102;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_45_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_45_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_45_103;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_45_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_45_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_45_103;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_45_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_45_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_45_104;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_45_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_45_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_45_104;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_45_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_45_104) & (memory_controller_waitrequest == 1'd0)) & (get_input_45_exitcond67_reg == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_44_99;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_44_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_45_104) & (memory_controller_waitrequest == 1'd0)) & (get_input_45_exitcond67_reg == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_45_100;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_45_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph28_us_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph28_us_105;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph28_us_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph28_us_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph28_us_106;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph28_us_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph28_us_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph28_us_106;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph28_us_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph28_us_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_45_100;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_45_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__preheader9_loopexit_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader9_loopexit_107;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader9_loopexit_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__preheader9_loopexit_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader9_108;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader9_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__preheader9_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader9_108;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader9_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB__preheader9_108) & (memory_controller_waitrequest == 1'd0)) & (get_input__preheader9_or_cond319 == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader5_lr_ph_split_us_109;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader5_lr_ph_split_us_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB__preheader9_108) & (memory_controller_waitrequest == 1'd0)) & (get_input__preheader9_or_cond319 == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__loopexit_169;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__loopexit_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__preheader5_lr_ph_split_us_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader5_lr_ph_split_us_109;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader5_lr_ph_split_us_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__preheader5_lr_ph_split_us_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader5_lr_ph_split_us_110;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader5_lr_ph_split_us_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__preheader5_lr_ph_split_us_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader5_lr_ph_split_us_110;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader5_lr_ph_split_us_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__preheader5_lr_ph_split_us_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph7_us_117;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph7_us_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_50_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_50_111;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_50_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_50_111) & (memory_controller_waitrequest == 1'd0)) & (get_input_50_exitcond107 == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader_lr_ph_split_us_157;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader_lr_ph_split_us_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_50_111) & (memory_controller_waitrequest == 1'd0)) & (get_input_50_exitcond107 == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph7_us_117;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph7_us_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_52_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_52_112;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_52_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_52_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_52_113;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_52_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_52_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_52_113;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_52_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_52_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_52_114;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_52_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_52_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_52_114;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_52_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_52_114) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_52_115;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_52_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_52_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_52_115;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_52_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_52_115) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_52_116;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_52_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_52_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_52_116;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_52_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_52_116) & (memory_controller_waitrequest == 1'd0)) & (get_input_52_exitcond96_reg == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_50_111;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_50_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_52_116) & (memory_controller_waitrequest == 1'd0)) & (get_input_52_exitcond96_reg == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_52_112;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_52_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph7_us_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph7_us_117;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph7_us_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph7_us_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph7_us_118;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph7_us_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph7_us_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph7_us_118;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph7_us_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph7_us_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_52_112;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_52_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_55_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_55_119;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_55_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_55_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_55_120;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_55_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_55_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_55_120;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_55_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_55_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_55_121;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_55_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_55_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_55_121;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_55_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_55_121) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph25_25_reg == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph15_122;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph15_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_55_121) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph25_25_reg == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__loopexit12_143;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__loopexit12_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph15_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph15_122;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph15_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph15_122) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph15_123;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph15_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph15_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph15_123;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph15_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph15_123) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph15_124;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph15_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph15_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph15_124;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph15_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph15_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph15_125;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph15_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph15_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph15_125;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph15_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph15_125) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_57_126;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_126) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_57_126;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_126) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_57_127;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_127) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_57_127;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_127) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_57_128;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_128) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_57_128;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_128) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_57_129;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_129) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_57_129;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_129) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_57_130;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_130) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_57_130;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_130) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_57_131;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_131) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_57_131;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_131) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_57_132;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_132) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_57_132;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_132) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_57_133;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_133) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_57_133;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_133) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_57_134;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_134) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_57_134;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_134) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_57_135;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_135) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_57_135;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_135) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_57_136;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_136) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_57_136;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_136) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_57_137;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_137) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_57_137;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_137) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_57_138;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_138) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_57_138;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_138) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_57_139;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_139) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_57_139;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_139) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_57_140;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_140) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_57_140;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_140) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_57_141;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_57_141) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_57_141;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_57_141) & (memory_controller_waitrequest == 1'd0)) & (get_input_57_exitcond159_reg == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__loopexit12_loopexit_142;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__loopexit12_loopexit_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_57_141) & (memory_controller_waitrequest == 1'd0)) & (get_input_57_exitcond159_reg == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_57_126;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_57_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__loopexit12_loopexit_142) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__loopexit12_loopexit_142;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__loopexit12_loopexit_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__loopexit12_loopexit_142) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__loopexit12_143;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__loopexit12_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__loopexit12_143) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__loopexit12_143;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__loopexit12_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB__loopexit12_143) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph25_26_reg == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph17_preheader_144;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph17_preheader_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB__loopexit12_143) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph25_26_reg == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB___crit_edge22_156;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB___crit_edge22_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph17_preheader_144) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph17_preheader_144;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph17_preheader_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph17_preheader_144) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph17_145;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph17_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph17_145) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph17_145;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph17_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph17_145) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph17_146;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph17_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph17_146) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph17_146;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph17_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph17_146) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph17_147;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph17_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph17_147) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph17_147;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph17_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph17_147) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph17_148;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph17_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph17_148) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph17_148;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph17_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB__lr_ph17_148) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph17_exitcond175_reg == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB___crit_edge18_149;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB___crit_edge18_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB__lr_ph17_148) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph17_exitcond175_reg == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph17_145;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph17_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB___crit_edge18_149) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB___crit_edge18_149;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB___crit_edge18_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB___crit_edge18_149) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph25_26_reg == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph21_preheader_150;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph21_preheader_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB___crit_edge18_149) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph25_26_reg == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB___crit_edge22_156;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB___crit_edge22_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph21_preheader_150) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph21_preheader_150;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph21_preheader_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph21_preheader_150) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph21_151;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph21_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph21_151) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph21_151;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph21_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph21_151) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph21_152;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph21_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph21_152) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph21_152;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph21_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph21_152) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph21_153;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph21_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph21_153) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph21_153;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph21_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph21_153) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph21_154;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph21_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph21_154) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph21_154;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph21_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB__lr_ph21_154) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph21_exitcond190_reg == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB___crit_edge22_loopexit_155;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB___crit_edge22_loopexit_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB__lr_ph21_154) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph21_exitcond190_reg == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph21_151;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph21_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB___crit_edge22_loopexit_155) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB___crit_edge22_loopexit_155;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB___crit_edge22_loopexit_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB___crit_edge22_loopexit_155) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB___crit_edge22_156;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB___crit_edge22_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB___crit_edge22_156) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB___crit_edge22_156;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB___crit_edge22_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB___crit_edge22_156) & (memory_controller_waitrequest == 1'd0)) & (get_input___crit_edge22_exitcond200 == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader9_loopexit_107;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader9_loopexit_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB___crit_edge22_156) & (memory_controller_waitrequest == 1'd0)) & (get_input___crit_edge22_exitcond200 == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_55_119;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_55_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__preheader_lr_ph_split_us_157) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader_lr_ph_split_us_157;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader_lr_ph_split_us_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__preheader_lr_ph_split_us_157) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader_lr_ph_split_us_158;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader_lr_ph_split_us_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__preheader_lr_ph_split_us_158) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__preheader_lr_ph_split_us_158;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__preheader_lr_ph_split_us_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__preheader_lr_ph_split_us_158) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph_us_165;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph_us_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_65_159) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_65_159;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_65_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_65_159) & (memory_controller_waitrequest == 1'd0)) & (get_input_65_exitcond135 == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__loopexit_loopexit_167;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__loopexit_loopexit_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_65_159) & (memory_controller_waitrequest == 1'd0)) & (get_input_65_exitcond135 == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph_us_165;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph_us_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_66_160) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_66_160;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_66_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_66_160) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_66_161;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_66_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_66_161) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_66_161;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_66_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_66_161) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_66_162;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_66_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_66_162) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_66_162;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_66_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_66_162) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_66_163;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_66_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_66_163) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_66_163;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_66_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_66_163) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_66_164;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_66_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB_66_164) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_66_164;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_66_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_66_164) & (memory_controller_waitrequest == 1'd0)) & (get_input_66_exitcond113_reg == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB_65_159;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_65_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_get_input_BB_66_164) & (memory_controller_waitrequest == 1'd0)) & (get_input_66_exitcond113_reg == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_66_160;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_66_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph_us_165) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph_us_165;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph_us_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph_us_165) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph_us_166;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph_us_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph_us_166) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__lr_ph_us_166;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__lr_ph_us_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__lr_ph_us_166) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB_66_160;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB_66_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__loopexit_loopexit_167) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__loopexit_loopexit_167;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__loopexit_loopexit_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__loopexit_loopexit_167) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__loopexit_169;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__loopexit_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__loopexit_loopexit1_168) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__loopexit_loopexit1_168;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__loopexit_loopexit1_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__loopexit_loopexit1_168) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_get_input_BB__loopexit_169;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__loopexit_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__loopexit_169) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_get_input_BB__loopexit_169;
if (reset == 1'b0 && ^(LEGUP_F_get_input_BB__loopexit_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_get_input_BB__loopexit_169) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 8'd0;
if (reset == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* get_input: %0*/
/*   %1 = sub nsw i32 %n, %w*/
begin
get_input_0_1 = (arg_n - arg_w);
end
end
always @(posedge clk) begin
/* get_input: %0*/
/*   %1 = sub nsw i32 %n, %w*/
if ((cur_state == LEGUP_F_get_input_BB_0_1))
begin
get_input_0_1_reg <= get_input_0_1;
if (reset == 1'b0 && ^(get_input_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_0_1_reg"); $finish; end
end
end
always @(*) begin
get_input_0_2 = get_input_signed_divide_32_0;
end
always @(posedge clk) begin
/* get_input: %0*/
/*   %2 = sdiv i32 %1, 2*/
if ((cur_state == LEGUP_F_get_input_BB_0_33))
begin
get_input_0_2_reg <= get_input_0_2;
if (reset == 1'b0 && ^(get_input_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_0_2_reg"); $finish; end
end
/* get_input: %0*/
/*   %2 = sdiv i32 %1, 2*/
if ((cur_state == LEGUP_F_get_input_BB_0_33))
begin
get_input_0_2_reg <= get_input_0_2;
if (reset == 1'b0 && ^(get_input_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_0_2_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %0*/
/*   %3 = sub nsw i32 %n, %h*/
begin
get_input_0_3 = (arg_n - arg_h);
end
end
always @(posedge clk) begin
/* get_input: %0*/
/*   %3 = sub nsw i32 %n, %h*/
if ((cur_state == LEGUP_F_get_input_BB_0_1))
begin
get_input_0_3_reg <= get_input_0_3;
if (reset == 1'b0 && ^(get_input_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_0_3_reg"); $finish; end
end
end
always @(*) begin
get_input_0_4 = get_input_signed_divide_32_0;
end
always @(posedge clk) begin
/* get_input: %0*/
/*   %4 = sdiv i32 %3, 2*/
if ((cur_state == LEGUP_F_get_input_BB_0_34))
begin
get_input_0_4_reg <= get_input_0_4;
if (reset == 1'b0 && ^(get_input_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_0_4_reg"); $finish; end
end
/* get_input: %0*/
/*   %4 = sdiv i32 %3, 2*/
if ((cur_state == LEGUP_F_get_input_BB_0_34))
begin
get_input_0_4_reg <= get_input_0_4;
if (reset == 1'b0 && ^(get_input_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_0_4_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %0*/
/*   %5 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 0*/
begin
get_input_0_5 = arg_s;
end
end
always @(posedge clk) begin
/* get_input: %0*/
/*   %5 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 0*/
if ((cur_state == LEGUP_F_get_input_BB_0_1))
begin
get_input_0_5_reg <= get_input_0_5;
if (reset == 1'b0 && ^(get_input_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_0_5_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
begin
get_input_0_6 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_input: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_0_3))
begin
get_input_0_6_reg <= get_input_0_6;
if (reset == 1'b0 && ^(get_input_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_0_6_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %0*/
/*   %7 = icmp eq i32 %6, 8*/
begin
get_input_0_7 = (get_input_0_6 == 32'd8);
end
end
always @(posedge clk) begin
/* get_input: %0*/
/*   %7 = icmp eq i32 %6, 8*/
if ((cur_state == LEGUP_F_get_input_BB_0_3))
begin
get_input_0_7_reg <= get_input_0_7;
if (reset == 1'b0 && ^(get_input_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_0_7_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %0*/
/*   %8 = icmp sgt i32 %h, 0*/
begin
get_input_0_8 = ($signed(arg_h) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* get_input: %0*/
/*   %8 = icmp sgt i32 %h, 0*/
if ((cur_state == LEGUP_F_get_input_BB_0_1))
begin
get_input_0_8_reg <= get_input_0_8;
if (reset == 1'b0 && ^(get_input_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_0_8_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph52*/
/*   %9 = getelementptr inbounds %struct.TYPE_9__* %in, i32 0, i32 0*/
begin
get_input__lr_ph52_9 = arg_in;
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %9 = getelementptr inbounds %struct.TYPE_9__* %in, i32 0, i32 0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_36))
begin
get_input__lr_ph52_9_reg <= get_input__lr_ph52_9;
if (reset == 1'b0 && ^(get_input__lr_ph52_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_9_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph52*/
/*   %10 = load float*** %9, align 4, !tbaa !3*/
begin
get_input__lr_ph52_10 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %10 = load float*** %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_38))
begin
get_input__lr_ph52_10_reg <= get_input__lr_ph52_10;
if (reset == 1'b0 && ^(get_input__lr_ph52_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_10_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph52*/
/*   %11 = getelementptr inbounds float** %10, i32 %plane*/
begin
get_input__lr_ph52_11 = (get_input__lr_ph52_10 + (4 * arg_plane));
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %11 = getelementptr inbounds float** %10, i32 %plane*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_38))
begin
get_input__lr_ph52_11_reg <= get_input__lr_ph52_11;
if (reset == 1'b0 && ^(get_input__lr_ph52_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_11_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph52*/
/*   %12 = load float** %11, align 4, !tbaa !3*/
begin
get_input__lr_ph52_12 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %12 = load float** %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_40))
begin
get_input__lr_ph52_12_reg <= get_input__lr_ph52_12;
if (reset == 1'b0 && ^(get_input__lr_ph52_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_12_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph52*/
/*   %13 = getelementptr inbounds %struct.TYPE_9__* %in, i32 0, i32 1*/
begin
get_input__lr_ph52_13 = (arg_in + 4);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %13 = getelementptr inbounds %struct.TYPE_9__* %in, i32 0, i32 1*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_36))
begin
get_input__lr_ph52_13_reg <= get_input__lr_ph52_13;
if (reset == 1'b0 && ^(get_input__lr_ph52_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_13_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph52*/
/*   %14 = load i32** %13, align 4, !tbaa !3*/
begin
get_input__lr_ph52_14 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %14 = load i32** %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_39))
begin
get_input__lr_ph52_14_reg <= get_input__lr_ph52_14;
if (reset == 1'b0 && ^(get_input__lr_ph52_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_14_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph52*/
/*   %15 = getelementptr inbounds i32* %14, i32 %plane*/
begin
get_input__lr_ph52_15 = (get_input__lr_ph52_14 + (4 * arg_plane));
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %15 = getelementptr inbounds i32* %14, i32 %plane*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_39))
begin
get_input__lr_ph52_15_reg <= get_input__lr_ph52_15;
if (reset == 1'b0 && ^(get_input__lr_ph52_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_15_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph52*/
/*   %16 = icmp sgt i32 %w, 0*/
begin
get_input__lr_ph52_16 = ($signed(arg_w) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %16 = icmp sgt i32 %w, 0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_36))
begin
get_input__lr_ph52_16_reg <= get_input__lr_ph52_16;
if (reset == 1'b0 && ^(get_input__lr_ph52_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_16_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph52*/
/*   %17 = icmp sgt i32 %1, 1*/
begin
get_input__lr_ph52_17 = ($signed(get_input_0_1_reg) > $signed(32'd1));
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %17 = icmp sgt i32 %1, 1*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_36))
begin
get_input__lr_ph52_17_reg <= get_input__lr_ph52_17;
if (reset == 1'b0 && ^(get_input__lr_ph52_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_17_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph52*/
/*   %tmp258 = icmp sgt i32 %2, 1*/
begin
get_input__lr_ph52_tmp258 = ($signed(get_input_0_2_reg) > $signed(32'd1));
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %tmp258 = icmp sgt i32 %2, 1*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_36))
begin
get_input__lr_ph52_tmp258_reg <= get_input__lr_ph52_tmp258;
if (reset == 1'b0 && ^(get_input__lr_ph52_tmp258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_tmp258_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph52*/
/*   %smax259 = select i1 %tmp258, i32 %2, i32 1*/
begin
get_input__lr_ph52_smax259 = (get_input__lr_ph52_tmp258 ? get_input_0_2_reg : 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %smax259 = select i1 %tmp258, i32 %2, i32 1*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_36))
begin
get_input__lr_ph52_smax259_reg <= get_input__lr_ph52_smax259;
if (reset == 1'b0 && ^(get_input__lr_ph52_smax259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_smax259_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph52*/
/*   %tmp269 = add i32 %n, 1*/
begin
get_input__lr_ph52_tmp269 = (arg_n + 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %tmp269 = add i32 %n, 1*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_36))
begin
get_input__lr_ph52_tmp269_reg <= get_input__lr_ph52_tmp269;
if (reset == 1'b0 && ^(get_input__lr_ph52_tmp269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_tmp269_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph52*/
/*   %tmp270 = sub i32 %tmp269, %2*/
begin
get_input__lr_ph52_tmp270 = (get_input__lr_ph52_tmp269 - get_input_0_2_reg);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %tmp270 = sub i32 %tmp269, %2*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_36))
begin
get_input__lr_ph52_tmp270_reg <= get_input__lr_ph52_tmp270;
if (reset == 1'b0 && ^(get_input__lr_ph52_tmp270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_tmp270_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph52*/
/*   %tmp271 = icmp slt i32 %tmp270, %n*/
begin
get_input__lr_ph52_tmp271 = ($signed(get_input__lr_ph52_tmp270) < $signed(arg_n));
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %tmp271 = icmp slt i32 %tmp270, %n*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_36))
begin
get_input__lr_ph52_tmp271_reg <= get_input__lr_ph52_tmp271;
if (reset == 1'b0 && ^(get_input__lr_ph52_tmp271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_tmp271_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph52*/
/*   %smax272 = select i1 %tmp271, i32 %n, i32 %tmp270*/
begin
get_input__lr_ph52_smax272 = (get_input__lr_ph52_tmp271_reg ? arg_n : get_input__lr_ph52_tmp270_reg);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %smax272 = select i1 %tmp271, i32 %n, i32 %tmp270*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_37))
begin
get_input__lr_ph52_smax272_reg <= get_input__lr_ph52_smax272;
if (reset == 1'b0 && ^(get_input__lr_ph52_smax272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_smax272_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph52*/
/*   %tmp273 = add i32 %2, %smax272*/
begin
get_input__lr_ph52_tmp273 = (get_input_0_2_reg + get_input__lr_ph52_smax272);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %tmp273 = add i32 %2, %smax272*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_37))
begin
get_input__lr_ph52_tmp273_reg <= get_input__lr_ph52_tmp273;
if (reset == 1'b0 && ^(get_input__lr_ph52_tmp273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_tmp273_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph52*/
/*   %tmp274 = sub i32 %tmp273, %n*/
begin
get_input__lr_ph52_tmp274 = (get_input__lr_ph52_tmp273 - arg_n);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %tmp274 = sub i32 %tmp273, %n*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_37))
begin
get_input__lr_ph52_tmp274_reg <= get_input__lr_ph52_tmp274;
if (reset == 1'b0 && ^(get_input__lr_ph52_tmp274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_tmp274_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph52*/
/*   %tmp277 = add i32 %4, 1*/
begin
get_input__lr_ph52_tmp277 = (get_input_0_4_reg + 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %tmp277 = add i32 %4, 1*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_36))
begin
get_input__lr_ph52_tmp277_reg <= get_input__lr_ph52_tmp277;
if (reset == 1'b0 && ^(get_input__lr_ph52_tmp277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_tmp277_reg"); $finish; end
end
end
always @(*) begin
get_input__lr_ph52_tmp278 = get_input__lr_ph52_tmp278_stage0_reg;
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %tmp278 = mul i32 %tmp277, %n*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_37))
begin
get_input__lr_ph52_tmp278_reg <= get_input__lr_ph52_tmp278;
if (reset == 1'b0 && ^(get_input__lr_ph52_tmp278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_tmp278_reg"); $finish; end
end
/* get_input: %.lr.ph52*/
/*   %tmp278 = mul i32 %tmp277, %n*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_37))
begin
get_input__lr_ph52_tmp278_reg <= get_input__lr_ph52_tmp278;
if (reset == 1'b0 && ^(get_input__lr_ph52_tmp278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_tmp278_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph52*/
/*   %tmp279 = sub i32 %tmp278, %2*/
begin
get_input__lr_ph52_tmp279 = (get_input__lr_ph52_tmp278 - get_input_0_2_reg);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %tmp279 = sub i32 %tmp278, %2*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_37))
begin
get_input__lr_ph52_tmp279_reg <= get_input__lr_ph52_tmp279;
if (reset == 1'b0 && ^(get_input__lr_ph52_tmp279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_tmp279_reg"); $finish; end
end
end
always @(*) begin
get_input__lr_ph52_tmp292 = get_input__lr_ph52_tmp292_stage0_reg;
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %tmp292 = mul i32 %4, %n*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_37))
begin
get_input__lr_ph52_tmp292_reg <= get_input__lr_ph52_tmp292;
if (reset == 1'b0 && ^(get_input__lr_ph52_tmp292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_tmp292_reg"); $finish; end
end
/* get_input: %.lr.ph52*/
/*   %tmp292 = mul i32 %4, %n*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_37))
begin
get_input__lr_ph52_tmp292_reg <= get_input__lr_ph52_tmp292;
if (reset == 1'b0 && ^(get_input__lr_ph52_tmp292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_tmp292_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph52*/
/*   %tmp298 = add i32 %2, %tmp292*/
begin
get_input__lr_ph52_tmp298 = (get_input_0_2_reg + get_input__lr_ph52_tmp292);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %tmp298 = add i32 %2, %tmp292*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_37))
begin
get_input__lr_ph52_tmp298_reg <= get_input__lr_ph52_tmp298;
if (reset == 1'b0 && ^(get_input__lr_ph52_tmp298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_tmp298_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph52*/
/*   %tmp307 = add i32 %tmp278, -1*/
begin
get_input__lr_ph52_tmp307 = (get_input__lr_ph52_tmp278 + -32'd1);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %tmp307 = add i32 %tmp278, -1*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_37))
begin
get_input__lr_ph52_tmp307_reg <= get_input__lr_ph52_tmp307;
if (reset == 1'b0 && ^(get_input__lr_ph52_tmp307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_tmp307_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph52*/
/*   %tmp308 = sub i32 %tmp307, %2*/
begin
get_input__lr_ph52_tmp308 = (get_input__lr_ph52_tmp307 - get_input_0_2_reg);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %tmp308 = sub i32 %tmp307, %2*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_37))
begin
get_input__lr_ph52_tmp308_reg <= get_input__lr_ph52_tmp308;
if (reset == 1'b0 && ^(get_input__lr_ph52_tmp308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph52_tmp308_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph25*/
/*   %18 = getelementptr inbounds %struct.TYPE_9__* %in, i32 0, i32 0*/
begin
get_input__lr_ph25_18 = arg_in;
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %18 = getelementptr inbounds %struct.TYPE_9__* %in, i32 0, i32 0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_42))
begin
get_input__lr_ph25_18_reg <= get_input__lr_ph25_18;
if (reset == 1'b0 && ^(get_input__lr_ph25_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_18_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph25*/
/*   %19 = load float*** %18, align 4, !tbaa !3*/
begin
get_input__lr_ph25_19 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %19 = load float*** %18, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_44))
begin
get_input__lr_ph25_19_reg <= get_input__lr_ph25_19;
if (reset == 1'b0 && ^(get_input__lr_ph25_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_19_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph25*/
/*   %20 = getelementptr inbounds float** %19, i32 %plane*/
begin
get_input__lr_ph25_20 = (get_input__lr_ph25_19 + (4 * arg_plane));
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %20 = getelementptr inbounds float** %19, i32 %plane*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_44))
begin
get_input__lr_ph25_20_reg <= get_input__lr_ph25_20;
if (reset == 1'b0 && ^(get_input__lr_ph25_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_20_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph25*/
/*   %21 = load float** %20, align 4, !tbaa !3*/
begin
get_input__lr_ph25_21 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %21 = load float** %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_46))
begin
get_input__lr_ph25_21_reg <= get_input__lr_ph25_21;
if (reset == 1'b0 && ^(get_input__lr_ph25_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_21_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph25*/
/*   %22 = getelementptr inbounds %struct.TYPE_9__* %in, i32 0, i32 1*/
begin
get_input__lr_ph25_22 = (arg_in + 4);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %22 = getelementptr inbounds %struct.TYPE_9__* %in, i32 0, i32 1*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_42))
begin
get_input__lr_ph25_22_reg <= get_input__lr_ph25_22;
if (reset == 1'b0 && ^(get_input__lr_ph25_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_22_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph25*/
/*   %23 = load i32** %22, align 4, !tbaa !3*/
begin
get_input__lr_ph25_23 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %23 = load i32** %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_45))
begin
get_input__lr_ph25_23_reg <= get_input__lr_ph25_23;
if (reset == 1'b0 && ^(get_input__lr_ph25_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_23_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph25*/
/*   %24 = getelementptr inbounds i32* %23, i32 %plane*/
begin
get_input__lr_ph25_24 = (get_input__lr_ph25_23 + (4 * arg_plane));
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %24 = getelementptr inbounds i32* %23, i32 %plane*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_45))
begin
get_input__lr_ph25_24_reg <= get_input__lr_ph25_24;
if (reset == 1'b0 && ^(get_input__lr_ph25_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_24_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph25*/
/*   %25 = icmp sgt i32 %w, 0*/
begin
get_input__lr_ph25_25 = ($signed(arg_w) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %25 = icmp sgt i32 %w, 0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_42))
begin
get_input__lr_ph25_25_reg <= get_input__lr_ph25_25;
if (reset == 1'b0 && ^(get_input__lr_ph25_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_25_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph25*/
/*   %26 = icmp sgt i32 %1, 1*/
begin
get_input__lr_ph25_26 = ($signed(get_input_0_1_reg) > $signed(32'd1));
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %26 = icmp sgt i32 %1, 1*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_42))
begin
get_input__lr_ph25_26_reg <= get_input__lr_ph25_26;
if (reset == 1'b0 && ^(get_input__lr_ph25_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_26_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph25*/
/*   %tmp173 = icmp sgt i32 %2, 1*/
begin
get_input__lr_ph25_tmp173 = ($signed(get_input_0_2_reg) > $signed(32'd1));
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %tmp173 = icmp sgt i32 %2, 1*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_42))
begin
get_input__lr_ph25_tmp173_reg <= get_input__lr_ph25_tmp173;
if (reset == 1'b0 && ^(get_input__lr_ph25_tmp173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_tmp173_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph25*/
/*   %smax174 = select i1 %tmp173, i32 %2, i32 1*/
begin
get_input__lr_ph25_smax174 = (get_input__lr_ph25_tmp173 ? get_input_0_2_reg : 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %smax174 = select i1 %tmp173, i32 %2, i32 1*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_42))
begin
get_input__lr_ph25_smax174_reg <= get_input__lr_ph25_smax174;
if (reset == 1'b0 && ^(get_input__lr_ph25_smax174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_smax174_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph25*/
/*   %tmp184 = add i32 %n, 1*/
begin
get_input__lr_ph25_tmp184 = (arg_n + 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %tmp184 = add i32 %n, 1*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_42))
begin
get_input__lr_ph25_tmp184_reg <= get_input__lr_ph25_tmp184;
if (reset == 1'b0 && ^(get_input__lr_ph25_tmp184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_tmp184_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph25*/
/*   %tmp185 = sub i32 %tmp184, %2*/
begin
get_input__lr_ph25_tmp185 = (get_input__lr_ph25_tmp184 - get_input_0_2_reg);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %tmp185 = sub i32 %tmp184, %2*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_42))
begin
get_input__lr_ph25_tmp185_reg <= get_input__lr_ph25_tmp185;
if (reset == 1'b0 && ^(get_input__lr_ph25_tmp185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_tmp185_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph25*/
/*   %tmp186 = icmp slt i32 %tmp185, %n*/
begin
get_input__lr_ph25_tmp186 = ($signed(get_input__lr_ph25_tmp185) < $signed(arg_n));
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %tmp186 = icmp slt i32 %tmp185, %n*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_42))
begin
get_input__lr_ph25_tmp186_reg <= get_input__lr_ph25_tmp186;
if (reset == 1'b0 && ^(get_input__lr_ph25_tmp186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_tmp186_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph25*/
/*   %smax187 = select i1 %tmp186, i32 %n, i32 %tmp185*/
begin
get_input__lr_ph25_smax187 = (get_input__lr_ph25_tmp186_reg ? arg_n : get_input__lr_ph25_tmp185_reg);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %smax187 = select i1 %tmp186, i32 %n, i32 %tmp185*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_43))
begin
get_input__lr_ph25_smax187_reg <= get_input__lr_ph25_smax187;
if (reset == 1'b0 && ^(get_input__lr_ph25_smax187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_smax187_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph25*/
/*   %tmp188 = add i32 %2, %smax187*/
begin
get_input__lr_ph25_tmp188 = (get_input_0_2_reg + get_input__lr_ph25_smax187);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %tmp188 = add i32 %2, %smax187*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_43))
begin
get_input__lr_ph25_tmp188_reg <= get_input__lr_ph25_tmp188;
if (reset == 1'b0 && ^(get_input__lr_ph25_tmp188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_tmp188_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph25*/
/*   %tmp189 = sub i32 %tmp188, %n*/
begin
get_input__lr_ph25_tmp189 = (get_input__lr_ph25_tmp188 - arg_n);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %tmp189 = sub i32 %tmp188, %n*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_43))
begin
get_input__lr_ph25_tmp189_reg <= get_input__lr_ph25_tmp189;
if (reset == 1'b0 && ^(get_input__lr_ph25_tmp189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_tmp189_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph25*/
/*   %tmp192 = add i32 %4, 1*/
begin
get_input__lr_ph25_tmp192 = (get_input_0_4_reg + 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %tmp192 = add i32 %4, 1*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_42))
begin
get_input__lr_ph25_tmp192_reg <= get_input__lr_ph25_tmp192;
if (reset == 1'b0 && ^(get_input__lr_ph25_tmp192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_tmp192_reg"); $finish; end
end
end
always @(*) begin
get_input__lr_ph25_tmp193 = get_input__lr_ph25_tmp193_stage0_reg;
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %tmp193 = mul i32 %tmp192, %n*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_43))
begin
get_input__lr_ph25_tmp193_reg <= get_input__lr_ph25_tmp193;
if (reset == 1'b0 && ^(get_input__lr_ph25_tmp193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_tmp193_reg"); $finish; end
end
/* get_input: %.lr.ph25*/
/*   %tmp193 = mul i32 %tmp192, %n*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_43))
begin
get_input__lr_ph25_tmp193_reg <= get_input__lr_ph25_tmp193;
if (reset == 1'b0 && ^(get_input__lr_ph25_tmp193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_tmp193_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph25*/
/*   %tmp194 = sub i32 %tmp193, %2*/
begin
get_input__lr_ph25_tmp194 = (get_input__lr_ph25_tmp193 - get_input_0_2_reg);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %tmp194 = sub i32 %tmp193, %2*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_43))
begin
get_input__lr_ph25_tmp194_reg <= get_input__lr_ph25_tmp194;
if (reset == 1'b0 && ^(get_input__lr_ph25_tmp194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_tmp194_reg"); $finish; end
end
end
always @(*) begin
get_input__lr_ph25_tmp207 = get_input__lr_ph25_tmp207_stage0_reg;
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %tmp207 = mul i32 %4, %n*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_43))
begin
get_input__lr_ph25_tmp207_reg <= get_input__lr_ph25_tmp207;
if (reset == 1'b0 && ^(get_input__lr_ph25_tmp207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_tmp207_reg"); $finish; end
end
/* get_input: %.lr.ph25*/
/*   %tmp207 = mul i32 %4, %n*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_43))
begin
get_input__lr_ph25_tmp207_reg <= get_input__lr_ph25_tmp207;
if (reset == 1'b0 && ^(get_input__lr_ph25_tmp207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_tmp207_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph25*/
/*   %tmp213 = add i32 %2, %tmp207*/
begin
get_input__lr_ph25_tmp213 = (get_input_0_2_reg + get_input__lr_ph25_tmp207);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %tmp213 = add i32 %2, %tmp207*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_43))
begin
get_input__lr_ph25_tmp213_reg <= get_input__lr_ph25_tmp213;
if (reset == 1'b0 && ^(get_input__lr_ph25_tmp213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_tmp213_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph25*/
/*   %tmp222 = add i32 %tmp193, -1*/
begin
get_input__lr_ph25_tmp222 = (get_input__lr_ph25_tmp193 + -32'd1);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %tmp222 = add i32 %tmp193, -1*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_43))
begin
get_input__lr_ph25_tmp222_reg <= get_input__lr_ph25_tmp222;
if (reset == 1'b0 && ^(get_input__lr_ph25_tmp222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_tmp222_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph25*/
/*   %tmp223 = sub i32 %tmp222, %2*/
begin
get_input__lr_ph25_tmp223 = (get_input__lr_ph25_tmp222 - get_input_0_2_reg);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %tmp223 = sub i32 %tmp222, %2*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_43))
begin
get_input__lr_ph25_tmp223_reg <= get_input__lr_ph25_tmp223;
if (reset == 1'b0 && ^(get_input__lr_ph25_tmp223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph25_tmp223_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader36*/
/*   %27 = icmp sgt i32 %3, 1*/
begin
get_input__preheader36_27 = ($signed(get_input_0_3_reg) > $signed(32'd1));
end
end
always @(posedge clk) begin
/* get_input: %.preheader36*/
/*   %27 = icmp sgt i32 %3, 1*/
if ((cur_state == LEGUP_F_get_input_BB__preheader36_48))
begin
get_input__preheader36_27_reg <= get_input__preheader36_27;
if (reset == 1'b0 && ^(get_input__preheader36_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader36_27_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader36*/
/*   %28 = icmp sgt i32 %n, 0*/
begin
get_input__preheader36_28 = ($signed(arg_n) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* get_input: %.preheader36*/
/*   %28 = icmp sgt i32 %n, 0*/
if ((cur_state == LEGUP_F_get_input_BB__preheader36_48))
begin
get_input__preheader36_28_reg <= get_input__preheader36_28;
if (reset == 1'b0 && ^(get_input__preheader36_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader36_28_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader36*/
/*   %or.cond = and i1 %27, %28*/
begin
get_input__preheader36_or_cond = (get_input__preheader36_27 & get_input__preheader36_28);
end
end
always @(posedge clk) begin
/* get_input: %.preheader36*/
/*   %or.cond = and i1 %27, %28*/
if ((cur_state == LEGUP_F_get_input_BB__preheader36_48))
begin
get_input__preheader36_or_cond_reg <= get_input__preheader36_or_cond;
if (reset == 1'b0 && ^(get_input__preheader36_or_cond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader36_or_cond_reg"); $finish; end
end
end
always @(*) begin
get_input__preheader32_lr_ph_split_us_tmp56 = get_input__preheader32_lr_ph_split_us_tmp56_stage0_reg;
end
always @(posedge clk) begin
/* get_input: %.preheader32.lr.ph.split.us*/
/*   %tmp56 = mul i32 %4, %n*/
if ((cur_state == LEGUP_F_get_input_BB__preheader32_lr_ph_split_us_50))
begin
get_input__preheader32_lr_ph_split_us_tmp56_reg <= get_input__preheader32_lr_ph_split_us_tmp56;
if (reset == 1'b0 && ^(get_input__preheader32_lr_ph_split_us_tmp56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader32_lr_ph_split_us_tmp56_reg"); $finish; end
end
/* get_input: %.preheader32.lr.ph.split.us*/
/*   %tmp56 = mul i32 %4, %n*/
if ((cur_state == LEGUP_F_get_input_BB__preheader32_lr_ph_split_us_50))
begin
get_input__preheader32_lr_ph_split_us_tmp56_reg <= get_input__preheader32_lr_ph_split_us_tmp56;
if (reset == 1'b0 && ^(get_input__preheader32_lr_ph_split_us_tmp56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader32_lr_ph_split_us_tmp56_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader32.lr.ph.split.us*/
/*   %tmp60 = icmp sgt i32 %4, 1*/
begin
get_input__preheader32_lr_ph_split_us_tmp60 = ($signed(get_input_0_4_reg) > $signed(32'd1));
end
end
always @(posedge clk) begin
/* get_input: %.preheader32.lr.ph.split.us*/
/*   %tmp60 = icmp sgt i32 %4, 1*/
if ((cur_state == LEGUP_F_get_input_BB__preheader32_lr_ph_split_us_49))
begin
get_input__preheader32_lr_ph_split_us_tmp60_reg <= get_input__preheader32_lr_ph_split_us_tmp60;
if (reset == 1'b0 && ^(get_input__preheader32_lr_ph_split_us_tmp60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader32_lr_ph_split_us_tmp60_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader32.lr.ph.split.us*/
/*   %smax = select i1 %tmp60, i32 %4, i32 1*/
begin
get_input__preheader32_lr_ph_split_us_smax = (get_input__preheader32_lr_ph_split_us_tmp60 ? get_input_0_4_reg : 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %.preheader32.lr.ph.split.us*/
/*   %smax = select i1 %tmp60, i32 %4, i32 1*/
if ((cur_state == LEGUP_F_get_input_BB__preheader32_lr_ph_split_us_49))
begin
get_input__preheader32_lr_ph_split_us_smax_reg <= get_input__preheader32_lr_ph_split_us_smax;
if (reset == 1'b0 && ^(get_input__preheader32_lr_ph_split_us_smax) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader32_lr_ph_split_us_smax_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %29*/
/*   %30 = add nsw i32 %y.137.us, 1*/
begin
get_input_29_30 = (get_input__lr_ph34_us_y_137_us_reg + 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %29*/
/*   %30 = add nsw i32 %y.137.us, 1*/
if ((cur_state == LEGUP_F_get_input_BB_29_51))
begin
get_input_29_30_reg <= get_input_29_30;
if (reset == 1'b0 && ^(get_input_29_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_29_30_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %29*/
/*   %exitcond61 = icmp eq i32 %30, %smax*/
begin
get_input_29_exitcond61 = (get_input_29_30 == get_input__preheader32_lr_ph_split_us_smax_reg);
end
end
always @(posedge clk) begin
/* get_input: %29*/
/*   %exitcond61 = icmp eq i32 %30, %smax*/
if ((cur_state == LEGUP_F_get_input_BB_29_51))
begin
get_input_29_exitcond61_reg <= get_input_29_exitcond61;
if (reset == 1'b0 && ^(get_input_29_exitcond61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_29_exitcond61_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %31*/
/*   %x.333.us = phi i32 [ 0, %.lr.ph34.us ], [ %33, %31 ]*/
if ((((cur_state == LEGUP_F_get_input_BB_31_56) & (memory_controller_waitrequest == 1'd0)) & (get_input_31_exitcond_reg == 1'd0)))
begin
get_input_31_x_333_us = get_input_31_33_reg;
end
/* get_input: %31*/
/*   %x.333.us = phi i32 [ 0, %.lr.ph34.us ], [ %33, %31 ]*/
else /* if (((cur_state == LEGUP_F_get_input_BB__lr_ph34_us_58) & (memory_controller_waitrequest == 1'd0))) */
begin
get_input_31_x_333_us = 32'd0;
end
end
always @(posedge clk) begin
/* get_input: %31*/
/*   %x.333.us = phi i32 [ 0, %.lr.ph34.us ], [ %33, %31 ]*/
if ((((cur_state == LEGUP_F_get_input_BB_31_56) & (memory_controller_waitrequest == 1'd0)) & (get_input_31_exitcond_reg == 1'd0)))
begin
get_input_31_x_333_us_reg <= get_input_31_x_333_us;
if (reset == 1'b0 && ^(get_input_31_x_333_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_31_x_333_us_reg"); $finish; end
end
/* get_input: %31*/
/*   %x.333.us = phi i32 [ 0, %.lr.ph34.us ], [ %33, %31 ]*/
if (((cur_state == LEGUP_F_get_input_BB__lr_ph34_us_58) & (memory_controller_waitrequest == 1'd0)))
begin
get_input_31_x_333_us_reg <= get_input_31_x_333_us;
if (reset == 1'b0 && ^(get_input_31_x_333_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_31_x_333_us_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %31*/
/*   %tmp63 = add i32 %tmp62, %x.333.us*/
begin
get_input_31_tmp63 = (get_input__lr_ph34_us_tmp62_reg + get_input_31_x_333_us_reg);
end
end
always @(posedge clk) begin
/* get_input: %31*/
/*   %tmp63 = add i32 %tmp62, %x.333.us*/
if ((cur_state == LEGUP_F_get_input_BB_31_52))
begin
get_input_31_tmp63_reg <= get_input_31_tmp63;
if (reset == 1'b0 && ^(get_input_31_tmp63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_31_tmp63_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %31*/
/*   %scevgep5455 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp63, i32 0*/
begin
get_input_31_scevgep5455 = (arg_fft_hdata + (8 * get_input_31_tmp63_reg));
end
end
always @(posedge clk) begin
/* get_input: %31*/
/*   %scevgep5455 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp63, i32 0*/
if ((cur_state == LEGUP_F_get_input_BB_31_53))
begin
get_input_31_scevgep5455_reg <= get_input_31_scevgep5455;
if (reset == 1'b0 && ^(get_input_31_scevgep5455) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_31_scevgep5455_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %31*/
/*   %scevgep = getelementptr %struct.TYPE_7__* %fft_hdata, i32 %tmp63, i32 1*/
begin
get_input_31_scevgep = (arg_fft_hdata + ((8 * get_input_31_tmp63_reg) + 4));
end
end
always @(posedge clk) begin
/* get_input: %31*/
/*   %scevgep = getelementptr %struct.TYPE_7__* %fft_hdata, i32 %tmp63, i32 1*/
if ((cur_state == LEGUP_F_get_input_BB_31_53))
begin
get_input_31_scevgep_reg <= get_input_31_scevgep;
if (reset == 1'b0 && ^(get_input_31_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_31_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %31*/
/*   %tmp57 = add i32 %tmp56, %x.333.us*/
begin
get_input_31_tmp57 = (get_input__preheader32_lr_ph_split_us_tmp56_reg + get_input_31_x_333_us_reg);
end
end
always @(posedge clk) begin
/* get_input: %31*/
/*   %tmp57 = add i32 %tmp56, %x.333.us*/
if ((cur_state == LEGUP_F_get_input_BB_31_52))
begin
get_input_31_tmp57_reg <= get_input_31_tmp57;
if (reset == 1'b0 && ^(get_input_31_tmp57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_31_tmp57_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %31*/
/*   %scevgep5859 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp57, i32 0*/
begin
get_input_31_scevgep5859 = (arg_fft_hdata + (8 * get_input_31_tmp57_reg));
end
end
always @(posedge clk) begin
/* get_input: %31*/
/*   %scevgep5859 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp57, i32 0*/
if ((cur_state == LEGUP_F_get_input_BB_31_53))
begin
get_input_31_scevgep5859_reg <= get_input_31_scevgep5859;
if (reset == 1'b0 && ^(get_input_31_scevgep5859) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_31_scevgep5859_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %31*/
/*   %32 = load float* %scevgep5859, align 4, !tbaa !4*/
begin
get_input_31_32 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_input: %31*/
/*   %32 = load float* %scevgep5859, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_31_55))
begin
get_input_31_32_reg <= get_input_31_32;
if (reset == 1'b0 && ^(get_input_31_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_31_32_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %31*/
/*   %33 = add nsw i32 %x.333.us, 1*/
begin
get_input_31_33 = (get_input_31_x_333_us_reg + 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %31*/
/*   %33 = add nsw i32 %x.333.us, 1*/
if ((cur_state == LEGUP_F_get_input_BB_31_52))
begin
get_input_31_33_reg <= get_input_31_33;
if (reset == 1'b0 && ^(get_input_31_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_31_33_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %31*/
/*   %exitcond = icmp eq i32 %33, %n*/
begin
get_input_31_exitcond = (get_input_31_33 == arg_n);
end
end
always @(posedge clk) begin
/* get_input: %31*/
/*   %exitcond = icmp eq i32 %33, %n*/
if ((cur_state == LEGUP_F_get_input_BB_31_52))
begin
get_input_31_exitcond_reg <= get_input_31_exitcond;
if (reset == 1'b0 && ^(get_input_31_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_31_exitcond_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph34.us*/
/*   %y.137.us = phi i32 [ 0, %.preheader32.lr.ph.split.us ], [ %30, %29 ]*/
if (((cur_state == LEGUP_F_get_input_BB__preheader32_lr_ph_split_us_50) & (memory_controller_waitrequest == 1'd0)))
begin
get_input__lr_ph34_us_y_137_us = 32'd0;
end
/* get_input: %.lr.ph34.us*/
/*   %y.137.us = phi i32 [ 0, %.preheader32.lr.ph.split.us ], [ %30, %29 ]*/
else /* if ((((cur_state == LEGUP_F_get_input_BB_29_51) & (memory_controller_waitrequest == 1'd0)) & (get_input_29_exitcond61 == 1'd0))) */
begin
get_input__lr_ph34_us_y_137_us = get_input_29_30;
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph34.us*/
/*   %y.137.us = phi i32 [ 0, %.preheader32.lr.ph.split.us ], [ %30, %29 ]*/
if (((cur_state == LEGUP_F_get_input_BB__preheader32_lr_ph_split_us_50) & (memory_controller_waitrequest == 1'd0)))
begin
get_input__lr_ph34_us_y_137_us_reg <= get_input__lr_ph34_us_y_137_us;
if (reset == 1'b0 && ^(get_input__lr_ph34_us_y_137_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph34_us_y_137_us_reg"); $finish; end
end
/* get_input: %.lr.ph34.us*/
/*   %y.137.us = phi i32 [ 0, %.preheader32.lr.ph.split.us ], [ %30, %29 ]*/
if ((((cur_state == LEGUP_F_get_input_BB_29_51) & (memory_controller_waitrequest == 1'd0)) & (get_input_29_exitcond61 == 1'd0)))
begin
get_input__lr_ph34_us_y_137_us_reg <= get_input__lr_ph34_us_y_137_us;
if (reset == 1'b0 && ^(get_input__lr_ph34_us_y_137_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph34_us_y_137_us_reg"); $finish; end
end
end
always @(*) begin
get_input__lr_ph34_us_tmp62 = get_input__lr_ph34_us_tmp62_stage0_reg;
end
always @(posedge clk) begin
/* get_input: %.lr.ph34.us*/
/*   %tmp62 = mul i32 %y.137.us, %n*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph34_us_58))
begin
get_input__lr_ph34_us_tmp62_reg <= get_input__lr_ph34_us_tmp62;
if (reset == 1'b0 && ^(get_input__lr_ph34_us_tmp62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph34_us_tmp62_reg"); $finish; end
end
/* get_input: %.lr.ph34.us*/
/*   %tmp62 = mul i32 %y.137.us, %n*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph34_us_58))
begin
get_input__lr_ph34_us_tmp62_reg <= get_input__lr_ph34_us_tmp62;
if (reset == 1'b0 && ^(get_input__lr_ph34_us_tmp62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph34_us_tmp62_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %34*/
/*   %y.051 = phi i32 [ 0, %.lr.ph52 ], [ %43, %._crit_edge49 ]*/
if (((cur_state == LEGUP_F_get_input_BB__lr_ph52_40) & (memory_controller_waitrequest == 1'd0)))
begin
get_input_34_y_051 = 32'd0;
end
/* get_input: %34*/
/*   %y.051 = phi i32 [ 0, %.lr.ph52 ], [ %43, %._crit_edge49 ]*/
else /* if ((((cur_state == LEGUP_F_get_input_BB___crit_edge49_96) & (memory_controller_waitrequest == 1'd0)) & (get_input___crit_edge49_exitcond285 == 1'd0))) */
begin
get_input_34_y_051 = get_input___crit_edge49_43;
end
end
always @(posedge clk) begin
/* get_input: %34*/
/*   %y.051 = phi i32 [ 0, %.lr.ph52 ], [ %43, %._crit_edge49 ]*/
if (((cur_state == LEGUP_F_get_input_BB__lr_ph52_40) & (memory_controller_waitrequest == 1'd0)))
begin
get_input_34_y_051_reg <= get_input_34_y_051;
if (reset == 1'b0 && ^(get_input_34_y_051) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_34_y_051_reg"); $finish; end
end
/* get_input: %34*/
/*   %y.051 = phi i32 [ 0, %.lr.ph52 ], [ %43, %._crit_edge49 ]*/
if ((((cur_state == LEGUP_F_get_input_BB___crit_edge49_96) & (memory_controller_waitrequest == 1'd0)) & (get_input___crit_edge49_exitcond285 == 1'd0)))
begin
get_input_34_y_051_reg <= get_input_34_y_051;
if (reset == 1'b0 && ^(get_input_34_y_051) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_34_y_051_reg"); $finish; end
end
end
always @(*) begin
get_input_34_tmp286 = get_input_34_tmp286_stage0_reg;
end
always @(posedge clk) begin
/* get_input: %34*/
/*   %tmp286 = mul i32 %y.051, %n*/
if ((cur_state == LEGUP_F_get_input_BB_34_60))
begin
get_input_34_tmp286_reg <= get_input_34_tmp286;
if (reset == 1'b0 && ^(get_input_34_tmp286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_34_tmp286_reg"); $finish; end
end
/* get_input: %34*/
/*   %tmp286 = mul i32 %y.051, %n*/
if ((cur_state == LEGUP_F_get_input_BB_34_60))
begin
get_input_34_tmp286_reg <= get_input_34_tmp286;
if (reset == 1'b0 && ^(get_input_34_tmp286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_34_tmp286_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %34*/
/*   %tmp287 = add i32 %tmp279, %tmp286*/
begin
get_input_34_tmp287 = (get_input__lr_ph52_tmp279_reg + get_input_34_tmp286);
end
end
always @(posedge clk) begin
/* get_input: %34*/
/*   %tmp287 = add i32 %tmp279, %tmp286*/
if ((cur_state == LEGUP_F_get_input_BB_34_60))
begin
get_input_34_tmp287_reg <= get_input_34_tmp287;
if (reset == 1'b0 && ^(get_input_34_tmp287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_34_tmp287_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %34*/
/*   %tmp292315 = add i32 %4, %y.051*/
begin
get_input_34_tmp292315 = (get_input_0_4_reg + get_input_34_y_051_reg);
end
end
always @(posedge clk) begin
/* get_input: %34*/
/*   %tmp292315 = add i32 %4, %y.051*/
if ((cur_state == LEGUP_F_get_input_BB_34_59))
begin
get_input_34_tmp292315_reg <= get_input_34_tmp292315;
if (reset == 1'b0 && ^(get_input_34_tmp292315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_34_tmp292315_reg"); $finish; end
end
end
always @(*) begin
get_input_34_tmp293 = get_input_34_tmp293_stage0_reg;
end
always @(posedge clk) begin
/* get_input: %34*/
/*   %tmp293 = mul i32 %tmp292315, %n*/
if ((cur_state == LEGUP_F_get_input_BB_34_60))
begin
get_input_34_tmp293_reg <= get_input_34_tmp293;
if (reset == 1'b0 && ^(get_input_34_tmp293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_34_tmp293_reg"); $finish; end
end
/* get_input: %34*/
/*   %tmp293 = mul i32 %tmp292315, %n*/
if ((cur_state == LEGUP_F_get_input_BB_34_60))
begin
get_input_34_tmp293_reg <= get_input_34_tmp293;
if (reset == 1'b0 && ^(get_input_34_tmp293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_34_tmp293_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %34*/
/*   %tmp299 = add i32 %tmp298, %tmp286*/
begin
get_input_34_tmp299 = (get_input__lr_ph52_tmp298_reg + get_input_34_tmp286);
end
end
always @(posedge clk) begin
/* get_input: %34*/
/*   %tmp299 = add i32 %tmp298, %tmp286*/
if ((cur_state == LEGUP_F_get_input_BB_34_60))
begin
get_input_34_tmp299_reg <= get_input_34_tmp299;
if (reset == 1'b0 && ^(get_input_34_tmp299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_34_tmp299_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %34*/
/*   %scevgep305306 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp299, i32 0*/
begin
get_input_34_scevgep305306 = (arg_fft_hdata + (8 * get_input_34_tmp299_reg));
end
end
always @(posedge clk) begin
/* get_input: %34*/
/*   %scevgep305306 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp299, i32 0*/
if ((cur_state == LEGUP_F_get_input_BB_34_61))
begin
get_input_34_scevgep305306_reg <= get_input_34_scevgep305306;
if (reset == 1'b0 && ^(get_input_34_scevgep305306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_34_scevgep305306_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %34*/
/*   %tmp309 = add i32 %tmp308, %tmp286*/
begin
get_input_34_tmp309 = (get_input__lr_ph52_tmp308_reg + get_input_34_tmp286);
end
end
always @(posedge clk) begin
/* get_input: %34*/
/*   %tmp309 = add i32 %tmp308, %tmp286*/
if ((cur_state == LEGUP_F_get_input_BB_34_60))
begin
get_input_34_tmp309_reg <= get_input_34_tmp309;
if (reset == 1'b0 && ^(get_input_34_tmp309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_34_tmp309_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %34*/
/*   %scevgep310311 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp309, i32 0*/
begin
get_input_34_scevgep310311 = (arg_fft_hdata + (8 * get_input_34_tmp309_reg));
end
end
always @(posedge clk) begin
/* get_input: %34*/
/*   %scevgep310311 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp309, i32 0*/
if ((cur_state == LEGUP_F_get_input_BB_34_61))
begin
get_input_34_scevgep310311_reg <= get_input_34_scevgep310311;
if (reset == 1'b0 && ^(get_input_34_scevgep310311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_34_scevgep310311_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph42*/
/*   %35 = load i32* %15, align 4, !tbaa !0*/
begin
get_input__lr_ph42_35 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph42*/
/*   %35 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph42_64))
begin
get_input__lr_ph42_35_reg <= get_input__lr_ph42_35;
if (reset == 1'b0 && ^(get_input__lr_ph42_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph42_35_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph42*/
/*   %tmp246 = shl i32 %y.051, 2*/
begin
get_input__lr_ph42_tmp246 = (get_input_34_y_051_reg <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph42*/
/*   %tmp246 = shl i32 %y.051, 2*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph42_62))
begin
get_input__lr_ph42_tmp246_reg <= get_input__lr_ph42_tmp246;
if (reset == 1'b0 && ^(get_input__lr_ph42_tmp246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph42_tmp246_reg"); $finish; end
end
end
always @(*) begin
get_input__lr_ph42_tmp247 = get_input__lr_ph42_tmp247_stage0_reg;
end
always @(posedge clk) begin
/* get_input: %.lr.ph42*/
/*   %tmp247 = mul i32 %35, %tmp246*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph42_65))
begin
get_input__lr_ph42_tmp247_reg <= get_input__lr_ph42_tmp247;
if (reset == 1'b0 && ^(get_input__lr_ph42_tmp247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph42_tmp247_reg"); $finish; end
end
/* get_input: %.lr.ph42*/
/*   %tmp247 = mul i32 %35, %tmp246*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph42_65))
begin
get_input__lr_ph42_tmp247_reg <= get_input__lr_ph42_tmp247;
if (reset == 1'b0 && ^(get_input__lr_ph42_tmp247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph42_tmp247_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %36*/
/*   %x.040 = phi i32 [ 0, %.lr.ph42 ], [ %39, %36 ]*/
if (((cur_state == LEGUP_F_get_input_BB__lr_ph42_65) & (memory_controller_waitrequest == 1'd0)))
begin
get_input_36_x_040 = 32'd0;
end
/* get_input: %36*/
/*   %x.040 = phi i32 [ 0, %.lr.ph42 ], [ %39, %36 ]*/
else /* if ((((cur_state == LEGUP_F_get_input_BB_36_81) & (memory_controller_waitrequest == 1'd0)) & (get_input_36_exitcond243_reg == 1'd0))) */
begin
get_input_36_x_040 = get_input_36_39_reg;
end
end
always @(posedge clk) begin
/* get_input: %36*/
/*   %x.040 = phi i32 [ 0, %.lr.ph42 ], [ %39, %36 ]*/
if (((cur_state == LEGUP_F_get_input_BB__lr_ph42_65) & (memory_controller_waitrequest == 1'd0)))
begin
get_input_36_x_040_reg <= get_input_36_x_040;
if (reset == 1'b0 && ^(get_input_36_x_040) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_36_x_040_reg"); $finish; end
end
/* get_input: %36*/
/*   %x.040 = phi i32 [ 0, %.lr.ph42 ], [ %39, %36 ]*/
if ((((cur_state == LEGUP_F_get_input_BB_36_81) & (memory_controller_waitrequest == 1'd0)) & (get_input_36_exitcond243_reg == 1'd0)))
begin
get_input_36_x_040_reg <= get_input_36_x_040;
if (reset == 1'b0 && ^(get_input_36_x_040) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_36_x_040_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %36*/
/*   %tmp300 = add i32 %tmp299, %x.040*/
begin
get_input_36_tmp300 = (get_input_34_tmp299_reg + get_input_36_x_040_reg);
end
end
always @(posedge clk) begin
/* get_input: %36*/
/*   %tmp300 = add i32 %tmp299, %x.040*/
if ((cur_state == LEGUP_F_get_input_BB_36_66))
begin
get_input_36_tmp300_reg <= get_input_36_tmp300;
if (reset == 1'b0 && ^(get_input_36_tmp300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_36_tmp300_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %36*/
/*   %scevgep256257 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp300, i32 0*/
begin
get_input_36_scevgep256257 = (arg_fft_hdata + (8 * get_input_36_tmp300_reg));
end
end
always @(posedge clk) begin
/* get_input: %36*/
/*   %scevgep256257 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp300, i32 0*/
if ((cur_state == LEGUP_F_get_input_BB_36_67))
begin
get_input_36_scevgep256257_reg <= get_input_36_scevgep256257;
if (reset == 1'b0 && ^(get_input_36_scevgep256257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_36_scevgep256257_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %36*/
/*   %scevgep255 = getelementptr %struct.TYPE_7__* %fft_hdata, i32 %tmp300, i32 1*/
begin
get_input_36_scevgep255 = (arg_fft_hdata + ((8 * get_input_36_tmp300_reg) + 4));
end
end
always @(posedge clk) begin
/* get_input: %36*/
/*   %scevgep255 = getelementptr %struct.TYPE_7__* %fft_hdata, i32 %tmp300, i32 1*/
if ((cur_state == LEGUP_F_get_input_BB_36_67))
begin
get_input_36_scevgep255_reg <= get_input_36_scevgep255;
if (reset == 1'b0 && ^(get_input_36_scevgep255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_36_scevgep255_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %36*/
/*   %scevgep244 = getelementptr float* %12, i32 %x.040*/
begin
get_input_36_scevgep244 = (get_input__lr_ph52_12_reg + (4 * get_input_36_x_040_reg));
end
end
always @(posedge clk) begin
/* get_input: %36*/
/*   %scevgep244 = getelementptr float* %12, i32 %x.040*/
if ((cur_state == LEGUP_F_get_input_BB_36_66))
begin
get_input_36_scevgep244_reg <= get_input_36_scevgep244;
if (reset == 1'b0 && ^(get_input_36_scevgep244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_36_scevgep244_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %36*/
/*   %scevgep244245 = bitcast float* %scevgep244 to i8**/
begin
get_input_36_scevgep244245 = get_input_36_scevgep244;
end
end
always @(posedge clk) begin
/* get_input: %36*/
/*   %scevgep244245 = bitcast float* %scevgep244 to i8**/
if ((cur_state == LEGUP_F_get_input_BB_36_66))
begin
get_input_36_scevgep244245_reg <= get_input_36_scevgep244245;
if (reset == 1'b0 && ^(get_input_36_scevgep244245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_36_scevgep244245_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %36*/
/*   %uglygep248 = getelementptr i8* %scevgep244245, i32 %tmp247*/
begin
get_input_36_uglygep248 = (get_input_36_scevgep244245_reg + (1 * get_input__lr_ph42_tmp247_reg));
end
end
always @(posedge clk) begin
/* get_input: %36*/
/*   %uglygep248 = getelementptr i8* %scevgep244245, i32 %tmp247*/
if ((cur_state == LEGUP_F_get_input_BB_36_67))
begin
get_input_36_uglygep248_reg <= get_input_36_uglygep248;
if (reset == 1'b0 && ^(get_input_36_uglygep248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_36_uglygep248_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %36*/
/*   %uglygep248249 = bitcast i8* %uglygep248 to float**/
begin
get_input_36_uglygep248249 = get_input_36_uglygep248;
end
end
always @(posedge clk) begin
/* get_input: %36*/
/*   %uglygep248249 = bitcast i8* %uglygep248 to float**/
if ((cur_state == LEGUP_F_get_input_BB_36_67))
begin
get_input_36_uglygep248249_reg <= get_input_36_uglygep248249;
if (reset == 1'b0 && ^(get_input_36_uglygep248249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_36_uglygep248249_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %36*/
/*   %37 = load float* %uglygep248249, align 4, !tbaa !4*/
begin
get_input_36_37 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_input: %36*/
/*   %37 = load float* %uglygep248249, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_36_69))
begin
get_input_36_37_reg <= get_input_36_37;
if (reset == 1'b0 && ^(get_input_36_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_36_37_reg"); $finish; end
end
end
always @(*) begin
get_input_36_38 = get_input_altfp_multiply_32_0;
end
always @(*) begin
/* get_input: %36*/
/*   %38 = fmul float %37, %scale*/
get_input_36_38_reg = get_input_57_59_reg;
end
always @(*) begin
/* get_input: %36*/
/*   %39 = add nsw i32 %x.040, 1*/
begin
get_input_36_39 = (get_input_36_x_040_reg + 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %36*/
/*   %39 = add nsw i32 %x.040, 1*/
if ((cur_state == LEGUP_F_get_input_BB_36_66))
begin
get_input_36_39_reg <= get_input_36_39;
if (reset == 1'b0 && ^(get_input_36_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_36_39_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %36*/
/*   %exitcond243 = icmp eq i32 %39, %w*/
begin
get_input_36_exitcond243 = (get_input_36_39 == arg_w);
end
end
always @(posedge clk) begin
/* get_input: %36*/
/*   %exitcond243 = icmp eq i32 %39, %w*/
if ((cur_state == LEGUP_F_get_input_BB_36_66))
begin
get_input_36_exitcond243_reg <= get_input_36_exitcond243;
if (reset == 1'b0 && ^(get_input_36_exitcond243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_36_exitcond243_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph44*/
/*   %x.143 = phi i32 [ %41, %.lr.ph44 ], [ 0, %.lr.ph44.preheader ]*/
if (((cur_state == LEGUP_F_get_input_BB__lr_ph44_preheader_84) & (memory_controller_waitrequest == 1'd0)))
begin
get_input__lr_ph44_x_143 = 32'd0;
end
/* get_input: %.lr.ph44*/
/*   %x.143 = phi i32 [ %41, %.lr.ph44 ], [ 0, %.lr.ph44.preheader ]*/
else /* if ((((cur_state == LEGUP_F_get_input_BB__lr_ph44_88) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph44_exitcond260_reg == 1'd0))) */
begin
get_input__lr_ph44_x_143 = get_input__lr_ph44_41_reg;
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph44*/
/*   %x.143 = phi i32 [ %41, %.lr.ph44 ], [ 0, %.lr.ph44.preheader ]*/
if (((cur_state == LEGUP_F_get_input_BB__lr_ph44_preheader_84) & (memory_controller_waitrequest == 1'd0)))
begin
get_input__lr_ph44_x_143_reg <= get_input__lr_ph44_x_143;
if (reset == 1'b0 && ^(get_input__lr_ph44_x_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph44_x_143_reg"); $finish; end
end
/* get_input: %.lr.ph44*/
/*   %x.143 = phi i32 [ %41, %.lr.ph44 ], [ 0, %.lr.ph44.preheader ]*/
if ((((cur_state == LEGUP_F_get_input_BB__lr_ph44_88) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph44_exitcond260_reg == 1'd0)))
begin
get_input__lr_ph44_x_143_reg <= get_input__lr_ph44_x_143;
if (reset == 1'b0 && ^(get_input__lr_ph44_x_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph44_x_143_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph44*/
/*   %tmp294 = add i32 %tmp293, %x.143*/
begin
get_input__lr_ph44_tmp294 = (get_input_34_tmp293_reg + get_input__lr_ph44_x_143_reg);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph44*/
/*   %tmp294 = add i32 %tmp293, %x.143*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph44_85))
begin
get_input__lr_ph44_tmp294_reg <= get_input__lr_ph44_tmp294;
if (reset == 1'b0 && ^(get_input__lr_ph44_tmp294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph44_tmp294_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph44*/
/*   %scevgep265266 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp294, i32 0*/
begin
get_input__lr_ph44_scevgep265266 = (arg_fft_hdata + (8 * get_input__lr_ph44_tmp294_reg));
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph44*/
/*   %scevgep265266 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp294, i32 0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph44_86))
begin
get_input__lr_ph44_scevgep265266_reg <= get_input__lr_ph44_scevgep265266;
if (reset == 1'b0 && ^(get_input__lr_ph44_scevgep265266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph44_scevgep265266_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph44*/
/*   %scevgep264 = getelementptr %struct.TYPE_7__* %fft_hdata, i32 %tmp294, i32 1*/
begin
get_input__lr_ph44_scevgep264 = (arg_fft_hdata + ((8 * get_input__lr_ph44_tmp294_reg) + 4));
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph44*/
/*   %scevgep264 = getelementptr %struct.TYPE_7__* %fft_hdata, i32 %tmp294, i32 1*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph44_86))
begin
get_input__lr_ph44_scevgep264_reg <= get_input__lr_ph44_scevgep264;
if (reset == 1'b0 && ^(get_input__lr_ph44_scevgep264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph44_scevgep264_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph44*/
/*   %40 = load float* %scevgep305306, align 4, !tbaa !4*/
begin
get_input__lr_ph44_40 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph44*/
/*   %40 = load float* %scevgep305306, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph44_87))
begin
get_input__lr_ph44_40_reg <= get_input__lr_ph44_40;
if (reset == 1'b0 && ^(get_input__lr_ph44_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph44_40_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph44*/
/*   %41 = add nsw i32 %x.143, 1*/
begin
get_input__lr_ph44_41 = (get_input__lr_ph44_x_143_reg + 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph44*/
/*   %41 = add nsw i32 %x.143, 1*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph44_85))
begin
get_input__lr_ph44_41_reg <= get_input__lr_ph44_41;
if (reset == 1'b0 && ^(get_input__lr_ph44_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph44_41_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph44*/
/*   %exitcond260 = icmp eq i32 %41, %smax259*/
begin
get_input__lr_ph44_exitcond260 = (get_input__lr_ph44_41 == get_input__lr_ph52_smax259_reg);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph44*/
/*   %exitcond260 = icmp eq i32 %41, %smax259*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph44_85))
begin
get_input__lr_ph44_exitcond260_reg <= get_input__lr_ph44_exitcond260;
if (reset == 1'b0 && ^(get_input__lr_ph44_exitcond260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph44_exitcond260_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph48*/
/*   %indvar267 = phi i32 [ %indvar.next268, %.lr.ph48 ], [ 0, %.lr.ph48.preheader ]*/
if (((cur_state == LEGUP_F_get_input_BB__lr_ph48_preheader_90) & (memory_controller_waitrequest == 1'd0)))
begin
get_input__lr_ph48_indvar267 = 32'd0;
end
/* get_input: %.lr.ph48*/
/*   %indvar267 = phi i32 [ %indvar.next268, %.lr.ph48 ], [ 0, %.lr.ph48.preheader ]*/
else /* if ((((cur_state == LEGUP_F_get_input_BB__lr_ph48_94) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph48_exitcond275_reg == 1'd0))) */
begin
get_input__lr_ph48_indvar267 = get_input__lr_ph48_indvar_next268_reg;
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph48*/
/*   %indvar267 = phi i32 [ %indvar.next268, %.lr.ph48 ], [ 0, %.lr.ph48.preheader ]*/
if (((cur_state == LEGUP_F_get_input_BB__lr_ph48_preheader_90) & (memory_controller_waitrequest == 1'd0)))
begin
get_input__lr_ph48_indvar267_reg <= get_input__lr_ph48_indvar267;
if (reset == 1'b0 && ^(get_input__lr_ph48_indvar267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph48_indvar267_reg"); $finish; end
end
/* get_input: %.lr.ph48*/
/*   %indvar267 = phi i32 [ %indvar.next268, %.lr.ph48 ], [ 0, %.lr.ph48.preheader ]*/
if ((((cur_state == LEGUP_F_get_input_BB__lr_ph48_94) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph48_exitcond275_reg == 1'd0)))
begin
get_input__lr_ph48_indvar267_reg <= get_input__lr_ph48_indvar267;
if (reset == 1'b0 && ^(get_input__lr_ph48_indvar267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph48_indvar267_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph48*/
/*   %tmp288 = add i32 %tmp287, %indvar267*/
begin
get_input__lr_ph48_tmp288 = (get_input_34_tmp287_reg + get_input__lr_ph48_indvar267_reg);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph48*/
/*   %tmp288 = add i32 %tmp287, %indvar267*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph48_91))
begin
get_input__lr_ph48_tmp288_reg <= get_input__lr_ph48_tmp288;
if (reset == 1'b0 && ^(get_input__lr_ph48_tmp288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph48_tmp288_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph48*/
/*   %scevgep283284 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp288, i32 0*/
begin
get_input__lr_ph48_scevgep283284 = (arg_fft_hdata + (8 * get_input__lr_ph48_tmp288_reg));
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph48*/
/*   %scevgep283284 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp288, i32 0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph48_92))
begin
get_input__lr_ph48_scevgep283284_reg <= get_input__lr_ph48_scevgep283284;
if (reset == 1'b0 && ^(get_input__lr_ph48_scevgep283284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph48_scevgep283284_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph48*/
/*   %scevgep282 = getelementptr %struct.TYPE_7__* %fft_hdata, i32 %tmp288, i32 1*/
begin
get_input__lr_ph48_scevgep282 = (arg_fft_hdata + ((8 * get_input__lr_ph48_tmp288_reg) + 4));
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph48*/
/*   %scevgep282 = getelementptr %struct.TYPE_7__* %fft_hdata, i32 %tmp288, i32 1*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph48_92))
begin
get_input__lr_ph48_scevgep282_reg <= get_input__lr_ph48_scevgep282;
if (reset == 1'b0 && ^(get_input__lr_ph48_scevgep282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph48_scevgep282_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph48*/
/*   %42 = load float* %scevgep310311, align 4, !tbaa !4*/
begin
get_input__lr_ph48_42 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph48*/
/*   %42 = load float* %scevgep310311, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph48_93))
begin
get_input__lr_ph48_42_reg <= get_input__lr_ph48_42;
if (reset == 1'b0 && ^(get_input__lr_ph48_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph48_42_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph48*/
/*   %indvar.next268 = add i32 %indvar267, 1*/
begin
get_input__lr_ph48_indvar_next268 = (get_input__lr_ph48_indvar267_reg + 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph48*/
/*   %indvar.next268 = add i32 %indvar267, 1*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph48_91))
begin
get_input__lr_ph48_indvar_next268_reg <= get_input__lr_ph48_indvar_next268;
if (reset == 1'b0 && ^(get_input__lr_ph48_indvar_next268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph48_indvar_next268_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph48*/
/*   %exitcond275 = icmp eq i32 %indvar.next268, %tmp274*/
begin
get_input__lr_ph48_exitcond275 = (get_input__lr_ph48_indvar_next268 == get_input__lr_ph52_tmp274_reg);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph48*/
/*   %exitcond275 = icmp eq i32 %indvar.next268, %tmp274*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph48_91))
begin
get_input__lr_ph48_exitcond275_reg <= get_input__lr_ph48_exitcond275;
if (reset == 1'b0 && ^(get_input__lr_ph48_exitcond275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph48_exitcond275_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %._crit_edge49*/
/*   %43 = add nsw i32 %y.051, 1*/
begin
get_input___crit_edge49_43 = (get_input_34_y_051_reg + 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %._crit_edge49*/
/*   %43 = add nsw i32 %y.051, 1*/
if ((cur_state == LEGUP_F_get_input_BB___crit_edge49_96))
begin
get_input___crit_edge49_43_reg <= get_input___crit_edge49_43;
if (reset == 1'b0 && ^(get_input___crit_edge49_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input___crit_edge49_43_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %._crit_edge49*/
/*   %exitcond285 = icmp eq i32 %43, %h*/
begin
get_input___crit_edge49_exitcond285 = (get_input___crit_edge49_43 == arg_h);
end
end
always @(posedge clk) begin
/* get_input: %._crit_edge49*/
/*   %exitcond285 = icmp eq i32 %43, %h*/
if ((cur_state == LEGUP_F_get_input_BB___crit_edge49_96))
begin
get_input___crit_edge49_exitcond285_reg <= get_input___crit_edge49_exitcond285;
if (reset == 1'b0 && ^(get_input___crit_edge49_exitcond285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input___crit_edge49_exitcond285_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader26.lr.ph.split.us*/
/*   %tmp75 = add i32 %n, -1*/
begin
get_input__preheader26_lr_ph_split_us_tmp75 = (arg_n + -32'd1);
end
end
always @(posedge clk) begin
/* get_input: %.preheader26.lr.ph.split.us*/
/*   %tmp75 = add i32 %n, -1*/
if ((cur_state == LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_97))
begin
get_input__preheader26_lr_ph_split_us_tmp75_reg <= get_input__preheader26_lr_ph_split_us_tmp75;
if (reset == 1'b0 && ^(get_input__preheader26_lr_ph_split_us_tmp75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader26_lr_ph_split_us_tmp75_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader26.lr.ph.split.us*/
/*   %tmp76 = sub i32 %tmp75, %4*/
begin
get_input__preheader26_lr_ph_split_us_tmp76 = (get_input__preheader26_lr_ph_split_us_tmp75 - get_input_0_4_reg);
end
end
always @(posedge clk) begin
/* get_input: %.preheader26.lr.ph.split.us*/
/*   %tmp76 = sub i32 %tmp75, %4*/
if ((cur_state == LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_97))
begin
get_input__preheader26_lr_ph_split_us_tmp76_reg <= get_input__preheader26_lr_ph_split_us_tmp76;
if (reset == 1'b0 && ^(get_input__preheader26_lr_ph_split_us_tmp76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader26_lr_ph_split_us_tmp76_reg"); $finish; end
end
end
always @(*) begin
get_input__preheader26_lr_ph_split_us_tmp77 = get_input__preheader26_lr_ph_split_us_tmp77_stage0_reg;
end
always @(posedge clk) begin
/* get_input: %.preheader26.lr.ph.split.us*/
/*   %tmp77 = mul i32 %tmp76, %n*/
if ((cur_state == LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_98))
begin
get_input__preheader26_lr_ph_split_us_tmp77_reg <= get_input__preheader26_lr_ph_split_us_tmp77;
if (reset == 1'b0 && ^(get_input__preheader26_lr_ph_split_us_tmp77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader26_lr_ph_split_us_tmp77_reg"); $finish; end
end
/* get_input: %.preheader26.lr.ph.split.us*/
/*   %tmp77 = mul i32 %tmp76, %n*/
if ((cur_state == LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_98))
begin
get_input__preheader26_lr_ph_split_us_tmp77_reg <= get_input__preheader26_lr_ph_split_us_tmp77;
if (reset == 1'b0 && ^(get_input__preheader26_lr_ph_split_us_tmp77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader26_lr_ph_split_us_tmp77_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader26.lr.ph.split.us*/
/*   %tmp81 = add i32 %n, 1*/
begin
get_input__preheader26_lr_ph_split_us_tmp81 = (arg_n + 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %.preheader26.lr.ph.split.us*/
/*   %tmp81 = add i32 %n, 1*/
if ((cur_state == LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_97))
begin
get_input__preheader26_lr_ph_split_us_tmp81_reg <= get_input__preheader26_lr_ph_split_us_tmp81;
if (reset == 1'b0 && ^(get_input__preheader26_lr_ph_split_us_tmp81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader26_lr_ph_split_us_tmp81_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader26.lr.ph.split.us*/
/*   %tmp82 = sub i32 %tmp81, %4*/
begin
get_input__preheader26_lr_ph_split_us_tmp82 = (get_input__preheader26_lr_ph_split_us_tmp81 - get_input_0_4_reg);
end
end
always @(posedge clk) begin
/* get_input: %.preheader26.lr.ph.split.us*/
/*   %tmp82 = sub i32 %tmp81, %4*/
if ((cur_state == LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_97))
begin
get_input__preheader26_lr_ph_split_us_tmp82_reg <= get_input__preheader26_lr_ph_split_us_tmp82;
if (reset == 1'b0 && ^(get_input__preheader26_lr_ph_split_us_tmp82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader26_lr_ph_split_us_tmp82_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader26.lr.ph.split.us*/
/*   %tmp83 = icmp slt i32 %tmp82, %n*/
begin
get_input__preheader26_lr_ph_split_us_tmp83 = ($signed(get_input__preheader26_lr_ph_split_us_tmp82) < $signed(arg_n));
end
end
always @(posedge clk) begin
/* get_input: %.preheader26.lr.ph.split.us*/
/*   %tmp83 = icmp slt i32 %tmp82, %n*/
if ((cur_state == LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_97))
begin
get_input__preheader26_lr_ph_split_us_tmp83_reg <= get_input__preheader26_lr_ph_split_us_tmp83;
if (reset == 1'b0 && ^(get_input__preheader26_lr_ph_split_us_tmp83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader26_lr_ph_split_us_tmp83_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader26.lr.ph.split.us*/
/*   %smax84 = select i1 %tmp83, i32 %n, i32 %tmp82*/
begin
get_input__preheader26_lr_ph_split_us_smax84 = (get_input__preheader26_lr_ph_split_us_tmp83_reg ? arg_n : get_input__preheader26_lr_ph_split_us_tmp82_reg);
end
end
always @(posedge clk) begin
/* get_input: %.preheader26.lr.ph.split.us*/
/*   %smax84 = select i1 %tmp83, i32 %n, i32 %tmp82*/
if ((cur_state == LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_98))
begin
get_input__preheader26_lr_ph_split_us_smax84_reg <= get_input__preheader26_lr_ph_split_us_smax84;
if (reset == 1'b0 && ^(get_input__preheader26_lr_ph_split_us_smax84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader26_lr_ph_split_us_smax84_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader26.lr.ph.split.us*/
/*   %tmp85 = add i32 %4, %smax84*/
begin
get_input__preheader26_lr_ph_split_us_tmp85 = (get_input_0_4_reg + get_input__preheader26_lr_ph_split_us_smax84);
end
end
always @(posedge clk) begin
/* get_input: %.preheader26.lr.ph.split.us*/
/*   %tmp85 = add i32 %4, %smax84*/
if ((cur_state == LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_98))
begin
get_input__preheader26_lr_ph_split_us_tmp85_reg <= get_input__preheader26_lr_ph_split_us_tmp85;
if (reset == 1'b0 && ^(get_input__preheader26_lr_ph_split_us_tmp85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader26_lr_ph_split_us_tmp85_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader26.lr.ph.split.us*/
/*   %tmp86 = sub i32 %tmp85, %n*/
begin
get_input__preheader26_lr_ph_split_us_tmp86 = (get_input__preheader26_lr_ph_split_us_tmp85 - arg_n);
end
end
always @(posedge clk) begin
/* get_input: %.preheader26.lr.ph.split.us*/
/*   %tmp86 = sub i32 %tmp85, %n*/
if ((cur_state == LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_98))
begin
get_input__preheader26_lr_ph_split_us_tmp86_reg <= get_input__preheader26_lr_ph_split_us_tmp86;
if (reset == 1'b0 && ^(get_input__preheader26_lr_ph_split_us_tmp86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader26_lr_ph_split_us_tmp86_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader26.lr.ph.split.us*/
/*   %tmp89 = sub i32 %n, %4*/
begin
get_input__preheader26_lr_ph_split_us_tmp89 = (arg_n - get_input_0_4_reg);
end
end
always @(posedge clk) begin
/* get_input: %.preheader26.lr.ph.split.us*/
/*   %tmp89 = sub i32 %n, %4*/
if ((cur_state == LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_97))
begin
get_input__preheader26_lr_ph_split_us_tmp89_reg <= get_input__preheader26_lr_ph_split_us_tmp89;
if (reset == 1'b0 && ^(get_input__preheader26_lr_ph_split_us_tmp89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader26_lr_ph_split_us_tmp89_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %44*/
/*   %indvar.next = add i32 %indvar, 1*/
begin
get_input_44_indvar_next = (get_input__lr_ph28_us_indvar_reg + 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %44*/
/*   %indvar.next = add i32 %indvar, 1*/
if ((cur_state == LEGUP_F_get_input_BB_44_99))
begin
get_input_44_indvar_next_reg <= get_input_44_indvar_next;
if (reset == 1'b0 && ^(get_input_44_indvar_next) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_44_indvar_next_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %44*/
/*   %exitcond87 = icmp eq i32 %indvar.next, %tmp86*/
begin
get_input_44_exitcond87 = (get_input_44_indvar_next == get_input__preheader26_lr_ph_split_us_tmp86_reg);
end
end
always @(posedge clk) begin
/* get_input: %44*/
/*   %exitcond87 = icmp eq i32 %indvar.next, %tmp86*/
if ((cur_state == LEGUP_F_get_input_BB_44_99))
begin
get_input_44_exitcond87_reg <= get_input_44_exitcond87;
if (reset == 1'b0 && ^(get_input_44_exitcond87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_44_exitcond87_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %45*/
/*   %x.427.us = phi i32 [ 0, %.lr.ph28.us ], [ %47, %45 ]*/
if ((((cur_state == LEGUP_F_get_input_BB_45_104) & (memory_controller_waitrequest == 1'd0)) & (get_input_45_exitcond67_reg == 1'd0)))
begin
get_input_45_x_427_us = get_input_45_47_reg;
end
/* get_input: %45*/
/*   %x.427.us = phi i32 [ 0, %.lr.ph28.us ], [ %47, %45 ]*/
else /* if (((cur_state == LEGUP_F_get_input_BB__lr_ph28_us_106) & (memory_controller_waitrequest == 1'd0))) */
begin
get_input_45_x_427_us = 32'd0;
end
end
always @(posedge clk) begin
/* get_input: %45*/
/*   %x.427.us = phi i32 [ 0, %.lr.ph28.us ], [ %47, %45 ]*/
if ((((cur_state == LEGUP_F_get_input_BB_45_104) & (memory_controller_waitrequest == 1'd0)) & (get_input_45_exitcond67_reg == 1'd0)))
begin
get_input_45_x_427_us_reg <= get_input_45_x_427_us;
if (reset == 1'b0 && ^(get_input_45_x_427_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_45_x_427_us_reg"); $finish; end
end
/* get_input: %45*/
/*   %x.427.us = phi i32 [ 0, %.lr.ph28.us ], [ %47, %45 ]*/
if (((cur_state == LEGUP_F_get_input_BB__lr_ph28_us_106) & (memory_controller_waitrequest == 1'd0)))
begin
get_input_45_x_427_us_reg <= get_input_45_x_427_us;
if (reset == 1'b0 && ^(get_input_45_x_427_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_45_x_427_us_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %45*/
/*   %tmp92 = add i32 %tmp91, %x.427.us*/
begin
get_input_45_tmp92 = (get_input__lr_ph28_us_tmp91_reg + get_input_45_x_427_us_reg);
end
end
always @(posedge clk) begin
/* get_input: %45*/
/*   %tmp92 = add i32 %tmp91, %x.427.us*/
if ((cur_state == LEGUP_F_get_input_BB_45_100))
begin
get_input_45_tmp92_reg <= get_input_45_tmp92;
if (reset == 1'b0 && ^(get_input_45_tmp92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_45_tmp92_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %45*/
/*   %scevgep7374 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp92, i32 0*/
begin
get_input_45_scevgep7374 = (arg_fft_hdata + (8 * get_input_45_tmp92_reg));
end
end
always @(posedge clk) begin
/* get_input: %45*/
/*   %scevgep7374 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp92, i32 0*/
if ((cur_state == LEGUP_F_get_input_BB_45_101))
begin
get_input_45_scevgep7374_reg <= get_input_45_scevgep7374;
if (reset == 1'b0 && ^(get_input_45_scevgep7374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_45_scevgep7374_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %45*/
/*   %scevgep72 = getelementptr %struct.TYPE_7__* %fft_hdata, i32 %tmp92, i32 1*/
begin
get_input_45_scevgep72 = (arg_fft_hdata + ((8 * get_input_45_tmp92_reg) + 4));
end
end
always @(posedge clk) begin
/* get_input: %45*/
/*   %scevgep72 = getelementptr %struct.TYPE_7__* %fft_hdata, i32 %tmp92, i32 1*/
if ((cur_state == LEGUP_F_get_input_BB_45_101))
begin
get_input_45_scevgep72_reg <= get_input_45_scevgep72;
if (reset == 1'b0 && ^(get_input_45_scevgep72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_45_scevgep72_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %45*/
/*   %tmp78 = add i32 %tmp77, %x.427.us*/
begin
get_input_45_tmp78 = (get_input__preheader26_lr_ph_split_us_tmp77_reg + get_input_45_x_427_us_reg);
end
end
always @(posedge clk) begin
/* get_input: %45*/
/*   %tmp78 = add i32 %tmp77, %x.427.us*/
if ((cur_state == LEGUP_F_get_input_BB_45_100))
begin
get_input_45_tmp78_reg <= get_input_45_tmp78;
if (reset == 1'b0 && ^(get_input_45_tmp78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_45_tmp78_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %45*/
/*   %scevgep7980 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp78, i32 0*/
begin
get_input_45_scevgep7980 = (arg_fft_hdata + (8 * get_input_45_tmp78_reg));
end
end
always @(posedge clk) begin
/* get_input: %45*/
/*   %scevgep7980 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp78, i32 0*/
if ((cur_state == LEGUP_F_get_input_BB_45_101))
begin
get_input_45_scevgep7980_reg <= get_input_45_scevgep7980;
if (reset == 1'b0 && ^(get_input_45_scevgep7980) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_45_scevgep7980_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %45*/
/*   %46 = load float* %scevgep7980, align 4, !tbaa !4*/
begin
get_input_45_46 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_input: %45*/
/*   %46 = load float* %scevgep7980, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_45_103))
begin
get_input_45_46_reg <= get_input_45_46;
if (reset == 1'b0 && ^(get_input_45_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_45_46_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %45*/
/*   %47 = add nsw i32 %x.427.us, 1*/
begin
get_input_45_47 = (get_input_45_x_427_us_reg + 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %45*/
/*   %47 = add nsw i32 %x.427.us, 1*/
if ((cur_state == LEGUP_F_get_input_BB_45_100))
begin
get_input_45_47_reg <= get_input_45_47;
if (reset == 1'b0 && ^(get_input_45_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_45_47_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %45*/
/*   %exitcond67 = icmp eq i32 %47, %n*/
begin
get_input_45_exitcond67 = (get_input_45_47 == arg_n);
end
end
always @(posedge clk) begin
/* get_input: %45*/
/*   %exitcond67 = icmp eq i32 %47, %n*/
if ((cur_state == LEGUP_F_get_input_BB_45_100))
begin
get_input_45_exitcond67_reg <= get_input_45_exitcond67;
if (reset == 1'b0 && ^(get_input_45_exitcond67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_45_exitcond67_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph28.us*/
/*   %indvar = phi i32 [ %indvar.next, %44 ], [ 0, %.preheader26.lr.ph.split.us ]*/
if (((cur_state == LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_98) & (memory_controller_waitrequest == 1'd0)))
begin
get_input__lr_ph28_us_indvar = 32'd0;
end
/* get_input: %.lr.ph28.us*/
/*   %indvar = phi i32 [ %indvar.next, %44 ], [ 0, %.preheader26.lr.ph.split.us ]*/
else /* if ((((cur_state == LEGUP_F_get_input_BB_44_99) & (memory_controller_waitrequest == 1'd0)) & (get_input_44_exitcond87 == 1'd0))) */
begin
get_input__lr_ph28_us_indvar = get_input_44_indvar_next;
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph28.us*/
/*   %indvar = phi i32 [ %indvar.next, %44 ], [ 0, %.preheader26.lr.ph.split.us ]*/
if (((cur_state == LEGUP_F_get_input_BB__preheader26_lr_ph_split_us_98) & (memory_controller_waitrequest == 1'd0)))
begin
get_input__lr_ph28_us_indvar_reg <= get_input__lr_ph28_us_indvar;
if (reset == 1'b0 && ^(get_input__lr_ph28_us_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph28_us_indvar_reg"); $finish; end
end
/* get_input: %.lr.ph28.us*/
/*   %indvar = phi i32 [ %indvar.next, %44 ], [ 0, %.preheader26.lr.ph.split.us ]*/
if ((((cur_state == LEGUP_F_get_input_BB_44_99) & (memory_controller_waitrequest == 1'd0)) & (get_input_44_exitcond87 == 1'd0)))
begin
get_input__lr_ph28_us_indvar_reg <= get_input__lr_ph28_us_indvar;
if (reset == 1'b0 && ^(get_input__lr_ph28_us_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph28_us_indvar_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph28.us*/
/*   %tmp90314 = add i32 %tmp89, %indvar*/
begin
get_input__lr_ph28_us_tmp90314 = (get_input__preheader26_lr_ph_split_us_tmp89_reg + get_input__lr_ph28_us_indvar_reg);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph28.us*/
/*   %tmp90314 = add i32 %tmp89, %indvar*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph28_us_105))
begin
get_input__lr_ph28_us_tmp90314_reg <= get_input__lr_ph28_us_tmp90314;
if (reset == 1'b0 && ^(get_input__lr_ph28_us_tmp90314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph28_us_tmp90314_reg"); $finish; end
end
end
always @(*) begin
get_input__lr_ph28_us_tmp91 = get_input__lr_ph28_us_tmp91_stage0_reg;
end
always @(posedge clk) begin
/* get_input: %.lr.ph28.us*/
/*   %tmp91 = mul i32 %tmp90314, %n*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph28_us_106))
begin
get_input__lr_ph28_us_tmp91_reg <= get_input__lr_ph28_us_tmp91;
if (reset == 1'b0 && ^(get_input__lr_ph28_us_tmp91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph28_us_tmp91_reg"); $finish; end
end
/* get_input: %.lr.ph28.us*/
/*   %tmp91 = mul i32 %tmp90314, %n*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph28_us_106))
begin
get_input__lr_ph28_us_tmp91_reg <= get_input__lr_ph28_us_tmp91;
if (reset == 1'b0 && ^(get_input__lr_ph28_us_tmp91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph28_us_tmp91_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader9*/
/*   %48 = icmp sgt i32 %3, 1*/
begin
get_input__preheader9_48 = ($signed(get_input_0_3_reg) > $signed(32'd1));
end
end
always @(posedge clk) begin
/* get_input: %.preheader9*/
/*   %48 = icmp sgt i32 %3, 1*/
if ((cur_state == LEGUP_F_get_input_BB__preheader9_108))
begin
get_input__preheader9_48_reg <= get_input__preheader9_48;
if (reset == 1'b0 && ^(get_input__preheader9_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader9_48_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader9*/
/*   %49 = icmp sgt i32 %n, 0*/
begin
get_input__preheader9_49 = ($signed(arg_n) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* get_input: %.preheader9*/
/*   %49 = icmp sgt i32 %n, 0*/
if ((cur_state == LEGUP_F_get_input_BB__preheader9_108))
begin
get_input__preheader9_49_reg <= get_input__preheader9_49;
if (reset == 1'b0 && ^(get_input__preheader9_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader9_49_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader9*/
/*   %or.cond319 = and i1 %48, %49*/
begin
get_input__preheader9_or_cond319 = (get_input__preheader9_48 & get_input__preheader9_49);
end
end
always @(posedge clk) begin
/* get_input: %.preheader9*/
/*   %or.cond319 = and i1 %48, %49*/
if ((cur_state == LEGUP_F_get_input_BB__preheader9_108))
begin
get_input__preheader9_or_cond319_reg <= get_input__preheader9_or_cond319;
if (reset == 1'b0 && ^(get_input__preheader9_or_cond319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader9_or_cond319_reg"); $finish; end
end
end
always @(*) begin
get_input__preheader5_lr_ph_split_us_tmp101 = get_input__preheader5_lr_ph_split_us_tmp101_stage0_reg;
end
always @(posedge clk) begin
/* get_input: %.preheader5.lr.ph.split.us*/
/*   %tmp101 = mul i32 %4, %n*/
if ((cur_state == LEGUP_F_get_input_BB__preheader5_lr_ph_split_us_110))
begin
get_input__preheader5_lr_ph_split_us_tmp101_reg <= get_input__preheader5_lr_ph_split_us_tmp101;
if (reset == 1'b0 && ^(get_input__preheader5_lr_ph_split_us_tmp101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader5_lr_ph_split_us_tmp101_reg"); $finish; end
end
/* get_input: %.preheader5.lr.ph.split.us*/
/*   %tmp101 = mul i32 %4, %n*/
if ((cur_state == LEGUP_F_get_input_BB__preheader5_lr_ph_split_us_110))
begin
get_input__preheader5_lr_ph_split_us_tmp101_reg <= get_input__preheader5_lr_ph_split_us_tmp101;
if (reset == 1'b0 && ^(get_input__preheader5_lr_ph_split_us_tmp101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader5_lr_ph_split_us_tmp101_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader5.lr.ph.split.us*/
/*   %tmp105 = icmp sgt i32 %4, 1*/
begin
get_input__preheader5_lr_ph_split_us_tmp105 = ($signed(get_input_0_4_reg) > $signed(32'd1));
end
end
always @(posedge clk) begin
/* get_input: %.preheader5.lr.ph.split.us*/
/*   %tmp105 = icmp sgt i32 %4, 1*/
if ((cur_state == LEGUP_F_get_input_BB__preheader5_lr_ph_split_us_109))
begin
get_input__preheader5_lr_ph_split_us_tmp105_reg <= get_input__preheader5_lr_ph_split_us_tmp105;
if (reset == 1'b0 && ^(get_input__preheader5_lr_ph_split_us_tmp105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader5_lr_ph_split_us_tmp105_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader5.lr.ph.split.us*/
/*   %smax106 = select i1 %tmp105, i32 %4, i32 1*/
begin
get_input__preheader5_lr_ph_split_us_smax106 = (get_input__preheader5_lr_ph_split_us_tmp105 ? get_input_0_4_reg : 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %.preheader5.lr.ph.split.us*/
/*   %smax106 = select i1 %tmp105, i32 %4, i32 1*/
if ((cur_state == LEGUP_F_get_input_BB__preheader5_lr_ph_split_us_109))
begin
get_input__preheader5_lr_ph_split_us_smax106_reg <= get_input__preheader5_lr_ph_split_us_smax106;
if (reset == 1'b0 && ^(get_input__preheader5_lr_ph_split_us_smax106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader5_lr_ph_split_us_smax106_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %50*/
/*   %51 = add nsw i32 %y.410.us, 1*/
begin
get_input_50_51 = (get_input__lr_ph7_us_y_410_us_reg + 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %50*/
/*   %51 = add nsw i32 %y.410.us, 1*/
if ((cur_state == LEGUP_F_get_input_BB_50_111))
begin
get_input_50_51_reg <= get_input_50_51;
if (reset == 1'b0 && ^(get_input_50_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_50_51_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %50*/
/*   %exitcond107 = icmp eq i32 %51, %smax106*/
begin
get_input_50_exitcond107 = (get_input_50_51 == get_input__preheader5_lr_ph_split_us_smax106_reg);
end
end
always @(posedge clk) begin
/* get_input: %50*/
/*   %exitcond107 = icmp eq i32 %51, %smax106*/
if ((cur_state == LEGUP_F_get_input_BB_50_111))
begin
get_input_50_exitcond107_reg <= get_input_50_exitcond107;
if (reset == 1'b0 && ^(get_input_50_exitcond107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_50_exitcond107_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %52*/
/*   %x.86.us = phi i32 [ 0, %.lr.ph7.us ], [ %54, %52 ]*/
if ((((cur_state == LEGUP_F_get_input_BB_52_116) & (memory_controller_waitrequest == 1'd0)) & (get_input_52_exitcond96_reg == 1'd0)))
begin
get_input_52_x_86_us = get_input_52_54_reg;
end
/* get_input: %52*/
/*   %x.86.us = phi i32 [ 0, %.lr.ph7.us ], [ %54, %52 ]*/
else /* if (((cur_state == LEGUP_F_get_input_BB__lr_ph7_us_118) & (memory_controller_waitrequest == 1'd0))) */
begin
get_input_52_x_86_us = 32'd0;
end
end
always @(posedge clk) begin
/* get_input: %52*/
/*   %x.86.us = phi i32 [ 0, %.lr.ph7.us ], [ %54, %52 ]*/
if ((((cur_state == LEGUP_F_get_input_BB_52_116) & (memory_controller_waitrequest == 1'd0)) & (get_input_52_exitcond96_reg == 1'd0)))
begin
get_input_52_x_86_us_reg <= get_input_52_x_86_us;
if (reset == 1'b0 && ^(get_input_52_x_86_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_52_x_86_us_reg"); $finish; end
end
/* get_input: %52*/
/*   %x.86.us = phi i32 [ 0, %.lr.ph7.us ], [ %54, %52 ]*/
if (((cur_state == LEGUP_F_get_input_BB__lr_ph7_us_118) & (memory_controller_waitrequest == 1'd0)))
begin
get_input_52_x_86_us_reg <= get_input_52_x_86_us;
if (reset == 1'b0 && ^(get_input_52_x_86_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_52_x_86_us_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %52*/
/*   %tmp109 = add i32 %tmp108, %x.86.us*/
begin
get_input_52_tmp109 = (get_input__lr_ph7_us_tmp108_reg + get_input_52_x_86_us_reg);
end
end
always @(posedge clk) begin
/* get_input: %52*/
/*   %tmp109 = add i32 %tmp108, %x.86.us*/
if ((cur_state == LEGUP_F_get_input_BB_52_112))
begin
get_input_52_tmp109_reg <= get_input_52_tmp109;
if (reset == 1'b0 && ^(get_input_52_tmp109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_52_tmp109_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %52*/
/*   %scevgep99100 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp109, i32 0*/
begin
get_input_52_scevgep99100 = (arg_fft_hdata + (8 * get_input_52_tmp109_reg));
end
end
always @(posedge clk) begin
/* get_input: %52*/
/*   %scevgep99100 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp109, i32 0*/
if ((cur_state == LEGUP_F_get_input_BB_52_113))
begin
get_input_52_scevgep99100_reg <= get_input_52_scevgep99100;
if (reset == 1'b0 && ^(get_input_52_scevgep99100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_52_scevgep99100_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %52*/
/*   %scevgep98 = getelementptr %struct.TYPE_7__* %fft_hdata, i32 %tmp109, i32 1*/
begin
get_input_52_scevgep98 = (arg_fft_hdata + ((8 * get_input_52_tmp109_reg) + 4));
end
end
always @(posedge clk) begin
/* get_input: %52*/
/*   %scevgep98 = getelementptr %struct.TYPE_7__* %fft_hdata, i32 %tmp109, i32 1*/
if ((cur_state == LEGUP_F_get_input_BB_52_113))
begin
get_input_52_scevgep98_reg <= get_input_52_scevgep98;
if (reset == 1'b0 && ^(get_input_52_scevgep98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_52_scevgep98_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %52*/
/*   %tmp102 = add i32 %tmp101, %x.86.us*/
begin
get_input_52_tmp102 = (get_input__preheader5_lr_ph_split_us_tmp101_reg + get_input_52_x_86_us_reg);
end
end
always @(posedge clk) begin
/* get_input: %52*/
/*   %tmp102 = add i32 %tmp101, %x.86.us*/
if ((cur_state == LEGUP_F_get_input_BB_52_112))
begin
get_input_52_tmp102_reg <= get_input_52_tmp102;
if (reset == 1'b0 && ^(get_input_52_tmp102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_52_tmp102_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %52*/
/*   %scevgep103104 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp102, i32 0*/
begin
get_input_52_scevgep103104 = (arg_fft_hdata + (8 * get_input_52_tmp102_reg));
end
end
always @(posedge clk) begin
/* get_input: %52*/
/*   %scevgep103104 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp102, i32 0*/
if ((cur_state == LEGUP_F_get_input_BB_52_113))
begin
get_input_52_scevgep103104_reg <= get_input_52_scevgep103104;
if (reset == 1'b0 && ^(get_input_52_scevgep103104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_52_scevgep103104_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %52*/
/*   %53 = load float* %scevgep103104, align 4, !tbaa !4*/
begin
get_input_52_53 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_input: %52*/
/*   %53 = load float* %scevgep103104, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_52_115))
begin
get_input_52_53_reg <= get_input_52_53;
if (reset == 1'b0 && ^(get_input_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_52_53_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %52*/
/*   %54 = add nsw i32 %x.86.us, 1*/
begin
get_input_52_54 = (get_input_52_x_86_us_reg + 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %52*/
/*   %54 = add nsw i32 %x.86.us, 1*/
if ((cur_state == LEGUP_F_get_input_BB_52_112))
begin
get_input_52_54_reg <= get_input_52_54;
if (reset == 1'b0 && ^(get_input_52_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_52_54_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %52*/
/*   %exitcond96 = icmp eq i32 %54, %n*/
begin
get_input_52_exitcond96 = (get_input_52_54 == arg_n);
end
end
always @(posedge clk) begin
/* get_input: %52*/
/*   %exitcond96 = icmp eq i32 %54, %n*/
if ((cur_state == LEGUP_F_get_input_BB_52_112))
begin
get_input_52_exitcond96_reg <= get_input_52_exitcond96;
if (reset == 1'b0 && ^(get_input_52_exitcond96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_52_exitcond96_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph7.us*/
/*   %y.410.us = phi i32 [ 0, %.preheader5.lr.ph.split.us ], [ %51, %50 ]*/
if (((cur_state == LEGUP_F_get_input_BB__preheader5_lr_ph_split_us_110) & (memory_controller_waitrequest == 1'd0)))
begin
get_input__lr_ph7_us_y_410_us = 32'd0;
end
/* get_input: %.lr.ph7.us*/
/*   %y.410.us = phi i32 [ 0, %.preheader5.lr.ph.split.us ], [ %51, %50 ]*/
else /* if ((((cur_state == LEGUP_F_get_input_BB_50_111) & (memory_controller_waitrequest == 1'd0)) & (get_input_50_exitcond107 == 1'd0))) */
begin
get_input__lr_ph7_us_y_410_us = get_input_50_51;
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph7.us*/
/*   %y.410.us = phi i32 [ 0, %.preheader5.lr.ph.split.us ], [ %51, %50 ]*/
if (((cur_state == LEGUP_F_get_input_BB__preheader5_lr_ph_split_us_110) & (memory_controller_waitrequest == 1'd0)))
begin
get_input__lr_ph7_us_y_410_us_reg <= get_input__lr_ph7_us_y_410_us;
if (reset == 1'b0 && ^(get_input__lr_ph7_us_y_410_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph7_us_y_410_us_reg"); $finish; end
end
/* get_input: %.lr.ph7.us*/
/*   %y.410.us = phi i32 [ 0, %.preheader5.lr.ph.split.us ], [ %51, %50 ]*/
if ((((cur_state == LEGUP_F_get_input_BB_50_111) & (memory_controller_waitrequest == 1'd0)) & (get_input_50_exitcond107 == 1'd0)))
begin
get_input__lr_ph7_us_y_410_us_reg <= get_input__lr_ph7_us_y_410_us;
if (reset == 1'b0 && ^(get_input__lr_ph7_us_y_410_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph7_us_y_410_us_reg"); $finish; end
end
end
always @(*) begin
get_input__lr_ph7_us_tmp108 = get_input__lr_ph7_us_tmp108_stage0_reg;
end
always @(posedge clk) begin
/* get_input: %.lr.ph7.us*/
/*   %tmp108 = mul i32 %y.410.us, %n*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph7_us_118))
begin
get_input__lr_ph7_us_tmp108_reg <= get_input__lr_ph7_us_tmp108;
if (reset == 1'b0 && ^(get_input__lr_ph7_us_tmp108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph7_us_tmp108_reg"); $finish; end
end
/* get_input: %.lr.ph7.us*/
/*   %tmp108 = mul i32 %y.410.us, %n*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph7_us_118))
begin
get_input__lr_ph7_us_tmp108_reg <= get_input__lr_ph7_us_tmp108;
if (reset == 1'b0 && ^(get_input__lr_ph7_us_tmp108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph7_us_tmp108_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %55*/
/*   %y.324 = phi i32 [ 0, %.lr.ph25 ], [ %64, %._crit_edge22 ]*/
if (((cur_state == LEGUP_F_get_input_BB__lr_ph25_46) & (memory_controller_waitrequest == 1'd0)))
begin
get_input_55_y_324 = 32'd0;
end
/* get_input: %55*/
/*   %y.324 = phi i32 [ 0, %.lr.ph25 ], [ %64, %._crit_edge22 ]*/
else /* if ((((cur_state == LEGUP_F_get_input_BB___crit_edge22_156) & (memory_controller_waitrequest == 1'd0)) & (get_input___crit_edge22_exitcond200 == 1'd0))) */
begin
get_input_55_y_324 = get_input___crit_edge22_64;
end
end
always @(posedge clk) begin
/* get_input: %55*/
/*   %y.324 = phi i32 [ 0, %.lr.ph25 ], [ %64, %._crit_edge22 ]*/
if (((cur_state == LEGUP_F_get_input_BB__lr_ph25_46) & (memory_controller_waitrequest == 1'd0)))
begin
get_input_55_y_324_reg <= get_input_55_y_324;
if (reset == 1'b0 && ^(get_input_55_y_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_55_y_324_reg"); $finish; end
end
/* get_input: %55*/
/*   %y.324 = phi i32 [ 0, %.lr.ph25 ], [ %64, %._crit_edge22 ]*/
if ((((cur_state == LEGUP_F_get_input_BB___crit_edge22_156) & (memory_controller_waitrequest == 1'd0)) & (get_input___crit_edge22_exitcond200 == 1'd0)))
begin
get_input_55_y_324_reg <= get_input_55_y_324;
if (reset == 1'b0 && ^(get_input_55_y_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_55_y_324_reg"); $finish; end
end
end
always @(*) begin
get_input_55_tmp201 = get_input_55_tmp201_stage0_reg;
end
always @(posedge clk) begin
/* get_input: %55*/
/*   %tmp201 = mul i32 %y.324, %n*/
if ((cur_state == LEGUP_F_get_input_BB_55_120))
begin
get_input_55_tmp201_reg <= get_input_55_tmp201;
if (reset == 1'b0 && ^(get_input_55_tmp201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_55_tmp201_reg"); $finish; end
end
/* get_input: %55*/
/*   %tmp201 = mul i32 %y.324, %n*/
if ((cur_state == LEGUP_F_get_input_BB_55_120))
begin
get_input_55_tmp201_reg <= get_input_55_tmp201;
if (reset == 1'b0 && ^(get_input_55_tmp201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_55_tmp201_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %55*/
/*   %tmp202 = add i32 %tmp194, %tmp201*/
begin
get_input_55_tmp202 = (get_input__lr_ph25_tmp194_reg + get_input_55_tmp201);
end
end
always @(posedge clk) begin
/* get_input: %55*/
/*   %tmp202 = add i32 %tmp194, %tmp201*/
if ((cur_state == LEGUP_F_get_input_BB_55_120))
begin
get_input_55_tmp202_reg <= get_input_55_tmp202;
if (reset == 1'b0 && ^(get_input_55_tmp202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_55_tmp202_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %55*/
/*   %tmp207313 = add i32 %4, %y.324*/
begin
get_input_55_tmp207313 = (get_input_0_4_reg + get_input_55_y_324_reg);
end
end
always @(posedge clk) begin
/* get_input: %55*/
/*   %tmp207313 = add i32 %4, %y.324*/
if ((cur_state == LEGUP_F_get_input_BB_55_119))
begin
get_input_55_tmp207313_reg <= get_input_55_tmp207313;
if (reset == 1'b0 && ^(get_input_55_tmp207313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_55_tmp207313_reg"); $finish; end
end
end
always @(*) begin
get_input_55_tmp208 = get_input_55_tmp208_stage0_reg;
end
always @(posedge clk) begin
/* get_input: %55*/
/*   %tmp208 = mul i32 %tmp207313, %n*/
if ((cur_state == LEGUP_F_get_input_BB_55_120))
begin
get_input_55_tmp208_reg <= get_input_55_tmp208;
if (reset == 1'b0 && ^(get_input_55_tmp208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_55_tmp208_reg"); $finish; end
end
/* get_input: %55*/
/*   %tmp208 = mul i32 %tmp207313, %n*/
if ((cur_state == LEGUP_F_get_input_BB_55_120))
begin
get_input_55_tmp208_reg <= get_input_55_tmp208;
if (reset == 1'b0 && ^(get_input_55_tmp208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_55_tmp208_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %55*/
/*   %tmp214 = add i32 %tmp213, %tmp201*/
begin
get_input_55_tmp214 = (get_input__lr_ph25_tmp213_reg + get_input_55_tmp201);
end
end
always @(posedge clk) begin
/* get_input: %55*/
/*   %tmp214 = add i32 %tmp213, %tmp201*/
if ((cur_state == LEGUP_F_get_input_BB_55_120))
begin
get_input_55_tmp214_reg <= get_input_55_tmp214;
if (reset == 1'b0 && ^(get_input_55_tmp214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_55_tmp214_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %55*/
/*   %scevgep220221 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp214, i32 0*/
begin
get_input_55_scevgep220221 = (arg_fft_hdata + (8 * get_input_55_tmp214_reg));
end
end
always @(posedge clk) begin
/* get_input: %55*/
/*   %scevgep220221 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp214, i32 0*/
if ((cur_state == LEGUP_F_get_input_BB_55_121))
begin
get_input_55_scevgep220221_reg <= get_input_55_scevgep220221;
if (reset == 1'b0 && ^(get_input_55_scevgep220221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_55_scevgep220221_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %55*/
/*   %tmp224 = add i32 %tmp223, %tmp201*/
begin
get_input_55_tmp224 = (get_input__lr_ph25_tmp223_reg + get_input_55_tmp201);
end
end
always @(posedge clk) begin
/* get_input: %55*/
/*   %tmp224 = add i32 %tmp223, %tmp201*/
if ((cur_state == LEGUP_F_get_input_BB_55_120))
begin
get_input_55_tmp224_reg <= get_input_55_tmp224;
if (reset == 1'b0 && ^(get_input_55_tmp224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_55_tmp224_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %55*/
/*   %scevgep225226 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp224, i32 0*/
begin
get_input_55_scevgep225226 = (arg_fft_hdata + (8 * get_input_55_tmp224_reg));
end
end
always @(posedge clk) begin
/* get_input: %55*/
/*   %scevgep225226 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp224, i32 0*/
if ((cur_state == LEGUP_F_get_input_BB_55_121))
begin
get_input_55_scevgep225226_reg <= get_input_55_scevgep225226;
if (reset == 1'b0 && ^(get_input_55_scevgep225226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_55_scevgep225226_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph15*/
/*   %56 = load i32* %24, align 4, !tbaa !0*/
begin
get_input__lr_ph15_56 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph15*/
/*   %56 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph15_124))
begin
get_input__lr_ph15_56_reg <= get_input__lr_ph15_56;
if (reset == 1'b0 && ^(get_input__lr_ph15_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph15_56_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph15*/
/*   %tmp162 = shl i32 %y.324, 2*/
begin
get_input__lr_ph15_tmp162 = (get_input_55_y_324_reg <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph15*/
/*   %tmp162 = shl i32 %y.324, 2*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph15_122))
begin
get_input__lr_ph15_tmp162_reg <= get_input__lr_ph15_tmp162;
if (reset == 1'b0 && ^(get_input__lr_ph15_tmp162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph15_tmp162_reg"); $finish; end
end
end
always @(*) begin
get_input__lr_ph15_tmp163 = get_input__lr_ph15_tmp163_stage0_reg;
end
always @(posedge clk) begin
/* get_input: %.lr.ph15*/
/*   %tmp163 = mul i32 %56, %tmp162*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph15_125))
begin
get_input__lr_ph15_tmp163_reg <= get_input__lr_ph15_tmp163;
if (reset == 1'b0 && ^(get_input__lr_ph15_tmp163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph15_tmp163_reg"); $finish; end
end
/* get_input: %.lr.ph15*/
/*   %tmp163 = mul i32 %56, %tmp162*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph15_125))
begin
get_input__lr_ph15_tmp163_reg <= get_input__lr_ph15_tmp163;
if (reset == 1'b0 && ^(get_input__lr_ph15_tmp163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph15_tmp163_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %57*/
/*   %x.513 = phi i32 [ 0, %.lr.ph15 ], [ %60, %57 ]*/
if (((cur_state == LEGUP_F_get_input_BB__lr_ph15_125) & (memory_controller_waitrequest == 1'd0)))
begin
get_input_57_x_513 = 32'd0;
end
/* get_input: %57*/
/*   %x.513 = phi i32 [ 0, %.lr.ph15 ], [ %60, %57 ]*/
else /* if ((((cur_state == LEGUP_F_get_input_BB_57_141) & (memory_controller_waitrequest == 1'd0)) & (get_input_57_exitcond159_reg == 1'd0))) */
begin
get_input_57_x_513 = get_input_57_60_reg;
end
end
always @(posedge clk) begin
/* get_input: %57*/
/*   %x.513 = phi i32 [ 0, %.lr.ph15 ], [ %60, %57 ]*/
if (((cur_state == LEGUP_F_get_input_BB__lr_ph15_125) & (memory_controller_waitrequest == 1'd0)))
begin
get_input_57_x_513_reg <= get_input_57_x_513;
if (reset == 1'b0 && ^(get_input_57_x_513) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_57_x_513_reg"); $finish; end
end
/* get_input: %57*/
/*   %x.513 = phi i32 [ 0, %.lr.ph15 ], [ %60, %57 ]*/
if ((((cur_state == LEGUP_F_get_input_BB_57_141) & (memory_controller_waitrequest == 1'd0)) & (get_input_57_exitcond159_reg == 1'd0)))
begin
get_input_57_x_513_reg <= get_input_57_x_513;
if (reset == 1'b0 && ^(get_input_57_x_513) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_57_x_513_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %57*/
/*   %tmp215 = add i32 %tmp214, %x.513*/
begin
get_input_57_tmp215 = (get_input_55_tmp214_reg + get_input_57_x_513_reg);
end
end
always @(posedge clk) begin
/* get_input: %57*/
/*   %tmp215 = add i32 %tmp214, %x.513*/
if ((cur_state == LEGUP_F_get_input_BB_57_126))
begin
get_input_57_tmp215_reg <= get_input_57_tmp215;
if (reset == 1'b0 && ^(get_input_57_tmp215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_57_tmp215_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %57*/
/*   %scevgep171172 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp215, i32 0*/
begin
get_input_57_scevgep171172 = (arg_fft_hdata + (8 * get_input_57_tmp215_reg));
end
end
always @(posedge clk) begin
/* get_input: %57*/
/*   %scevgep171172 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp215, i32 0*/
if ((cur_state == LEGUP_F_get_input_BB_57_127))
begin
get_input_57_scevgep171172_reg <= get_input_57_scevgep171172;
if (reset == 1'b0 && ^(get_input_57_scevgep171172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_57_scevgep171172_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %57*/
/*   %scevgep170 = getelementptr %struct.TYPE_7__* %fft_hdata, i32 %tmp215, i32 1*/
begin
get_input_57_scevgep170 = (arg_fft_hdata + ((8 * get_input_57_tmp215_reg) + 4));
end
end
always @(posedge clk) begin
/* get_input: %57*/
/*   %scevgep170 = getelementptr %struct.TYPE_7__* %fft_hdata, i32 %tmp215, i32 1*/
if ((cur_state == LEGUP_F_get_input_BB_57_127))
begin
get_input_57_scevgep170_reg <= get_input_57_scevgep170;
if (reset == 1'b0 && ^(get_input_57_scevgep170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_57_scevgep170_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %57*/
/*   %scevgep160 = getelementptr float* %21, i32 %x.513*/
begin
get_input_57_scevgep160 = (get_input__lr_ph25_21_reg + (4 * get_input_57_x_513_reg));
end
end
always @(posedge clk) begin
/* get_input: %57*/
/*   %scevgep160 = getelementptr float* %21, i32 %x.513*/
if ((cur_state == LEGUP_F_get_input_BB_57_126))
begin
get_input_57_scevgep160_reg <= get_input_57_scevgep160;
if (reset == 1'b0 && ^(get_input_57_scevgep160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_57_scevgep160_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %57*/
/*   %scevgep160161 = bitcast float* %scevgep160 to i8**/
begin
get_input_57_scevgep160161 = get_input_57_scevgep160;
end
end
always @(posedge clk) begin
/* get_input: %57*/
/*   %scevgep160161 = bitcast float* %scevgep160 to i8**/
if ((cur_state == LEGUP_F_get_input_BB_57_126))
begin
get_input_57_scevgep160161_reg <= get_input_57_scevgep160161;
if (reset == 1'b0 && ^(get_input_57_scevgep160161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_57_scevgep160161_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %57*/
/*   %uglygep = getelementptr i8* %scevgep160161, i32 %tmp163*/
begin
get_input_57_uglygep = (get_input_57_scevgep160161_reg + (1 * get_input__lr_ph15_tmp163_reg));
end
end
always @(posedge clk) begin
/* get_input: %57*/
/*   %uglygep = getelementptr i8* %scevgep160161, i32 %tmp163*/
if ((cur_state == LEGUP_F_get_input_BB_57_127))
begin
get_input_57_uglygep_reg <= get_input_57_uglygep;
if (reset == 1'b0 && ^(get_input_57_uglygep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_57_uglygep_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %57*/
/*   %uglygep164 = bitcast i8* %uglygep to float**/
begin
get_input_57_uglygep164 = get_input_57_uglygep;
end
end
always @(posedge clk) begin
/* get_input: %57*/
/*   %uglygep164 = bitcast i8* %uglygep to float**/
if ((cur_state == LEGUP_F_get_input_BB_57_127))
begin
get_input_57_uglygep164_reg <= get_input_57_uglygep164;
if (reset == 1'b0 && ^(get_input_57_uglygep164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_57_uglygep164_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %57*/
/*   %58 = load float* %uglygep164, align 4, !tbaa !4*/
begin
get_input_57_58 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_input: %57*/
/*   %58 = load float* %uglygep164, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_57_129))
begin
get_input_57_58_reg <= get_input_57_58;
if (reset == 1'b0 && ^(get_input_57_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_57_58_reg"); $finish; end
end
end
always @(*) begin
get_input_57_59 = get_input_altfp_multiply_32_0;
end
always @(posedge clk) begin
/* get_input: %57*/
/*   %59 = fmul float %58, %scale*/
if ((cur_state == LEGUP_F_get_input_BB_57_140))
begin
get_input_57_59_reg <= get_input_57_59;
if (reset == 1'b0 && ^(get_input_57_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_57_59_reg"); $finish; end
end
/* get_input: %57*/
/*   %59 = fmul float %58, %scale*/
if ((cur_state == LEGUP_F_get_input_BB_57_140))
begin
get_input_57_59_reg <= get_input_57_59;
if (reset == 1'b0 && ^(get_input_57_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_57_59_reg"); $finish; end
end
/* get_input: %36*/
/*   %38 = fmul float %37, %scale*/
if ((cur_state == LEGUP_F_get_input_BB_36_80))
begin
get_input_57_59_reg <= get_input_36_38;
if (reset == 1'b0 && ^(get_input_36_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_57_59_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %57*/
/*   %60 = add nsw i32 %x.513, 1*/
begin
get_input_57_60 = (get_input_57_x_513_reg + 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %57*/
/*   %60 = add nsw i32 %x.513, 1*/
if ((cur_state == LEGUP_F_get_input_BB_57_126))
begin
get_input_57_60_reg <= get_input_57_60;
if (reset == 1'b0 && ^(get_input_57_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_57_60_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %57*/
/*   %exitcond159 = icmp eq i32 %60, %w*/
begin
get_input_57_exitcond159 = (get_input_57_60 == arg_w);
end
end
always @(posedge clk) begin
/* get_input: %57*/
/*   %exitcond159 = icmp eq i32 %60, %w*/
if ((cur_state == LEGUP_F_get_input_BB_57_126))
begin
get_input_57_exitcond159_reg <= get_input_57_exitcond159;
if (reset == 1'b0 && ^(get_input_57_exitcond159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_57_exitcond159_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph17*/
/*   %x.616 = phi i32 [ %62, %.lr.ph17 ], [ 0, %.lr.ph17.preheader ]*/
if (((cur_state == LEGUP_F_get_input_BB__lr_ph17_preheader_144) & (memory_controller_waitrequest == 1'd0)))
begin
get_input__lr_ph17_x_616 = 32'd0;
end
/* get_input: %.lr.ph17*/
/*   %x.616 = phi i32 [ %62, %.lr.ph17 ], [ 0, %.lr.ph17.preheader ]*/
else /* if ((((cur_state == LEGUP_F_get_input_BB__lr_ph17_148) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph17_exitcond175_reg == 1'd0))) */
begin
get_input__lr_ph17_x_616 = get_input__lr_ph17_62_reg;
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph17*/
/*   %x.616 = phi i32 [ %62, %.lr.ph17 ], [ 0, %.lr.ph17.preheader ]*/
if (((cur_state == LEGUP_F_get_input_BB__lr_ph17_preheader_144) & (memory_controller_waitrequest == 1'd0)))
begin
get_input__lr_ph17_x_616_reg <= get_input__lr_ph17_x_616;
if (reset == 1'b0 && ^(get_input__lr_ph17_x_616) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph17_x_616_reg"); $finish; end
end
/* get_input: %.lr.ph17*/
/*   %x.616 = phi i32 [ %62, %.lr.ph17 ], [ 0, %.lr.ph17.preheader ]*/
if ((((cur_state == LEGUP_F_get_input_BB__lr_ph17_148) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph17_exitcond175_reg == 1'd0)))
begin
get_input__lr_ph17_x_616_reg <= get_input__lr_ph17_x_616;
if (reset == 1'b0 && ^(get_input__lr_ph17_x_616) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph17_x_616_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph17*/
/*   %tmp209 = add i32 %tmp208, %x.616*/
begin
get_input__lr_ph17_tmp209 = (get_input_55_tmp208_reg + get_input__lr_ph17_x_616_reg);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph17*/
/*   %tmp209 = add i32 %tmp208, %x.616*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph17_145))
begin
get_input__lr_ph17_tmp209_reg <= get_input__lr_ph17_tmp209;
if (reset == 1'b0 && ^(get_input__lr_ph17_tmp209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph17_tmp209_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph17*/
/*   %scevgep180181 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp209, i32 0*/
begin
get_input__lr_ph17_scevgep180181 = (arg_fft_hdata + (8 * get_input__lr_ph17_tmp209_reg));
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph17*/
/*   %scevgep180181 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp209, i32 0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph17_146))
begin
get_input__lr_ph17_scevgep180181_reg <= get_input__lr_ph17_scevgep180181;
if (reset == 1'b0 && ^(get_input__lr_ph17_scevgep180181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph17_scevgep180181_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph17*/
/*   %scevgep179 = getelementptr %struct.TYPE_7__* %fft_hdata, i32 %tmp209, i32 1*/
begin
get_input__lr_ph17_scevgep179 = (arg_fft_hdata + ((8 * get_input__lr_ph17_tmp209_reg) + 4));
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph17*/
/*   %scevgep179 = getelementptr %struct.TYPE_7__* %fft_hdata, i32 %tmp209, i32 1*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph17_146))
begin
get_input__lr_ph17_scevgep179_reg <= get_input__lr_ph17_scevgep179;
if (reset == 1'b0 && ^(get_input__lr_ph17_scevgep179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph17_scevgep179_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph17*/
/*   %61 = load float* %scevgep220221, align 4, !tbaa !4*/
begin
get_input__lr_ph17_61 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph17*/
/*   %61 = load float* %scevgep220221, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph17_147))
begin
get_input__lr_ph17_61_reg <= get_input__lr_ph17_61;
if (reset == 1'b0 && ^(get_input__lr_ph17_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph17_61_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph17*/
/*   %62 = add nsw i32 %x.616, 1*/
begin
get_input__lr_ph17_62 = (get_input__lr_ph17_x_616_reg + 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph17*/
/*   %62 = add nsw i32 %x.616, 1*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph17_145))
begin
get_input__lr_ph17_62_reg <= get_input__lr_ph17_62;
if (reset == 1'b0 && ^(get_input__lr_ph17_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph17_62_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph17*/
/*   %exitcond175 = icmp eq i32 %62, %smax174*/
begin
get_input__lr_ph17_exitcond175 = (get_input__lr_ph17_62 == get_input__lr_ph25_smax174_reg);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph17*/
/*   %exitcond175 = icmp eq i32 %62, %smax174*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph17_145))
begin
get_input__lr_ph17_exitcond175_reg <= get_input__lr_ph17_exitcond175;
if (reset == 1'b0 && ^(get_input__lr_ph17_exitcond175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph17_exitcond175_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph21*/
/*   %indvar182 = phi i32 [ %indvar.next183, %.lr.ph21 ], [ 0, %.lr.ph21.preheader ]*/
if (((cur_state == LEGUP_F_get_input_BB__lr_ph21_preheader_150) & (memory_controller_waitrequest == 1'd0)))
begin
get_input__lr_ph21_indvar182 = 32'd0;
end
/* get_input: %.lr.ph21*/
/*   %indvar182 = phi i32 [ %indvar.next183, %.lr.ph21 ], [ 0, %.lr.ph21.preheader ]*/
else /* if ((((cur_state == LEGUP_F_get_input_BB__lr_ph21_154) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph21_exitcond190_reg == 1'd0))) */
begin
get_input__lr_ph21_indvar182 = get_input__lr_ph21_indvar_next183_reg;
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph21*/
/*   %indvar182 = phi i32 [ %indvar.next183, %.lr.ph21 ], [ 0, %.lr.ph21.preheader ]*/
if (((cur_state == LEGUP_F_get_input_BB__lr_ph21_preheader_150) & (memory_controller_waitrequest == 1'd0)))
begin
get_input__lr_ph21_indvar182_reg <= get_input__lr_ph21_indvar182;
if (reset == 1'b0 && ^(get_input__lr_ph21_indvar182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph21_indvar182_reg"); $finish; end
end
/* get_input: %.lr.ph21*/
/*   %indvar182 = phi i32 [ %indvar.next183, %.lr.ph21 ], [ 0, %.lr.ph21.preheader ]*/
if ((((cur_state == LEGUP_F_get_input_BB__lr_ph21_154) & (memory_controller_waitrequest == 1'd0)) & (get_input__lr_ph21_exitcond190_reg == 1'd0)))
begin
get_input__lr_ph21_indvar182_reg <= get_input__lr_ph21_indvar182;
if (reset == 1'b0 && ^(get_input__lr_ph21_indvar182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph21_indvar182_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph21*/
/*   %tmp203 = add i32 %tmp202, %indvar182*/
begin
get_input__lr_ph21_tmp203 = (get_input_55_tmp202_reg + get_input__lr_ph21_indvar182_reg);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph21*/
/*   %tmp203 = add i32 %tmp202, %indvar182*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph21_151))
begin
get_input__lr_ph21_tmp203_reg <= get_input__lr_ph21_tmp203;
if (reset == 1'b0 && ^(get_input__lr_ph21_tmp203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph21_tmp203_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph21*/
/*   %scevgep198199 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp203, i32 0*/
begin
get_input__lr_ph21_scevgep198199 = (arg_fft_hdata + (8 * get_input__lr_ph21_tmp203_reg));
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph21*/
/*   %scevgep198199 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp203, i32 0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph21_152))
begin
get_input__lr_ph21_scevgep198199_reg <= get_input__lr_ph21_scevgep198199;
if (reset == 1'b0 && ^(get_input__lr_ph21_scevgep198199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph21_scevgep198199_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph21*/
/*   %scevgep197 = getelementptr %struct.TYPE_7__* %fft_hdata, i32 %tmp203, i32 1*/
begin
get_input__lr_ph21_scevgep197 = (arg_fft_hdata + ((8 * get_input__lr_ph21_tmp203_reg) + 4));
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph21*/
/*   %scevgep197 = getelementptr %struct.TYPE_7__* %fft_hdata, i32 %tmp203, i32 1*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph21_152))
begin
get_input__lr_ph21_scevgep197_reg <= get_input__lr_ph21_scevgep197;
if (reset == 1'b0 && ^(get_input__lr_ph21_scevgep197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph21_scevgep197_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph21*/
/*   %63 = load float* %scevgep225226, align 4, !tbaa !4*/
begin
get_input__lr_ph21_63 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph21*/
/*   %63 = load float* %scevgep225226, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph21_153))
begin
get_input__lr_ph21_63_reg <= get_input__lr_ph21_63;
if (reset == 1'b0 && ^(get_input__lr_ph21_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph21_63_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph21*/
/*   %indvar.next183 = add i32 %indvar182, 1*/
begin
get_input__lr_ph21_indvar_next183 = (get_input__lr_ph21_indvar182_reg + 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph21*/
/*   %indvar.next183 = add i32 %indvar182, 1*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph21_151))
begin
get_input__lr_ph21_indvar_next183_reg <= get_input__lr_ph21_indvar_next183;
if (reset == 1'b0 && ^(get_input__lr_ph21_indvar_next183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph21_indvar_next183_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph21*/
/*   %exitcond190 = icmp eq i32 %indvar.next183, %tmp189*/
begin
get_input__lr_ph21_exitcond190 = (get_input__lr_ph21_indvar_next183 == get_input__lr_ph25_tmp189_reg);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph21*/
/*   %exitcond190 = icmp eq i32 %indvar.next183, %tmp189*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph21_151))
begin
get_input__lr_ph21_exitcond190_reg <= get_input__lr_ph21_exitcond190;
if (reset == 1'b0 && ^(get_input__lr_ph21_exitcond190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph21_exitcond190_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %._crit_edge22*/
/*   %64 = add nsw i32 %y.324, 1*/
begin
get_input___crit_edge22_64 = (get_input_55_y_324_reg + 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %._crit_edge22*/
/*   %64 = add nsw i32 %y.324, 1*/
if ((cur_state == LEGUP_F_get_input_BB___crit_edge22_156))
begin
get_input___crit_edge22_64_reg <= get_input___crit_edge22_64;
if (reset == 1'b0 && ^(get_input___crit_edge22_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input___crit_edge22_64_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %._crit_edge22*/
/*   %exitcond200 = icmp eq i32 %64, %h*/
begin
get_input___crit_edge22_exitcond200 = (get_input___crit_edge22_64 == arg_h);
end
end
always @(posedge clk) begin
/* get_input: %._crit_edge22*/
/*   %exitcond200 = icmp eq i32 %64, %h*/
if ((cur_state == LEGUP_F_get_input_BB___crit_edge22_156))
begin
get_input___crit_edge22_exitcond200_reg <= get_input___crit_edge22_exitcond200;
if (reset == 1'b0 && ^(get_input___crit_edge22_exitcond200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input___crit_edge22_exitcond200_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader.lr.ph.split.us*/
/*   %tmp123 = add i32 %n, -1*/
begin
get_input__preheader_lr_ph_split_us_tmp123 = (arg_n + -32'd1);
end
end
always @(posedge clk) begin
/* get_input: %.preheader.lr.ph.split.us*/
/*   %tmp123 = add i32 %n, -1*/
if ((cur_state == LEGUP_F_get_input_BB__preheader_lr_ph_split_us_157))
begin
get_input__preheader_lr_ph_split_us_tmp123_reg <= get_input__preheader_lr_ph_split_us_tmp123;
if (reset == 1'b0 && ^(get_input__preheader_lr_ph_split_us_tmp123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader_lr_ph_split_us_tmp123_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader.lr.ph.split.us*/
/*   %tmp124 = sub i32 %tmp123, %4*/
begin
get_input__preheader_lr_ph_split_us_tmp124 = (get_input__preheader_lr_ph_split_us_tmp123 - get_input_0_4_reg);
end
end
always @(posedge clk) begin
/* get_input: %.preheader.lr.ph.split.us*/
/*   %tmp124 = sub i32 %tmp123, %4*/
if ((cur_state == LEGUP_F_get_input_BB__preheader_lr_ph_split_us_157))
begin
get_input__preheader_lr_ph_split_us_tmp124_reg <= get_input__preheader_lr_ph_split_us_tmp124;
if (reset == 1'b0 && ^(get_input__preheader_lr_ph_split_us_tmp124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader_lr_ph_split_us_tmp124_reg"); $finish; end
end
end
always @(*) begin
get_input__preheader_lr_ph_split_us_tmp125 = get_input__preheader_lr_ph_split_us_tmp125_stage0_reg;
end
always @(posedge clk) begin
/* get_input: %.preheader.lr.ph.split.us*/
/*   %tmp125 = mul i32 %tmp124, %n*/
if ((cur_state == LEGUP_F_get_input_BB__preheader_lr_ph_split_us_158))
begin
get_input__preheader_lr_ph_split_us_tmp125_reg <= get_input__preheader_lr_ph_split_us_tmp125;
if (reset == 1'b0 && ^(get_input__preheader_lr_ph_split_us_tmp125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader_lr_ph_split_us_tmp125_reg"); $finish; end
end
/* get_input: %.preheader.lr.ph.split.us*/
/*   %tmp125 = mul i32 %tmp124, %n*/
if ((cur_state == LEGUP_F_get_input_BB__preheader_lr_ph_split_us_158))
begin
get_input__preheader_lr_ph_split_us_tmp125_reg <= get_input__preheader_lr_ph_split_us_tmp125;
if (reset == 1'b0 && ^(get_input__preheader_lr_ph_split_us_tmp125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader_lr_ph_split_us_tmp125_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader.lr.ph.split.us*/
/*   %tmp129 = add i32 %n, 1*/
begin
get_input__preheader_lr_ph_split_us_tmp129 = (arg_n + 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %.preheader.lr.ph.split.us*/
/*   %tmp129 = add i32 %n, 1*/
if ((cur_state == LEGUP_F_get_input_BB__preheader_lr_ph_split_us_157))
begin
get_input__preheader_lr_ph_split_us_tmp129_reg <= get_input__preheader_lr_ph_split_us_tmp129;
if (reset == 1'b0 && ^(get_input__preheader_lr_ph_split_us_tmp129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader_lr_ph_split_us_tmp129_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader.lr.ph.split.us*/
/*   %tmp130 = sub i32 %tmp129, %4*/
begin
get_input__preheader_lr_ph_split_us_tmp130 = (get_input__preheader_lr_ph_split_us_tmp129 - get_input_0_4_reg);
end
end
always @(posedge clk) begin
/* get_input: %.preheader.lr.ph.split.us*/
/*   %tmp130 = sub i32 %tmp129, %4*/
if ((cur_state == LEGUP_F_get_input_BB__preheader_lr_ph_split_us_157))
begin
get_input__preheader_lr_ph_split_us_tmp130_reg <= get_input__preheader_lr_ph_split_us_tmp130;
if (reset == 1'b0 && ^(get_input__preheader_lr_ph_split_us_tmp130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader_lr_ph_split_us_tmp130_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader.lr.ph.split.us*/
/*   %tmp131 = icmp slt i32 %tmp130, %n*/
begin
get_input__preheader_lr_ph_split_us_tmp131 = ($signed(get_input__preheader_lr_ph_split_us_tmp130) < $signed(arg_n));
end
end
always @(posedge clk) begin
/* get_input: %.preheader.lr.ph.split.us*/
/*   %tmp131 = icmp slt i32 %tmp130, %n*/
if ((cur_state == LEGUP_F_get_input_BB__preheader_lr_ph_split_us_157))
begin
get_input__preheader_lr_ph_split_us_tmp131_reg <= get_input__preheader_lr_ph_split_us_tmp131;
if (reset == 1'b0 && ^(get_input__preheader_lr_ph_split_us_tmp131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader_lr_ph_split_us_tmp131_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader.lr.ph.split.us*/
/*   %smax132 = select i1 %tmp131, i32 %n, i32 %tmp130*/
begin
get_input__preheader_lr_ph_split_us_smax132 = (get_input__preheader_lr_ph_split_us_tmp131_reg ? arg_n : get_input__preheader_lr_ph_split_us_tmp130_reg);
end
end
always @(posedge clk) begin
/* get_input: %.preheader.lr.ph.split.us*/
/*   %smax132 = select i1 %tmp131, i32 %n, i32 %tmp130*/
if ((cur_state == LEGUP_F_get_input_BB__preheader_lr_ph_split_us_158))
begin
get_input__preheader_lr_ph_split_us_smax132_reg <= get_input__preheader_lr_ph_split_us_smax132;
if (reset == 1'b0 && ^(get_input__preheader_lr_ph_split_us_smax132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader_lr_ph_split_us_smax132_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader.lr.ph.split.us*/
/*   %tmp133 = add i32 %4, %smax132*/
begin
get_input__preheader_lr_ph_split_us_tmp133 = (get_input_0_4_reg + get_input__preheader_lr_ph_split_us_smax132);
end
end
always @(posedge clk) begin
/* get_input: %.preheader.lr.ph.split.us*/
/*   %tmp133 = add i32 %4, %smax132*/
if ((cur_state == LEGUP_F_get_input_BB__preheader_lr_ph_split_us_158))
begin
get_input__preheader_lr_ph_split_us_tmp133_reg <= get_input__preheader_lr_ph_split_us_tmp133;
if (reset == 1'b0 && ^(get_input__preheader_lr_ph_split_us_tmp133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader_lr_ph_split_us_tmp133_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader.lr.ph.split.us*/
/*   %tmp134 = sub i32 %tmp133, %n*/
begin
get_input__preheader_lr_ph_split_us_tmp134 = (get_input__preheader_lr_ph_split_us_tmp133 - arg_n);
end
end
always @(posedge clk) begin
/* get_input: %.preheader.lr.ph.split.us*/
/*   %tmp134 = sub i32 %tmp133, %n*/
if ((cur_state == LEGUP_F_get_input_BB__preheader_lr_ph_split_us_158))
begin
get_input__preheader_lr_ph_split_us_tmp134_reg <= get_input__preheader_lr_ph_split_us_tmp134;
if (reset == 1'b0 && ^(get_input__preheader_lr_ph_split_us_tmp134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader_lr_ph_split_us_tmp134_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.preheader.lr.ph.split.us*/
/*   %tmp137 = sub i32 %n, %4*/
begin
get_input__preheader_lr_ph_split_us_tmp137 = (arg_n - get_input_0_4_reg);
end
end
always @(posedge clk) begin
/* get_input: %.preheader.lr.ph.split.us*/
/*   %tmp137 = sub i32 %n, %4*/
if ((cur_state == LEGUP_F_get_input_BB__preheader_lr_ph_split_us_157))
begin
get_input__preheader_lr_ph_split_us_tmp137_reg <= get_input__preheader_lr_ph_split_us_tmp137;
if (reset == 1'b0 && ^(get_input__preheader_lr_ph_split_us_tmp137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__preheader_lr_ph_split_us_tmp137_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %65*/
/*   %indvar.next115 = add i32 %indvar114, 1*/
begin
get_input_65_indvar_next115 = (get_input__lr_ph_us_indvar114_reg + 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %65*/
/*   %indvar.next115 = add i32 %indvar114, 1*/
if ((cur_state == LEGUP_F_get_input_BB_65_159))
begin
get_input_65_indvar_next115_reg <= get_input_65_indvar_next115;
if (reset == 1'b0 && ^(get_input_65_indvar_next115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_65_indvar_next115_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %65*/
/*   %exitcond135 = icmp eq i32 %indvar.next115, %tmp134*/
begin
get_input_65_exitcond135 = (get_input_65_indvar_next115 == get_input__preheader_lr_ph_split_us_tmp134_reg);
end
end
always @(posedge clk) begin
/* get_input: %65*/
/*   %exitcond135 = icmp eq i32 %indvar.next115, %tmp134*/
if ((cur_state == LEGUP_F_get_input_BB_65_159))
begin
get_input_65_exitcond135_reg <= get_input_65_exitcond135;
if (reset == 1'b0 && ^(get_input_65_exitcond135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_65_exitcond135_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %66*/
/*   %x.93.us = phi i32 [ 0, %.lr.ph.us ], [ %68, %66 ]*/
if ((((cur_state == LEGUP_F_get_input_BB_66_164) & (memory_controller_waitrequest == 1'd0)) & (get_input_66_exitcond113_reg == 1'd0)))
begin
get_input_66_x_93_us = get_input_66_68_reg;
end
/* get_input: %66*/
/*   %x.93.us = phi i32 [ 0, %.lr.ph.us ], [ %68, %66 ]*/
else /* if (((cur_state == LEGUP_F_get_input_BB__lr_ph_us_166) & (memory_controller_waitrequest == 1'd0))) */
begin
get_input_66_x_93_us = 32'd0;
end
end
always @(posedge clk) begin
/* get_input: %66*/
/*   %x.93.us = phi i32 [ 0, %.lr.ph.us ], [ %68, %66 ]*/
if ((((cur_state == LEGUP_F_get_input_BB_66_164) & (memory_controller_waitrequest == 1'd0)) & (get_input_66_exitcond113_reg == 1'd0)))
begin
get_input_66_x_93_us_reg <= get_input_66_x_93_us;
if (reset == 1'b0 && ^(get_input_66_x_93_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_66_x_93_us_reg"); $finish; end
end
/* get_input: %66*/
/*   %x.93.us = phi i32 [ 0, %.lr.ph.us ], [ %68, %66 ]*/
if (((cur_state == LEGUP_F_get_input_BB__lr_ph_us_166) & (memory_controller_waitrequest == 1'd0)))
begin
get_input_66_x_93_us_reg <= get_input_66_x_93_us;
if (reset == 1'b0 && ^(get_input_66_x_93_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_66_x_93_us_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %66*/
/*   %tmp140 = add i32 %tmp139, %x.93.us*/
begin
get_input_66_tmp140 = (get_input__lr_ph_us_tmp139_reg + get_input_66_x_93_us_reg);
end
end
always @(posedge clk) begin
/* get_input: %66*/
/*   %tmp140 = add i32 %tmp139, %x.93.us*/
if ((cur_state == LEGUP_F_get_input_BB_66_160))
begin
get_input_66_tmp140_reg <= get_input_66_tmp140;
if (reset == 1'b0 && ^(get_input_66_tmp140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_66_tmp140_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %66*/
/*   %scevgep121122 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp140, i32 0*/
begin
get_input_66_scevgep121122 = (arg_fft_hdata + (8 * get_input_66_tmp140_reg));
end
end
always @(posedge clk) begin
/* get_input: %66*/
/*   %scevgep121122 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp140, i32 0*/
if ((cur_state == LEGUP_F_get_input_BB_66_161))
begin
get_input_66_scevgep121122_reg <= get_input_66_scevgep121122;
if (reset == 1'b0 && ^(get_input_66_scevgep121122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_66_scevgep121122_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %66*/
/*   %scevgep120 = getelementptr %struct.TYPE_7__* %fft_hdata, i32 %tmp140, i32 1*/
begin
get_input_66_scevgep120 = (arg_fft_hdata + ((8 * get_input_66_tmp140_reg) + 4));
end
end
always @(posedge clk) begin
/* get_input: %66*/
/*   %scevgep120 = getelementptr %struct.TYPE_7__* %fft_hdata, i32 %tmp140, i32 1*/
if ((cur_state == LEGUP_F_get_input_BB_66_161))
begin
get_input_66_scevgep120_reg <= get_input_66_scevgep120;
if (reset == 1'b0 && ^(get_input_66_scevgep120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_66_scevgep120_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %66*/
/*   %tmp126 = add i32 %tmp125, %x.93.us*/
begin
get_input_66_tmp126 = (get_input__preheader_lr_ph_split_us_tmp125_reg + get_input_66_x_93_us_reg);
end
end
always @(posedge clk) begin
/* get_input: %66*/
/*   %tmp126 = add i32 %tmp125, %x.93.us*/
if ((cur_state == LEGUP_F_get_input_BB_66_160))
begin
get_input_66_tmp126_reg <= get_input_66_tmp126;
if (reset == 1'b0 && ^(get_input_66_tmp126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_66_tmp126_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %66*/
/*   %scevgep127128 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp126, i32 0*/
begin
get_input_66_scevgep127128 = (arg_fft_hdata + (8 * get_input_66_tmp126_reg));
end
end
always @(posedge clk) begin
/* get_input: %66*/
/*   %scevgep127128 = getelementptr inbounds %struct.TYPE_7__* %fft_hdata, i32 %tmp126, i32 0*/
if ((cur_state == LEGUP_F_get_input_BB_66_161))
begin
get_input_66_scevgep127128_reg <= get_input_66_scevgep127128;
if (reset == 1'b0 && ^(get_input_66_scevgep127128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_66_scevgep127128_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %66*/
/*   %67 = load float* %scevgep127128, align 4, !tbaa !4*/
begin
get_input_66_67 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* get_input: %66*/
/*   %67 = load float* %scevgep127128, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_66_163))
begin
get_input_66_67_reg <= get_input_66_67;
if (reset == 1'b0 && ^(get_input_66_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_66_67_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %66*/
/*   %68 = add nsw i32 %x.93.us, 1*/
begin
get_input_66_68 = (get_input_66_x_93_us_reg + 32'd1);
end
end
always @(posedge clk) begin
/* get_input: %66*/
/*   %68 = add nsw i32 %x.93.us, 1*/
if ((cur_state == LEGUP_F_get_input_BB_66_160))
begin
get_input_66_68_reg <= get_input_66_68;
if (reset == 1'b0 && ^(get_input_66_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_66_68_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %66*/
/*   %exitcond113 = icmp eq i32 %68, %n*/
begin
get_input_66_exitcond113 = (get_input_66_68 == arg_n);
end
end
always @(posedge clk) begin
/* get_input: %66*/
/*   %exitcond113 = icmp eq i32 %68, %n*/
if ((cur_state == LEGUP_F_get_input_BB_66_160))
begin
get_input_66_exitcond113_reg <= get_input_66_exitcond113;
if (reset == 1'b0 && ^(get_input_66_exitcond113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_66_exitcond113_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph.us*/
/*   %indvar114 = phi i32 [ %indvar.next115, %65 ], [ 0, %.preheader.lr.ph.split.us ]*/
if (((cur_state == LEGUP_F_get_input_BB__preheader_lr_ph_split_us_158) & (memory_controller_waitrequest == 1'd0)))
begin
get_input__lr_ph_us_indvar114 = 32'd0;
end
/* get_input: %.lr.ph.us*/
/*   %indvar114 = phi i32 [ %indvar.next115, %65 ], [ 0, %.preheader.lr.ph.split.us ]*/
else /* if ((((cur_state == LEGUP_F_get_input_BB_65_159) & (memory_controller_waitrequest == 1'd0)) & (get_input_65_exitcond135 == 1'd0))) */
begin
get_input__lr_ph_us_indvar114 = get_input_65_indvar_next115;
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph.us*/
/*   %indvar114 = phi i32 [ %indvar.next115, %65 ], [ 0, %.preheader.lr.ph.split.us ]*/
if (((cur_state == LEGUP_F_get_input_BB__preheader_lr_ph_split_us_158) & (memory_controller_waitrequest == 1'd0)))
begin
get_input__lr_ph_us_indvar114_reg <= get_input__lr_ph_us_indvar114;
if (reset == 1'b0 && ^(get_input__lr_ph_us_indvar114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph_us_indvar114_reg"); $finish; end
end
/* get_input: %.lr.ph.us*/
/*   %indvar114 = phi i32 [ %indvar.next115, %65 ], [ 0, %.preheader.lr.ph.split.us ]*/
if ((((cur_state == LEGUP_F_get_input_BB_65_159) & (memory_controller_waitrequest == 1'd0)) & (get_input_65_exitcond135 == 1'd0)))
begin
get_input__lr_ph_us_indvar114_reg <= get_input__lr_ph_us_indvar114;
if (reset == 1'b0 && ^(get_input__lr_ph_us_indvar114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph_us_indvar114_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %.lr.ph.us*/
/*   %tmp138312 = add i32 %tmp137, %indvar114*/
begin
get_input__lr_ph_us_tmp138312 = (get_input__preheader_lr_ph_split_us_tmp137_reg + get_input__lr_ph_us_indvar114_reg);
end
end
always @(posedge clk) begin
/* get_input: %.lr.ph.us*/
/*   %tmp138312 = add i32 %tmp137, %indvar114*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph_us_165))
begin
get_input__lr_ph_us_tmp138312_reg <= get_input__lr_ph_us_tmp138312;
if (reset == 1'b0 && ^(get_input__lr_ph_us_tmp138312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph_us_tmp138312_reg"); $finish; end
end
end
always @(*) begin
get_input__lr_ph_us_tmp139 = get_input__lr_ph_us_tmp139_stage0_reg;
end
always @(posedge clk) begin
/* get_input: %.lr.ph.us*/
/*   %tmp139 = mul i32 %tmp138312, %n*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph_us_166))
begin
get_input__lr_ph_us_tmp139_reg <= get_input__lr_ph_us_tmp139;
if (reset == 1'b0 && ^(get_input__lr_ph_us_tmp139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph_us_tmp139_reg"); $finish; end
end
/* get_input: %.lr.ph.us*/
/*   %tmp139 = mul i32 %tmp138312, %n*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph_us_166))
begin
get_input__lr_ph_us_tmp139_reg <= get_input__lr_ph_us_tmp139;
if (reset == 1'b0 && ^(get_input__lr_ph_us_tmp139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input__lr_ph_us_tmp139_reg"); $finish; end
end
end
always @(*) begin
/* get_input: %0*/
/*   %2 = sdiv i32 %1, 2*/
if ((cur_state == LEGUP_F_get_input_BB_0_1))
begin
get_input_signed_divide_32_0_op0 = get_input_0_1;
end
/* get_input: %0*/
/*   %4 = sdiv i32 %3, 2*/
else /* if ((cur_state == LEGUP_F_get_input_BB_0_2)) */
begin
get_input_signed_divide_32_0_op0 = get_input_0_3_reg;
end
end
always @(*) begin
/* get_input: %0*/
/*   %2 = sdiv i32 %1, 2*/
if ((cur_state == LEGUP_F_get_input_BB_0_1))
begin
get_input_signed_divide_32_0_op1 = 32'd2;
end
/* get_input: %0*/
/*   %4 = sdiv i32 %3, 2*/
else /* if ((cur_state == LEGUP_F_get_input_BB_0_2)) */
begin
get_input_signed_divide_32_0_op1 = 32'd2;
end
end
always @(*) begin
lpm_divide_get_input_0_2_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_get_input_0_2_out = lpm_divide_get_input_0_2_temp_out;
end
always @(*) begin
get_input_signed_divide_32_0 = lpm_divide_get_input_0_2_out;
end
always @(*) begin
/* get_input: %36*/
/*   %38 = fmul float %37, %scale*/
if ((cur_state == LEGUP_F_get_input_BB_36_69))
begin
get_input_altfp_multiply_32_0_op0 = get_input_36_37;
end
/* get_input: %57*/
/*   %59 = fmul float %58, %scale*/
else /* if ((cur_state == LEGUP_F_get_input_BB_57_129)) */
begin
get_input_altfp_multiply_32_0_op0 = get_input_57_58;
end
end
always @(*) begin
/* get_input: %36*/
/*   %38 = fmul float %37, %scale*/
if ((cur_state == LEGUP_F_get_input_BB_36_69))
begin
get_input_altfp_multiply_32_0_op1 = arg_scale;
end
/* get_input: %57*/
/*   %59 = fmul float %58, %scale*/
else /* if ((cur_state == LEGUP_F_get_input_BB_57_129)) */
begin
get_input_altfp_multiply_32_0_op1 = arg_scale;
end
end
always @(*) begin
altfp_get_input_57_59_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
get_input_altfp_multiply_32_0 = altfp_multiplier_get_input_57_59_out;
end
always @(*) begin
lpm_divide_get_input_0_4_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_get_input__lr_ph52_tmp278_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %tmp278 = mul i32 %tmp277, %n*/
if ((lpm_mult_get_input__lr_ph52_tmp278_en == 1'd1))
begin
get_input__lr_ph52_tmp278_stage0_reg <= (get_input__lr_ph52_tmp277 * arg_n);
end
end
always @(*) begin
lpm_mult_get_input__lr_ph52_tmp292_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* get_input: %.lr.ph52*/
/*   %tmp292 = mul i32 %4, %n*/
if ((lpm_mult_get_input__lr_ph52_tmp292_en == 1'd1))
begin
get_input__lr_ph52_tmp292_stage0_reg <= (get_input_0_4_reg * arg_n);
end
end
always @(*) begin
lpm_mult_get_input__lr_ph25_tmp193_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %tmp193 = mul i32 %tmp192, %n*/
if ((lpm_mult_get_input__lr_ph25_tmp193_en == 1'd1))
begin
get_input__lr_ph25_tmp193_stage0_reg <= (get_input__lr_ph25_tmp192 * arg_n);
end
end
always @(*) begin
lpm_mult_get_input__lr_ph25_tmp207_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* get_input: %.lr.ph25*/
/*   %tmp207 = mul i32 %4, %n*/
if ((lpm_mult_get_input__lr_ph25_tmp207_en == 1'd1))
begin
get_input__lr_ph25_tmp207_stage0_reg <= (get_input_0_4_reg * arg_n);
end
end
always @(*) begin
lpm_mult_get_input__preheader32_lr_ph_split_us_tmp56_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* get_input: %.preheader32.lr.ph.split.us*/
/*   %tmp56 = mul i32 %4, %n*/
if ((lpm_mult_get_input__preheader32_lr_ph_split_us_tmp56_en == 1'd1))
begin
get_input__preheader32_lr_ph_split_us_tmp56_stage0_reg <= (get_input_0_4_reg * arg_n);
end
end
always @(*) begin
lpm_mult_get_input__lr_ph34_us_tmp62_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* get_input: %.lr.ph34.us*/
/*   %tmp62 = mul i32 %y.137.us, %n*/
if ((lpm_mult_get_input__lr_ph34_us_tmp62_en == 1'd1))
begin
get_input__lr_ph34_us_tmp62_stage0_reg <= (get_input__lr_ph34_us_y_137_us_reg * arg_n);
end
end
always @(*) begin
lpm_mult_get_input_34_tmp286_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* get_input: %34*/
/*   %tmp286 = mul i32 %y.051, %n*/
if ((lpm_mult_get_input_34_tmp286_en == 1'd1))
begin
get_input_34_tmp286_stage0_reg <= (get_input_34_y_051_reg * arg_n);
end
end
always @(*) begin
lpm_mult_get_input_34_tmp293_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* get_input: %34*/
/*   %tmp293 = mul i32 %tmp292315, %n*/
if ((lpm_mult_get_input_34_tmp293_en == 1'd1))
begin
get_input_34_tmp293_stage0_reg <= (get_input_34_tmp292315 * arg_n);
end
end
always @(*) begin
lpm_mult_get_input__lr_ph42_tmp247_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* get_input: %.lr.ph42*/
/*   %tmp247 = mul i32 %35, %tmp246*/
if ((lpm_mult_get_input__lr_ph42_tmp247_en == 1'd1))
begin
get_input__lr_ph42_tmp247_stage0_reg <= (get_input__lr_ph42_35 * get_input__lr_ph42_tmp246_reg);
end
end
always @(*) begin
altfp_get_input_36_38_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_get_input__preheader26_lr_ph_split_us_tmp77_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* get_input: %.preheader26.lr.ph.split.us*/
/*   %tmp77 = mul i32 %tmp76, %n*/
if ((lpm_mult_get_input__preheader26_lr_ph_split_us_tmp77_en == 1'd1))
begin
get_input__preheader26_lr_ph_split_us_tmp77_stage0_reg <= (get_input__preheader26_lr_ph_split_us_tmp76 * arg_n);
end
end
always @(*) begin
lpm_mult_get_input__lr_ph28_us_tmp91_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* get_input: %.lr.ph28.us*/
/*   %tmp91 = mul i32 %tmp90314, %n*/
if ((lpm_mult_get_input__lr_ph28_us_tmp91_en == 1'd1))
begin
get_input__lr_ph28_us_tmp91_stage0_reg <= (get_input__lr_ph28_us_tmp90314 * arg_n);
end
end
always @(*) begin
lpm_mult_get_input__preheader5_lr_ph_split_us_tmp101_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* get_input: %.preheader5.lr.ph.split.us*/
/*   %tmp101 = mul i32 %4, %n*/
if ((lpm_mult_get_input__preheader5_lr_ph_split_us_tmp101_en == 1'd1))
begin
get_input__preheader5_lr_ph_split_us_tmp101_stage0_reg <= (get_input_0_4_reg * arg_n);
end
end
always @(*) begin
lpm_mult_get_input__lr_ph7_us_tmp108_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* get_input: %.lr.ph7.us*/
/*   %tmp108 = mul i32 %y.410.us, %n*/
if ((lpm_mult_get_input__lr_ph7_us_tmp108_en == 1'd1))
begin
get_input__lr_ph7_us_tmp108_stage0_reg <= (get_input__lr_ph7_us_y_410_us_reg * arg_n);
end
end
always @(*) begin
lpm_mult_get_input_55_tmp201_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* get_input: %55*/
/*   %tmp201 = mul i32 %y.324, %n*/
if ((lpm_mult_get_input_55_tmp201_en == 1'd1))
begin
get_input_55_tmp201_stage0_reg <= (get_input_55_y_324_reg * arg_n);
end
end
always @(*) begin
lpm_mult_get_input_55_tmp208_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* get_input: %55*/
/*   %tmp208 = mul i32 %tmp207313, %n*/
if ((lpm_mult_get_input_55_tmp208_en == 1'd1))
begin
get_input_55_tmp208_stage0_reg <= (get_input_55_tmp207313 * arg_n);
end
end
always @(*) begin
lpm_mult_get_input__lr_ph15_tmp163_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* get_input: %.lr.ph15*/
/*   %tmp163 = mul i32 %56, %tmp162*/
if ((lpm_mult_get_input__lr_ph15_tmp163_en == 1'd1))
begin
get_input__lr_ph15_tmp163_stage0_reg <= (get_input__lr_ph15_56 * get_input__lr_ph15_tmp162_reg);
end
end
always @(*) begin
lpm_mult_get_input__preheader_lr_ph_split_us_tmp125_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* get_input: %.preheader.lr.ph.split.us*/
/*   %tmp125 = mul i32 %tmp124, %n*/
if ((lpm_mult_get_input__preheader_lr_ph_split_us_tmp125_en == 1'd1))
begin
get_input__preheader_lr_ph_split_us_tmp125_stage0_reg <= (get_input__preheader_lr_ph_split_us_tmp124 * arg_n);
end
end
always @(*) begin
lpm_mult_get_input__lr_ph_us_tmp139_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* get_input: %.lr.ph.us*/
/*   %tmp139 = mul i32 %tmp138312, %n*/
if ((lpm_mult_get_input__lr_ph_us_tmp139_en == 1'd1))
begin
get_input__lr_ph_us_tmp139_stage0_reg <= (get_input__lr_ph_us_tmp138312 * arg_n);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* get_input: %.loopexit*/
/*   ret void*/
if ((cur_state == LEGUP_F_get_input_BB__loopexit_169))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* get_input: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %.lr.ph52*/
/*   %10 = load float*** %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_36))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %.lr.ph52*/
/*   %14 = load i32** %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_37))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %.lr.ph52*/
/*   %12 = load float** %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_38))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %.lr.ph25*/
/*   %19 = load float*** %18, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_42))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %.lr.ph25*/
/*   %23 = load i32** %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_43))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %.lr.ph25*/
/*   %21 = load float** %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_44))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %31*/
/*   %32 = load float* %scevgep5859, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_31_53))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %31*/
/*   store i32 0, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_31_54))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %31*/
/*   store float %32, float* %scevgep5455, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_31_55))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %.lr.ph42*/
/*   %35 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph42_62))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %36*/
/*   %37 = load float* %uglygep248249, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_36_67))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %36*/
/*   store i32 0, i32* %scevgep255, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_36_69))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %36*/
/*   store float %38, float* %scevgep256257, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_36_80))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %.lr.ph44*/
/*   %40 = load float* %scevgep305306, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph44_85))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %.lr.ph44*/
/*   store i32 0, i32* %scevgep264, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph44_86))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %.lr.ph44*/
/*   store float %40, float* %scevgep265266, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph44_87))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %.lr.ph48*/
/*   %42 = load float* %scevgep310311, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph48_91))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %.lr.ph48*/
/*   store i32 0, i32* %scevgep282, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph48_92))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %.lr.ph48*/
/*   store float %42, float* %scevgep283284, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph48_93))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %45*/
/*   %46 = load float* %scevgep7980, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_45_101))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %45*/
/*   store i32 0, i32* %scevgep72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_45_102))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %45*/
/*   store float %46, float* %scevgep7374, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_45_103))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %52*/
/*   %53 = load float* %scevgep103104, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_52_113))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %52*/
/*   store i32 0, i32* %scevgep98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_52_114))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %52*/
/*   store float %53, float* %scevgep99100, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_52_115))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %.lr.ph15*/
/*   %56 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph15_122))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %57*/
/*   %58 = load float* %uglygep164, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_57_127))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %57*/
/*   store i32 0, i32* %scevgep170, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_57_129))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %57*/
/*   store float %59, float* %scevgep171172, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_57_140))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %.lr.ph17*/
/*   %61 = load float* %scevgep220221, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph17_145))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %.lr.ph17*/
/*   store i32 0, i32* %scevgep179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph17_146))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %.lr.ph17*/
/*   store float %61, float* %scevgep180181, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph17_147))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %.lr.ph21*/
/*   %63 = load float* %scevgep225226, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph21_151))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %.lr.ph21*/
/*   store i32 0, i32* %scevgep197, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph21_152))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %.lr.ph21*/
/*   store float %63, float* %scevgep198199, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph21_153))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %66*/
/*   %67 = load float* %scevgep127128, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_66_161))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %66*/
/*   store i32 0, i32* %scevgep120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_66_162))
begin
memory_controller_enable_a = 1'd1;
end
/* get_input: %66*/
/*   store float %67, float* %scevgep121122, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_66_163))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* get_input: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_0_1))
begin
memory_controller_address_a = get_input_0_5;
end
/* get_input: %.lr.ph52*/
/*   %10 = load float*** %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_36))
begin
memory_controller_address_a = get_input__lr_ph52_9;
end
/* get_input: %.lr.ph52*/
/*   %14 = load i32** %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_37))
begin
memory_controller_address_a = get_input__lr_ph52_13_reg;
end
/* get_input: %.lr.ph52*/
/*   %12 = load float** %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_38))
begin
memory_controller_address_a = get_input__lr_ph52_11;
end
/* get_input: %.lr.ph25*/
/*   %19 = load float*** %18, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_42))
begin
memory_controller_address_a = get_input__lr_ph25_18;
end
/* get_input: %.lr.ph25*/
/*   %23 = load i32** %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_43))
begin
memory_controller_address_a = get_input__lr_ph25_22_reg;
end
/* get_input: %.lr.ph25*/
/*   %21 = load float** %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_44))
begin
memory_controller_address_a = get_input__lr_ph25_20;
end
/* get_input: %31*/
/*   %32 = load float* %scevgep5859, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_31_53))
begin
memory_controller_address_a = get_input_31_scevgep5859;
end
/* get_input: %31*/
/*   store i32 0, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_31_54))
begin
memory_controller_address_a = get_input_31_scevgep_reg;
end
/* get_input: %31*/
/*   store float %32, float* %scevgep5455, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_31_55))
begin
memory_controller_address_a = get_input_31_scevgep5455_reg;
end
/* get_input: %.lr.ph42*/
/*   %35 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph42_62))
begin
memory_controller_address_a = get_input__lr_ph52_15_reg;
end
/* get_input: %36*/
/*   %37 = load float* %uglygep248249, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_36_67))
begin
memory_controller_address_a = get_input_36_uglygep248249;
end
/* get_input: %36*/
/*   store i32 0, i32* %scevgep255, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_36_69))
begin
memory_controller_address_a = get_input_36_scevgep255_reg;
end
/* get_input: %36*/
/*   store float %38, float* %scevgep256257, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_36_80))
begin
memory_controller_address_a = get_input_36_scevgep256257_reg;
end
/* get_input: %.lr.ph44*/
/*   %40 = load float* %scevgep305306, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph44_85))
begin
memory_controller_address_a = get_input_34_scevgep305306_reg;
end
/* get_input: %.lr.ph44*/
/*   store i32 0, i32* %scevgep264, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph44_86))
begin
memory_controller_address_a = get_input__lr_ph44_scevgep264;
end
/* get_input: %.lr.ph44*/
/*   store float %40, float* %scevgep265266, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph44_87))
begin
memory_controller_address_a = get_input__lr_ph44_scevgep265266_reg;
end
/* get_input: %.lr.ph48*/
/*   %42 = load float* %scevgep310311, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph48_91))
begin
memory_controller_address_a = get_input_34_scevgep310311_reg;
end
/* get_input: %.lr.ph48*/
/*   store i32 0, i32* %scevgep282, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph48_92))
begin
memory_controller_address_a = get_input__lr_ph48_scevgep282;
end
/* get_input: %.lr.ph48*/
/*   store float %42, float* %scevgep283284, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph48_93))
begin
memory_controller_address_a = get_input__lr_ph48_scevgep283284_reg;
end
/* get_input: %45*/
/*   %46 = load float* %scevgep7980, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_45_101))
begin
memory_controller_address_a = get_input_45_scevgep7980;
end
/* get_input: %45*/
/*   store i32 0, i32* %scevgep72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_45_102))
begin
memory_controller_address_a = get_input_45_scevgep72_reg;
end
/* get_input: %45*/
/*   store float %46, float* %scevgep7374, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_45_103))
begin
memory_controller_address_a = get_input_45_scevgep7374_reg;
end
/* get_input: %52*/
/*   %53 = load float* %scevgep103104, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_52_113))
begin
memory_controller_address_a = get_input_52_scevgep103104;
end
/* get_input: %52*/
/*   store i32 0, i32* %scevgep98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_52_114))
begin
memory_controller_address_a = get_input_52_scevgep98_reg;
end
/* get_input: %52*/
/*   store float %53, float* %scevgep99100, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_52_115))
begin
memory_controller_address_a = get_input_52_scevgep99100_reg;
end
/* get_input: %.lr.ph15*/
/*   %56 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph15_122))
begin
memory_controller_address_a = get_input__lr_ph25_24_reg;
end
/* get_input: %57*/
/*   %58 = load float* %uglygep164, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_57_127))
begin
memory_controller_address_a = get_input_57_uglygep164;
end
/* get_input: %57*/
/*   store i32 0, i32* %scevgep170, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_57_129))
begin
memory_controller_address_a = get_input_57_scevgep170_reg;
end
/* get_input: %57*/
/*   store float %59, float* %scevgep171172, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_57_140))
begin
memory_controller_address_a = get_input_57_scevgep171172_reg;
end
/* get_input: %.lr.ph17*/
/*   %61 = load float* %scevgep220221, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph17_145))
begin
memory_controller_address_a = get_input_55_scevgep220221_reg;
end
/* get_input: %.lr.ph17*/
/*   store i32 0, i32* %scevgep179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph17_146))
begin
memory_controller_address_a = get_input__lr_ph17_scevgep179;
end
/* get_input: %.lr.ph17*/
/*   store float %61, float* %scevgep180181, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph17_147))
begin
memory_controller_address_a = get_input__lr_ph17_scevgep180181_reg;
end
/* get_input: %.lr.ph21*/
/*   %63 = load float* %scevgep225226, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph21_151))
begin
memory_controller_address_a = get_input_55_scevgep225226_reg;
end
/* get_input: %.lr.ph21*/
/*   store i32 0, i32* %scevgep197, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph21_152))
begin
memory_controller_address_a = get_input__lr_ph21_scevgep197;
end
/* get_input: %.lr.ph21*/
/*   store float %63, float* %scevgep198199, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph21_153))
begin
memory_controller_address_a = get_input__lr_ph21_scevgep198199_reg;
end
/* get_input: %66*/
/*   %67 = load float* %scevgep127128, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_66_161))
begin
memory_controller_address_a = get_input_66_scevgep127128;
end
/* get_input: %66*/
/*   store i32 0, i32* %scevgep120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_66_162))
begin
memory_controller_address_a = get_input_66_scevgep120_reg;
end
/* get_input: %66*/
/*   store float %67, float* %scevgep121122, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_66_163))
begin
memory_controller_address_a = get_input_66_scevgep121122_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_input: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_input: %.lr.ph52*/
/*   %10 = load float*** %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_36))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_input: %.lr.ph52*/
/*   %14 = load i32** %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_37))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_input: %.lr.ph52*/
/*   %12 = load float** %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_38))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_input: %.lr.ph25*/
/*   %19 = load float*** %18, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_42))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_input: %.lr.ph25*/
/*   %23 = load i32** %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_43))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_input: %.lr.ph25*/
/*   %21 = load float** %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_44))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_input: %31*/
/*   %32 = load float* %scevgep5859, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_31_53))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_input: %31*/
/*   store i32 0, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_31_54))
begin
memory_controller_write_enable_a = 1'd1;
end
/* get_input: %31*/
/*   store float %32, float* %scevgep5455, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_31_55))
begin
memory_controller_write_enable_a = 1'd1;
end
/* get_input: %.lr.ph42*/
/*   %35 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph42_62))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_input: %36*/
/*   %37 = load float* %uglygep248249, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_36_67))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_input: %36*/
/*   store i32 0, i32* %scevgep255, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_36_69))
begin
memory_controller_write_enable_a = 1'd1;
end
/* get_input: %36*/
/*   store float %38, float* %scevgep256257, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_36_80))
begin
memory_controller_write_enable_a = 1'd1;
end
/* get_input: %.lr.ph44*/
/*   %40 = load float* %scevgep305306, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph44_85))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_input: %.lr.ph44*/
/*   store i32 0, i32* %scevgep264, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph44_86))
begin
memory_controller_write_enable_a = 1'd1;
end
/* get_input: %.lr.ph44*/
/*   store float %40, float* %scevgep265266, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph44_87))
begin
memory_controller_write_enable_a = 1'd1;
end
/* get_input: %.lr.ph48*/
/*   %42 = load float* %scevgep310311, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph48_91))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_input: %.lr.ph48*/
/*   store i32 0, i32* %scevgep282, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph48_92))
begin
memory_controller_write_enable_a = 1'd1;
end
/* get_input: %.lr.ph48*/
/*   store float %42, float* %scevgep283284, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph48_93))
begin
memory_controller_write_enable_a = 1'd1;
end
/* get_input: %45*/
/*   %46 = load float* %scevgep7980, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_45_101))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_input: %45*/
/*   store i32 0, i32* %scevgep72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_45_102))
begin
memory_controller_write_enable_a = 1'd1;
end
/* get_input: %45*/
/*   store float %46, float* %scevgep7374, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_45_103))
begin
memory_controller_write_enable_a = 1'd1;
end
/* get_input: %52*/
/*   %53 = load float* %scevgep103104, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_52_113))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_input: %52*/
/*   store i32 0, i32* %scevgep98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_52_114))
begin
memory_controller_write_enable_a = 1'd1;
end
/* get_input: %52*/
/*   store float %53, float* %scevgep99100, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_52_115))
begin
memory_controller_write_enable_a = 1'd1;
end
/* get_input: %.lr.ph15*/
/*   %56 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph15_122))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_input: %57*/
/*   %58 = load float* %uglygep164, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_57_127))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_input: %57*/
/*   store i32 0, i32* %scevgep170, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_57_129))
begin
memory_controller_write_enable_a = 1'd1;
end
/* get_input: %57*/
/*   store float %59, float* %scevgep171172, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_57_140))
begin
memory_controller_write_enable_a = 1'd1;
end
/* get_input: %.lr.ph17*/
/*   %61 = load float* %scevgep220221, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph17_145))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_input: %.lr.ph17*/
/*   store i32 0, i32* %scevgep179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph17_146))
begin
memory_controller_write_enable_a = 1'd1;
end
/* get_input: %.lr.ph17*/
/*   store float %61, float* %scevgep180181, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph17_147))
begin
memory_controller_write_enable_a = 1'd1;
end
/* get_input: %.lr.ph21*/
/*   %63 = load float* %scevgep225226, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph21_151))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_input: %.lr.ph21*/
/*   store i32 0, i32* %scevgep197, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph21_152))
begin
memory_controller_write_enable_a = 1'd1;
end
/* get_input: %.lr.ph21*/
/*   store float %63, float* %scevgep198199, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph21_153))
begin
memory_controller_write_enable_a = 1'd1;
end
/* get_input: %66*/
/*   %67 = load float* %scevgep127128, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_66_161))
begin
memory_controller_write_enable_a = 1'd0;
end
/* get_input: %66*/
/*   store i32 0, i32* %scevgep120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_66_162))
begin
memory_controller_write_enable_a = 1'd1;
end
/* get_input: %66*/
/*   store float %67, float* %scevgep121122, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_66_163))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* get_input: %31*/
/*   store i32 0, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_31_54))
begin
memory_controller_in_a = 32'd0;
end
/* get_input: %31*/
/*   store float %32, float* %scevgep5455, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_31_55))
begin
memory_controller_in_a = get_input_31_32;
end
/* get_input: %36*/
/*   store i32 0, i32* %scevgep255, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_36_69))
begin
memory_controller_in_a = 32'd0;
end
/* get_input: %36*/
/*   store float %38, float* %scevgep256257, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_36_80))
begin
memory_controller_in_a = get_input_36_38;
end
/* get_input: %.lr.ph44*/
/*   store i32 0, i32* %scevgep264, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph44_86))
begin
memory_controller_in_a = 32'd0;
end
/* get_input: %.lr.ph44*/
/*   store float %40, float* %scevgep265266, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph44_87))
begin
memory_controller_in_a = get_input__lr_ph44_40;
end
/* get_input: %.lr.ph48*/
/*   store i32 0, i32* %scevgep282, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph48_92))
begin
memory_controller_in_a = 32'd0;
end
/* get_input: %.lr.ph48*/
/*   store float %42, float* %scevgep283284, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph48_93))
begin
memory_controller_in_a = get_input__lr_ph48_42;
end
/* get_input: %45*/
/*   store i32 0, i32* %scevgep72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_45_102))
begin
memory_controller_in_a = 32'd0;
end
/* get_input: %45*/
/*   store float %46, float* %scevgep7374, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_45_103))
begin
memory_controller_in_a = get_input_45_46;
end
/* get_input: %52*/
/*   store i32 0, i32* %scevgep98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_52_114))
begin
memory_controller_in_a = 32'd0;
end
/* get_input: %52*/
/*   store float %53, float* %scevgep99100, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_52_115))
begin
memory_controller_in_a = get_input_52_53;
end
/* get_input: %57*/
/*   store i32 0, i32* %scevgep170, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_57_129))
begin
memory_controller_in_a = 32'd0;
end
/* get_input: %57*/
/*   store float %59, float* %scevgep171172, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_57_140))
begin
memory_controller_in_a = get_input_57_59;
end
/* get_input: %.lr.ph17*/
/*   store i32 0, i32* %scevgep179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph17_146))
begin
memory_controller_in_a = 32'd0;
end
/* get_input: %.lr.ph17*/
/*   store float %61, float* %scevgep180181, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph17_147))
begin
memory_controller_in_a = get_input__lr_ph17_61;
end
/* get_input: %.lr.ph21*/
/*   store i32 0, i32* %scevgep197, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph21_152))
begin
memory_controller_in_a = 32'd0;
end
/* get_input: %.lr.ph21*/
/*   store float %63, float* %scevgep198199, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph21_153))
begin
memory_controller_in_a = get_input__lr_ph21_63;
end
/* get_input: %66*/
/*   store i32 0, i32* %scevgep120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_66_162))
begin
memory_controller_in_a = 32'd0;
end
/* get_input: %66*/
/*   store float %67, float* %scevgep121122, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_66_163))
begin
memory_controller_in_a = get_input_66_67;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* get_input: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %.lr.ph52*/
/*   %10 = load float*** %9, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_36))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %.lr.ph52*/
/*   %14 = load i32** %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_37))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %.lr.ph52*/
/*   %12 = load float** %11, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph52_38))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %.lr.ph25*/
/*   %19 = load float*** %18, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_42))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %.lr.ph25*/
/*   %23 = load i32** %22, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_43))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %.lr.ph25*/
/*   %21 = load float** %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph25_44))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %31*/
/*   %32 = load float* %scevgep5859, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_31_53))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %31*/
/*   store i32 0, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_31_54))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %31*/
/*   store float %32, float* %scevgep5455, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_31_55))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %.lr.ph42*/
/*   %35 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph42_62))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %36*/
/*   %37 = load float* %uglygep248249, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_36_67))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %36*/
/*   store i32 0, i32* %scevgep255, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_36_69))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %36*/
/*   store float %38, float* %scevgep256257, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_36_80))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %.lr.ph44*/
/*   %40 = load float* %scevgep305306, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph44_85))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %.lr.ph44*/
/*   store i32 0, i32* %scevgep264, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph44_86))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %.lr.ph44*/
/*   store float %40, float* %scevgep265266, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph44_87))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %.lr.ph48*/
/*   %42 = load float* %scevgep310311, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph48_91))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %.lr.ph48*/
/*   store i32 0, i32* %scevgep282, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph48_92))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %.lr.ph48*/
/*   store float %42, float* %scevgep283284, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph48_93))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %45*/
/*   %46 = load float* %scevgep7980, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_45_101))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %45*/
/*   store i32 0, i32* %scevgep72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_45_102))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %45*/
/*   store float %46, float* %scevgep7374, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_45_103))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %52*/
/*   %53 = load float* %scevgep103104, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_52_113))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %52*/
/*   store i32 0, i32* %scevgep98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_52_114))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %52*/
/*   store float %53, float* %scevgep99100, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_52_115))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %.lr.ph15*/
/*   %56 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph15_122))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %57*/
/*   %58 = load float* %uglygep164, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_57_127))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %57*/
/*   store i32 0, i32* %scevgep170, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_57_129))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %57*/
/*   store float %59, float* %scevgep171172, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_57_140))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %.lr.ph17*/
/*   %61 = load float* %scevgep220221, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph17_145))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %.lr.ph17*/
/*   store i32 0, i32* %scevgep179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph17_146))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %.lr.ph17*/
/*   store float %61, float* %scevgep180181, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph17_147))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %.lr.ph21*/
/*   %63 = load float* %scevgep225226, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph21_151))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %.lr.ph21*/
/*   store i32 0, i32* %scevgep197, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph21_152))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %.lr.ph21*/
/*   store float %63, float* %scevgep198199, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB__lr_ph21_153))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %66*/
/*   %67 = load float* %scevgep127128, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_66_161))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %66*/
/*   store i32 0, i32* %scevgep120, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_get_input_BB_66_162))
begin
memory_controller_size_a = 2'd2;
end
/* get_input: %66*/
/*   store float %67, float* %scevgep121122, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_get_input_BB_66_163))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg  get_input_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_arg_s;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_arg_fft_hdata;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_arg_in;
reg [31:0] get_input_arg_w;
reg [31:0] get_input_arg_h;
reg [31:0] get_input_arg_n;
reg [31:0] get_input_arg_plane;
reg [31:0] get_input_arg_scale;
wire  get_input_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_memory_controller_address_a;
wire  get_input_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] get_input_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] get_input_memory_controller_out_a;
wire [1:0] get_input_memory_controller_size_a;
wire  get_input_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] get_input_memory_controller_address_b;
wire  get_input_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] get_input_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] get_input_memory_controller_out_b;
wire [1:0] get_input_memory_controller_size_b;
reg  get_input_memory_controller_waitrequest;
wire  get_input_finish;
reg  get_input_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


get_input get_input_inst (
	.memory_controller_enable_a (get_input_memory_controller_enable_a),
	.memory_controller_address_a (get_input_memory_controller_address_a),
	.memory_controller_write_enable_a (get_input_memory_controller_write_enable_a),
	.memory_controller_in_a (get_input_memory_controller_in_a),
	.memory_controller_size_a (get_input_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (get_input_memory_controller_enable_b),
	.memory_controller_address_b (get_input_memory_controller_address_b),
	.memory_controller_write_enable_b (get_input_memory_controller_write_enable_b),
	.memory_controller_in_b (get_input_memory_controller_in_b),
	.memory_controller_size_b (get_input_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (get_input_start),
	.finish (get_input_finish),
	.arg_s (get_input_arg_s),
	.arg_fft_hdata (get_input_arg_fft_hdata),
	.arg_in (get_input_arg_in),
	.arg_w (get_input_arg_w),
	.arg_h (get_input_arg_h),
	.arg_n (get_input_arg_n),
	.arg_plane (get_input_arg_plane),
	.arg_scale (get_input_arg_scale)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (get_input_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (get_input_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
get_input_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_start"); $finish; end
end
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
get_input_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
get_input_arg_s <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_arg_s"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
get_input_arg_fft_hdata <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_arg_fft_hdata"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
get_input_arg_in <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_arg_in"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
get_input_arg_w <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_arg_w"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
get_input_arg_h <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_arg_h"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
get_input_arg_n <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_arg_n"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
get_input_arg_plane <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_arg_plane"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
get_input_arg_scale <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to get_input_arg_scale"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
begin
get_input_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
begin
get_input_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
get_input_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
get_input_finish_final = get_input_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = get_input_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = get_input_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = get_input_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = get_input_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = get_input_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = get_input_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = get_input_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = get_input_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = get_input_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = get_input_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = get_input_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = get_input_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = get_input_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = get_input_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = get_input_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = get_input_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = get_input_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = get_input_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = get_input_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @get_input(%struct.TYPE_8__* undef, %struct.TYPE_7__* undef, %struct.TYPE_9__* undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = get_input_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
