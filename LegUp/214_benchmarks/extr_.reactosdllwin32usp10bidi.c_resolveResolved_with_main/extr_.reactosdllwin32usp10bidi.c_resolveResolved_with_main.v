//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:58:40 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module resolveResolved
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_baselevel,
	arg_pcls,
	arg_plevel,
	arg_sos,
	arg_eos
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_resolveResolved_BB_0_1 = 6'd1;
parameter [5:0] LEGUP_F_resolveResolved_BB__lr_ph_2 = 6'd2;
parameter [5:0] LEGUP_F_resolveResolved_BB_2_3 = 6'd3;
parameter [5:0] LEGUP_F_resolveResolved_BB_2_4 = 6'd4;
parameter [5:0] LEGUP_F_resolveResolved_BB_2_5 = 6'd5;
parameter [5:0] LEGUP_F_resolveResolved_BB_2_6 = 6'd6;
parameter [5:0] LEGUP_F_resolveResolved_BB__preheader86_7 = 6'd7;
parameter [5:0] LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_preheader_8 = 6'd8;
parameter [5:0] LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_9 = 6'd9;
parameter [5:0] LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_10 = 6'd10;
parameter [5:0] LEGUP_F_resolveResolved_BB_7_11 = 6'd11;
parameter [5:0] LEGUP_F_resolveResolved_BB_7_12 = 6'd12;
parameter [5:0] LEGUP_F_resolveResolved_BB_7_13 = 6'd13;
parameter [5:0] LEGUP_F_resolveResolved_BB__critedge33_14 = 6'd14;
parameter [5:0] LEGUP_F_resolveResolved_BB__critedge33_15 = 6'd15;
parameter [5:0] LEGUP_F_resolveResolved_BB__critedge32_loopexit_16 = 6'd16;
parameter [5:0] LEGUP_F_resolveResolved_BB__critedge32_17 = 6'd17;
parameter [5:0] LEGUP_F_resolveResolved_BB__critedge32_18 = 6'd18;
parameter [5:0] LEGUP_F_resolveResolved_BB_10_19 = 6'd19;
parameter [5:0] LEGUP_F_resolveResolved_BB_12_20 = 6'd20;
parameter [5:0] LEGUP_F_resolveResolved_BB_12_21 = 6'd21;
parameter [5:0] LEGUP_F_resolveResolved_BB_12_22 = 6'd22;
parameter [5:0] LEGUP_F_resolveResolved_BB__preheader_preheader_23 = 6'd23;
parameter [5:0] LEGUP_F_resolveResolved_BB__preheader_24 = 6'd24;
parameter [5:0] LEGUP_F_resolveResolved_BB__preheader_25 = 6'd25;
parameter [5:0] LEGUP_F_resolveResolved_BB_16_26 = 6'd26;
parameter [5:0] LEGUP_F_resolveResolved_BB_16_27 = 6'd27;
parameter [5:0] LEGUP_F_resolveResolved_BB_16_28 = 6'd28;
parameter [5:0] LEGUP_F_resolveResolved_BB__critedge2_29 = 6'd29;
parameter [5:0] LEGUP_F_resolveResolved_BB__critedge2_30 = 6'd30;
parameter [5:0] LEGUP_F_resolveResolved_BB__critedge_loopexit_31 = 6'd31;
parameter [5:0] LEGUP_F_resolveResolved_BB__critedge_32 = 6'd32;
parameter [5:0] LEGUP_F_resolveResolved_BB__critedge__crit_edge_33 = 6'd33;
parameter [5:0] LEGUP_F_resolveResolved_BB___crit_edge_loopexit_34 = 6'd34;
parameter [5:0] LEGUP_F_resolveResolved_BB___crit_edge_35 = 6'd35;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [31:0] arg_baselevel;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_pcls;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_plevel;
input [31:0] arg_sos;
input [31:0] arg_eos;
reg [5:0] cur_state;
reg  resolveResolved_0_1;
reg  resolveResolved_0_1_reg;
reg [31:0] resolveResolved__lr_ph_tmp96;
reg [31:0] resolveResolved__lr_ph_tmp96_reg;
reg [31:0] resolveResolved__lr_ph_tmp114;
reg [31:0] resolveResolved__lr_ph_tmp114_reg;
reg [31:0] resolveResolved_2_indvar88;
reg [31:0] resolveResolved_2_indvar88_reg;
reg [31:0] resolveResolved_2_tmp102;
reg [31:0] resolveResolved_2_tmp102_reg;
reg [31:0] resolveResolved_2_i_087;
reg [31:0] resolveResolved_2_i_087_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] resolveResolved_2_scevgep111;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] resolveResolved_2_scevgep111_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] resolveResolved_2_scevgep112;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] resolveResolved_2_scevgep112_reg;
reg [31:0] resolveResolved_2_tmp115;
reg [31:0] resolveResolved_2_tmp115_reg;
reg [31:0] resolveResolved_2_3;
reg [31:0] resolveResolved_2_3_reg;
reg  resolveResolved_2_4;
reg  resolveResolved_2_4_reg;
reg  resolveResolved__preheader86_5;
reg  resolveResolved__preheader86_5_reg;
reg [31:0] resolveResolved__preheader86__preheader86_split_crit_edge_indvar93;
reg [31:0] resolveResolved__preheader86__preheader86_split_crit_edge_indvar93_reg;
reg [31:0] resolveResolved__preheader86__preheader86_split_crit_edge_j_0;
reg [31:0] resolveResolved__preheader86__preheader86_split_crit_edge_j_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] resolveResolved__preheader86__preheader86_split_crit_edge_scevgep100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] resolveResolved__preheader86__preheader86_split_crit_edge_scevgep100_reg;
reg  resolveResolved__preheader86__preheader86_split_crit_edge_6;
reg  resolveResolved__preheader86__preheader86_split_crit_edge_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] resolveResolved_7_scevgep99;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] resolveResolved_7_scevgep99_reg;
reg [31:0] resolveResolved_7_8;
reg [31:0] resolveResolved_7_8_reg;
reg  resolveResolved_7_9;
reg  resolveResolved_7_9_reg;
reg [31:0] resolveResolved__critedge33_indvar_next94;
reg [31:0] resolveResolved__critedge33_indvar_next94_reg;
reg  resolveResolved_10_11;
reg  resolveResolved_10_11_reg;
reg [31:0] resolveResolved_12_13;
reg [31:0] resolveResolved_12_13_reg;
reg  resolveResolved_12_14;
reg  resolveResolved_12_14_reg;
reg [31:0] resolveResolved__preheader_indvar;
reg [31:0] resolveResolved__preheader_indvar_reg;
reg [31:0] resolveResolved__preheader_j1_0;
reg [31:0] resolveResolved__preheader_j1_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] resolveResolved__preheader_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] resolveResolved__preheader_scevgep_reg;
reg  resolveResolved__preheader_15;
reg  resolveResolved__preheader_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] resolveResolved_16_scevgep92;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] resolveResolved_16_scevgep92_reg;
reg [31:0] resolveResolved_16_17;
reg [31:0] resolveResolved_16_17_reg;
reg  resolveResolved_16_18;
reg  resolveResolved_16_18_reg;
reg [31:0] resolveResolved__critedge2_indvar_next;
reg [31:0] resolveResolved__critedge2_indvar_next_reg;
reg  resolveResolved__critedge_19;
reg  resolveResolved__critedge_19_reg;
reg [31:0] resolveResolved__critedge__crit_edge_indvar_next89;
reg [31:0] resolveResolved__critedge__crit_edge_indvar_next89_reg;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_resolveResolved_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (resolveResolved_0_1 == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB___crit_edge_35;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB___crit_edge_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_resolveResolved_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (resolveResolved_0_1 == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__lr_ph_2;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__lr_ph_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__lr_ph_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__lr_ph_2;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__lr_ph_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__lr_ph_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_2_3;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB_2_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_2_3;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB_2_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_2_4;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB_2_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_2_4;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB_2_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_2_5;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_2_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB_2_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_2_5;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_2_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB_2_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_2_6;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_2_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB_2_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_2_6;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_2_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_resolveResolved_BB_2_6) & (memory_controller_waitrequest == 1'd0)) & (resolveResolved_2_4 == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__preheader86_7;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__preheader86_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_resolveResolved_BB_2_6) & (memory_controller_waitrequest == 1'd0)) & (resolveResolved_2_4 == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_10_19;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_10_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__preheader86_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__preheader86_7;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__preheader86_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_resolveResolved_BB__preheader86_7) & (memory_controller_waitrequest == 1'd0)) & (resolveResolved__preheader86_5 == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_preheader_8;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_preheader_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_resolveResolved_BB__preheader86_7) & (memory_controller_waitrequest == 1'd0)) & (resolveResolved__preheader86_5 == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge32_17;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge32_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_preheader_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_preheader_8;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_preheader_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_preheader_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_9;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_9;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_10;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_10;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_10) & (memory_controller_waitrequest == 1'd0)) & (resolveResolved__preheader86__preheader86_split_crit_edge_6_reg == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge32_loopexit_16;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge32_loopexit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_10) & (memory_controller_waitrequest == 1'd0)) & (resolveResolved__preheader86__preheader86_split_crit_edge_6_reg == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_7_11;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_7_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB_7_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_7_11;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_7_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB_7_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_7_12;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_7_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB_7_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_7_12;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_7_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB_7_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_7_13;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_7_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB_7_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_7_13;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_7_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_resolveResolved_BB_7_13) & (memory_controller_waitrequest == 1'd0)) & (resolveResolved_7_9 == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge33_14;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge33_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_resolveResolved_BB_7_13) & (memory_controller_waitrequest == 1'd0)) & (resolveResolved_7_9 == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge32_loopexit_16;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge32_loopexit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__critedge33_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge33_14;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge33_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__critedge33_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge33_15;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge33_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__critedge33_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge33_15;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge33_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__critedge33_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_9;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__critedge32_loopexit_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge32_loopexit_16;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge32_loopexit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__critedge32_loopexit_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge32_17;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge32_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__critedge32_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge32_17;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge32_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__critedge32_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge32_18;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge32_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__critedge32_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge32_18;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge32_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__critedge32_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_10_19;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_10_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB_10_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_10_19;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_10_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_resolveResolved_BB_10_19) & (memory_controller_waitrequest == 1'd0)) & (resolveResolved_10_11 == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_12_20;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_12_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_resolveResolved_BB_10_19) & (memory_controller_waitrequest == 1'd0)) & (resolveResolved_10_11 == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge_32;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB_12_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_12_20;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_12_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB_12_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_12_21;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_12_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB_12_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_12_21;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_12_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB_12_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_12_22;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_12_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB_12_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_12_22;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_12_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_resolveResolved_BB_12_22) & (memory_controller_waitrequest == 1'd0)) & (resolveResolved_12_14 == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__preheader_preheader_23;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__preheader_preheader_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_resolveResolved_BB_12_22) & (memory_controller_waitrequest == 1'd0)) & (resolveResolved_12_14 == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge_32;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__preheader_preheader_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__preheader_preheader_23;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__preheader_preheader_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__preheader_preheader_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__preheader_24;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__preheader_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__preheader_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__preheader_24;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__preheader_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__preheader_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__preheader_25;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__preheader_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__preheader_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__preheader_25;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__preheader_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_resolveResolved_BB__preheader_25) & (memory_controller_waitrequest == 1'd0)) & (resolveResolved__preheader_15_reg == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge_loopexit_31;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge_loopexit_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_resolveResolved_BB__preheader_25) & (memory_controller_waitrequest == 1'd0)) & (resolveResolved__preheader_15_reg == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_16_26;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_16_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB_16_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_16_26;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_16_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB_16_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_16_27;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_16_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB_16_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_16_27;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_16_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB_16_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_16_28;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_16_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB_16_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_16_28;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_16_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_resolveResolved_BB_16_28) & (memory_controller_waitrequest == 1'd0)) & (resolveResolved_16_18 == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge2_29;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge2_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_resolveResolved_BB_16_28) & (memory_controller_waitrequest == 1'd0)) & (resolveResolved_16_18 == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge_loopexit_31;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge_loopexit_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__critedge2_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge2_29;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge2_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__critedge2_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge2_30;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge2_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__critedge2_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge2_30;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge2_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__critedge2_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__preheader_24;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__preheader_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__critedge_loopexit_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge_loopexit_31;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge_loopexit_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__critedge_loopexit_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge_32;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__critedge_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge_32;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_resolveResolved_BB__critedge_32) & (memory_controller_waitrequest == 1'd0)) & (resolveResolved__critedge_19 == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB___crit_edge_loopexit_34;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB___crit_edge_loopexit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_resolveResolved_BB__critedge_32) & (memory_controller_waitrequest == 1'd0)) & (resolveResolved__critedge_19 == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge__crit_edge_33;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge__crit_edge_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__critedge__crit_edge_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB__critedge__crit_edge_33;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB__critedge__crit_edge_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB__critedge__crit_edge_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB_2_3;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB___crit_edge_loopexit_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB___crit_edge_loopexit_34;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB___crit_edge_loopexit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB___crit_edge_loopexit_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_resolveResolved_BB___crit_edge_35;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB___crit_edge_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_resolveResolved_BB___crit_edge_35;
if (reset == 1'b0 && ^(LEGUP_F_resolveResolved_BB___crit_edge_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_resolveResolved_BB___crit_edge_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 6'd0;
if (reset == 1'b0 && ^(6'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %0*/
/*   %1 = icmp sgt i32 %sos, %eos*/
begin
resolveResolved_0_1 = ($signed(arg_sos) > $signed(arg_eos));
end
end
always @(posedge clk) begin
/* resolveResolved: %0*/
/*   %1 = icmp sgt i32 %sos, %eos*/
if ((cur_state == LEGUP_F_resolveResolved_BB_0_1))
begin
resolveResolved_0_1_reg <= resolveResolved_0_1;
if (reset == 1'b0 && ^(resolveResolved_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved_0_1_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %.lr.ph*/
/*   %tmp96 = add i32 %sos, -1*/
begin
resolveResolved__lr_ph_tmp96 = (arg_sos + -32'd1);
end
end
always @(posedge clk) begin
/* resolveResolved: %.lr.ph*/
/*   %tmp96 = add i32 %sos, -1*/
if ((cur_state == LEGUP_F_resolveResolved_BB__lr_ph_2))
begin
resolveResolved__lr_ph_tmp96_reg <= resolveResolved__lr_ph_tmp96;
if (reset == 1'b0 && ^(resolveResolved__lr_ph_tmp96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved__lr_ph_tmp96_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %.lr.ph*/
/*   %tmp114 = add i32 %sos, 1*/
begin
resolveResolved__lr_ph_tmp114 = (arg_sos + 32'd1);
end
end
always @(posedge clk) begin
/* resolveResolved: %.lr.ph*/
/*   %tmp114 = add i32 %sos, 1*/
if ((cur_state == LEGUP_F_resolveResolved_BB__lr_ph_2))
begin
resolveResolved__lr_ph_tmp114_reg <= resolveResolved__lr_ph_tmp114;
if (reset == 1'b0 && ^(resolveResolved__lr_ph_tmp114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved__lr_ph_tmp114_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %2*/
/*   %indvar88 = phi i32 [ 0, %.lr.ph ], [ %indvar.next89, %.critedge._crit_edge ]*/
if (((cur_state == LEGUP_F_resolveResolved_BB__lr_ph_2) & (memory_controller_waitrequest == 1'd0)))
begin
resolveResolved_2_indvar88 = 32'd0;
end
/* resolveResolved: %2*/
/*   %indvar88 = phi i32 [ 0, %.lr.ph ], [ %indvar.next89, %.critedge._crit_edge ]*/
else /* if (((cur_state == LEGUP_F_resolveResolved_BB__critedge__crit_edge_33) & (memory_controller_waitrequest == 1'd0))) */
begin
resolveResolved_2_indvar88 = resolveResolved__critedge__crit_edge_indvar_next89;
end
end
always @(posedge clk) begin
/* resolveResolved: %2*/
/*   %indvar88 = phi i32 [ 0, %.lr.ph ], [ %indvar.next89, %.critedge._crit_edge ]*/
if (((cur_state == LEGUP_F_resolveResolved_BB__lr_ph_2) & (memory_controller_waitrequest == 1'd0)))
begin
resolveResolved_2_indvar88_reg <= resolveResolved_2_indvar88;
if (reset == 1'b0 && ^(resolveResolved_2_indvar88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved_2_indvar88_reg"); $finish; end
end
/* resolveResolved: %2*/
/*   %indvar88 = phi i32 [ 0, %.lr.ph ], [ %indvar.next89, %.critedge._crit_edge ]*/
if (((cur_state == LEGUP_F_resolveResolved_BB__critedge__crit_edge_33) & (memory_controller_waitrequest == 1'd0)))
begin
resolveResolved_2_indvar88_reg <= resolveResolved_2_indvar88;
if (reset == 1'b0 && ^(resolveResolved_2_indvar88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved_2_indvar88_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %2*/
/*   %tmp102 = add i32 %tmp96, %indvar88*/
begin
resolveResolved_2_tmp102 = (resolveResolved__lr_ph_tmp96_reg + resolveResolved_2_indvar88_reg);
end
end
always @(posedge clk) begin
/* resolveResolved: %2*/
/*   %tmp102 = add i32 %tmp96, %indvar88*/
if ((cur_state == LEGUP_F_resolveResolved_BB_2_3))
begin
resolveResolved_2_tmp102_reg <= resolveResolved_2_tmp102;
if (reset == 1'b0 && ^(resolveResolved_2_tmp102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved_2_tmp102_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %2*/
/*   %i.087 = add i32 %indvar88, %sos*/
begin
resolveResolved_2_i_087 = (resolveResolved_2_indvar88_reg + arg_sos);
end
end
always @(posedge clk) begin
/* resolveResolved: %2*/
/*   %i.087 = add i32 %indvar88, %sos*/
if ((cur_state == LEGUP_F_resolveResolved_BB_2_3))
begin
resolveResolved_2_i_087_reg <= resolveResolved_2_i_087;
if (reset == 1'b0 && ^(resolveResolved_2_i_087) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved_2_i_087_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %2*/
/*   %scevgep111 = getelementptr i32* %pcls, i32 %i.087*/
begin
resolveResolved_2_scevgep111 = (arg_pcls + (4 * resolveResolved_2_i_087_reg));
end
end
always @(posedge clk) begin
/* resolveResolved: %2*/
/*   %scevgep111 = getelementptr i32* %pcls, i32 %i.087*/
if ((cur_state == LEGUP_F_resolveResolved_BB_2_4))
begin
resolveResolved_2_scevgep111_reg <= resolveResolved_2_scevgep111;
if (reset == 1'b0 && ^(resolveResolved_2_scevgep111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved_2_scevgep111_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %2*/
/*   %scevgep112 = getelementptr i32* %plevel, i32 %i.087*/
begin
resolveResolved_2_scevgep112 = (arg_plevel + (4 * resolveResolved_2_i_087_reg));
end
end
always @(posedge clk) begin
/* resolveResolved: %2*/
/*   %scevgep112 = getelementptr i32* %plevel, i32 %i.087*/
if ((cur_state == LEGUP_F_resolveResolved_BB_2_4))
begin
resolveResolved_2_scevgep112_reg <= resolveResolved_2_scevgep112;
if (reset == 1'b0 && ^(resolveResolved_2_scevgep112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved_2_scevgep112_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %2*/
/*   %tmp115 = add i32 %tmp114, %indvar88*/
begin
resolveResolved_2_tmp115 = (resolveResolved__lr_ph_tmp114_reg + resolveResolved_2_indvar88_reg);
end
end
always @(posedge clk) begin
/* resolveResolved: %2*/
/*   %tmp115 = add i32 %tmp114, %indvar88*/
if ((cur_state == LEGUP_F_resolveResolved_BB_2_3))
begin
resolveResolved_2_tmp115_reg <= resolveResolved_2_tmp115;
if (reset == 1'b0 && ^(resolveResolved_2_tmp115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved_2_tmp115_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %2*/
/*   %3 = load i32* %scevgep111, align 4, !tbaa !0*/
begin
resolveResolved_2_3 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* resolveResolved: %2*/
/*   %3 = load i32* %scevgep111, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_2_6))
begin
resolveResolved_2_3_reg <= resolveResolved_2_3;
if (reset == 1'b0 && ^(resolveResolved_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved_2_3_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %2*/
/*   %4 = icmp eq i32 %3, 0*/
begin
resolveResolved_2_4 = (resolveResolved_2_3 == 32'd0);
end
end
always @(posedge clk) begin
/* resolveResolved: %2*/
/*   %4 = icmp eq i32 %3, 0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_2_6))
begin
resolveResolved_2_4_reg <= resolveResolved_2_4;
if (reset == 1'b0 && ^(resolveResolved_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved_2_4_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %.preheader86*/
/*   %5 = icmp sgt i32 %i.087, %sos*/
begin
resolveResolved__preheader86_5 = ($signed(resolveResolved_2_i_087_reg) > $signed(arg_sos));
end
end
always @(posedge clk) begin
/* resolveResolved: %.preheader86*/
/*   %5 = icmp sgt i32 %i.087, %sos*/
if ((cur_state == LEGUP_F_resolveResolved_BB__preheader86_7))
begin
resolveResolved__preheader86_5_reg <= resolveResolved__preheader86_5;
if (reset == 1'b0 && ^(resolveResolved__preheader86_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved__preheader86_5_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %.preheader86..preheader86.split_crit_edge*/
/*   %indvar93 = phi i32 [ %indvar.next94, %.critedge33 ], [ 0, %.preheader86..preheader86.split_crit_edge.preheader ]*/
if (((cur_state == LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_preheader_8) & (memory_controller_waitrequest == 1'd0)))
begin
resolveResolved__preheader86__preheader86_split_crit_edge_indvar93 = 32'd0;
end
/* resolveResolved: %.preheader86..preheader86.split_crit_edge*/
/*   %indvar93 = phi i32 [ %indvar.next94, %.critedge33 ], [ 0, %.preheader86..preheader86.split_crit_edge.preheader ]*/
else /* if (((cur_state == LEGUP_F_resolveResolved_BB__critedge33_15) & (memory_controller_waitrequest == 1'd0))) */
begin
resolveResolved__preheader86__preheader86_split_crit_edge_indvar93 = resolveResolved__critedge33_indvar_next94_reg;
end
end
always @(posedge clk) begin
/* resolveResolved: %.preheader86..preheader86.split_crit_edge*/
/*   %indvar93 = phi i32 [ %indvar.next94, %.critedge33 ], [ 0, %.preheader86..preheader86.split_crit_edge.preheader ]*/
if (((cur_state == LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_preheader_8) & (memory_controller_waitrequest == 1'd0)))
begin
resolveResolved__preheader86__preheader86_split_crit_edge_indvar93_reg <= resolveResolved__preheader86__preheader86_split_crit_edge_indvar93;
if (reset == 1'b0 && ^(resolveResolved__preheader86__preheader86_split_crit_edge_indvar93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved__preheader86__preheader86_split_crit_edge_indvar93_reg"); $finish; end
end
/* resolveResolved: %.preheader86..preheader86.split_crit_edge*/
/*   %indvar93 = phi i32 [ %indvar.next94, %.critedge33 ], [ 0, %.preheader86..preheader86.split_crit_edge.preheader ]*/
if (((cur_state == LEGUP_F_resolveResolved_BB__critedge33_15) & (memory_controller_waitrequest == 1'd0)))
begin
resolveResolved__preheader86__preheader86_split_crit_edge_indvar93_reg <= resolveResolved__preheader86__preheader86_split_crit_edge_indvar93;
if (reset == 1'b0 && ^(resolveResolved__preheader86__preheader86_split_crit_edge_indvar93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved__preheader86__preheader86_split_crit_edge_indvar93_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %.preheader86..preheader86.split_crit_edge*/
/*   %j.0 = sub i32 %tmp102, %indvar93*/
begin
resolveResolved__preheader86__preheader86_split_crit_edge_j_0 = (resolveResolved_2_tmp102_reg - resolveResolved__preheader86__preheader86_split_crit_edge_indvar93_reg);
end
end
always @(posedge clk) begin
/* resolveResolved: %.preheader86..preheader86.split_crit_edge*/
/*   %j.0 = sub i32 %tmp102, %indvar93*/
if ((cur_state == LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_9))
begin
resolveResolved__preheader86__preheader86_split_crit_edge_j_0_reg <= resolveResolved__preheader86__preheader86_split_crit_edge_j_0;
if (reset == 1'b0 && ^(resolveResolved__preheader86__preheader86_split_crit_edge_j_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved__preheader86__preheader86_split_crit_edge_j_0_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %.preheader86..preheader86.split_crit_edge*/
/*   %scevgep100 = getelementptr i32* %plevel, i32 %j.0*/
begin
resolveResolved__preheader86__preheader86_split_crit_edge_scevgep100 = (arg_plevel + (4 * resolveResolved__preheader86__preheader86_split_crit_edge_j_0_reg));
end
end
always @(posedge clk) begin
/* resolveResolved: %.preheader86..preheader86.split_crit_edge*/
/*   %scevgep100 = getelementptr i32* %plevel, i32 %j.0*/
if ((cur_state == LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_10))
begin
resolveResolved__preheader86__preheader86_split_crit_edge_scevgep100_reg <= resolveResolved__preheader86__preheader86_split_crit_edge_scevgep100;
if (reset == 1'b0 && ^(resolveResolved__preheader86__preheader86_split_crit_edge_scevgep100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved__preheader86__preheader86_split_crit_edge_scevgep100_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %.preheader86..preheader86.split_crit_edge*/
/*   %6 = icmp slt i32 %j.0, %sos*/
begin
resolveResolved__preheader86__preheader86_split_crit_edge_6 = ($signed(resolveResolved__preheader86__preheader86_split_crit_edge_j_0) < $signed(arg_sos));
end
end
always @(posedge clk) begin
/* resolveResolved: %.preheader86..preheader86.split_crit_edge*/
/*   %6 = icmp slt i32 %j.0, %sos*/
if ((cur_state == LEGUP_F_resolveResolved_BB__preheader86__preheader86_split_crit_edge_9))
begin
resolveResolved__preheader86__preheader86_split_crit_edge_6_reg <= resolveResolved__preheader86__preheader86_split_crit_edge_6;
if (reset == 1'b0 && ^(resolveResolved__preheader86__preheader86_split_crit_edge_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved__preheader86__preheader86_split_crit_edge_6_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %7*/
/*   %scevgep99 = getelementptr i32* %pcls, i32 %j.0*/
begin
resolveResolved_7_scevgep99 = (arg_pcls + (4 * resolveResolved__preheader86__preheader86_split_crit_edge_j_0_reg));
end
end
always @(posedge clk) begin
/* resolveResolved: %7*/
/*   %scevgep99 = getelementptr i32* %pcls, i32 %j.0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_7_11))
begin
resolveResolved_7_scevgep99_reg <= resolveResolved_7_scevgep99;
if (reset == 1'b0 && ^(resolveResolved_7_scevgep99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved_7_scevgep99_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %7*/
/*   %8 = load i32* %scevgep99, align 4, !tbaa !0*/
begin
resolveResolved_7_8 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* resolveResolved: %7*/
/*   %8 = load i32* %scevgep99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_7_13))
begin
resolveResolved_7_8_reg <= resolveResolved_7_8;
if (reset == 1'b0 && ^(resolveResolved_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved_7_8_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %7*/
/*   %9 = icmp eq i32 %8, 0*/
begin
resolveResolved_7_9 = (resolveResolved_7_8 == 32'd0);
end
end
always @(posedge clk) begin
/* resolveResolved: %7*/
/*   %9 = icmp eq i32 %8, 0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_7_13))
begin
resolveResolved_7_9_reg <= resolveResolved_7_9;
if (reset == 1'b0 && ^(resolveResolved_7_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved_7_9_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %.critedge33*/
/*   %indvar.next94 = add i32 %indvar93, 1*/
begin
resolveResolved__critedge33_indvar_next94 = (resolveResolved__preheader86__preheader86_split_crit_edge_indvar93_reg + 32'd1);
end
end
always @(posedge clk) begin
/* resolveResolved: %.critedge33*/
/*   %indvar.next94 = add i32 %indvar93, 1*/
if ((cur_state == LEGUP_F_resolveResolved_BB__critedge33_14))
begin
resolveResolved__critedge33_indvar_next94_reg <= resolveResolved__critedge33_indvar_next94;
if (reset == 1'b0 && ^(resolveResolved__critedge33_indvar_next94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved__critedge33_indvar_next94_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %10*/
/*   %11 = icmp eq i32 %i.087, %eos*/
begin
resolveResolved_10_11 = (resolveResolved_2_i_087_reg == arg_eos);
end
end
always @(posedge clk) begin
/* resolveResolved: %10*/
/*   %11 = icmp eq i32 %i.087, %eos*/
if ((cur_state == LEGUP_F_resolveResolved_BB_10_19))
begin
resolveResolved_10_11_reg <= resolveResolved_10_11;
if (reset == 1'b0 && ^(resolveResolved_10_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved_10_11_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %12*/
/*   %13 = load i32* %scevgep111, align 4, !tbaa !0*/
begin
resolveResolved_12_13 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* resolveResolved: %12*/
/*   %13 = load i32* %scevgep111, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_12_22))
begin
resolveResolved_12_13_reg <= resolveResolved_12_13;
if (reset == 1'b0 && ^(resolveResolved_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved_12_13_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %12*/
/*   %14 = icmp eq i32 %13, 0*/
begin
resolveResolved_12_14 = (resolveResolved_12_13 == 32'd0);
end
end
always @(posedge clk) begin
/* resolveResolved: %12*/
/*   %14 = icmp eq i32 %13, 0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_12_22))
begin
resolveResolved_12_14_reg <= resolveResolved_12_14;
if (reset == 1'b0 && ^(resolveResolved_12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved_12_14_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %.preheader*/
/*   %indvar = phi i32 [ %indvar.next, %.critedge2 ], [ 0, %.preheader.preheader ]*/
if (((cur_state == LEGUP_F_resolveResolved_BB__preheader_preheader_23) & (memory_controller_waitrequest == 1'd0)))
begin
resolveResolved__preheader_indvar = 32'd0;
end
/* resolveResolved: %.preheader*/
/*   %indvar = phi i32 [ %indvar.next, %.critedge2 ], [ 0, %.preheader.preheader ]*/
else /* if (((cur_state == LEGUP_F_resolveResolved_BB__critedge2_30) & (memory_controller_waitrequest == 1'd0))) */
begin
resolveResolved__preheader_indvar = resolveResolved__critedge2_indvar_next_reg;
end
end
always @(posedge clk) begin
/* resolveResolved: %.preheader*/
/*   %indvar = phi i32 [ %indvar.next, %.critedge2 ], [ 0, %.preheader.preheader ]*/
if (((cur_state == LEGUP_F_resolveResolved_BB__preheader_preheader_23) & (memory_controller_waitrequest == 1'd0)))
begin
resolveResolved__preheader_indvar_reg <= resolveResolved__preheader_indvar;
if (reset == 1'b0 && ^(resolveResolved__preheader_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved__preheader_indvar_reg"); $finish; end
end
/* resolveResolved: %.preheader*/
/*   %indvar = phi i32 [ %indvar.next, %.critedge2 ], [ 0, %.preheader.preheader ]*/
if (((cur_state == LEGUP_F_resolveResolved_BB__critedge2_30) & (memory_controller_waitrequest == 1'd0)))
begin
resolveResolved__preheader_indvar_reg <= resolveResolved__preheader_indvar;
if (reset == 1'b0 && ^(resolveResolved__preheader_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved__preheader_indvar_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %.preheader*/
/*   %j1.0 = sub i32 %i.087, %indvar*/
begin
resolveResolved__preheader_j1_0 = (resolveResolved_2_i_087_reg - resolveResolved__preheader_indvar_reg);
end
end
always @(posedge clk) begin
/* resolveResolved: %.preheader*/
/*   %j1.0 = sub i32 %i.087, %indvar*/
if ((cur_state == LEGUP_F_resolveResolved_BB__preheader_24))
begin
resolveResolved__preheader_j1_0_reg <= resolveResolved__preheader_j1_0;
if (reset == 1'b0 && ^(resolveResolved__preheader_j1_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved__preheader_j1_0_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %.preheader*/
/*   %scevgep = getelementptr i32* %plevel, i32 %j1.0*/
begin
resolveResolved__preheader_scevgep = (arg_plevel + (4 * resolveResolved__preheader_j1_0_reg));
end
end
always @(posedge clk) begin
/* resolveResolved: %.preheader*/
/*   %scevgep = getelementptr i32* %plevel, i32 %j1.0*/
if ((cur_state == LEGUP_F_resolveResolved_BB__preheader_25))
begin
resolveResolved__preheader_scevgep_reg <= resolveResolved__preheader_scevgep;
if (reset == 1'b0 && ^(resolveResolved__preheader_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved__preheader_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %.preheader*/
/*   %15 = icmp slt i32 %j1.0, %sos*/
begin
resolveResolved__preheader_15 = ($signed(resolveResolved__preheader_j1_0) < $signed(arg_sos));
end
end
always @(posedge clk) begin
/* resolveResolved: %.preheader*/
/*   %15 = icmp slt i32 %j1.0, %sos*/
if ((cur_state == LEGUP_F_resolveResolved_BB__preheader_24))
begin
resolveResolved__preheader_15_reg <= resolveResolved__preheader_15;
if (reset == 1'b0 && ^(resolveResolved__preheader_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved__preheader_15_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %16*/
/*   %scevgep92 = getelementptr i32* %pcls, i32 %j1.0*/
begin
resolveResolved_16_scevgep92 = (arg_pcls + (4 * resolveResolved__preheader_j1_0_reg));
end
end
always @(posedge clk) begin
/* resolveResolved: %16*/
/*   %scevgep92 = getelementptr i32* %pcls, i32 %j1.0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_16_26))
begin
resolveResolved_16_scevgep92_reg <= resolveResolved_16_scevgep92;
if (reset == 1'b0 && ^(resolveResolved_16_scevgep92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved_16_scevgep92_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %16*/
/*   %17 = load i32* %scevgep92, align 4, !tbaa !0*/
begin
resolveResolved_16_17 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* resolveResolved: %16*/
/*   %17 = load i32* %scevgep92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_16_28))
begin
resolveResolved_16_17_reg <= resolveResolved_16_17;
if (reset == 1'b0 && ^(resolveResolved_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved_16_17_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %16*/
/*   %18 = icmp eq i32 %17, 0*/
begin
resolveResolved_16_18 = (resolveResolved_16_17 == 32'd0);
end
end
always @(posedge clk) begin
/* resolveResolved: %16*/
/*   %18 = icmp eq i32 %17, 0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_16_28))
begin
resolveResolved_16_18_reg <= resolveResolved_16_18;
if (reset == 1'b0 && ^(resolveResolved_16_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved_16_18_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %.critedge2*/
/*   %indvar.next = add i32 %indvar, 1*/
begin
resolveResolved__critedge2_indvar_next = (resolveResolved__preheader_indvar_reg + 32'd1);
end
end
always @(posedge clk) begin
/* resolveResolved: %.critedge2*/
/*   %indvar.next = add i32 %indvar, 1*/
if ((cur_state == LEGUP_F_resolveResolved_BB__critedge2_29))
begin
resolveResolved__critedge2_indvar_next_reg <= resolveResolved__critedge2_indvar_next;
if (reset == 1'b0 && ^(resolveResolved__critedge2_indvar_next) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved__critedge2_indvar_next_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %.critedge*/
/*   %19 = icmp sgt i32 %tmp115, %eos*/
begin
resolveResolved__critedge_19 = ($signed(resolveResolved_2_tmp115_reg) > $signed(arg_eos));
end
end
always @(posedge clk) begin
/* resolveResolved: %.critedge*/
/*   %19 = icmp sgt i32 %tmp115, %eos*/
if ((cur_state == LEGUP_F_resolveResolved_BB__critedge_32))
begin
resolveResolved__critedge_19_reg <= resolveResolved__critedge_19;
if (reset == 1'b0 && ^(resolveResolved__critedge_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved__critedge_19_reg"); $finish; end
end
end
always @(*) begin
/* resolveResolved: %.critedge._crit_edge*/
/*   %indvar.next89 = add i32 %indvar88, 1*/
begin
resolveResolved__critedge__crit_edge_indvar_next89 = (resolveResolved_2_indvar88_reg + 32'd1);
end
end
always @(posedge clk) begin
/* resolveResolved: %.critedge._crit_edge*/
/*   %indvar.next89 = add i32 %indvar88, 1*/
if ((cur_state == LEGUP_F_resolveResolved_BB__critedge__crit_edge_33))
begin
resolveResolved__critedge__crit_edge_indvar_next89_reg <= resolveResolved__critedge__crit_edge_indvar_next89;
if (reset == 1'b0 && ^(resolveResolved__critedge__crit_edge_indvar_next89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to resolveResolved__critedge__crit_edge_indvar_next89_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* resolveResolved: %._crit_edge*/
/*   ret void*/
if ((cur_state == LEGUP_F_resolveResolved_BB___crit_edge_35))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* resolveResolved: %2*/
/*   %3 = load i32* %scevgep111, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_2_4))
begin
memory_controller_enable_a = 1'd1;
end
/* resolveResolved: %7*/
/*   %8 = load i32* %scevgep99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_7_11))
begin
memory_controller_enable_a = 1'd1;
end
/* resolveResolved: %.critedge33*/
/*   store i32 %baselevel, i32* %scevgep100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB__critedge33_14))
begin
memory_controller_enable_a = 1'd1;
end
/* resolveResolved: %.critedge32*/
/*   store i32 %baselevel, i32* %scevgep112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB__critedge32_17))
begin
memory_controller_enable_a = 1'd1;
end
/* resolveResolved: %12*/
/*   %13 = load i32* %scevgep111, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_12_20))
begin
memory_controller_enable_a = 1'd1;
end
/* resolveResolved: %16*/
/*   %17 = load i32* %scevgep92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_16_26))
begin
memory_controller_enable_a = 1'd1;
end
/* resolveResolved: %.critedge2*/
/*   store i32 %baselevel, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB__critedge2_29))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* resolveResolved: %2*/
/*   %3 = load i32* %scevgep111, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_2_4))
begin
memory_controller_address_a = resolveResolved_2_scevgep111;
end
/* resolveResolved: %7*/
/*   %8 = load i32* %scevgep99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_7_11))
begin
memory_controller_address_a = resolveResolved_7_scevgep99;
end
/* resolveResolved: %.critedge33*/
/*   store i32 %baselevel, i32* %scevgep100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB__critedge33_14))
begin
memory_controller_address_a = resolveResolved__preheader86__preheader86_split_crit_edge_scevgep100_reg;
end
/* resolveResolved: %.critedge32*/
/*   store i32 %baselevel, i32* %scevgep112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB__critedge32_17))
begin
memory_controller_address_a = resolveResolved_2_scevgep112_reg;
end
/* resolveResolved: %12*/
/*   %13 = load i32* %scevgep111, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_12_20))
begin
memory_controller_address_a = resolveResolved_2_scevgep111_reg;
end
/* resolveResolved: %16*/
/*   %17 = load i32* %scevgep92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_16_26))
begin
memory_controller_address_a = resolveResolved_16_scevgep92;
end
/* resolveResolved: %.critedge2*/
/*   store i32 %baselevel, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB__critedge2_29))
begin
memory_controller_address_a = resolveResolved__preheader_scevgep_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* resolveResolved: %2*/
/*   %3 = load i32* %scevgep111, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_2_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* resolveResolved: %7*/
/*   %8 = load i32* %scevgep99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_7_11))
begin
memory_controller_write_enable_a = 1'd0;
end
/* resolveResolved: %.critedge33*/
/*   store i32 %baselevel, i32* %scevgep100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB__critedge33_14))
begin
memory_controller_write_enable_a = 1'd1;
end
/* resolveResolved: %.critedge32*/
/*   store i32 %baselevel, i32* %scevgep112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB__critedge32_17))
begin
memory_controller_write_enable_a = 1'd1;
end
/* resolveResolved: %12*/
/*   %13 = load i32* %scevgep111, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_12_20))
begin
memory_controller_write_enable_a = 1'd0;
end
/* resolveResolved: %16*/
/*   %17 = load i32* %scevgep92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_16_26))
begin
memory_controller_write_enable_a = 1'd0;
end
/* resolveResolved: %.critedge2*/
/*   store i32 %baselevel, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB__critedge2_29))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* resolveResolved: %.critedge33*/
/*   store i32 %baselevel, i32* %scevgep100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB__critedge33_14))
begin
memory_controller_in_a = arg_baselevel;
end
/* resolveResolved: %.critedge32*/
/*   store i32 %baselevel, i32* %scevgep112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB__critedge32_17))
begin
memory_controller_in_a = arg_baselevel;
end
/* resolveResolved: %.critedge2*/
/*   store i32 %baselevel, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB__critedge2_29))
begin
memory_controller_in_a = arg_baselevel;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* resolveResolved: %2*/
/*   %3 = load i32* %scevgep111, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_2_4))
begin
memory_controller_size_a = 2'd2;
end
/* resolveResolved: %7*/
/*   %8 = load i32* %scevgep99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_7_11))
begin
memory_controller_size_a = 2'd2;
end
/* resolveResolved: %.critedge33*/
/*   store i32 %baselevel, i32* %scevgep100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB__critedge33_14))
begin
memory_controller_size_a = 2'd2;
end
/* resolveResolved: %.critedge32*/
/*   store i32 %baselevel, i32* %scevgep112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB__critedge32_17))
begin
memory_controller_size_a = 2'd2;
end
/* resolveResolved: %12*/
/*   %13 = load i32* %scevgep111, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_12_20))
begin
memory_controller_size_a = 2'd2;
end
/* resolveResolved: %16*/
/*   %17 = load i32* %scevgep92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB_16_26))
begin
memory_controller_size_a = 2'd2;
end
/* resolveResolved: %.critedge2*/
/*   store i32 %baselevel, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_resolveResolved_BB__critedge2_29))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB__preheader86_i_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB__preheader86_i_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg  llvm_trap_start;
wire  llvm_trap_finish;
reg  llvm_trap_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


llvm_trap llvm_trap_inst (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (llvm_trap_start),
	.finish (llvm_trap_finish)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader86_i_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader86_i_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader86_i_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader86_i_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader86_i_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader86_i_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (llvm_trap_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader86_i_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader86_i_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (llvm_trap_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader86_i_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__preheader86_i_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__preheader86_i_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__preheader86_i_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.preheader86.i*/
/*   call void @llvm.trap()*/
if ((cur_state == LEGUP_F_main_BB__preheader86_i_1))
begin
llvm_trap_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to llvm_trap_start"); $finish; end
end
/* main: %.preheader86.i*/
/*   call void @llvm.trap()*/
if ((cur_state == LEGUP_function_call_2))
begin
llvm_trap_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to llvm_trap_start"); $finish; end
end
end
always @(*) begin
llvm_trap_finish_final = llvm_trap_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %.preheader86.i*/
/*   call void @llvm.trap()*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
