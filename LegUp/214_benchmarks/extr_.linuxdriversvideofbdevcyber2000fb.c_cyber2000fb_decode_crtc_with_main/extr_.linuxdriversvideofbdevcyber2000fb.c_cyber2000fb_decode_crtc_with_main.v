//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:56:21 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module cyber2000fb_decode_crtc
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_hw,
	arg_cfb,
	arg_var
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_0_1 = 6'd1;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_0_2 = 6'd2;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_0_3 = 6'd3;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_0_4 = 6'd4;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_0_5 = 6'd5;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_0_6 = 6'd6;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_0_7 = 6'd7;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_0_8 = 6'd8;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_21_9 = 6'd9;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_21_10 = 6'd10;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_21_11 = 6'd11;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_21_12 = 6'd12;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_21_13 = 6'd13;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_21_14 = 6'd14;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_21_15 = 6'd15;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_21_16 = 6'd16;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_21_17 = 6'd17;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_21_18 = 6'd18;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_21_19 = 6'd19;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_21_20 = 6'd20;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_21_21 = 6'd21;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_21_22 = 6'd22;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_21_23 = 6'd23;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_21_24 = 6'd24;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_21_25 = 6'd25;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_21_26 = 6'd26;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_21_27 = 6'd27;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_66_28 = 6'd28;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_66_29 = 6'd29;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_66_30 = 6'd30;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_66_31 = 6'd31;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_66_32 = 6'd32;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_66_33 = 6'd33;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_66_34 = 6'd34;
parameter [5:0] LEGUP_F_cyber2000fb_decode_crtc_BB_116_35 = 6'd35;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_hw;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_cfb;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_var;
reg [5:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_0_1_reg;
reg [31:0] cyber2000fb_decode_crtc_0_2;
reg [31:0] cyber2000fb_decode_crtc_0_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_0_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_0_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_0_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_0_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_0_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_0_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_0_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_0_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_0_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_0_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_0_9_reg;
reg [31:0] cyber2000fb_decode_crtc_0_10;
reg [31:0] cyber2000fb_decode_crtc_0_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_0_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_0_11_reg;
reg [31:0] cyber2000fb_decode_crtc_0_12;
reg [31:0] cyber2000fb_decode_crtc_0_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_0_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_0_13_reg;
reg [31:0] cyber2000fb_decode_crtc_0_14;
reg [31:0] cyber2000fb_decode_crtc_0_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_0_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_0_15_reg;
reg [31:0] cyber2000fb_decode_crtc_0_16;
reg [31:0] cyber2000fb_decode_crtc_0_16_reg;
reg [31:0] cyber2000fb_decode_crtc_0_17;
reg [31:0] cyber2000fb_decode_crtc_0_17_reg;
reg [31:0] cyber2000fb_decode_crtc_0_18;
reg [31:0] cyber2000fb_decode_crtc_0_18_reg;
reg [31:0] cyber2000fb_decode_crtc_0_19;
reg [31:0] cyber2000fb_decode_crtc_0_19_reg;
reg  cyber2000fb_decode_crtc_0_20;
reg  cyber2000fb_decode_crtc_0_20_reg;
reg [31:0] cyber2000fb_decode_crtc_21_22;
reg [31:0] cyber2000fb_decode_crtc_21_22_reg;
reg [31:0] cyber2000fb_decode_crtc_21_23;
reg [31:0] cyber2000fb_decode_crtc_21_23_reg;
reg [31:0] cyber2000fb_decode_crtc_21_24;
reg [31:0] cyber2000fb_decode_crtc_21_24_reg;
reg [31:0] cyber2000fb_decode_crtc_21_25;
reg [31:0] cyber2000fb_decode_crtc_21_25_reg;
reg [31:0] cyber2000fb_decode_crtc_21_26;
reg [31:0] cyber2000fb_decode_crtc_21_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_21_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_21_27_reg;
reg [31:0] cyber2000fb_decode_crtc_21_28;
reg [31:0] cyber2000fb_decode_crtc_21_28_reg;
reg [31:0] cyber2000fb_decode_crtc_21_29;
reg [31:0] cyber2000fb_decode_crtc_21_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_21_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_21_30_reg;
reg [31:0] cyber2000fb_decode_crtc_21_31;
reg [31:0] cyber2000fb_decode_crtc_21_31_reg;
reg [31:0] cyber2000fb_decode_crtc_21_32;
reg [31:0] cyber2000fb_decode_crtc_21_32_reg;
reg [31:0] cyber2000fb_decode_crtc_21_33;
reg [31:0] cyber2000fb_decode_crtc_21_33_reg;
reg [31:0] cyber2000fb_decode_crtc_21_34;
reg [31:0] cyber2000fb_decode_crtc_21_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_21_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_21_35_reg;
reg [31:0] cyber2000fb_decode_crtc_21_36;
reg [31:0] cyber2000fb_decode_crtc_21_36_reg;
reg [31:0] cyber2000fb_decode_crtc_21_37;
reg [31:0] cyber2000fb_decode_crtc_21_37_reg;
reg [31:0] cyber2000fb_decode_crtc_21_38;
reg [31:0] cyber2000fb_decode_crtc_21_38_reg;
reg [31:0] cyber2000fb_decode_crtc_21_39;
reg [31:0] cyber2000fb_decode_crtc_21_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_21_40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_21_40_reg;
reg [31:0] cyber2000fb_decode_crtc_21_41;
reg [31:0] cyber2000fb_decode_crtc_21_41_reg;
reg [31:0] cyber2000fb_decode_crtc_21_42;
reg [31:0] cyber2000fb_decode_crtc_21_42_reg;
reg [31:0] cyber2000fb_decode_crtc_21_43;
reg [31:0] cyber2000fb_decode_crtc_21_43_reg;
reg [31:0] cyber2000fb_decode_crtc_21_44;
reg [31:0] cyber2000fb_decode_crtc_21_44_reg;
reg [31:0] cyber2000fb_decode_crtc_21_45;
reg [31:0] cyber2000fb_decode_crtc_21_45_reg;
reg [31:0] cyber2000fb_decode_crtc_21_46;
reg [31:0] cyber2000fb_decode_crtc_21_46_reg;
reg [31:0] cyber2000fb_decode_crtc_21_47;
reg [31:0] cyber2000fb_decode_crtc_21_47_reg;
reg [31:0] cyber2000fb_decode_crtc_21_48;
reg [31:0] cyber2000fb_decode_crtc_21_48_reg;
reg [31:0] cyber2000fb_decode_crtc_21_49;
reg [31:0] cyber2000fb_decode_crtc_21_49_reg;
reg [31:0] cyber2000fb_decode_crtc_21_50;
reg [31:0] cyber2000fb_decode_crtc_21_50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_21_51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_21_51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_21_52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_21_52_reg;
reg [31:0] cyber2000fb_decode_crtc_21_53;
reg [31:0] cyber2000fb_decode_crtc_21_53_reg;
reg [31:0] cyber2000fb_decode_crtc_21_54;
reg [31:0] cyber2000fb_decode_crtc_21_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_21_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_21_55_reg;
reg [31:0] cyber2000fb_decode_crtc_21_56;
reg [31:0] cyber2000fb_decode_crtc_21_56_reg;
reg [31:0] cyber2000fb_decode_crtc_21_57;
reg [31:0] cyber2000fb_decode_crtc_21_57_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_21_58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_21_58_reg;
reg [31:0] cyber2000fb_decode_crtc_21_59;
reg [31:0] cyber2000fb_decode_crtc_21_59_reg;
reg [31:0] cyber2000fb_decode_crtc_21_60;
reg [31:0] cyber2000fb_decode_crtc_21_60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_21_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_21_61_reg;
reg [31:0] cyber2000fb_decode_crtc_21_62;
reg [31:0] cyber2000fb_decode_crtc_21_62_reg;
reg [31:0] cyber2000fb_decode_crtc_21_63;
reg [31:0] cyber2000fb_decode_crtc_21_63_reg;
reg [31:0] cyber2000fb_decode_crtc_21_64;
reg [31:0] cyber2000fb_decode_crtc_21_64_reg;
reg  cyber2000fb_decode_crtc_21_65;
reg  cyber2000fb_decode_crtc_21_65_reg;
reg [31:0] cyber2000fb_decode_crtc_66_67;
reg [31:0] cyber2000fb_decode_crtc_66_67_reg;
reg [31:0] cyber2000fb_decode_crtc_66_68;
reg [31:0] cyber2000fb_decode_crtc_66_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_66_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_66_69_reg;
reg [31:0] cyber2000fb_decode_crtc_66_70;
reg [31:0] cyber2000fb_decode_crtc_66_70_reg;
reg [31:0] cyber2000fb_decode_crtc_66_71;
reg [31:0] cyber2000fb_decode_crtc_66_71_reg;
reg [31:0] cyber2000fb_decode_crtc_66_72;
reg [31:0] cyber2000fb_decode_crtc_66_72_reg;
reg [31:0] cyber2000fb_decode_crtc_66_73;
reg [31:0] cyber2000fb_decode_crtc_66_73_reg;
reg [31:0] cyber2000fb_decode_crtc_66_74;
reg [31:0] cyber2000fb_decode_crtc_66_74_reg;
reg [31:0] cyber2000fb_decode_crtc_66_75;
reg [31:0] cyber2000fb_decode_crtc_66_75_reg;
reg [31:0] cyber2000fb_decode_crtc_66_76;
reg [31:0] cyber2000fb_decode_crtc_66_76_reg;
reg [31:0] cyber2000fb_decode_crtc_66_77;
reg [31:0] cyber2000fb_decode_crtc_66_77_reg;
reg [31:0] cyber2000fb_decode_crtc_66_78;
reg [31:0] cyber2000fb_decode_crtc_66_78_reg;
reg [31:0] cyber2000fb_decode_crtc_66_79;
reg [31:0] cyber2000fb_decode_crtc_66_79_reg;
reg [31:0] cyber2000fb_decode_crtc_66_80;
reg [31:0] cyber2000fb_decode_crtc_66_80_reg;
reg [31:0] cyber2000fb_decode_crtc_66_81;
reg [31:0] cyber2000fb_decode_crtc_66_81_reg;
reg [31:0] cyber2000fb_decode_crtc_66_82;
reg [31:0] cyber2000fb_decode_crtc_66_82_reg;
reg [31:0] cyber2000fb_decode_crtc_66_83;
reg [31:0] cyber2000fb_decode_crtc_66_83_reg;
reg [31:0] cyber2000fb_decode_crtc_66_84;
reg [31:0] cyber2000fb_decode_crtc_66_84_reg;
reg [31:0] cyber2000fb_decode_crtc_66_85;
reg [31:0] cyber2000fb_decode_crtc_66_85_reg;
reg [31:0] cyber2000fb_decode_crtc_66_86;
reg [31:0] cyber2000fb_decode_crtc_66_86_reg;
reg [31:0] cyber2000fb_decode_crtc_66_87;
reg [31:0] cyber2000fb_decode_crtc_66_87_reg;
reg [31:0] cyber2000fb_decode_crtc_66_88;
reg [31:0] cyber2000fb_decode_crtc_66_88_reg;
reg [31:0] cyber2000fb_decode_crtc_66_89;
reg [31:0] cyber2000fb_decode_crtc_66_89_reg;
reg [31:0] cyber2000fb_decode_crtc_66_90;
reg [31:0] cyber2000fb_decode_crtc_66_90_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_66_91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_66_91_reg;
reg [31:0] cyber2000fb_decode_crtc_66_92;
reg [31:0] cyber2000fb_decode_crtc_66_92_reg;
reg [31:0] cyber2000fb_decode_crtc_66_93;
reg [31:0] cyber2000fb_decode_crtc_66_93_reg;
reg [31:0] cyber2000fb_decode_crtc_66_94;
reg [31:0] cyber2000fb_decode_crtc_66_94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_66_95;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_66_95_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_66_96;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_66_96_reg;
reg [31:0] cyber2000fb_decode_crtc_66_97;
reg [31:0] cyber2000fb_decode_crtc_66_97_reg;
reg [31:0] cyber2000fb_decode_crtc_66_98;
reg [31:0] cyber2000fb_decode_crtc_66_98_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_66_99;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_66_99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_66_100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_66_100_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_66_101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_66_101_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_66_102;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_66_102_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_66_103;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_66_103_reg;
reg [31:0] cyber2000fb_decode_crtc_66_104;
reg [31:0] cyber2000fb_decode_crtc_66_104_reg;
reg [31:0] cyber2000fb_decode_crtc_66_105;
reg [31:0] cyber2000fb_decode_crtc_66_105_reg;
reg [31:0] cyber2000fb_decode_crtc_66_106;
reg [31:0] cyber2000fb_decode_crtc_66_106_reg;
reg [31:0] cyber2000fb_decode_crtc_66_107;
reg [31:0] cyber2000fb_decode_crtc_66_107_reg;
reg [31:0] cyber2000fb_decode_crtc_66_108;
reg [31:0] cyber2000fb_decode_crtc_66_108_reg;
reg [31:0] cyber2000fb_decode_crtc_66_109;
reg [31:0] cyber2000fb_decode_crtc_66_109_reg;
reg [31:0] cyber2000fb_decode_crtc_66_110;
reg [31:0] cyber2000fb_decode_crtc_66_110_reg;
reg [31:0] cyber2000fb_decode_crtc_66_111;
reg [31:0] cyber2000fb_decode_crtc_66_111_reg;
reg [31:0] cyber2000fb_decode_crtc_66_112;
reg [31:0] cyber2000fb_decode_crtc_66_112_reg;
reg [31:0] cyber2000fb_decode_crtc_66_113;
reg [31:0] cyber2000fb_decode_crtc_66_113_reg;
reg [31:0] cyber2000fb_decode_crtc_66_114;
reg [31:0] cyber2000fb_decode_crtc_66_114_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_66_115;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_66_115_reg;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_8) & (memory_controller_waitrequest == 1'd0)) & (cyber2000fb_decode_crtc_0_20 == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_116_35;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_116_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_8) & (memory_controller_waitrequest == 1'd0)) & (cyber2000fb_decode_crtc_0_20 == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_9;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_9;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_10;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_10;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_11;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_11;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_12;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_12;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_13;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_13;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_14;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_14;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_15;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_15;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_16;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_16;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_17;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_17;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_18;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_18;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_19;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_19;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_20;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_20;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_21;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_21;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_22;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_22;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_23;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_23;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_24;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_24;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_25;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_25;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_26;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_26;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_27;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_21_27;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_21_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_27) & (memory_controller_waitrequest == 1'd0)) & (cyber2000fb_decode_crtc_21_65 == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_116_35;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_116_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_27) & (memory_controller_waitrequest == 1'd0)) & (cyber2000fb_decode_crtc_21_65 == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_66_28;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_66_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_66_28;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_66_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_66_29;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_66_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_66_29;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_66_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_66_30;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_66_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_66_30;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_66_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_66_31;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_66_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_66_31;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_66_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_66_32;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_66_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_66_32;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_66_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_66_33;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_66_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_66_33;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_66_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_66_34;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_66_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_66_34;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_66_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_116_35;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_116_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_116_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_cyber2000fb_decode_crtc_BB_116_35;
if (reset == 1'b0 && ^(LEGUP_F_cyber2000fb_decode_crtc_BB_116_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_116_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 6'd0;
if (reset == 1'b0 && ^(6'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %1 = getelementptr inbounds %struct.par_info* %hw, i32 0, i32 1*/
begin
cyber2000fb_decode_crtc_0_1 = (arg_hw + 4);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %1 = getelementptr inbounds %struct.par_info* %hw, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_1))
begin
cyber2000fb_decode_crtc_0_1_reg <= cyber2000fb_decode_crtc_0_1;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_0_1_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
begin
cyber2000fb_decode_crtc_0_2 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_3))
begin
cyber2000fb_decode_crtc_0_2_reg <= cyber2000fb_decode_crtc_0_2;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_0_2_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %3 = getelementptr inbounds %struct.par_info* %hw, i32 0, i32 0*/
begin
cyber2000fb_decode_crtc_0_3 = arg_hw;
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %3 = getelementptr inbounds %struct.par_info* %hw, i32 0, i32 0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_1))
begin
cyber2000fb_decode_crtc_0_3_reg <= cyber2000fb_decode_crtc_0_3;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_0_3_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %4 = load i32** %3, align 4, !tbaa !3*/
begin
cyber2000fb_decode_crtc_0_4 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %4 = load i32** %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_3))
begin
cyber2000fb_decode_crtc_0_4_reg <= cyber2000fb_decode_crtc_0_4;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_0_4_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %5 = getelementptr inbounds i32* %4, i32 13*/
begin
cyber2000fb_decode_crtc_0_5 = (cyber2000fb_decode_crtc_0_4 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %5 = getelementptr inbounds i32* %4, i32 13*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_3))
begin
cyber2000fb_decode_crtc_0_5_reg <= cyber2000fb_decode_crtc_0_5;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_0_5_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %6 = getelementptr inbounds i32* %4, i32 17*/
begin
cyber2000fb_decode_crtc_0_6 = (cyber2000fb_decode_crtc_0_4 + (4 * 32'd17));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %6 = getelementptr inbounds i32* %4, i32 17*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_3))
begin
cyber2000fb_decode_crtc_0_6_reg <= cyber2000fb_decode_crtc_0_6;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_0_6_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %7 = getelementptr inbounds i32* %4, i32 14*/
begin
cyber2000fb_decode_crtc_0_7 = (cyber2000fb_decode_crtc_0_4 + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %7 = getelementptr inbounds i32* %4, i32 14*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_3))
begin
cyber2000fb_decode_crtc_0_7_reg <= cyber2000fb_decode_crtc_0_7;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_0_7_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %8 = getelementptr inbounds i32* %4, i32 8*/
begin
cyber2000fb_decode_crtc_0_8 = (cyber2000fb_decode_crtc_0_4 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %8 = getelementptr inbounds i32* %4, i32 8*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_3))
begin
cyber2000fb_decode_crtc_0_8_reg <= cyber2000fb_decode_crtc_0_8;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_0_8_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %9 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 0*/
begin
cyber2000fb_decode_crtc_0_9 = arg_var;
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %9 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_1))
begin
cyber2000fb_decode_crtc_0_9_reg <= cyber2000fb_decode_crtc_0_9;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_0_9_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !0*/
begin
cyber2000fb_decode_crtc_0_10 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_7))
begin
cyber2000fb_decode_crtc_0_10_reg <= cyber2000fb_decode_crtc_0_10;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_0_10_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %11 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 1*/
begin
cyber2000fb_decode_crtc_0_11 = (arg_var + 4);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %11 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 1*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_1))
begin
cyber2000fb_decode_crtc_0_11_reg <= cyber2000fb_decode_crtc_0_11;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_0_11_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %12 = load i32* %11, align 4, !tbaa !0*/
begin
cyber2000fb_decode_crtc_0_12 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %12 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_7))
begin
cyber2000fb_decode_crtc_0_12_reg <= cyber2000fb_decode_crtc_0_12;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_0_12_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %13 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 2*/
begin
cyber2000fb_decode_crtc_0_13 = (arg_var + 8);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %13 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 2*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_1))
begin
cyber2000fb_decode_crtc_0_13_reg <= cyber2000fb_decode_crtc_0_13;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_0_13_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %14 = load i32* %13, align 4, !tbaa !0*/
begin
cyber2000fb_decode_crtc_0_14 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %14 = load i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_8))
begin
cyber2000fb_decode_crtc_0_14_reg <= cyber2000fb_decode_crtc_0_14;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_0_14_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %15 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 3*/
begin
cyber2000fb_decode_crtc_0_15 = (arg_var + 12);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %15 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 3*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_1))
begin
cyber2000fb_decode_crtc_0_15_reg <= cyber2000fb_decode_crtc_0_15;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_0_15_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %16 = load i32* %15, align 4, !tbaa !0*/
begin
cyber2000fb_decode_crtc_0_16 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %16 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_8))
begin
cyber2000fb_decode_crtc_0_16_reg <= cyber2000fb_decode_crtc_0_16;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_0_16_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %17 = add i32 %12, %10*/
begin
cyber2000fb_decode_crtc_0_17 = (cyber2000fb_decode_crtc_0_12 + cyber2000fb_decode_crtc_0_10);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %17 = add i32 %12, %10*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_7))
begin
cyber2000fb_decode_crtc_0_17_reg <= cyber2000fb_decode_crtc_0_17;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_0_17_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %18 = add i32 %17, %14*/
begin
cyber2000fb_decode_crtc_0_18 = (cyber2000fb_decode_crtc_0_17_reg + cyber2000fb_decode_crtc_0_14);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %18 = add i32 %17, %14*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_8))
begin
cyber2000fb_decode_crtc_0_18_reg <= cyber2000fb_decode_crtc_0_18;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_0_18_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %19 = add i32 %18, %16*/
begin
cyber2000fb_decode_crtc_0_19 = (cyber2000fb_decode_crtc_0_18 + cyber2000fb_decode_crtc_0_16);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %19 = add i32 %18, %16*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_8))
begin
cyber2000fb_decode_crtc_0_19_reg <= cyber2000fb_decode_crtc_0_19;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_0_19_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %20 = icmp sgt i32 %19, 2080*/
begin
cyber2000fb_decode_crtc_0_20 = ($signed(cyber2000fb_decode_crtc_0_19) > $signed(32'd2080));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %0*/
/*   %20 = icmp sgt i32 %19, 2080*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_8))
begin
cyber2000fb_decode_crtc_0_20_reg <= cyber2000fb_decode_crtc_0_20;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_0_20_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %22 = ashr i32 %19, 3*/
begin
cyber2000fb_decode_crtc_21_22 = ($signed(cyber2000fb_decode_crtc_0_19_reg) >>> 32'd3);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %22 = ashr i32 %19, 3*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_9))
begin
cyber2000fb_decode_crtc_21_22_reg <= cyber2000fb_decode_crtc_21_22;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_22_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %23 = add nsw i32 %22, -5*/
begin
cyber2000fb_decode_crtc_21_23 = (cyber2000fb_decode_crtc_21_22 + -32'd5);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %23 = add nsw i32 %22, -5*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_9))
begin
cyber2000fb_decode_crtc_21_23_reg <= cyber2000fb_decode_crtc_21_23;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_23_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %24 = load i32* %9, align 4, !tbaa !0*/
begin
cyber2000fb_decode_crtc_21_24 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %24 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_12))
begin
cyber2000fb_decode_crtc_21_24_reg <= cyber2000fb_decode_crtc_21_24;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_24_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %25 = ashr i32 %24, 3*/
begin
cyber2000fb_decode_crtc_21_25 = ($signed(cyber2000fb_decode_crtc_21_24) >>> 32'd3);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %25 = ashr i32 %24, 3*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_12))
begin
cyber2000fb_decode_crtc_21_25_reg <= cyber2000fb_decode_crtc_21_25;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_25_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %26 = add nsw i32 %25, -1*/
begin
cyber2000fb_decode_crtc_21_26 = (cyber2000fb_decode_crtc_21_25 + -32'd1);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %26 = add nsw i32 %25, -1*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_12))
begin
cyber2000fb_decode_crtc_21_26_reg <= cyber2000fb_decode_crtc_21_26;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_26_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %27 = getelementptr inbounds i32* %4, i32 1*/
begin
cyber2000fb_decode_crtc_21_27 = (cyber2000fb_decode_crtc_0_4_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %27 = getelementptr inbounds i32* %4, i32 1*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_9))
begin
cyber2000fb_decode_crtc_21_27_reg <= cyber2000fb_decode_crtc_21_27;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_27_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %28 = load i32* %9, align 4, !tbaa !0*/
begin
cyber2000fb_decode_crtc_21_28 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %28 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_15))
begin
cyber2000fb_decode_crtc_21_28_reg <= cyber2000fb_decode_crtc_21_28;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_28_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %29 = ashr i32 %28, 3*/
begin
cyber2000fb_decode_crtc_21_29 = ($signed(cyber2000fb_decode_crtc_21_28) >>> 32'd3);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %29 = ashr i32 %28, 3*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_15))
begin
cyber2000fb_decode_crtc_21_29_reg <= cyber2000fb_decode_crtc_21_29;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_29_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %30 = getelementptr inbounds i32* %4, i32 2*/
begin
cyber2000fb_decode_crtc_21_30 = (cyber2000fb_decode_crtc_0_4_reg + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %30 = getelementptr inbounds i32* %4, i32 2*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_9))
begin
cyber2000fb_decode_crtc_21_30_reg <= cyber2000fb_decode_crtc_21_30;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_30_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %31 = load i32* %9, align 4, !tbaa !0*/
begin
cyber2000fb_decode_crtc_21_31 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %31 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_18))
begin
cyber2000fb_decode_crtc_21_31_reg <= cyber2000fb_decode_crtc_21_31;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_31_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %32 = load i32* %11, align 4, !tbaa !0*/
begin
cyber2000fb_decode_crtc_21_32 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %32 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_18))
begin
cyber2000fb_decode_crtc_21_32_reg <= cyber2000fb_decode_crtc_21_32;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_32_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %33 = add nsw i32 %32, %31*/
begin
cyber2000fb_decode_crtc_21_33 = (cyber2000fb_decode_crtc_21_32 + cyber2000fb_decode_crtc_21_31);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %33 = add nsw i32 %32, %31*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_18))
begin
cyber2000fb_decode_crtc_21_33_reg <= cyber2000fb_decode_crtc_21_33;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_33_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %34 = ashr i32 %33, 3*/
begin
cyber2000fb_decode_crtc_21_34 = ($signed(cyber2000fb_decode_crtc_21_33) >>> 32'd3);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %34 = ashr i32 %33, 3*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_18))
begin
cyber2000fb_decode_crtc_21_34_reg <= cyber2000fb_decode_crtc_21_34;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_34_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %35 = getelementptr inbounds i32* %4, i32 4*/
begin
cyber2000fb_decode_crtc_21_35 = (cyber2000fb_decode_crtc_0_4_reg + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %35 = getelementptr inbounds i32* %4, i32 4*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_9))
begin
cyber2000fb_decode_crtc_21_35_reg <= cyber2000fb_decode_crtc_21_35;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_35_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %36 = add nsw i32 %19, -32*/
begin
cyber2000fb_decode_crtc_21_36 = (cyber2000fb_decode_crtc_0_19_reg + -32'd32);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %36 = add nsw i32 %19, -32*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_9))
begin
cyber2000fb_decode_crtc_21_36_reg <= cyber2000fb_decode_crtc_21_36;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_36_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %37 = lshr i32 %36, 3*/
begin
cyber2000fb_decode_crtc_21_37 = (cyber2000fb_decode_crtc_21_36 >>> (32'd3 % 32));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %37 = lshr i32 %36, 3*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_9))
begin
cyber2000fb_decode_crtc_21_37_reg <= cyber2000fb_decode_crtc_21_37;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_37_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %38 = and i32 %37, 31*/
begin
cyber2000fb_decode_crtc_21_38 = (cyber2000fb_decode_crtc_21_37 & 32'd31);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %38 = and i32 %37, 31*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_9))
begin
cyber2000fb_decode_crtc_21_38_reg <= cyber2000fb_decode_crtc_21_38;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_38_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %39 = or i32 %38, 128*/
begin
cyber2000fb_decode_crtc_21_39 = (cyber2000fb_decode_crtc_21_38 | 32'd128);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %39 = or i32 %38, 128*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_9))
begin
cyber2000fb_decode_crtc_21_39_reg <= cyber2000fb_decode_crtc_21_39;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_39_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %40 = getelementptr inbounds i32* %4, i32 3*/
begin
cyber2000fb_decode_crtc_21_40 = (cyber2000fb_decode_crtc_0_4_reg + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %40 = getelementptr inbounds i32* %4, i32 3*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_9))
begin
cyber2000fb_decode_crtc_21_40_reg <= cyber2000fb_decode_crtc_21_40;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_40_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %41 = load i32* %9, align 4, !tbaa !0*/
begin
cyber2000fb_decode_crtc_21_41 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %41 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_21))
begin
cyber2000fb_decode_crtc_21_41_reg <= cyber2000fb_decode_crtc_21_41;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_41_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %42 = load i32* %11, align 4, !tbaa !0*/
begin
cyber2000fb_decode_crtc_21_42 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %42 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_21))
begin
cyber2000fb_decode_crtc_21_42_reg <= cyber2000fb_decode_crtc_21_42;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_42_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %43 = load i32* %13, align 4, !tbaa !0*/
begin
cyber2000fb_decode_crtc_21_43 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %43 = load i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_22))
begin
cyber2000fb_decode_crtc_21_43_reg <= cyber2000fb_decode_crtc_21_43;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_43_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %44 = add i32 %42, %41*/
begin
cyber2000fb_decode_crtc_21_44 = (cyber2000fb_decode_crtc_21_42 + cyber2000fb_decode_crtc_21_41);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %44 = add i32 %42, %41*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_21))
begin
cyber2000fb_decode_crtc_21_44_reg <= cyber2000fb_decode_crtc_21_44;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_44_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %45 = add i32 %44, %43*/
begin
cyber2000fb_decode_crtc_21_45 = (cyber2000fb_decode_crtc_21_44_reg + cyber2000fb_decode_crtc_21_43);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %45 = add i32 %44, %43*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_22))
begin
cyber2000fb_decode_crtc_21_45_reg <= cyber2000fb_decode_crtc_21_45;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_45_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %46 = lshr i32 %45, 3*/
begin
cyber2000fb_decode_crtc_21_46 = (cyber2000fb_decode_crtc_21_45 >>> (32'd3 % 32));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %46 = lshr i32 %45, 3*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_22))
begin
cyber2000fb_decode_crtc_21_46_reg <= cyber2000fb_decode_crtc_21_46;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_46_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %47 = and i32 %46, 31*/
begin
cyber2000fb_decode_crtc_21_47 = (cyber2000fb_decode_crtc_21_46 & 32'd31);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %47 = and i32 %46, 31*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_22))
begin
cyber2000fb_decode_crtc_21_47_reg <= cyber2000fb_decode_crtc_21_47;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_47_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %48 = lshr i32 %36, 1*/
begin
cyber2000fb_decode_crtc_21_48 = (cyber2000fb_decode_crtc_21_36 >>> (32'd1 % 32));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %48 = lshr i32 %36, 1*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_9))
begin
cyber2000fb_decode_crtc_21_48_reg <= cyber2000fb_decode_crtc_21_48;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_48_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %49 = and i32 %48, 128*/
begin
cyber2000fb_decode_crtc_21_49 = (cyber2000fb_decode_crtc_21_48 & 32'd128);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %49 = and i32 %48, 128*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_9))
begin
cyber2000fb_decode_crtc_21_49_reg <= cyber2000fb_decode_crtc_21_49;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_49_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %50 = or i32 %47, %49*/
begin
cyber2000fb_decode_crtc_21_50 = (cyber2000fb_decode_crtc_21_47 | cyber2000fb_decode_crtc_21_49_reg);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %50 = or i32 %47, %49*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_22))
begin
cyber2000fb_decode_crtc_21_50_reg <= cyber2000fb_decode_crtc_21_50;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_50_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %51 = getelementptr inbounds i32* %4, i32 5*/
begin
cyber2000fb_decode_crtc_21_51 = (cyber2000fb_decode_crtc_0_4_reg + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %51 = getelementptr inbounds i32* %4, i32 5*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_9))
begin
cyber2000fb_decode_crtc_21_51_reg <= cyber2000fb_decode_crtc_21_51;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_51_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %52 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 4*/
begin
cyber2000fb_decode_crtc_21_52 = (arg_var + 16);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %52 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 4*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_9))
begin
cyber2000fb_decode_crtc_21_52_reg <= cyber2000fb_decode_crtc_21_52;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_52_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %53 = load i32* %52, align 4, !tbaa !0*/
begin
cyber2000fb_decode_crtc_21_53 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %53 = load i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_25))
begin
cyber2000fb_decode_crtc_21_53_reg <= cyber2000fb_decode_crtc_21_53;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_53_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %54 = add nsw i32 %53, -1*/
begin
cyber2000fb_decode_crtc_21_54 = (cyber2000fb_decode_crtc_21_53 + -32'd1);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %54 = add nsw i32 %53, -1*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_25))
begin
cyber2000fb_decode_crtc_21_54_reg <= cyber2000fb_decode_crtc_21_54;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_54_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %55 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 5*/
begin
cyber2000fb_decode_crtc_21_55 = (arg_var + 20);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %55 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 5*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_9))
begin
cyber2000fb_decode_crtc_21_55_reg <= cyber2000fb_decode_crtc_21_55;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_55_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %56 = load i32* %55, align 4, !tbaa !0*/
begin
cyber2000fb_decode_crtc_21_56 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %56 = load i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_25))
begin
cyber2000fb_decode_crtc_21_56_reg <= cyber2000fb_decode_crtc_21_56;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_56_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %57 = add nsw i32 %56, %53*/
begin
cyber2000fb_decode_crtc_21_57 = (cyber2000fb_decode_crtc_21_56 + cyber2000fb_decode_crtc_21_53);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %57 = add nsw i32 %56, %53*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_25))
begin
cyber2000fb_decode_crtc_21_57_reg <= cyber2000fb_decode_crtc_21_57;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_57_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %58 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 6*/
begin
cyber2000fb_decode_crtc_21_58 = (arg_var + 24);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %58 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 6*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_9))
begin
cyber2000fb_decode_crtc_21_58_reg <= cyber2000fb_decode_crtc_21_58;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_58_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
begin
cyber2000fb_decode_crtc_21_59 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_26))
begin
cyber2000fb_decode_crtc_21_59_reg <= cyber2000fb_decode_crtc_21_59;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_59_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %60 = add nsw i32 %57, %59*/
begin
cyber2000fb_decode_crtc_21_60 = (cyber2000fb_decode_crtc_21_57_reg + cyber2000fb_decode_crtc_21_59);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %60 = add nsw i32 %57, %59*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_26))
begin
cyber2000fb_decode_crtc_21_60_reg <= cyber2000fb_decode_crtc_21_60;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_60_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %61 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 7*/
begin
cyber2000fb_decode_crtc_21_61 = (arg_var + 28);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %61 = getelementptr inbounds %struct.fb_var_screeninfo* %var, i32 0, i32 7*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_9))
begin
cyber2000fb_decode_crtc_21_61_reg <= cyber2000fb_decode_crtc_21_61;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_61_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %62 = load i32* %61, align 4, !tbaa !0*/
begin
cyber2000fb_decode_crtc_21_62 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %62 = load i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_26))
begin
cyber2000fb_decode_crtc_21_62_reg <= cyber2000fb_decode_crtc_21_62;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_62_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %63 = add nsw i32 %60, %62*/
begin
cyber2000fb_decode_crtc_21_63 = (cyber2000fb_decode_crtc_21_60 + cyber2000fb_decode_crtc_21_62);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %63 = add nsw i32 %60, %62*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_26))
begin
cyber2000fb_decode_crtc_21_63_reg <= cyber2000fb_decode_crtc_21_63;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_63_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %64 = add nsw i32 %63, -2*/
begin
cyber2000fb_decode_crtc_21_64 = (cyber2000fb_decode_crtc_21_63 + -32'd2);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %64 = add nsw i32 %63, -2*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_26))
begin
cyber2000fb_decode_crtc_21_64_reg <= cyber2000fb_decode_crtc_21_64;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_64_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %65 = icmp sgt i32 %64, 2047*/
begin
cyber2000fb_decode_crtc_21_65 = ($signed(cyber2000fb_decode_crtc_21_64_reg) > $signed(32'd2047));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %21*/
/*   %65 = icmp sgt i32 %64, 2047*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_27))
begin
cyber2000fb_decode_crtc_21_65_reg <= cyber2000fb_decode_crtc_21_65;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_21_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_21_65_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %67 = add nsw i32 %53, 6*/
begin
cyber2000fb_decode_crtc_66_67 = (cyber2000fb_decode_crtc_21_53_reg + 32'd6);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %67 = add nsw i32 %53, 6*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_67_reg <= cyber2000fb_decode_crtc_66_67;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_67_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %68 = add i32 %63, -12*/
begin
cyber2000fb_decode_crtc_66_68 = (cyber2000fb_decode_crtc_21_63_reg + -32'd12);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %68 = add i32 %63, -12*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_68_reg <= cyber2000fb_decode_crtc_66_68;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_68_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %69 = getelementptr inbounds i32* %4, i32 6*/
begin
cyber2000fb_decode_crtc_66_69 = (cyber2000fb_decode_crtc_0_4_reg + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %69 = getelementptr inbounds i32* %4, i32 6*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_69_reg <= cyber2000fb_decode_crtc_66_69;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_69_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %70 = lshr i32 %64, 8*/
begin
cyber2000fb_decode_crtc_66_70 = (cyber2000fb_decode_crtc_21_64_reg >>> (32'd8 % 32));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %70 = lshr i32 %64, 8*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_70_reg <= cyber2000fb_decode_crtc_66_70;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_70_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %71 = and i32 %70, 1*/
begin
cyber2000fb_decode_crtc_66_71 = (cyber2000fb_decode_crtc_66_70 & 32'd1);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %71 = and i32 %70, 1*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_71_reg <= cyber2000fb_decode_crtc_66_71;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_71_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %72 = lshr i32 %54, 7*/
begin
cyber2000fb_decode_crtc_66_72 = (cyber2000fb_decode_crtc_21_54_reg >>> (32'd7 % 32));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %72 = lshr i32 %54, 7*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_72_reg <= cyber2000fb_decode_crtc_66_72;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_72_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %73 = and i32 %72, 2*/
begin
cyber2000fb_decode_crtc_66_73 = (cyber2000fb_decode_crtc_66_72 & 32'd2);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %73 = and i32 %72, 2*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_73_reg <= cyber2000fb_decode_crtc_66_73;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_73_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %74 = lshr i32 %57, 6*/
begin
cyber2000fb_decode_crtc_66_74 = (cyber2000fb_decode_crtc_21_57_reg >>> (32'd6 % 32));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %74 = lshr i32 %57, 6*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_74_reg <= cyber2000fb_decode_crtc_66_74;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_74_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %75 = and i32 %74, 4*/
begin
cyber2000fb_decode_crtc_66_75 = (cyber2000fb_decode_crtc_66_74 & 32'd4);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %75 = and i32 %74, 4*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_75_reg <= cyber2000fb_decode_crtc_66_75;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_75_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %76 = lshr i32 %67, 5*/
begin
cyber2000fb_decode_crtc_66_76 = (cyber2000fb_decode_crtc_66_67 >>> (32'd5 % 32));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %76 = lshr i32 %67, 5*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_76_reg <= cyber2000fb_decode_crtc_66_76;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_76_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %77 = and i32 %76, 8*/
begin
cyber2000fb_decode_crtc_66_77 = (cyber2000fb_decode_crtc_66_76 & 32'd8);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %77 = and i32 %76, 8*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_77_reg <= cyber2000fb_decode_crtc_66_77;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_77_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %78 = lshr i32 %64, 4*/
begin
cyber2000fb_decode_crtc_66_78 = (cyber2000fb_decode_crtc_21_64_reg >>> (32'd4 % 32));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %78 = lshr i32 %64, 4*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_78_reg <= cyber2000fb_decode_crtc_66_78;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_78_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %79 = and i32 %78, 32*/
begin
cyber2000fb_decode_crtc_66_79 = (cyber2000fb_decode_crtc_66_78 & 32'd32);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %79 = and i32 %78, 32*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_79_reg <= cyber2000fb_decode_crtc_66_79;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_79_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %80 = lshr i32 %54, 3*/
begin
cyber2000fb_decode_crtc_66_80 = (cyber2000fb_decode_crtc_21_54_reg >>> (32'd3 % 32));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %80 = lshr i32 %54, 3*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_80_reg <= cyber2000fb_decode_crtc_66_80;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_80_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %81 = and i32 %80, 64*/
begin
cyber2000fb_decode_crtc_66_81 = (cyber2000fb_decode_crtc_66_80 & 32'd64);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %81 = and i32 %80, 64*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_81_reg <= cyber2000fb_decode_crtc_66_81;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_81_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %82 = lshr i32 %57, 2*/
begin
cyber2000fb_decode_crtc_66_82 = (cyber2000fb_decode_crtc_21_57_reg >>> (32'd2 % 32));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %82 = lshr i32 %57, 2*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_82_reg <= cyber2000fb_decode_crtc_66_82;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_82_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %83 = and i32 %82, 128*/
begin
cyber2000fb_decode_crtc_66_83 = (cyber2000fb_decode_crtc_66_82 & 32'd128);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %83 = and i32 %82, 128*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_83_reg <= cyber2000fb_decode_crtc_66_83;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_83_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %84 = or i32 %81, %77*/
begin
cyber2000fb_decode_crtc_66_84 = (cyber2000fb_decode_crtc_66_81 | cyber2000fb_decode_crtc_66_77);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %84 = or i32 %81, %77*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_84_reg <= cyber2000fb_decode_crtc_66_84;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_84_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %85 = or i32 %84, %73*/
begin
cyber2000fb_decode_crtc_66_85 = (cyber2000fb_decode_crtc_66_84 | cyber2000fb_decode_crtc_66_73);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %85 = or i32 %84, %73*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_85_reg <= cyber2000fb_decode_crtc_66_85;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_85_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %86 = or i32 %85, %83*/
begin
cyber2000fb_decode_crtc_66_86 = (cyber2000fb_decode_crtc_66_85 | cyber2000fb_decode_crtc_66_83);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %86 = or i32 %85, %83*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_86_reg <= cyber2000fb_decode_crtc_66_86;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_86_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %87 = or i32 %86, %75*/
begin
cyber2000fb_decode_crtc_66_87 = (cyber2000fb_decode_crtc_66_86 | cyber2000fb_decode_crtc_66_75);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %87 = or i32 %86, %75*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_87_reg <= cyber2000fb_decode_crtc_66_87;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_87_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %88 = or i32 %87, %79*/
begin
cyber2000fb_decode_crtc_66_88 = (cyber2000fb_decode_crtc_66_87 | cyber2000fb_decode_crtc_66_79);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %88 = or i32 %87, %79*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_88_reg <= cyber2000fb_decode_crtc_66_88;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_88_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %89 = or i32 %88, %71*/
begin
cyber2000fb_decode_crtc_66_89 = (cyber2000fb_decode_crtc_66_88 | cyber2000fb_decode_crtc_66_71);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %89 = or i32 %88, %71*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_89_reg <= cyber2000fb_decode_crtc_66_89;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_89_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %90 = or i32 %89, 16*/
begin
cyber2000fb_decode_crtc_66_90 = (cyber2000fb_decode_crtc_66_89 | 32'd16);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %90 = or i32 %89, 16*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_90_reg <= cyber2000fb_decode_crtc_66_90;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_90_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %91 = getelementptr inbounds i32* %4, i32 7*/
begin
cyber2000fb_decode_crtc_66_91 = (cyber2000fb_decode_crtc_0_4_reg + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %91 = getelementptr inbounds i32* %4, i32 7*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_91_reg <= cyber2000fb_decode_crtc_66_91;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_91_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %92 = lshr i32 %67, 4*/
begin
cyber2000fb_decode_crtc_66_92 = (cyber2000fb_decode_crtc_66_67 >>> (32'd4 % 32));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %92 = lshr i32 %67, 4*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_92_reg <= cyber2000fb_decode_crtc_66_92;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_92_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %93 = and i32 %92, 32*/
begin
cyber2000fb_decode_crtc_66_93 = (cyber2000fb_decode_crtc_66_92 & 32'd32);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %93 = and i32 %92, 32*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_93_reg <= cyber2000fb_decode_crtc_66_93;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_93_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %94 = or i32 %93, 64*/
begin
cyber2000fb_decode_crtc_66_94 = (cyber2000fb_decode_crtc_66_93 | 32'd64);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %94 = or i32 %93, 64*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_94_reg <= cyber2000fb_decode_crtc_66_94;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_94_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %95 = getelementptr inbounds i32* %4, i32 9*/
begin
cyber2000fb_decode_crtc_66_95 = (cyber2000fb_decode_crtc_0_4_reg + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %95 = getelementptr inbounds i32* %4, i32 9*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_95_reg <= cyber2000fb_decode_crtc_66_95;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_95_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %96 = getelementptr inbounds i32* %4, i32 10*/
begin
cyber2000fb_decode_crtc_66_96 = (cyber2000fb_decode_crtc_0_4_reg + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %96 = getelementptr inbounds i32* %4, i32 10*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_96_reg <= cyber2000fb_decode_crtc_66_96;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_96_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %97 = and i32 %60, 15*/
begin
cyber2000fb_decode_crtc_66_97 = (cyber2000fb_decode_crtc_21_60_reg & 32'd15);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %97 = and i32 %60, 15*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_97_reg <= cyber2000fb_decode_crtc_66_97;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_97_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %98 = or i32 %97, 128*/
begin
cyber2000fb_decode_crtc_66_98 = (cyber2000fb_decode_crtc_66_97 | 32'd128);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %98 = or i32 %97, 128*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_98_reg <= cyber2000fb_decode_crtc_66_98;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_98_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %99 = getelementptr inbounds i32* %4, i32 11*/
begin
cyber2000fb_decode_crtc_66_99 = (cyber2000fb_decode_crtc_0_4_reg + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %99 = getelementptr inbounds i32* %4, i32 11*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_99_reg <= cyber2000fb_decode_crtc_66_99;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_99_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %100 = getelementptr inbounds i32* %4, i32 12*/
begin
cyber2000fb_decode_crtc_66_100 = (cyber2000fb_decode_crtc_0_4_reg + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %100 = getelementptr inbounds i32* %4, i32 12*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_100_reg <= cyber2000fb_decode_crtc_66_100;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_100_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %101 = getelementptr inbounds i32* %4, i32 15*/
begin
cyber2000fb_decode_crtc_66_101 = (cyber2000fb_decode_crtc_0_4_reg + (4 * 32'd15));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %101 = getelementptr inbounds i32* %4, i32 15*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_101_reg <= cyber2000fb_decode_crtc_66_101;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_101_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %102 = getelementptr inbounds i32* %4, i32 16*/
begin
cyber2000fb_decode_crtc_66_102 = (cyber2000fb_decode_crtc_0_4_reg + (4 * 32'd16));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %102 = getelementptr inbounds i32* %4, i32 16*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_102_reg <= cyber2000fb_decode_crtc_66_102;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_102_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %103 = getelementptr inbounds i32* %4, i32 18*/
begin
cyber2000fb_decode_crtc_66_103 = (cyber2000fb_decode_crtc_0_4_reg + (4 * 32'd18));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %103 = getelementptr inbounds i32* %4, i32 18*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_103_reg <= cyber2000fb_decode_crtc_66_103;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_103_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %104 = lshr i32 %64, 10*/
begin
cyber2000fb_decode_crtc_66_104 = (cyber2000fb_decode_crtc_21_64_reg >>> (32'd10 % 32));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %104 = lshr i32 %64, 10*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_104_reg <= cyber2000fb_decode_crtc_66_104;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_104_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %105 = and i32 %104, 1*/
begin
cyber2000fb_decode_crtc_66_105 = (cyber2000fb_decode_crtc_66_104 & 32'd1);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %105 = and i32 %104, 1*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_105_reg <= cyber2000fb_decode_crtc_66_105;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_105_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %106 = lshr i32 %54, 9*/
begin
cyber2000fb_decode_crtc_66_106 = (cyber2000fb_decode_crtc_21_54_reg >>> (32'd9 % 32));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %106 = lshr i32 %54, 9*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_106_reg <= cyber2000fb_decode_crtc_66_106;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_106_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %107 = and i32 %106, 2*/
begin
cyber2000fb_decode_crtc_66_107 = (cyber2000fb_decode_crtc_66_106 & 32'd2);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %107 = and i32 %106, 2*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_107_reg <= cyber2000fb_decode_crtc_66_107;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_107_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %108 = lshr i32 %57, 8*/
begin
cyber2000fb_decode_crtc_66_108 = (cyber2000fb_decode_crtc_21_57_reg >>> (32'd8 % 32));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %108 = lshr i32 %57, 8*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_108_reg <= cyber2000fb_decode_crtc_66_108;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_108_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %109 = and i32 %108, 4*/
begin
cyber2000fb_decode_crtc_66_109 = (cyber2000fb_decode_crtc_66_108 & 32'd4);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %109 = and i32 %108, 4*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_109_reg <= cyber2000fb_decode_crtc_66_109;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_109_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %110 = lshr i32 %67, 7*/
begin
cyber2000fb_decode_crtc_66_110 = (cyber2000fb_decode_crtc_66_67 >>> (32'd7 % 32));
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %110 = lshr i32 %67, 7*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_110_reg <= cyber2000fb_decode_crtc_66_110;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_110_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %111 = and i32 %110, 8*/
begin
cyber2000fb_decode_crtc_66_111 = (cyber2000fb_decode_crtc_66_110 & 32'd8);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %111 = and i32 %110, 8*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_111_reg <= cyber2000fb_decode_crtc_66_111;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_111_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %112 = or i32 %107, %111*/
begin
cyber2000fb_decode_crtc_66_112 = (cyber2000fb_decode_crtc_66_107 | cyber2000fb_decode_crtc_66_111);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %112 = or i32 %107, %111*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_112_reg <= cyber2000fb_decode_crtc_66_112;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_112_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %113 = or i32 %112, %109*/
begin
cyber2000fb_decode_crtc_66_113 = (cyber2000fb_decode_crtc_66_112 | cyber2000fb_decode_crtc_66_109);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %113 = or i32 %112, %109*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_113_reg <= cyber2000fb_decode_crtc_66_113;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_113_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %114 = or i32 %113, %105*/
begin
cyber2000fb_decode_crtc_66_114 = (cyber2000fb_decode_crtc_66_113 | cyber2000fb_decode_crtc_66_105);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %114 = or i32 %113, %105*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_114_reg <= cyber2000fb_decode_crtc_66_114;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_114_reg"); $finish; end
end
end
always @(*) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %115 = getelementptr inbounds %struct.par_info* %hw, i32 0, i32 2*/
begin
cyber2000fb_decode_crtc_66_115 = (arg_hw + 8);
end
end
always @(posedge clk) begin
/* cyber2000fb_decode_crtc: %66*/
/*   %115 = getelementptr inbounds %struct.par_info* %hw, i32 0, i32 2*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
cyber2000fb_decode_crtc_66_115_reg <= cyber2000fb_decode_crtc_66_115;
if (reset == 1'b0 && ^(cyber2000fb_decode_crtc_66_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_66_115_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* cyber2000fb_decode_crtc: %116*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_116_35))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* cyber2000fb_decode_crtc: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %0*/
/*   store i32 %2, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_3))
begin
memory_controller_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %0*/
/*   store i32 0, i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_4))
begin
memory_controller_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_5))
begin
memory_controller_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %0*/
/*   %14 = load i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_6))
begin
memory_controller_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %24 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_10))
begin
memory_controller_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %26, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_12))
begin
memory_controller_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %28 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_13))
begin
memory_controller_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %31 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_16))
begin
memory_controller_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %34, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_18))
begin
memory_controller_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %41 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_19))
begin
memory_controller_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %43 = load i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_20))
begin
memory_controller_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %50, i32* %51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_22))
begin
memory_controller_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %53 = load i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_23))
begin
memory_controller_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_24))
begin
memory_controller_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %64, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
memory_controller_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %94, i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_29))
begin
memory_controller_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %98, i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_30))
begin
memory_controller_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %67, i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_31))
begin
memory_controller_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %114, i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_33))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* cyber2000fb_decode_crtc: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_1))
begin
memory_controller_address_a = cyber2000fb_decode_crtc_0_1;
end
/* cyber2000fb_decode_crtc: %0*/
/*   store i32 %2, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_3))
begin
memory_controller_address_a = cyber2000fb_decode_crtc_0_5;
end
/* cyber2000fb_decode_crtc: %0*/
/*   store i32 0, i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_4))
begin
memory_controller_address_a = cyber2000fb_decode_crtc_0_7_reg;
end
/* cyber2000fb_decode_crtc: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_5))
begin
memory_controller_address_a = cyber2000fb_decode_crtc_0_9_reg;
end
/* cyber2000fb_decode_crtc: %0*/
/*   %14 = load i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_6))
begin
memory_controller_address_a = cyber2000fb_decode_crtc_0_13_reg;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %24 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_10))
begin
memory_controller_address_a = cyber2000fb_decode_crtc_0_9_reg;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %26, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_12))
begin
memory_controller_address_a = cyber2000fb_decode_crtc_21_27_reg;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %28 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_13))
begin
memory_controller_address_a = cyber2000fb_decode_crtc_0_9_reg;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %31 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_16))
begin
memory_controller_address_a = cyber2000fb_decode_crtc_0_9_reg;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %34, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_18))
begin
memory_controller_address_a = cyber2000fb_decode_crtc_21_35_reg;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %41 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_19))
begin
memory_controller_address_a = cyber2000fb_decode_crtc_0_9_reg;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %43 = load i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_20))
begin
memory_controller_address_a = cyber2000fb_decode_crtc_0_13_reg;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %50, i32* %51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_22))
begin
memory_controller_address_a = cyber2000fb_decode_crtc_21_51_reg;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %53 = load i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_23))
begin
memory_controller_address_a = cyber2000fb_decode_crtc_21_52_reg;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_24))
begin
memory_controller_address_a = cyber2000fb_decode_crtc_21_58_reg;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %64, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
memory_controller_address_a = cyber2000fb_decode_crtc_66_69;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %94, i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_29))
begin
memory_controller_address_a = cyber2000fb_decode_crtc_66_95_reg;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %98, i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_30))
begin
memory_controller_address_a = cyber2000fb_decode_crtc_66_99_reg;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %67, i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_31))
begin
memory_controller_address_a = cyber2000fb_decode_crtc_66_101_reg;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %114, i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_33))
begin
memory_controller_address_a = cyber2000fb_decode_crtc_66_115_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cyber2000fb_decode_crtc: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cyber2000fb_decode_crtc: %0*/
/*   store i32 %2, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_3))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %0*/
/*   store i32 0, i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_4))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_5))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cyber2000fb_decode_crtc: %0*/
/*   %14 = load i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_6))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %24 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_10))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %26, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_12))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %28 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_13))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %31 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_16))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %34, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_18))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %41 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_19))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %43 = load i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_20))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %50, i32* %51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_22))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %53 = load i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_23))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_24))
begin
memory_controller_write_enable_a = 1'd0;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %64, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %94, i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_29))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %98, i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_30))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %67, i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_31))
begin
memory_controller_write_enable_a = 1'd1;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %114, i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_33))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* cyber2000fb_decode_crtc: %0*/
/*   store i32 %2, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_3))
begin
memory_controller_in_a = cyber2000fb_decode_crtc_0_2;
end
/* cyber2000fb_decode_crtc: %0*/
/*   store i32 0, i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_4))
begin
memory_controller_in_a = 32'd0;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %26, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_12))
begin
memory_controller_in_a = cyber2000fb_decode_crtc_21_26;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %34, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_18))
begin
memory_controller_in_a = cyber2000fb_decode_crtc_21_34;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %50, i32* %51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_22))
begin
memory_controller_in_a = cyber2000fb_decode_crtc_21_50;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %64, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
memory_controller_in_a = cyber2000fb_decode_crtc_21_64_reg;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %94, i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_29))
begin
memory_controller_in_a = cyber2000fb_decode_crtc_66_94_reg;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %98, i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_30))
begin
memory_controller_in_a = cyber2000fb_decode_crtc_66_98_reg;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %67, i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_31))
begin
memory_controller_in_a = cyber2000fb_decode_crtc_66_67_reg;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %114, i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_33))
begin
memory_controller_in_a = cyber2000fb_decode_crtc_66_114_reg;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* cyber2000fb_decode_crtc: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* cyber2000fb_decode_crtc: %0*/
/*   store i32 %2, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_3))
begin
memory_controller_size_a = 2'd2;
end
/* cyber2000fb_decode_crtc: %0*/
/*   store i32 0, i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_4))
begin
memory_controller_size_a = 2'd2;
end
/* cyber2000fb_decode_crtc: %0*/
/*   %10 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_5))
begin
memory_controller_size_a = 2'd2;
end
/* cyber2000fb_decode_crtc: %0*/
/*   %14 = load i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_6))
begin
memory_controller_size_a = 2'd2;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %24 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_10))
begin
memory_controller_size_a = 2'd2;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %26, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_12))
begin
memory_controller_size_a = 2'd2;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %28 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_13))
begin
memory_controller_size_a = 2'd2;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %31 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_16))
begin
memory_controller_size_a = 2'd2;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %34, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_18))
begin
memory_controller_size_a = 2'd2;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %41 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_19))
begin
memory_controller_size_a = 2'd2;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %43 = load i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_20))
begin
memory_controller_size_a = 2'd2;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %50, i32* %51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_22))
begin
memory_controller_size_a = 2'd2;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %53 = load i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_23))
begin
memory_controller_size_a = 2'd2;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_24))
begin
memory_controller_size_a = 2'd2;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %64, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
memory_controller_size_a = 2'd2;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %94, i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_29))
begin
memory_controller_size_a = 2'd2;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %98, i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_30))
begin
memory_controller_size_a = 2'd2;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %67, i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_31))
begin
memory_controller_size_a = 2'd2;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %114, i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_33))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* cyber2000fb_decode_crtc: %0*/
/*   %4 = load i32** %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_1))
begin
memory_controller_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %0*/
/*   store i32 227, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_3))
begin
memory_controller_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %0*/
/*   store i32 0, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_4))
begin
memory_controller_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %0*/
/*   %12 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_5))
begin
memory_controller_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %0*/
/*   %16 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_6))
begin
memory_controller_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %23, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_9))
begin
memory_controller_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %29, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_15))
begin
memory_controller_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %32 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_16))
begin
memory_controller_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %39, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_18))
begin
memory_controller_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %42 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_19))
begin
memory_controller_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %56 = load i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_23))
begin
memory_controller_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %62 = load i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_24))
begin
memory_controller_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %90, i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
memory_controller_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %57, i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_29))
begin
memory_controller_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %54, i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_30))
begin
memory_controller_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %68, i32* %102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_31))
begin
memory_controller_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 255, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_32))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* cyber2000fb_decode_crtc: %0*/
/*   %4 = load i32** %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_1))
begin
memory_controller_address_b = cyber2000fb_decode_crtc_0_3;
end
/* cyber2000fb_decode_crtc: %0*/
/*   store i32 227, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_3))
begin
memory_controller_address_b = cyber2000fb_decode_crtc_0_6;
end
/* cyber2000fb_decode_crtc: %0*/
/*   store i32 0, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_4))
begin
memory_controller_address_b = cyber2000fb_decode_crtc_0_8_reg;
end
/* cyber2000fb_decode_crtc: %0*/
/*   %12 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_5))
begin
memory_controller_address_b = cyber2000fb_decode_crtc_0_11_reg;
end
/* cyber2000fb_decode_crtc: %0*/
/*   %16 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_6))
begin
memory_controller_address_b = cyber2000fb_decode_crtc_0_15_reg;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %23, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_9))
begin
memory_controller_address_b = cyber2000fb_decode_crtc_0_4_reg;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %29, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_15))
begin
memory_controller_address_b = cyber2000fb_decode_crtc_21_30_reg;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %32 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_16))
begin
memory_controller_address_b = cyber2000fb_decode_crtc_0_11_reg;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %39, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_18))
begin
memory_controller_address_b = cyber2000fb_decode_crtc_21_40_reg;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %42 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_19))
begin
memory_controller_address_b = cyber2000fb_decode_crtc_0_11_reg;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %56 = load i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_23))
begin
memory_controller_address_b = cyber2000fb_decode_crtc_21_55_reg;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %62 = load i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_24))
begin
memory_controller_address_b = cyber2000fb_decode_crtc_21_61_reg;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %90, i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
memory_controller_address_b = cyber2000fb_decode_crtc_66_91;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %57, i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_29))
begin
memory_controller_address_b = cyber2000fb_decode_crtc_66_96_reg;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %54, i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_30))
begin
memory_controller_address_b = cyber2000fb_decode_crtc_66_100_reg;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %68, i32* %102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_31))
begin
memory_controller_address_b = cyber2000fb_decode_crtc_66_102_reg;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 255, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_32))
begin
memory_controller_address_b = cyber2000fb_decode_crtc_66_103_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cyber2000fb_decode_crtc: %0*/
/*   %4 = load i32** %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_1))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cyber2000fb_decode_crtc: %0*/
/*   store i32 227, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_3))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %0*/
/*   store i32 0, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_4))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %0*/
/*   %12 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_5))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cyber2000fb_decode_crtc: %0*/
/*   %16 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_6))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %23, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_9))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %29, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_15))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %32 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_16))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %39, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_18))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %42 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_19))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %56 = load i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_23))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %62 = load i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_24))
begin
memory_controller_write_enable_b = 1'd0;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %90, i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %57, i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_29))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %54, i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_30))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %68, i32* %102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_31))
begin
memory_controller_write_enable_b = 1'd1;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 255, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_32))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* cyber2000fb_decode_crtc: %0*/
/*   store i32 227, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_3))
begin
memory_controller_in_b = 32'd227;
end
/* cyber2000fb_decode_crtc: %0*/
/*   store i32 0, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_4))
begin
memory_controller_in_b = 32'd0;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %23, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_9))
begin
memory_controller_in_b = cyber2000fb_decode_crtc_21_23;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %29, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_15))
begin
memory_controller_in_b = cyber2000fb_decode_crtc_21_29;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %39, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_18))
begin
memory_controller_in_b = cyber2000fb_decode_crtc_21_39_reg;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %90, i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
memory_controller_in_b = cyber2000fb_decode_crtc_66_90;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %57, i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_29))
begin
memory_controller_in_b = cyber2000fb_decode_crtc_21_57_reg;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %54, i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_30))
begin
memory_controller_in_b = cyber2000fb_decode_crtc_21_54_reg;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %68, i32* %102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_31))
begin
memory_controller_in_b = cyber2000fb_decode_crtc_66_68_reg;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 255, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_32))
begin
memory_controller_in_b = 32'd255;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* cyber2000fb_decode_crtc: %0*/
/*   %4 = load i32** %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_1))
begin
memory_controller_size_b = 2'd2;
end
/* cyber2000fb_decode_crtc: %0*/
/*   store i32 227, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_3))
begin
memory_controller_size_b = 2'd2;
end
/* cyber2000fb_decode_crtc: %0*/
/*   store i32 0, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_4))
begin
memory_controller_size_b = 2'd2;
end
/* cyber2000fb_decode_crtc: %0*/
/*   %12 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_5))
begin
memory_controller_size_b = 2'd2;
end
/* cyber2000fb_decode_crtc: %0*/
/*   %16 = load i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_0_6))
begin
memory_controller_size_b = 2'd2;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %23, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_9))
begin
memory_controller_size_b = 2'd2;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %29, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_15))
begin
memory_controller_size_b = 2'd2;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %32 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_16))
begin
memory_controller_size_b = 2'd2;
end
/* cyber2000fb_decode_crtc: %21*/
/*   store i32 %39, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_18))
begin
memory_controller_size_b = 2'd2;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %42 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_19))
begin
memory_controller_size_b = 2'd2;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %56 = load i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_23))
begin
memory_controller_size_b = 2'd2;
end
/* cyber2000fb_decode_crtc: %21*/
/*   %62 = load i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_21_24))
begin
memory_controller_size_b = 2'd2;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %90, i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_28))
begin
memory_controller_size_b = 2'd2;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %57, i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_29))
begin
memory_controller_size_b = 2'd2;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %54, i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_30))
begin
memory_controller_size_b = 2'd2;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 %68, i32* %102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_31))
begin
memory_controller_size_b = 2'd2;
end
/* cyber2000fb_decode_crtc: %66*/
/*   store i32 255, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_66_32))
begin
memory_controller_size_b = 2'd2;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* cyber2000fb_decode_crtc: %116*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_cyber2000fb_decode_crtc_BB_116_35))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg [31:0] main_0_1;
reg [31:0] main_0_1_reg;
reg  cyber2000fb_decode_crtc_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_arg_hw;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_arg_cfb;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_arg_var;
wire  cyber2000fb_decode_crtc_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_memory_controller_address_a;
wire  cyber2000fb_decode_crtc_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] cyber2000fb_decode_crtc_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] cyber2000fb_decode_crtc_memory_controller_out_a;
wire [1:0] cyber2000fb_decode_crtc_memory_controller_size_a;
wire  cyber2000fb_decode_crtc_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] cyber2000fb_decode_crtc_memory_controller_address_b;
wire  cyber2000fb_decode_crtc_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] cyber2000fb_decode_crtc_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] cyber2000fb_decode_crtc_memory_controller_out_b;
wire [1:0] cyber2000fb_decode_crtc_memory_controller_size_b;
reg  cyber2000fb_decode_crtc_memory_controller_waitrequest;
wire  cyber2000fb_decode_crtc_finish;
reg  cyber2000fb_decode_crtc_finish_final;
wire [31:0] cyber2000fb_decode_crtc_return_val;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


cyber2000fb_decode_crtc cyber2000fb_decode_crtc_inst (
	.memory_controller_enable_a (cyber2000fb_decode_crtc_memory_controller_enable_a),
	.memory_controller_address_a (cyber2000fb_decode_crtc_memory_controller_address_a),
	.memory_controller_write_enable_a (cyber2000fb_decode_crtc_memory_controller_write_enable_a),
	.memory_controller_in_a (cyber2000fb_decode_crtc_memory_controller_in_a),
	.memory_controller_size_a (cyber2000fb_decode_crtc_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (cyber2000fb_decode_crtc_memory_controller_enable_b),
	.memory_controller_address_b (cyber2000fb_decode_crtc_memory_controller_address_b),
	.memory_controller_write_enable_b (cyber2000fb_decode_crtc_memory_controller_write_enable_b),
	.memory_controller_in_b (cyber2000fb_decode_crtc_memory_controller_in_b),
	.memory_controller_size_b (cyber2000fb_decode_crtc_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (cyber2000fb_decode_crtc_start),
	.finish (cyber2000fb_decode_crtc_finish),
	.return_val (cyber2000fb_decode_crtc_return_val),
	.arg_hw (cyber2000fb_decode_crtc_arg_hw),
	.arg_cfb (cyber2000fb_decode_crtc_arg_cfb),
	.arg_var (cyber2000fb_decode_crtc_arg_var)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (cyber2000fb_decode_crtc_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (cyber2000fb_decode_crtc_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
begin
main_0_1 = cyber2000fb_decode_crtc_return_val;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
main_0_1_reg <= main_0_1;
if (reset == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_1_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
cyber2000fb_decode_crtc_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_start"); $finish; end
end
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
cyber2000fb_decode_crtc_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
cyber2000fb_decode_crtc_arg_hw <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_arg_hw"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
cyber2000fb_decode_crtc_arg_cfb <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_arg_cfb"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
cyber2000fb_decode_crtc_arg_var <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cyber2000fb_decode_crtc_arg_var"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
begin
cyber2000fb_decode_crtc_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
begin
cyber2000fb_decode_crtc_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
cyber2000fb_decode_crtc_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
cyber2000fb_decode_crtc_finish_final = cyber2000fb_decode_crtc_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = cyber2000fb_decode_crtc_memory_controller_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = cyber2000fb_decode_crtc_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = cyber2000fb_decode_crtc_memory_controller_address_a;
end
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = cyber2000fb_decode_crtc_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = cyber2000fb_decode_crtc_memory_controller_write_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = cyber2000fb_decode_crtc_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = cyber2000fb_decode_crtc_memory_controller_in_a;
end
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = cyber2000fb_decode_crtc_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = cyber2000fb_decode_crtc_memory_controller_size_a;
end
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = cyber2000fb_decode_crtc_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = cyber2000fb_decode_crtc_memory_controller_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = cyber2000fb_decode_crtc_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = cyber2000fb_decode_crtc_memory_controller_address_b;
end
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = cyber2000fb_decode_crtc_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = cyber2000fb_decode_crtc_memory_controller_write_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = cyber2000fb_decode_crtc_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = cyber2000fb_decode_crtc_memory_controller_in_b;
end
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = cyber2000fb_decode_crtc_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = cyber2000fb_decode_crtc_memory_controller_size_b;
end
/* main: %0*/
/*   %1 = tail call i32 @cyber2000fb_decode_crtc(%struct.par_info* undef, %struct.cfb_info* undef, %struct.fb_var_screeninfo* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = cyber2000fb_decode_crtc_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
