//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:55:14 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 1
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1
// @.str = private unnamed_addr constant [8 x i8] c"default\00"

`define TAG_g__str `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g__str_a {`TAG_g__str, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [2:0] _str_address_a;
reg [2:0] _str_address_b;
reg _str_write_enable_a;
reg _str_write_enable_b;
reg [7:0] _str_in_a;
reg [7:0] _str_in_b;
wire [7:0] _str_out_a;
wire [7:0] _str_out_b;

// @.str = private unnamed_addr constant [8 x i8] c"default\00"

rom_dual_port _str (
	.clk( clk ),
	.address_a( _str_address_a ),
	.address_b( _str_address_b ),
	.q_a( _str_out_a ),
	.q_b( _str_out_b)
);
defparam _str.width_a = 8;
defparam _str.width_b = 8;
defparam _str.widthad_a = 3;
defparam _str.widthad_b = 3;
defparam _str.numwords_a = 8;
defparam _str.numwords_b = 8;
defparam _str.latency = 1;
defparam _str.init_file = "_str.mif";

wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select__str_a;
assign select__str_a = (tag_a == `TAG_g__str);
reg select__str_reg_a;
wire [7:0] memory_controller__str_out_a;
assign memory_controller__str_out_a = {8{ select__str_reg_a}} & _str_out_a;

always @(*)
begin
	_str_address_a = memory_controller_address_a [3-1+0:0] & {3{select__str_a}};
	_str_write_enable_a = memory_controller_write_enable_a & select__str_a;
	_str_in_a [8-1:0] = memory_controller_in_a[8-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0;
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller__str_out_a;
end

always @(posedge clk)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
select__str_reg_a <= select__str_a;
end

reg [2:0] select_not_struct_b;

wire select__str_b;
assign select__str_b = (tag_b == `TAG_g__str);
reg select__str_reg_b;
wire [7:0] memory_controller__str_out_b;
assign memory_controller__str_out_b = {8{ select__str_reg_b}} & _str_out_b;

always @(*)
begin
	_str_address_b = memory_controller_address_b [3-1+0:0] & {3{select__str_b}};
	_str_write_enable_b = memory_controller_write_enable_b & select__str_b;
	_str_in_b [8-1:0] = memory_controller_in_b[8-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0;
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller__str_out_b;
end

always @(posedge clk)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
select__str_reg_b <= select__str_b;
end

endmodule 

`timescale 1 ns / 1 ns
module tpg_calculate_square_border
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_tpg
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_1 = 8'd1;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_2 = 8'd2;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_3 = 8'd3;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_4 = 8'd4;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_5 = 8'd5;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_6 = 8'd6;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_7 = 8'd7;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_8 = 8'd8;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_9 = 8'd9;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_10 = 8'd10;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_11 = 8'd11;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_12 = 8'd12;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_13 = 8'd13;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_14 = 8'd14;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_15 = 8'd15;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_16 = 8'd16;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_17 = 8'd17;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_18 = 8'd18;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_19 = 8'd19;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_20 = 8'd20;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_21 = 8'd21;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_22 = 8'd22;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_23 = 8'd23;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_24 = 8'd24;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_25 = 8'd25;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_26 = 8'd26;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_27 = 8'd27;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_28 = 8'd28;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_29 = 8'd29;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_30 = 8'd30;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_31 = 8'd31;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_32 = 8'd32;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_33 = 8'd33;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_34 = 8'd34;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_35 = 8'd35;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_0_36 = 8'd36;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_16_37 = 8'd37;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_16_38 = 8'd38;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_16_39 = 8'd39;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_23_40 = 8'd40;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_23_41 = 8'd41;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_23_42 = 8'd42;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_43 = 8'd43;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_44 = 8'd44;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_45 = 8'd45;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_46 = 8'd46;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_47 = 8'd47;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_48 = 8'd48;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_49 = 8'd49;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_50 = 8'd50;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_51 = 8'd51;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_52 = 8'd52;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_53 = 8'd53;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_54 = 8'd54;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_55 = 8'd55;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_56 = 8'd56;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_57 = 8'd57;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_58 = 8'd58;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_59 = 8'd59;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_60 = 8'd60;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_61 = 8'd61;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_62 = 8'd62;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_63 = 8'd63;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_64 = 8'd64;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_65 = 8'd65;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_66 = 8'd66;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_67 = 8'd67;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_68 = 8'd68;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_69 = 8'd69;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_70 = 8'd70;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_71 = 8'd71;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_72 = 8'd72;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_73 = 8'd73;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_74 = 8'd74;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_75 = 8'd75;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_31_76 = 8'd76;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_34_77 = 8'd77;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_34_78 = 8'd78;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_34_79 = 8'd79;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_34_80 = 8'd80;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_43_81 = 8'd81;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_44_82 = 8'd82;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_44_83 = 8'd83;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_84 = 8'd84;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_85 = 8'd85;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_86 = 8'd86;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_87 = 8'd87;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_88 = 8'd88;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_89 = 8'd89;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_90 = 8'd90;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_91 = 8'd91;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_92 = 8'd92;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_93 = 8'd93;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_94 = 8'd94;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_95 = 8'd95;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_96 = 8'd96;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_97 = 8'd97;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_98 = 8'd98;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_99 = 8'd99;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_100 = 8'd100;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_101 = 8'd101;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_102 = 8'd102;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_103 = 8'd103;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_104 = 8'd104;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_105 = 8'd105;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_106 = 8'd106;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_107 = 8'd107;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_108 = 8'd108;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_109 = 8'd109;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_110 = 8'd110;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_111 = 8'd111;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_112 = 8'd112;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_113 = 8'd113;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_114 = 8'd114;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_115 = 8'd115;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_116 = 8'd116;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_117 = 8'd117;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_48_118 = 8'd118;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_56_119 = 8'd119;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_56_120 = 8'd120;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_61_121 = 8'd121;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_62_122 = 8'd122;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_62_123 = 8'd123;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_65_124 = 8'd124;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_65_125 = 8'd125;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_126 = 8'd126;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_127 = 8'd127;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_128 = 8'd128;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_129 = 8'd129;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_130 = 8'd130;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_131 = 8'd131;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_132 = 8'd132;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_133 = 8'd133;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_134 = 8'd134;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_135 = 8'd135;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_136 = 8'd136;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_137 = 8'd137;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_138 = 8'd138;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_139 = 8'd139;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_140 = 8'd140;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_141 = 8'd141;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_142 = 8'd142;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_143 = 8'd143;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_144 = 8'd144;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_145 = 8'd145;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_146 = 8'd146;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_147 = 8'd147;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_148 = 8'd148;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_149 = 8'd149;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_150 = 8'd150;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_151 = 8'd151;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_152 = 8'd152;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_153 = 8'd153;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_154 = 8'd154;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_155 = 8'd155;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_156 = 8'd156;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_157 = 8'd157;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_158 = 8'd158;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_159 = 8'd159;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_69_160 = 8'd160;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_161 = 8'd161;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_162 = 8'd162;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_163 = 8'd163;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_164 = 8'd164;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_165 = 8'd165;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_166 = 8'd166;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_167 = 8'd167;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_168 = 8'd168;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_169 = 8'd169;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_170 = 8'd170;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_171 = 8'd171;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_172 = 8'd172;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_173 = 8'd173;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_174 = 8'd174;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_175 = 8'd175;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_176 = 8'd176;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_177 = 8'd177;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_178 = 8'd178;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_179 = 8'd179;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_180 = 8'd180;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_181 = 8'd181;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_182 = 8'd182;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_183 = 8'd183;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_184 = 8'd184;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_185 = 8'd185;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_186 = 8'd186;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_187 = 8'd187;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_188 = 8'd188;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_189 = 8'd189;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_190 = 8'd190;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_191 = 8'd191;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_192 = 8'd192;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_193 = 8'd193;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_77_194 = 8'd194;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_82_195 = 8'd195;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_83_196 = 8'd196;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_83_197 = 8'd197;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_86_198 = 8'd198;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_86_199 = 8'd199;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_200 = 8'd200;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_201 = 8'd201;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_202 = 8'd202;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_203 = 8'd203;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_204 = 8'd204;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_205 = 8'd205;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_206 = 8'd206;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_207 = 8'd207;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_208 = 8'd208;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_209 = 8'd209;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_210 = 8'd210;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_211 = 8'd211;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_212 = 8'd212;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_213 = 8'd213;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_214 = 8'd214;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_215 = 8'd215;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_216 = 8'd216;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_217 = 8'd217;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_218 = 8'd218;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_219 = 8'd219;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_220 = 8'd220;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_221 = 8'd221;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_222 = 8'd222;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_223 = 8'd223;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_224 = 8'd224;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_225 = 8'd225;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_226 = 8'd226;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_227 = 8'd227;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_228 = 8'd228;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_229 = 8'd229;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_230 = 8'd230;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_231 = 8'd231;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_232 = 8'd232;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_233 = 8'd233;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_90_234 = 8'd234;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_98_235 = 8'd235;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_98_236 = 8'd236;
parameter [7:0] LEGUP_F_tpg_calculate_square_border_BB_103_237 = 8'd237;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_tpg;
reg [7:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_0_1_reg;
reg [31:0] tpg_calculate_square_border_0_2;
reg [31:0] tpg_calculate_square_border_0_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_0_3_reg;
reg [31:0] tpg_calculate_square_border_0_4;
reg [31:0] tpg_calculate_square_border_0_4_reg;
reg [31:0] tpg_calculate_square_border_0_5;
reg [31:0] tpg_calculate_square_border_0_5_reg;
reg [31:0] tpg_calculate_square_border_0_6;
reg [31:0] tpg_calculate_square_border_0_6_reg;
reg [31:0] tpg_calculate_square_border_0_7;
reg [31:0] tpg_calculate_square_border_0_7_reg;
reg [31:0] tpg_calculate_square_border_0_8;
reg [31:0] tpg_calculate_square_border_0_8_reg;
reg [31:0] tpg_calculate_square_border_0_9;
reg [31:0] tpg_calculate_square_border_0_9_reg;
reg [31:0] tpg_calculate_square_border_0_10;
reg [31:0] tpg_calculate_square_border_0_10_reg;
reg  tpg_calculate_square_border_0_11;
reg  tpg_calculate_square_border_0_11_reg;
reg [31:0] tpg_calculate_square_border_0__;
reg [31:0] tpg_calculate_square_border_0___reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_0_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_0_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_0_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_0_13_reg;
reg [31:0] tpg_calculate_square_border_0_14;
reg [31:0] tpg_calculate_square_border_0_14_reg;
reg  tpg_calculate_square_border_0_15;
reg  tpg_calculate_square_border_0_15_reg;
reg [31:0] tpg_calculate_square_border_16_17;
reg [31:0] tpg_calculate_square_border_16_17_reg;
reg [31:0] tpg_calculate_square_border_16_18;
reg [31:0] tpg_calculate_square_border_16_18_reg;
reg [31:0] tpg_calculate_square_border_16_19;
reg [31:0] tpg_calculate_square_border_16_19_reg;
reg [31:0] tpg_calculate_square_border_16_20;
reg [31:0] tpg_calculate_square_border_16_20_reg;
reg [31:0] tpg_calculate_square_border_16_21;
reg [31:0] tpg_calculate_square_border_16_21_reg;
reg  tpg_calculate_square_border_16_22;
reg  tpg_calculate_square_border_16_22_reg;
reg [31:0] tpg_calculate_square_border_16__3;
reg [31:0] tpg_calculate_square_border_16__3_reg;
reg [31:0] tpg_calculate_square_border_23_24;
reg [31:0] tpg_calculate_square_border_23_24_reg;
reg [31:0] tpg_calculate_square_border_23_25;
reg [31:0] tpg_calculate_square_border_23_25_reg;
reg [31:0] tpg_calculate_square_border_23_26;
reg [31:0] tpg_calculate_square_border_23_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_23_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_23_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_23_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_23_28_reg;
reg [31:0] tpg_calculate_square_border_23_29;
reg [31:0] tpg_calculate_square_border_23_29_reg;
reg  tpg_calculate_square_border_23_30;
reg  tpg_calculate_square_border_23_30_reg;
reg [31:0] tpg_calculate_square_border_31_32;
reg [31:0] tpg_calculate_square_border_31_32_reg;
reg [31:0] tpg_calculate_square_border_31_33;
reg [31:0] tpg_calculate_square_border_31_33_reg;
reg [31:0] tpg_calculate_square_border_34_sq_h_0;
reg [31:0] tpg_calculate_square_border_34_sq_h_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_34_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_34_35_reg;
reg [31:0] tpg_calculate_square_border_34_36;
reg [31:0] tpg_calculate_square_border_34_36_reg;
reg [31:0] tpg_calculate_square_border_34_37;
reg [31:0] tpg_calculate_square_border_34_37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_34_38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_34_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_34_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_34_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_34_40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_34_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_34_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_34_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_34_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_34_42_reg;
reg [31:0] tpg_calculate_square_border_44_45;
reg [31:0] tpg_calculate_square_border_44_45_reg;
reg [31:0] tpg_calculate_square_border_44_46;
reg [31:0] tpg_calculate_square_border_44_46_reg;
reg  tpg_calculate_square_border_44_47;
reg  tpg_calculate_square_border_44_47_reg;
reg [31:0] tpg_calculate_square_border_48_49;
reg [31:0] tpg_calculate_square_border_48_49_reg;
reg [31:0] tpg_calculate_square_border_48_50;
reg [31:0] tpg_calculate_square_border_48_50_reg;
reg [31:0] tpg_calculate_square_border_48_51;
reg [31:0] tpg_calculate_square_border_48_51_reg;
reg [31:0] tpg_calculate_square_border_48_52;
reg [31:0] tpg_calculate_square_border_48_52_reg;
reg  tpg_calculate_square_border_48_53;
reg  tpg_calculate_square_border_48_53_reg;
reg [31:0] tpg_calculate_square_border_48__4;
reg [31:0] tpg_calculate_square_border_48__4_reg;
reg [31:0] tpg_calculate_square_border_48_54;
reg [31:0] tpg_calculate_square_border_48_54_reg;
reg [31:0] tpg_calculate_square_border_48_55;
reg [31:0] tpg_calculate_square_border_48_55_reg;
reg [31:0] tpg_calculate_square_border_56_57;
reg [31:0] tpg_calculate_square_border_56_57_reg;
reg [31:0] tpg_calculate_square_border_56_58;
reg [31:0] tpg_calculate_square_border_56_58_reg;
reg [31:0] tpg_calculate_square_border_56_59;
reg [31:0] tpg_calculate_square_border_56_59_reg;
reg [31:0] tpg_calculate_square_border_56_60;
reg [31:0] tpg_calculate_square_border_56_60_reg;
reg [31:0] tpg_calculate_square_border_62_63;
reg [31:0] tpg_calculate_square_border_62_63_reg;
reg [31:0] tpg_calculate_square_border_62_64;
reg [31:0] tpg_calculate_square_border_62_64_reg;
reg [31:0] tpg_calculate_square_border_65_66;
reg [31:0] tpg_calculate_square_border_65_66_reg;
reg [31:0] tpg_calculate_square_border_65_67;
reg [31:0] tpg_calculate_square_border_65_67_reg;
reg  tpg_calculate_square_border_65_68;
reg  tpg_calculate_square_border_65_68_reg;
reg [31:0] tpg_calculate_square_border_69_70;
reg [31:0] tpg_calculate_square_border_69_70_reg;
reg [31:0] tpg_calculate_square_border_69_71;
reg [31:0] tpg_calculate_square_border_69_71_reg;
reg [31:0] tpg_calculate_square_border_69_72;
reg [31:0] tpg_calculate_square_border_69_72_reg;
reg [31:0] tpg_calculate_square_border_69_73;
reg [31:0] tpg_calculate_square_border_69_73_reg;
reg  tpg_calculate_square_border_69_74;
reg  tpg_calculate_square_border_69_74_reg;
reg [31:0] tpg_calculate_square_border_69__5;
reg [31:0] tpg_calculate_square_border_69__5_reg;
reg [31:0] tpg_calculate_square_border_69_75;
reg [31:0] tpg_calculate_square_border_69_75_reg;
reg [31:0] tpg_calculate_square_border_69_76;
reg [31:0] tpg_calculate_square_border_69_76_reg;
reg [31:0] tpg_calculate_square_border_77_78;
reg [31:0] tpg_calculate_square_border_77_78_reg;
reg [31:0] tpg_calculate_square_border_77_79;
reg [31:0] tpg_calculate_square_border_77_79_reg;
reg [31:0] tpg_calculate_square_border_77_80;
reg [31:0] tpg_calculate_square_border_77_80_reg;
reg [31:0] tpg_calculate_square_border_77_81;
reg [31:0] tpg_calculate_square_border_77_81_reg;
reg [31:0] tpg_calculate_square_border_83_84;
reg [31:0] tpg_calculate_square_border_83_84_reg;
reg [31:0] tpg_calculate_square_border_83_85;
reg [31:0] tpg_calculate_square_border_83_85_reg;
reg [31:0] tpg_calculate_square_border_86_87;
reg [31:0] tpg_calculate_square_border_86_87_reg;
reg [31:0] tpg_calculate_square_border_86_88;
reg [31:0] tpg_calculate_square_border_86_88_reg;
reg  tpg_calculate_square_border_86_89;
reg  tpg_calculate_square_border_86_89_reg;
reg [31:0] tpg_calculate_square_border_90_91;
reg [31:0] tpg_calculate_square_border_90_91_reg;
reg [31:0] tpg_calculate_square_border_90_92;
reg [31:0] tpg_calculate_square_border_90_92_reg;
reg [31:0] tpg_calculate_square_border_90_93;
reg [31:0] tpg_calculate_square_border_90_93_reg;
reg [31:0] tpg_calculate_square_border_90_94;
reg [31:0] tpg_calculate_square_border_90_94_reg;
reg  tpg_calculate_square_border_90_95;
reg  tpg_calculate_square_border_90_95_reg;
reg [31:0] tpg_calculate_square_border_90__6;
reg [31:0] tpg_calculate_square_border_90__6_reg;
reg [31:0] tpg_calculate_square_border_90_96;
reg [31:0] tpg_calculate_square_border_90_96_reg;
reg [31:0] tpg_calculate_square_border_90_97;
reg [31:0] tpg_calculate_square_border_90_97_reg;
reg [31:0] tpg_calculate_square_border_98_99;
reg [31:0] tpg_calculate_square_border_98_99_reg;
reg [31:0] tpg_calculate_square_border_98_100;
reg [31:0] tpg_calculate_square_border_98_100_reg;
reg [31:0] tpg_calculate_square_border_98_101;
reg [31:0] tpg_calculate_square_border_98_101_reg;
reg [31:0] tpg_calculate_square_border_98_102;
reg [31:0] tpg_calculate_square_border_98_102_reg;
wire [2:0] _str_address_a;
wire  _str_write_enable_a;
wire [7:0] _str_in_a;
wire [7:0] _str_out_a;
wire [2:0] _str_address_b;
wire  _str_write_enable_b;
wire [7:0] _str_in_b;
wire [7:0] _str_out_b;
wire [15:0] legup_pthreadpoll_threadID;
reg [31:0] tpg_calculate_square_border_unsigned_divide_32_0_op0;
reg [31:0] tpg_calculate_square_border_unsigned_divide_32_0_op1;
wire [31:0] lpm_divide_tpg_calculate_square_border_0_6_temp_out;
wire [31:0] tpg_calculate_square_border_0_6_unused;
reg  lpm_divide_tpg_calculate_square_border_0_6_en;
reg [31:0] lpm_divide_tpg_calculate_square_border_0_6_out;
reg [31:0] tpg_calculate_square_border_unsigned_divide_32_0;
reg  lpm_mult_tpg_calculate_square_border_16_18_en;
reg [31:0] tpg_calculate_square_border_16_18_stage0_reg;
reg  lpm_mult_tpg_calculate_square_border_31_32_en;
reg [31:0] tpg_calculate_square_border_31_32_stage0_reg;
reg  lpm_divide_tpg_calculate_square_border_31_33_en;
reg  lpm_mult_tpg_calculate_square_border_44_45_en;
reg [31:0] tpg_calculate_square_border_44_45_stage0_reg;
reg  lpm_divide_tpg_calculate_square_border_48_49_en;
reg  lpm_mult_tpg_calculate_square_border_65_66_en;
reg [31:0] tpg_calculate_square_border_65_66_stage0_reg;
reg  lpm_mult_tpg_calculate_square_border_65_67_en;
reg [31:0] tpg_calculate_square_border_65_67_stage0_reg;
reg  lpm_divide_tpg_calculate_square_border_69_70_en;
reg  lpm_divide_tpg_calculate_square_border_77_78_en;
reg  lpm_mult_tpg_calculate_square_border_86_87_en;
reg [31:0] tpg_calculate_square_border_86_87_stage0_reg;
reg  lpm_divide_tpg_calculate_square_border_90_91_en;

/*   %6 = udiv i32 %5, 5*/
lpm_divide lpm_divide_tpg_calculate_square_border_0_6 (
	.quotient (lpm_divide_tpg_calculate_square_border_0_6_temp_out),
	.remain (tpg_calculate_square_border_0_6_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_tpg_calculate_square_border_0_6_en),
	.numer (tpg_calculate_square_border_unsigned_divide_32_0_op0),
	.denom (tpg_calculate_square_border_unsigned_divide_32_0_op1)
);

defparam
	lpm_divide_tpg_calculate_square_border_0_6.lpm_pipeline = 32,
	lpm_divide_tpg_calculate_square_border_0_6.lpm_widthn = 32,
	lpm_divide_tpg_calculate_square_border_0_6.lpm_widthd = 32,
	lpm_divide_tpg_calculate_square_border_0_6.lpm_drepresentation = "UNSIGNED",
	lpm_divide_tpg_calculate_square_border_0_6.lpm_nrepresentation = "UNSIGNED",
	lpm_divide_tpg_calculate_square_border_0_6.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_36) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_0_15_reg == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_16_37;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_16_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_36) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_0_15_reg == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_23_40;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_23_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_16_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_16_37;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_16_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_16_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_16_38;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_16_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_16_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_16_38;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_16_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_16_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_16_39;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_16_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_16_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_16_39;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_16_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_16_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_23_40;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_23_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_23_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_23_40;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_23_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_23_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_23_41;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_23_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_23_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_23_41;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_23_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_23_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_23_42;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_23_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_23_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_23_42;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_23_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_tpg_calculate_square_border_BB_23_42) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_23_30 == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_43;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_tpg_calculate_square_border_BB_23_42) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_23_30 == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_34_77;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_34_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_43;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_44;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_44;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_45;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_45;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_46;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_46;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_47;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_47;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_48;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_48;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_49;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_49;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_50;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_50;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_51;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_51;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_52;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_52;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_53;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_53;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_54;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_54;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_55;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_55;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_56;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_56;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_57;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_57;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_58;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_58;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_59;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_59;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_60;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_60;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_61;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_61;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_62;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_62;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_63;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_63;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_64;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_64;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_65;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_65;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_66;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_66;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_67;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_67;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_68;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_68;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_69;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_69;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_70;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_70;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_71;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_71;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_72;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_72;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_73;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_73;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_74;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_74;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_75;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_75;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_76;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_31_76;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_31_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_34_77;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_34_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_34_77;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_34_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_34_78;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_34_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_34_78;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_34_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_34_79;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_34_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_34_79;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_34_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_34_80;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_34_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_34_80;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_34_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_80) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_0_14_reg == 32'd128)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_43_81;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_43_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_80) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_0_14_reg == 32'd130)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_61_121;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_61_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_80) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_0_14_reg == 32'd129)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_82_195;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_82_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_80) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_0_14_reg != 32'd128)) & (tpg_calculate_square_border_0_14_reg != 32'd130)) & (tpg_calculate_square_border_0_14_reg != 32'd129)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_103_237;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_103_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_43_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_43_81;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_43_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_tpg_calculate_square_border_BB_43_81) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_23_30_reg == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_44_82;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_44_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_tpg_calculate_square_border_BB_43_81) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_23_30_reg == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_103_237;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_103_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_44_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_44_82;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_44_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_44_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_44_83;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_44_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_44_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_44_83;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_44_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_tpg_calculate_square_border_BB_44_83) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_44_47 == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_56_119;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_56_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_tpg_calculate_square_border_BB_44_83) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_44_47 == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_84;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_84;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_85;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_85;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_86;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_86;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_87;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_87;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_88;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_88;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_89;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_89;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_90;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_90;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_91;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_91;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_92;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_92;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_93;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_93;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_94;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_94;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_95;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_95;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_96;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_96;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_97;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_97;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_98;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_98;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_99;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_99;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_100;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_100;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_101;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_101;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_102;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_102;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_103;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_103;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_104;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_104;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_105;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_105;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_106;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_106;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_107;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_107;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_108;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_108;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_109;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_109;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_110;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_110;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_111;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_111;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_112;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_112;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_113;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_113;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_114;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_114;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_114) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_115;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_115;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_115) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_116;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_116;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_116) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_117;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_117;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_118;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_48_118;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_48_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_103_237;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_103_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_56_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_56_119;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_56_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_56_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_56_120;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_56_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_56_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_56_120;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_56_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_56_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_103_237;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_103_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_61_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_61_121;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_61_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_tpg_calculate_square_border_BB_61_121) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_23_30_reg == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_65_124;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_65_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_tpg_calculate_square_border_BB_61_121) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_23_30_reg == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_62_122;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_62_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_62_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_62_122;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_62_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_62_122) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_62_123;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_62_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_62_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_62_123;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_62_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_62_123) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_103_237;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_103_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_65_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_65_124;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_65_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_65_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_65_125;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_65_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_65_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_65_125;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_65_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_tpg_calculate_square_border_BB_65_125) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_65_68 == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_161;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_tpg_calculate_square_border_BB_65_125) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_65_68 == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_126;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_126) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_126;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_126) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_127;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_127) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_127;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_127) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_128;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_128) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_128;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_128) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_129;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_129) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_129;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_129) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_130;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_130) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_130;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_130) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_131;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_131) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_131;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_131) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_132;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_132) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_132;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_132) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_133;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_133) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_133;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_133) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_134;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_134) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_134;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_134) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_135;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_135) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_135;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_135) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_136;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_136) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_136;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_136) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_137;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_137) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_137;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_137) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_138;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_138) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_138;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_138) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_139;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_139) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_139;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_139) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_140;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_140) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_140;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_140) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_141;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_141) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_141;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_141) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_142;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_142) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_142;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_142) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_143;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_143) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_143;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_143) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_144;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_144) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_144;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_144) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_145;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_145) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_145;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_145) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_146;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_146) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_146;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_146) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_147;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_147) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_147;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_147) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_148;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_148) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_148;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_148) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_149;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_149) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_149;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_149) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_150;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_150) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_150;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_150) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_151;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_151) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_151;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_151) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_152;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_152) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_152;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_152) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_153;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_153) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_153;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_153) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_154;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_154) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_154;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_154) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_155;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_155) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_155;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_155) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_156;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_156) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_156;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_156) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_157;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_157) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_157;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_157) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_158;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_158) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_158;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_158) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_159;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_159) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_159;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_159) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_160;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_160) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_69_160;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_69_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_160) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_103_237;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_103_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_161) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_161;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_161) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_162;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_162) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_162;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_162) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_163;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_163) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_163;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_163) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_164;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_164) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_164;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_164) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_165;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_165) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_165;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_165) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_166;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_166) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_166;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_166) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_167;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_167) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_167;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_167) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_168;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_168) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_168;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_168) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_169;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_169) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_169;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_169) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_170;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_170) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_170;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_170) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_171;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_171) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_171;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_171) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_172;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_172) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_172;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_172) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_173;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_173) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_173;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_173) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_174;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_174) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_174;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_174) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_175;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_175) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_175;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_175) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_176;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_176) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_176;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_176) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_177;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_177) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_177;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_177) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_178;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_178) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_178;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_178) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_179;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_179) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_179;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_179) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_180;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_180) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_180;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_180) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_181;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_181) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_181;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_181) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_182;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_182) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_182;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_182) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_183;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_183) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_183;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_183) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_184;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_184) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_184;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_184) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_185;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_185) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_185;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_185) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_186;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_186) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_186;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_186) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_187;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_187) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_187;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_187) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_188;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_188) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_188;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_188) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_189;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_189) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_189;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_189) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_190;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_190) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_190;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_190) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_191;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_191) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_191;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_191) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_192;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_192) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_192;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_192) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_193;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_193) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_193;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_193) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_194;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_194) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_77_194;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_77_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_194) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_103_237;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_103_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_82_195) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_82_195;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_82_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_tpg_calculate_square_border_BB_82_195) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_23_30_reg == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_86_198;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_86_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_tpg_calculate_square_border_BB_82_195) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_23_30_reg == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_83_196;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_83_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_83_196) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_83_196;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_83_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_83_196) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_83_197;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_83_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_83_197) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_83_197;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_83_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_83_197) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_103_237;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_103_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_86_198) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_86_198;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_86_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_86_198) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_86_199;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_86_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_86_199) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_86_199;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_86_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_tpg_calculate_square_border_BB_86_199) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_86_89 == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_98_235;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_98_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_tpg_calculate_square_border_BB_86_199) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_86_89 == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_200;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_200) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_200;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_200) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_201;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_201) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_201;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_201) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_202;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_202) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_202;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_202) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_203;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_203) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_203;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_203) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_204;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_204) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_204;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_204) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_205;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_205) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_205;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_205) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_206;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_206) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_206;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_206) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_207;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_207) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_207;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_207) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_208;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_208) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_208;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_208) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_209;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_209) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_209;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_209) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_210;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_210) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_210;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_210) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_211;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_211) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_211;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_211) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_212;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_212) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_212;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_212) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_213;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_213) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_213;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_213) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_214;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_214) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_214;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_214) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_215;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_215) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_215;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_215) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_216;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_216) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_216;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_216) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_217;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_217) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_217;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_217) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_218;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_218) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_218;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_218) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_219;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_219) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_219;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_219) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_220;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_220) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_220;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_220) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_221;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_221) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_221;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_221) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_222;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_222) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_222;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_222) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_223;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_223) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_223;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_223) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_224;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_224) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_224;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_224) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_225;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_225) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_225;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_225) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_226;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_226) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_226;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_226) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_227;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_227) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_227;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_227) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_228;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_228) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_228;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_228) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_229;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_229) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_229;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_229) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_230;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_230) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_230;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_230) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_231;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_231) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_231;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_231) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_232;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_232) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_232;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_232) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_233;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_233) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_233;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_233) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_234;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_234) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_90_234;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_90_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_234) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_103_237;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_103_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_98_235) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_98_235;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_98_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_98_235) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_98_236;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_98_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_98_236) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_98_236;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_98_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_98_236) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_103_237;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_103_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_103_237) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_tpg_calculate_square_border_BB_103_237;
if (reset == 1'b0 && ^(LEGUP_F_tpg_calculate_square_border_BB_103_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_103_237) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 8'd0;
if (reset == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %0*/
/*   %1 = getelementptr inbounds %struct.tpg_data* %tpg, i32 0, i32 0*/
begin
tpg_calculate_square_border_0_1 = arg_tpg;
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %0*/
/*   %1 = getelementptr inbounds %struct.tpg_data* %tpg, i32 0, i32 0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_1))
begin
tpg_calculate_square_border_0_1_reg <= tpg_calculate_square_border_0_1;
if (reset == 1'b0 && ^(tpg_calculate_square_border_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_0_1_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
begin
tpg_calculate_square_border_0_2 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_3))
begin
tpg_calculate_square_border_0_2_reg <= tpg_calculate_square_border_0_2;
if (reset == 1'b0 && ^(tpg_calculate_square_border_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_0_2_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %0*/
/*   %3 = getelementptr inbounds %struct.tpg_data* %tpg, i32 0, i32 1*/
begin
tpg_calculate_square_border_0_3 = (arg_tpg + 4);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %0*/
/*   %3 = getelementptr inbounds %struct.tpg_data* %tpg, i32 0, i32 1*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_1))
begin
tpg_calculate_square_border_0_3_reg <= tpg_calculate_square_border_0_3;
if (reset == 1'b0 && ^(tpg_calculate_square_border_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_0_3_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
begin
tpg_calculate_square_border_0_4 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_3))
begin
tpg_calculate_square_border_0_4_reg <= tpg_calculate_square_border_0_4;
if (reset == 1'b0 && ^(tpg_calculate_square_border_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_0_4_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %0*/
/*   %5 = shl i32 %2, 1*/
begin
tpg_calculate_square_border_0_5 = (tpg_calculate_square_border_0_2 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %0*/
/*   %5 = shl i32 %2, 1*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_3))
begin
tpg_calculate_square_border_0_5_reg <= tpg_calculate_square_border_0_5;
if (reset == 1'b0 && ^(tpg_calculate_square_border_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_0_5_reg"); $finish; end
end
end
always @(*) begin
tpg_calculate_square_border_0_6 = tpg_calculate_square_border_unsigned_divide_32_0;
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %0*/
/*   %6 = udiv i32 %5, 5*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_35))
begin
tpg_calculate_square_border_0_6_reg <= tpg_calculate_square_border_0_6;
if (reset == 1'b0 && ^(tpg_calculate_square_border_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_0_6_reg"); $finish; end
end
/* tpg_calculate_square_border: %0*/
/*   %6 = udiv i32 %5, 5*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_35))
begin
tpg_calculate_square_border_0_6_reg <= tpg_calculate_square_border_0_6;
if (reset == 1'b0 && ^(tpg_calculate_square_border_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_0_6_reg"); $finish; end
end
/* tpg_calculate_square_border: %69*/
/*   %70 = udiv i32 %67, 9*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_158))
begin
tpg_calculate_square_border_0_6_reg <= tpg_calculate_square_border_69_70;
if (reset == 1'b0 && ^(tpg_calculate_square_border_69_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_0_6_reg"); $finish; end
end
/* tpg_calculate_square_border: %31*/
/*   %33 = udiv i32 %32, 11*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_76))
begin
tpg_calculate_square_border_0_6_reg <= tpg_calculate_square_border_31_33;
if (reset == 1'b0 && ^(tpg_calculate_square_border_31_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_0_6_reg"); $finish; end
end
/* tpg_calculate_square_border: %48*/
/*   %49 = udiv i32 %46, 3*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_116))
begin
tpg_calculate_square_border_0_6_reg <= tpg_calculate_square_border_48_49;
if (reset == 1'b0 && ^(tpg_calculate_square_border_48_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_0_6_reg"); $finish; end
end
/* tpg_calculate_square_border: %77*/
/*   %78 = udiv i32 %66, 14*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_193))
begin
tpg_calculate_square_border_0_6_reg <= tpg_calculate_square_border_77_78;
if (reset == 1'b0 && ^(tpg_calculate_square_border_77_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_0_6_reg"); $finish; end
end
/* tpg_calculate_square_border: %90*/
/*   %91 = udiv i32 %88, 9*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_232))
begin
tpg_calculate_square_border_0_6_reg <= tpg_calculate_square_border_90_91;
if (reset == 1'b0 && ^(tpg_calculate_square_border_90_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_0_6_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %0*/
/*   %7 = and i32 %6, 1073741822*/
begin
tpg_calculate_square_border_0_7 = (tpg_calculate_square_border_0_6 & 32'd1073741822);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %0*/
/*   %7 = and i32 %6, 1073741822*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_35))
begin
tpg_calculate_square_border_0_7_reg <= tpg_calculate_square_border_0_7;
if (reset == 1'b0 && ^(tpg_calculate_square_border_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_0_7_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %0*/
/*   %8 = sub i32 %2, %7*/
begin
tpg_calculate_square_border_0_8 = (tpg_calculate_square_border_0_2_reg - tpg_calculate_square_border_0_7);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %0*/
/*   %8 = sub i32 %2, %7*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_35))
begin
tpg_calculate_square_border_0_8_reg <= tpg_calculate_square_border_0_8;
if (reset == 1'b0 && ^(tpg_calculate_square_border_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_0_8_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %0*/
/*   %9 = and i32 %8, 2*/
begin
tpg_calculate_square_border_0_9 = (tpg_calculate_square_border_0_8 & 32'd2);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %0*/
/*   %9 = and i32 %8, 2*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_35))
begin
tpg_calculate_square_border_0_9_reg <= tpg_calculate_square_border_0_9;
if (reset == 1'b0 && ^(tpg_calculate_square_border_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_0_9_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %0*/
/*   %10 = add i32 %7, 2*/
begin
tpg_calculate_square_border_0_10 = (tpg_calculate_square_border_0_7 + 32'd2);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %0*/
/*   %10 = add i32 %7, 2*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_35))
begin
tpg_calculate_square_border_0_10_reg <= tpg_calculate_square_border_0_10;
if (reset == 1'b0 && ^(tpg_calculate_square_border_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_0_10_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %0*/
/*   %11 = icmp eq i32 %9, 0*/
begin
tpg_calculate_square_border_0_11 = (tpg_calculate_square_border_0_9 == 32'd0);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %0*/
/*   %11 = icmp eq i32 %9, 0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_35))
begin
tpg_calculate_square_border_0_11_reg <= tpg_calculate_square_border_0_11;
if (reset == 1'b0 && ^(tpg_calculate_square_border_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_0_11_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %0*/
/*   %. = select i1 %11, i32 %7, i32 %10*/
begin
tpg_calculate_square_border_0__ = (tpg_calculate_square_border_0_11 ? tpg_calculate_square_border_0_7 : tpg_calculate_square_border_0_10);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %0*/
/*   %. = select i1 %11, i32 %7, i32 %10*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_35))
begin
tpg_calculate_square_border_0___reg <= tpg_calculate_square_border_0__;
if (reset == 1'b0 && ^(tpg_calculate_square_border_0__) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_0___reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %0*/
/*   %12 = getelementptr inbounds %struct.tpg_data* %tpg, i32 0, i32 5, i32 0*/
begin
tpg_calculate_square_border_0_12 = (arg_tpg + 32);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %0*/
/*   %12 = getelementptr inbounds %struct.tpg_data* %tpg, i32 0, i32 5, i32 0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_1))
begin
tpg_calculate_square_border_0_12_reg <= tpg_calculate_square_border_0_12;
if (reset == 1'b0 && ^(tpg_calculate_square_border_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_0_12_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %0*/
/*   %13 = getelementptr inbounds %struct.tpg_data* %tpg, i32 0, i32 2*/
begin
tpg_calculate_square_border_0_13 = (arg_tpg + 8);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %0*/
/*   %13 = getelementptr inbounds %struct.tpg_data* %tpg, i32 0, i32 2*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_1))
begin
tpg_calculate_square_border_0_13_reg <= tpg_calculate_square_border_0_13;
if (reset == 1'b0 && ^(tpg_calculate_square_border_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_0_13_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %0*/
/*   %14 = load i32* %13, align 4, !tbaa !0*/
begin
tpg_calculate_square_border_0_14 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %0*/
/*   %14 = load i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_4))
begin
tpg_calculate_square_border_0_14_reg <= tpg_calculate_square_border_0_14;
if (reset == 1'b0 && ^(tpg_calculate_square_border_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_0_14_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %0*/
/*   %15 = icmp eq i32 %14, 0*/
begin
tpg_calculate_square_border_0_15 = (tpg_calculate_square_border_0_14 == 32'd0);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %0*/
/*   %15 = icmp eq i32 %14, 0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_4))
begin
tpg_calculate_square_border_0_15_reg <= tpg_calculate_square_border_0_15;
if (reset == 1'b0 && ^(tpg_calculate_square_border_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_0_15_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %16*/
/*   %17 = lshr i32 %., 2*/
begin
tpg_calculate_square_border_16_17 = (tpg_calculate_square_border_0___reg >>> (32'd2 % 32));
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %16*/
/*   %17 = lshr i32 %., 2*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_16_37))
begin
tpg_calculate_square_border_16_17_reg <= tpg_calculate_square_border_16_17;
if (reset == 1'b0 && ^(tpg_calculate_square_border_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_16_17_reg"); $finish; end
end
end
always @(*) begin
tpg_calculate_square_border_16_18 = tpg_calculate_square_border_16_18_stage0_reg;
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %16*/
/*   %18 = mul i32 %17, 3*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_16_38))
begin
tpg_calculate_square_border_16_18_reg <= tpg_calculate_square_border_16_18;
if (reset == 1'b0 && ^(tpg_calculate_square_border_16_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_16_18_reg"); $finish; end
end
/* tpg_calculate_square_border: %16*/
/*   %18 = mul i32 %17, 3*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_16_38))
begin
tpg_calculate_square_border_16_18_reg <= tpg_calculate_square_border_16_18;
if (reset == 1'b0 && ^(tpg_calculate_square_border_16_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_16_18_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %16*/
/*   %19 = sub i32 %2, %18*/
begin
tpg_calculate_square_border_16_19 = (tpg_calculate_square_border_0_2_reg - tpg_calculate_square_border_16_18);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %16*/
/*   %19 = sub i32 %2, %18*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_16_38))
begin
tpg_calculate_square_border_16_19_reg <= tpg_calculate_square_border_16_19;
if (reset == 1'b0 && ^(tpg_calculate_square_border_16_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_16_19_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %16*/
/*   %20 = and i32 %19, 2*/
begin
tpg_calculate_square_border_16_20 = (tpg_calculate_square_border_16_19 & 32'd2);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %16*/
/*   %20 = and i32 %19, 2*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_16_38))
begin
tpg_calculate_square_border_16_20_reg <= tpg_calculate_square_border_16_20;
if (reset == 1'b0 && ^(tpg_calculate_square_border_16_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_16_20_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %16*/
/*   %21 = add i32 %18, 2*/
begin
tpg_calculate_square_border_16_21 = (tpg_calculate_square_border_16_18 + 32'd2);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %16*/
/*   %21 = add i32 %18, 2*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_16_38))
begin
tpg_calculate_square_border_16_21_reg <= tpg_calculate_square_border_16_21;
if (reset == 1'b0 && ^(tpg_calculate_square_border_16_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_16_21_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %16*/
/*   %22 = icmp eq i32 %20, 0*/
begin
tpg_calculate_square_border_16_22 = (tpg_calculate_square_border_16_20 == 32'd0);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %16*/
/*   %22 = icmp eq i32 %20, 0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_16_38))
begin
tpg_calculate_square_border_16_22_reg <= tpg_calculate_square_border_16_22;
if (reset == 1'b0 && ^(tpg_calculate_square_border_16_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_16_22_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %16*/
/*   %.3 = select i1 %22, i32 %18, i32 %21*/
begin
tpg_calculate_square_border_16__3 = (tpg_calculate_square_border_16_22 ? tpg_calculate_square_border_16_18 : tpg_calculate_square_border_16_21);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %16*/
/*   %.3 = select i1 %22, i32 %18, i32 %21*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_16_38))
begin
tpg_calculate_square_border_16__3_reg <= tpg_calculate_square_border_16__3;
if (reset == 1'b0 && ^(tpg_calculate_square_border_16__3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_16__3_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %23*/
/*   %24 = phi i32 [ %.3, %16 ], [ %., %0 ]*/
if ((((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_36) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_0_15_reg == 1'd0)))
begin
tpg_calculate_square_border_23_24 = tpg_calculate_square_border_0___reg;
end
/* tpg_calculate_square_border: %23*/
/*   %24 = phi i32 [ %.3, %16 ], [ %., %0 ]*/
else /* if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_16_39) & (memory_controller_waitrequest == 1'd0))) */
begin
tpg_calculate_square_border_23_24 = tpg_calculate_square_border_16__3_reg;
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %23*/
/*   %24 = phi i32 [ %.3, %16 ], [ %., %0 ]*/
if ((((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_36) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_0_15_reg == 1'd0)))
begin
tpg_calculate_square_border_23_24_reg <= tpg_calculate_square_border_23_24;
if (reset == 1'b0 && ^(tpg_calculate_square_border_23_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_23_24_reg"); $finish; end
end
/* tpg_calculate_square_border: %23*/
/*   %24 = phi i32 [ %.3, %16 ], [ %., %0 ]*/
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_16_39) & (memory_controller_waitrequest == 1'd0)))
begin
tpg_calculate_square_border_23_24_reg <= tpg_calculate_square_border_23_24;
if (reset == 1'b0 && ^(tpg_calculate_square_border_23_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_23_24_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %23*/
/*   %25 = sub i32 %2, %24*/
begin
tpg_calculate_square_border_23_25 = (tpg_calculate_square_border_0_2_reg - tpg_calculate_square_border_23_24_reg);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %23*/
/*   %25 = sub i32 %2, %24*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_23_40))
begin
tpg_calculate_square_border_23_25_reg <= tpg_calculate_square_border_23_25;
if (reset == 1'b0 && ^(tpg_calculate_square_border_23_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_23_25_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %23*/
/*   %26 = lshr i32 %25, 1*/
begin
tpg_calculate_square_border_23_26 = (tpg_calculate_square_border_23_25 >>> (32'd1 % 32));
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %23*/
/*   %26 = lshr i32 %25, 1*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_23_40))
begin
tpg_calculate_square_border_23_26_reg <= tpg_calculate_square_border_23_26;
if (reset == 1'b0 && ^(tpg_calculate_square_border_23_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_23_26_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %23*/
/*   %27 = getelementptr inbounds %struct.tpg_data* %tpg, i32 0, i32 5, i32 1*/
begin
tpg_calculate_square_border_23_27 = (arg_tpg + (32 + 4));
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %23*/
/*   %27 = getelementptr inbounds %struct.tpg_data* %tpg, i32 0, i32 5, i32 1*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_23_40))
begin
tpg_calculate_square_border_23_27_reg <= tpg_calculate_square_border_23_27;
if (reset == 1'b0 && ^(tpg_calculate_square_border_23_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_23_27_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %23*/
/*   %28 = getelementptr inbounds %struct.tpg_data* %tpg, i32 0, i32 3*/
begin
tpg_calculate_square_border_23_28 = (arg_tpg + 12);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %23*/
/*   %28 = getelementptr inbounds %struct.tpg_data* %tpg, i32 0, i32 3*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_23_40))
begin
tpg_calculate_square_border_23_28_reg <= tpg_calculate_square_border_23_28;
if (reset == 1'b0 && ^(tpg_calculate_square_border_23_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_23_28_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %23*/
/*   %29 = load i32* %28, align 4, !tbaa !0*/
begin
tpg_calculate_square_border_23_29 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %23*/
/*   %29 = load i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_23_42))
begin
tpg_calculate_square_border_23_29_reg <= tpg_calculate_square_border_23_29;
if (reset == 1'b0 && ^(tpg_calculate_square_border_23_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_23_29_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %23*/
/*   %30 = icmp eq i32 %29, 0*/
begin
tpg_calculate_square_border_23_30 = (tpg_calculate_square_border_23_29 == 32'd0);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %23*/
/*   %30 = icmp eq i32 %29, 0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_23_42))
begin
tpg_calculate_square_border_23_30_reg <= tpg_calculate_square_border_23_30;
if (reset == 1'b0 && ^(tpg_calculate_square_border_23_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_23_30_reg"); $finish; end
end
end
always @(*) begin
tpg_calculate_square_border_31_32 = tpg_calculate_square_border_31_32_stage0_reg;
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %31*/
/*   %32 = mul i32 %., 10*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_44))
begin
tpg_calculate_square_border_31_32_reg <= tpg_calculate_square_border_31_32;
if (reset == 1'b0 && ^(tpg_calculate_square_border_31_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_31_32_reg"); $finish; end
end
/* tpg_calculate_square_border: %31*/
/*   %32 = mul i32 %., 10*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_44))
begin
tpg_calculate_square_border_31_32_reg <= tpg_calculate_square_border_31_32;
if (reset == 1'b0 && ^(tpg_calculate_square_border_31_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_31_32_reg"); $finish; end
end
end
always @(*) begin
tpg_calculate_square_border_31_33 = tpg_calculate_square_border_unsigned_divide_32_0;
end
always @(*) begin
/* tpg_calculate_square_border: %31*/
/*   %33 = udiv i32 %32, 11*/
tpg_calculate_square_border_31_33_reg = tpg_calculate_square_border_0_6_reg;
end
always @(*) begin
/* tpg_calculate_square_border: %34*/
/*   %sq_h.0 = phi i32 [ %33, %31 ], [ %., %23 ]*/
if ((((cur_state == LEGUP_F_tpg_calculate_square_border_BB_23_42) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_23_30 == 1'd0)))
begin
tpg_calculate_square_border_34_sq_h_0 = tpg_calculate_square_border_0___reg;
end
/* tpg_calculate_square_border: %34*/
/*   %sq_h.0 = phi i32 [ %33, %31 ], [ %., %23 ]*/
else /* if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_76) & (memory_controller_waitrequest == 1'd0))) */
begin
tpg_calculate_square_border_34_sq_h_0 = tpg_calculate_square_border_31_33;
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %34*/
/*   %sq_h.0 = phi i32 [ %33, %31 ], [ %., %23 ]*/
if ((((cur_state == LEGUP_F_tpg_calculate_square_border_BB_23_42) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_23_30 == 1'd0)))
begin
tpg_calculate_square_border_34_sq_h_0_reg <= tpg_calculate_square_border_34_sq_h_0;
if (reset == 1'b0 && ^(tpg_calculate_square_border_34_sq_h_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_34_sq_h_0_reg"); $finish; end
end
/* tpg_calculate_square_border: %34*/
/*   %sq_h.0 = phi i32 [ %33, %31 ], [ %., %23 ]*/
if (((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_76) & (memory_controller_waitrequest == 1'd0)))
begin
tpg_calculate_square_border_34_sq_h_0_reg <= tpg_calculate_square_border_34_sq_h_0;
if (reset == 1'b0 && ^(tpg_calculate_square_border_34_sq_h_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_34_sq_h_0_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %34*/
/*   %35 = getelementptr inbounds %struct.tpg_data* %tpg, i32 0, i32 5, i32 2*/
begin
tpg_calculate_square_border_34_35 = (arg_tpg + (32 + 8));
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %34*/
/*   %35 = getelementptr inbounds %struct.tpg_data* %tpg, i32 0, i32 5, i32 2*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_77))
begin
tpg_calculate_square_border_34_35_reg <= tpg_calculate_square_border_34_35;
if (reset == 1'b0 && ^(tpg_calculate_square_border_34_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_34_35_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %34*/
/*   %36 = sub i32 %4, %sq_h.0*/
begin
tpg_calculate_square_border_34_36 = (tpg_calculate_square_border_0_4_reg - tpg_calculate_square_border_34_sq_h_0_reg);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %34*/
/*   %36 = sub i32 %4, %sq_h.0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_77))
begin
tpg_calculate_square_border_34_36_reg <= tpg_calculate_square_border_34_36;
if (reset == 1'b0 && ^(tpg_calculate_square_border_34_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_34_36_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %34*/
/*   %37 = lshr i32 %36, 1*/
begin
tpg_calculate_square_border_34_37 = (tpg_calculate_square_border_34_36 >>> (32'd1 % 32));
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %34*/
/*   %37 = lshr i32 %36, 1*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_77))
begin
tpg_calculate_square_border_34_37_reg <= tpg_calculate_square_border_34_37;
if (reset == 1'b0 && ^(tpg_calculate_square_border_34_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_34_37_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %34*/
/*   %38 = getelementptr inbounds %struct.tpg_data* %tpg, i32 0, i32 5, i32 3*/
begin
tpg_calculate_square_border_34_38 = (arg_tpg + (32 + 12));
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %34*/
/*   %38 = getelementptr inbounds %struct.tpg_data* %tpg, i32 0, i32 5, i32 3*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_77))
begin
tpg_calculate_square_border_34_38_reg <= tpg_calculate_square_border_34_38;
if (reset == 1'b0 && ^(tpg_calculate_square_border_34_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_34_38_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %34*/
/*   %39 = getelementptr inbounds %struct.tpg_data* %tpg, i32 0, i32 4, i32 0*/
begin
tpg_calculate_square_border_34_39 = (arg_tpg + 16);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %34*/
/*   %39 = getelementptr inbounds %struct.tpg_data* %tpg, i32 0, i32 4, i32 0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_77))
begin
tpg_calculate_square_border_34_39_reg <= tpg_calculate_square_border_34_39;
if (reset == 1'b0 && ^(tpg_calculate_square_border_34_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_34_39_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %34*/
/*   %40 = getelementptr inbounds %struct.tpg_data* %tpg, i32 0, i32 4, i32 1*/
begin
tpg_calculate_square_border_34_40 = (arg_tpg + (16 + 4));
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %34*/
/*   %40 = getelementptr inbounds %struct.tpg_data* %tpg, i32 0, i32 4, i32 1*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_77))
begin
tpg_calculate_square_border_34_40_reg <= tpg_calculate_square_border_34_40;
if (reset == 1'b0 && ^(tpg_calculate_square_border_34_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_34_40_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %34*/
/*   %41 = getelementptr inbounds %struct.tpg_data* %tpg, i32 0, i32 4, i32 2*/
begin
tpg_calculate_square_border_34_41 = (arg_tpg + (16 + 8));
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %34*/
/*   %41 = getelementptr inbounds %struct.tpg_data* %tpg, i32 0, i32 4, i32 2*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_77))
begin
tpg_calculate_square_border_34_41_reg <= tpg_calculate_square_border_34_41;
if (reset == 1'b0 && ^(tpg_calculate_square_border_34_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_34_41_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %34*/
/*   %42 = getelementptr inbounds %struct.tpg_data* %tpg, i32 0, i32 4, i32 3*/
begin
tpg_calculate_square_border_34_42 = (arg_tpg + (16 + 12));
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %34*/
/*   %42 = getelementptr inbounds %struct.tpg_data* %tpg, i32 0, i32 4, i32 3*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_77))
begin
tpg_calculate_square_border_34_42_reg <= tpg_calculate_square_border_34_42;
if (reset == 1'b0 && ^(tpg_calculate_square_border_34_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_34_42_reg"); $finish; end
end
end
always @(*) begin
tpg_calculate_square_border_44_45 = tpg_calculate_square_border_44_45_stage0_reg;
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %44*/
/*   %45 = mul i32 %2, 3*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_44_83))
begin
tpg_calculate_square_border_44_45_reg <= tpg_calculate_square_border_44_45;
if (reset == 1'b0 && ^(tpg_calculate_square_border_44_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_44_45_reg"); $finish; end
end
/* tpg_calculate_square_border: %44*/
/*   %45 = mul i32 %2, 3*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_44_83))
begin
tpg_calculate_square_border_44_45_reg <= tpg_calculate_square_border_44_45;
if (reset == 1'b0 && ^(tpg_calculate_square_border_44_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_44_45_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %44*/
/*   %46 = shl i32 %4, 2*/
begin
tpg_calculate_square_border_44_46 = (tpg_calculate_square_border_0_4_reg <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %44*/
/*   %46 = shl i32 %4, 2*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_44_82))
begin
tpg_calculate_square_border_44_46_reg <= tpg_calculate_square_border_44_46;
if (reset == 1'b0 && ^(tpg_calculate_square_border_44_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_44_46_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %44*/
/*   %47 = icmp ult i32 %45, %46*/
begin
tpg_calculate_square_border_44_47 = (tpg_calculate_square_border_44_45 < tpg_calculate_square_border_44_46_reg);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %44*/
/*   %47 = icmp ult i32 %45, %46*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_44_83))
begin
tpg_calculate_square_border_44_47_reg <= tpg_calculate_square_border_44_47;
if (reset == 1'b0 && ^(tpg_calculate_square_border_44_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_44_47_reg"); $finish; end
end
end
always @(*) begin
tpg_calculate_square_border_48_49 = tpg_calculate_square_border_unsigned_divide_32_0;
end
always @(*) begin
/* tpg_calculate_square_border: %48*/
/*   %49 = udiv i32 %46, 3*/
tpg_calculate_square_border_48_49_reg = tpg_calculate_square_border_0_6_reg;
end
always @(*) begin
/* tpg_calculate_square_border: %48*/
/*   %50 = and i32 %49, 2147483646*/
begin
tpg_calculate_square_border_48_50 = (tpg_calculate_square_border_48_49 & 32'd2147483646);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %48*/
/*   %50 = and i32 %49, 2147483646*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_116))
begin
tpg_calculate_square_border_48_50_reg <= tpg_calculate_square_border_48_50;
if (reset == 1'b0 && ^(tpg_calculate_square_border_48_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_48_50_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %48*/
/*   %51 = sub i32 %2, %50*/
begin
tpg_calculate_square_border_48_51 = (tpg_calculate_square_border_0_2_reg - tpg_calculate_square_border_48_50);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %48*/
/*   %51 = sub i32 %2, %50*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_116))
begin
tpg_calculate_square_border_48_51_reg <= tpg_calculate_square_border_48_51;
if (reset == 1'b0 && ^(tpg_calculate_square_border_48_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_48_51_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %48*/
/*   %52 = add i32 %50, -2*/
begin
tpg_calculate_square_border_48_52 = (tpg_calculate_square_border_48_50 + -32'd2);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %48*/
/*   %52 = add i32 %50, -2*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_116))
begin
tpg_calculate_square_border_48_52_reg <= tpg_calculate_square_border_48_52;
if (reset == 1'b0 && ^(tpg_calculate_square_border_48_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_48_52_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %48*/
/*   %53 = icmp ugt i32 %51, 3*/
begin
tpg_calculate_square_border_48_53 = (tpg_calculate_square_border_48_51 > 32'd3);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %48*/
/*   %53 = icmp ugt i32 %51, 3*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_116))
begin
tpg_calculate_square_border_48_53_reg <= tpg_calculate_square_border_48_53;
if (reset == 1'b0 && ^(tpg_calculate_square_border_48_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_48_53_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %48*/
/*   %.4 = select i1 %53, i32 %52, i32 %50*/
begin
tpg_calculate_square_border_48__4 = (tpg_calculate_square_border_48_53 ? tpg_calculate_square_border_48_52 : tpg_calculate_square_border_48_50);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %48*/
/*   %.4 = select i1 %53, i32 %52, i32 %50*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_116))
begin
tpg_calculate_square_border_48__4_reg <= tpg_calculate_square_border_48__4;
if (reset == 1'b0 && ^(tpg_calculate_square_border_48__4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_48__4_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %48*/
/*   %54 = sub i32 %2, %.4*/
begin
tpg_calculate_square_border_48_54 = (tpg_calculate_square_border_0_2_reg - tpg_calculate_square_border_48__4_reg);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %48*/
/*   %54 = sub i32 %2, %.4*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_117))
begin
tpg_calculate_square_border_48_54_reg <= tpg_calculate_square_border_48_54;
if (reset == 1'b0 && ^(tpg_calculate_square_border_48_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_48_54_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %48*/
/*   %55 = lshr i32 %54, 1*/
begin
tpg_calculate_square_border_48_55 = (tpg_calculate_square_border_48_54 >>> (32'd1 % 32));
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %48*/
/*   %55 = lshr i32 %54, 1*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_117))
begin
tpg_calculate_square_border_48_55_reg <= tpg_calculate_square_border_48_55;
if (reset == 1'b0 && ^(tpg_calculate_square_border_48_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_48_55_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %56*/
/*   %57 = lshr i32 %45, 2*/
begin
tpg_calculate_square_border_56_57 = (tpg_calculate_square_border_44_45_reg >>> (32'd2 % 32));
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %56*/
/*   %57 = lshr i32 %45, 2*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_56_119))
begin
tpg_calculate_square_border_56_57_reg <= tpg_calculate_square_border_56_57;
if (reset == 1'b0 && ^(tpg_calculate_square_border_56_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_56_57_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %56*/
/*   %58 = and i32 %57, 1073741822*/
begin
tpg_calculate_square_border_56_58 = (tpg_calculate_square_border_56_57 & 32'd1073741822);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %56*/
/*   %58 = and i32 %57, 1073741822*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_56_119))
begin
tpg_calculate_square_border_56_58_reg <= tpg_calculate_square_border_56_58;
if (reset == 1'b0 && ^(tpg_calculate_square_border_56_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_56_58_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %56*/
/*   %59 = sub i32 %4, %58*/
begin
tpg_calculate_square_border_56_59 = (tpg_calculate_square_border_0_4_reg - tpg_calculate_square_border_56_58);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %56*/
/*   %59 = sub i32 %4, %58*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_56_119))
begin
tpg_calculate_square_border_56_59_reg <= tpg_calculate_square_border_56_59;
if (reset == 1'b0 && ^(tpg_calculate_square_border_56_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_56_59_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %56*/
/*   %60 = lshr i32 %59, 1*/
begin
tpg_calculate_square_border_56_60 = (tpg_calculate_square_border_56_59 >>> (32'd1 % 32));
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %56*/
/*   %60 = lshr i32 %59, 1*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_56_119))
begin
tpg_calculate_square_border_56_60_reg <= tpg_calculate_square_border_56_60;
if (reset == 1'b0 && ^(tpg_calculate_square_border_56_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_56_60_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %62*/
/*   %63 = add i32 %4, -506*/
begin
tpg_calculate_square_border_62_63 = (tpg_calculate_square_border_0_4_reg + -32'd506);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %62*/
/*   %63 = add i32 %4, -506*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_62_122))
begin
tpg_calculate_square_border_62_63_reg <= tpg_calculate_square_border_62_63;
if (reset == 1'b0 && ^(tpg_calculate_square_border_62_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_62_63_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %62*/
/*   %64 = lshr i32 %63, 1*/
begin
tpg_calculate_square_border_62_64 = (tpg_calculate_square_border_62_63 >>> (32'd1 % 32));
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %62*/
/*   %64 = lshr i32 %63, 1*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_62_122))
begin
tpg_calculate_square_border_62_64_reg <= tpg_calculate_square_border_62_64;
if (reset == 1'b0 && ^(tpg_calculate_square_border_62_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_62_64_reg"); $finish; end
end
end
always @(*) begin
tpg_calculate_square_border_65_66 = tpg_calculate_square_border_65_66_stage0_reg;
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %65*/
/*   %66 = mul i32 %2, 9*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_65_125))
begin
tpg_calculate_square_border_65_66_reg <= tpg_calculate_square_border_65_66;
if (reset == 1'b0 && ^(tpg_calculate_square_border_65_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_65_66_reg"); $finish; end
end
/* tpg_calculate_square_border: %65*/
/*   %66 = mul i32 %2, 9*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_65_125))
begin
tpg_calculate_square_border_65_66_reg <= tpg_calculate_square_border_65_66;
if (reset == 1'b0 && ^(tpg_calculate_square_border_65_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_65_66_reg"); $finish; end
end
end
always @(*) begin
tpg_calculate_square_border_65_67 = tpg_calculate_square_border_65_67_stage0_reg;
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %65*/
/*   %67 = mul i32 %4, 14*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_65_125))
begin
tpg_calculate_square_border_65_67_reg <= tpg_calculate_square_border_65_67;
if (reset == 1'b0 && ^(tpg_calculate_square_border_65_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_65_67_reg"); $finish; end
end
/* tpg_calculate_square_border: %65*/
/*   %67 = mul i32 %4, 14*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_65_125))
begin
tpg_calculate_square_border_65_67_reg <= tpg_calculate_square_border_65_67;
if (reset == 1'b0 && ^(tpg_calculate_square_border_65_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_65_67_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %65*/
/*   %68 = icmp ult i32 %66, %67*/
begin
tpg_calculate_square_border_65_68 = (tpg_calculate_square_border_65_66 < tpg_calculate_square_border_65_67);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %65*/
/*   %68 = icmp ult i32 %66, %67*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_65_125))
begin
tpg_calculate_square_border_65_68_reg <= tpg_calculate_square_border_65_68;
if (reset == 1'b0 && ^(tpg_calculate_square_border_65_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_65_68_reg"); $finish; end
end
end
always @(*) begin
tpg_calculate_square_border_69_70 = tpg_calculate_square_border_unsigned_divide_32_0;
end
always @(*) begin
/* tpg_calculate_square_border: %69*/
/*   %70 = udiv i32 %67, 9*/
tpg_calculate_square_border_69_70_reg = tpg_calculate_square_border_0_6_reg;
end
always @(*) begin
/* tpg_calculate_square_border: %69*/
/*   %71 = and i32 %70, 536870910*/
begin
tpg_calculate_square_border_69_71 = (tpg_calculate_square_border_69_70 & 32'd536870910);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %69*/
/*   %71 = and i32 %70, 536870910*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_158))
begin
tpg_calculate_square_border_69_71_reg <= tpg_calculate_square_border_69_71;
if (reset == 1'b0 && ^(tpg_calculate_square_border_69_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_69_71_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %69*/
/*   %72 = sub i32 %2, %71*/
begin
tpg_calculate_square_border_69_72 = (tpg_calculate_square_border_0_2_reg - tpg_calculate_square_border_69_71);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %69*/
/*   %72 = sub i32 %2, %71*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_158))
begin
tpg_calculate_square_border_69_72_reg <= tpg_calculate_square_border_69_72;
if (reset == 1'b0 && ^(tpg_calculate_square_border_69_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_69_72_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %69*/
/*   %73 = add i32 %71, -2*/
begin
tpg_calculate_square_border_69_73 = (tpg_calculate_square_border_69_71 + -32'd2);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %69*/
/*   %73 = add i32 %71, -2*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_158))
begin
tpg_calculate_square_border_69_73_reg <= tpg_calculate_square_border_69_73;
if (reset == 1'b0 && ^(tpg_calculate_square_border_69_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_69_73_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %69*/
/*   %74 = icmp ugt i32 %72, 3*/
begin
tpg_calculate_square_border_69_74 = (tpg_calculate_square_border_69_72 > 32'd3);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %69*/
/*   %74 = icmp ugt i32 %72, 3*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_158))
begin
tpg_calculate_square_border_69_74_reg <= tpg_calculate_square_border_69_74;
if (reset == 1'b0 && ^(tpg_calculate_square_border_69_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_69_74_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %69*/
/*   %.5 = select i1 %74, i32 %73, i32 %71*/
begin
tpg_calculate_square_border_69__5 = (tpg_calculate_square_border_69_74 ? tpg_calculate_square_border_69_73 : tpg_calculate_square_border_69_71);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %69*/
/*   %.5 = select i1 %74, i32 %73, i32 %71*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_158))
begin
tpg_calculate_square_border_69__5_reg <= tpg_calculate_square_border_69__5;
if (reset == 1'b0 && ^(tpg_calculate_square_border_69__5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_69__5_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %69*/
/*   %75 = sub i32 %2, %.5*/
begin
tpg_calculate_square_border_69_75 = (tpg_calculate_square_border_0_2_reg - tpg_calculate_square_border_69__5_reg);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %69*/
/*   %75 = sub i32 %2, %.5*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_159))
begin
tpg_calculate_square_border_69_75_reg <= tpg_calculate_square_border_69_75;
if (reset == 1'b0 && ^(tpg_calculate_square_border_69_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_69_75_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %69*/
/*   %76 = lshr i32 %75, 1*/
begin
tpg_calculate_square_border_69_76 = (tpg_calculate_square_border_69_75 >>> (32'd1 % 32));
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %69*/
/*   %76 = lshr i32 %75, 1*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_159))
begin
tpg_calculate_square_border_69_76_reg <= tpg_calculate_square_border_69_76;
if (reset == 1'b0 && ^(tpg_calculate_square_border_69_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_69_76_reg"); $finish; end
end
end
always @(*) begin
tpg_calculate_square_border_77_78 = tpg_calculate_square_border_unsigned_divide_32_0;
end
always @(*) begin
/* tpg_calculate_square_border: %77*/
/*   %78 = udiv i32 %66, 14*/
tpg_calculate_square_border_77_78_reg = tpg_calculate_square_border_0_6_reg;
end
always @(*) begin
/* tpg_calculate_square_border: %77*/
/*   %79 = and i32 %78, 536870910*/
begin
tpg_calculate_square_border_77_79 = (tpg_calculate_square_border_77_78 & 32'd536870910);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %77*/
/*   %79 = and i32 %78, 536870910*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_193))
begin
tpg_calculate_square_border_77_79_reg <= tpg_calculate_square_border_77_79;
if (reset == 1'b0 && ^(tpg_calculate_square_border_77_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_77_79_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %77*/
/*   %80 = sub i32 %4, %79*/
begin
tpg_calculate_square_border_77_80 = (tpg_calculate_square_border_0_4_reg - tpg_calculate_square_border_77_79);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %77*/
/*   %80 = sub i32 %4, %79*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_193))
begin
tpg_calculate_square_border_77_80_reg <= tpg_calculate_square_border_77_80;
if (reset == 1'b0 && ^(tpg_calculate_square_border_77_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_77_80_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %77*/
/*   %81 = lshr i32 %80, 1*/
begin
tpg_calculate_square_border_77_81 = (tpg_calculate_square_border_77_80 >>> (32'd1 % 32));
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %77*/
/*   %81 = lshr i32 %80, 1*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_193))
begin
tpg_calculate_square_border_77_81_reg <= tpg_calculate_square_border_77_81;
if (reset == 1'b0 && ^(tpg_calculate_square_border_77_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_77_81_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %83*/
/*   %84 = add i32 %4, -442*/
begin
tpg_calculate_square_border_83_84 = (tpg_calculate_square_border_0_4_reg + -32'd442);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %83*/
/*   %84 = add i32 %4, -442*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_83_196))
begin
tpg_calculate_square_border_83_84_reg <= tpg_calculate_square_border_83_84;
if (reset == 1'b0 && ^(tpg_calculate_square_border_83_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_83_84_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %83*/
/*   %85 = lshr i32 %84, 1*/
begin
tpg_calculate_square_border_83_85 = (tpg_calculate_square_border_83_84 >>> (32'd1 % 32));
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %83*/
/*   %85 = lshr i32 %84, 1*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_83_196))
begin
tpg_calculate_square_border_83_85_reg <= tpg_calculate_square_border_83_85;
if (reset == 1'b0 && ^(tpg_calculate_square_border_83_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_83_85_reg"); $finish; end
end
end
always @(*) begin
tpg_calculate_square_border_86_87 = tpg_calculate_square_border_86_87_stage0_reg;
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %86*/
/*   %87 = mul i32 %2, 9*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_86_199))
begin
tpg_calculate_square_border_86_87_reg <= tpg_calculate_square_border_86_87;
if (reset == 1'b0 && ^(tpg_calculate_square_border_86_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_86_87_reg"); $finish; end
end
/* tpg_calculate_square_border: %86*/
/*   %87 = mul i32 %2, 9*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_86_199))
begin
tpg_calculate_square_border_86_87_reg <= tpg_calculate_square_border_86_87;
if (reset == 1'b0 && ^(tpg_calculate_square_border_86_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_86_87_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %86*/
/*   %88 = shl i32 %4, 4*/
begin
tpg_calculate_square_border_86_88 = (tpg_calculate_square_border_0_4_reg <<< (32'd4 % 32));
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %86*/
/*   %88 = shl i32 %4, 4*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_86_198))
begin
tpg_calculate_square_border_86_88_reg <= tpg_calculate_square_border_86_88;
if (reset == 1'b0 && ^(tpg_calculate_square_border_86_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_86_88_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %86*/
/*   %89 = icmp ult i32 %87, %88*/
begin
tpg_calculate_square_border_86_89 = (tpg_calculate_square_border_86_87 < tpg_calculate_square_border_86_88_reg);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %86*/
/*   %89 = icmp ult i32 %87, %88*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_86_199))
begin
tpg_calculate_square_border_86_89_reg <= tpg_calculate_square_border_86_89;
if (reset == 1'b0 && ^(tpg_calculate_square_border_86_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_86_89_reg"); $finish; end
end
end
always @(*) begin
tpg_calculate_square_border_90_91 = tpg_calculate_square_border_unsigned_divide_32_0;
end
always @(*) begin
/* tpg_calculate_square_border: %90*/
/*   %91 = udiv i32 %88, 9*/
tpg_calculate_square_border_90_91_reg = tpg_calculate_square_border_0_6_reg;
end
always @(*) begin
/* tpg_calculate_square_border: %90*/
/*   %92 = and i32 %91, 536870910*/
begin
tpg_calculate_square_border_90_92 = (tpg_calculate_square_border_90_91 & 32'd536870910);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %90*/
/*   %92 = and i32 %91, 536870910*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_232))
begin
tpg_calculate_square_border_90_92_reg <= tpg_calculate_square_border_90_92;
if (reset == 1'b0 && ^(tpg_calculate_square_border_90_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_90_92_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %90*/
/*   %93 = sub i32 %2, %92*/
begin
tpg_calculate_square_border_90_93 = (tpg_calculate_square_border_0_2_reg - tpg_calculate_square_border_90_92);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %90*/
/*   %93 = sub i32 %2, %92*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_232))
begin
tpg_calculate_square_border_90_93_reg <= tpg_calculate_square_border_90_93;
if (reset == 1'b0 && ^(tpg_calculate_square_border_90_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_90_93_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %90*/
/*   %94 = add i32 %92, -2*/
begin
tpg_calculate_square_border_90_94 = (tpg_calculate_square_border_90_92 + -32'd2);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %90*/
/*   %94 = add i32 %92, -2*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_232))
begin
tpg_calculate_square_border_90_94_reg <= tpg_calculate_square_border_90_94;
if (reset == 1'b0 && ^(tpg_calculate_square_border_90_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_90_94_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %90*/
/*   %95 = icmp ugt i32 %93, 3*/
begin
tpg_calculate_square_border_90_95 = (tpg_calculate_square_border_90_93 > 32'd3);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %90*/
/*   %95 = icmp ugt i32 %93, 3*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_232))
begin
tpg_calculate_square_border_90_95_reg <= tpg_calculate_square_border_90_95;
if (reset == 1'b0 && ^(tpg_calculate_square_border_90_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_90_95_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %90*/
/*   %.6 = select i1 %95, i32 %94, i32 %92*/
begin
tpg_calculate_square_border_90__6 = (tpg_calculate_square_border_90_95 ? tpg_calculate_square_border_90_94 : tpg_calculate_square_border_90_92);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %90*/
/*   %.6 = select i1 %95, i32 %94, i32 %92*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_232))
begin
tpg_calculate_square_border_90__6_reg <= tpg_calculate_square_border_90__6;
if (reset == 1'b0 && ^(tpg_calculate_square_border_90__6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_90__6_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %90*/
/*   %96 = sub i32 %2, %.6*/
begin
tpg_calculate_square_border_90_96 = (tpg_calculate_square_border_0_2_reg - tpg_calculate_square_border_90__6_reg);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %90*/
/*   %96 = sub i32 %2, %.6*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_233))
begin
tpg_calculate_square_border_90_96_reg <= tpg_calculate_square_border_90_96;
if (reset == 1'b0 && ^(tpg_calculate_square_border_90_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_90_96_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %90*/
/*   %97 = lshr i32 %96, 1*/
begin
tpg_calculate_square_border_90_97 = (tpg_calculate_square_border_90_96 >>> (32'd1 % 32));
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %90*/
/*   %97 = lshr i32 %96, 1*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_233))
begin
tpg_calculate_square_border_90_97_reg <= tpg_calculate_square_border_90_97;
if (reset == 1'b0 && ^(tpg_calculate_square_border_90_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_90_97_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %98*/
/*   %99 = lshr i32 %87, 4*/
begin
tpg_calculate_square_border_98_99 = (tpg_calculate_square_border_86_87_reg >>> (32'd4 % 32));
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %98*/
/*   %99 = lshr i32 %87, 4*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_98_235))
begin
tpg_calculate_square_border_98_99_reg <= tpg_calculate_square_border_98_99;
if (reset == 1'b0 && ^(tpg_calculate_square_border_98_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_98_99_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %98*/
/*   %100 = and i32 %99, 268435454*/
begin
tpg_calculate_square_border_98_100 = (tpg_calculate_square_border_98_99 & 32'd268435454);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %98*/
/*   %100 = and i32 %99, 268435454*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_98_235))
begin
tpg_calculate_square_border_98_100_reg <= tpg_calculate_square_border_98_100;
if (reset == 1'b0 && ^(tpg_calculate_square_border_98_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_98_100_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %98*/
/*   %101 = sub i32 %4, %100*/
begin
tpg_calculate_square_border_98_101 = (tpg_calculate_square_border_0_4_reg - tpg_calculate_square_border_98_100);
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %98*/
/*   %101 = sub i32 %4, %100*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_98_235))
begin
tpg_calculate_square_border_98_101_reg <= tpg_calculate_square_border_98_101;
if (reset == 1'b0 && ^(tpg_calculate_square_border_98_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_98_101_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %98*/
/*   %102 = lshr i32 %101, 1*/
begin
tpg_calculate_square_border_98_102 = (tpg_calculate_square_border_98_101 >>> (32'd1 % 32));
end
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %98*/
/*   %102 = lshr i32 %101, 1*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_98_235))
begin
tpg_calculate_square_border_98_102_reg <= tpg_calculate_square_border_98_102;
if (reset == 1'b0 && ^(tpg_calculate_square_border_98_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_98_102_reg"); $finish; end
end
end
always @(*) begin
/* tpg_calculate_square_border: %0*/
/*   %6 = udiv i32 %5, 5*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_3))
begin
tpg_calculate_square_border_unsigned_divide_32_0_op0 = tpg_calculate_square_border_0_5;
end
/* tpg_calculate_square_border: %31*/
/*   %33 = udiv i32 %32, 11*/
else if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_44))
begin
tpg_calculate_square_border_unsigned_divide_32_0_op0 = tpg_calculate_square_border_31_32;
end
/* tpg_calculate_square_border: %48*/
/*   %49 = udiv i32 %46, 3*/
else if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_84))
begin
tpg_calculate_square_border_unsigned_divide_32_0_op0 = tpg_calculate_square_border_44_46_reg;
end
/* tpg_calculate_square_border: %69*/
/*   %70 = udiv i32 %67, 9*/
else if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_126))
begin
tpg_calculate_square_border_unsigned_divide_32_0_op0 = tpg_calculate_square_border_65_67_reg;
end
/* tpg_calculate_square_border: %77*/
/*   %78 = udiv i32 %66, 14*/
else if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_161))
begin
tpg_calculate_square_border_unsigned_divide_32_0_op0 = tpg_calculate_square_border_65_66_reg;
end
/* tpg_calculate_square_border: %90*/
/*   %91 = udiv i32 %88, 9*/
else /* if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_200)) */
begin
tpg_calculate_square_border_unsigned_divide_32_0_op0 = tpg_calculate_square_border_86_88_reg;
end
end
always @(*) begin
/* tpg_calculate_square_border: %0*/
/*   %6 = udiv i32 %5, 5*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_3))
begin
tpg_calculate_square_border_unsigned_divide_32_0_op1 = 32'd5;
end
/* tpg_calculate_square_border: %31*/
/*   %33 = udiv i32 %32, 11*/
else if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_31_44))
begin
tpg_calculate_square_border_unsigned_divide_32_0_op1 = 32'd11;
end
/* tpg_calculate_square_border: %48*/
/*   %49 = udiv i32 %46, 3*/
else if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_84))
begin
tpg_calculate_square_border_unsigned_divide_32_0_op1 = 32'd3;
end
/* tpg_calculate_square_border: %69*/
/*   %70 = udiv i32 %67, 9*/
else if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_126))
begin
tpg_calculate_square_border_unsigned_divide_32_0_op1 = 32'd9;
end
/* tpg_calculate_square_border: %77*/
/*   %78 = udiv i32 %66, 14*/
else if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_161))
begin
tpg_calculate_square_border_unsigned_divide_32_0_op1 = 32'd14;
end
/* tpg_calculate_square_border: %90*/
/*   %91 = udiv i32 %88, 9*/
else /* if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_200)) */
begin
tpg_calculate_square_border_unsigned_divide_32_0_op1 = 32'd9;
end
end
always @(*) begin
lpm_divide_tpg_calculate_square_border_0_6_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_tpg_calculate_square_border_0_6_out = lpm_divide_tpg_calculate_square_border_0_6_temp_out;
end
always @(*) begin
tpg_calculate_square_border_unsigned_divide_32_0 = lpm_divide_tpg_calculate_square_border_0_6_out;
end
always @(*) begin
lpm_mult_tpg_calculate_square_border_16_18_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %16*/
/*   %18 = mul i32 %17, 3*/
if ((lpm_mult_tpg_calculate_square_border_16_18_en == 1'd1))
begin
tpg_calculate_square_border_16_18_stage0_reg <= (tpg_calculate_square_border_16_17 * 32'd3);
end
end
always @(*) begin
lpm_mult_tpg_calculate_square_border_31_32_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %31*/
/*   %32 = mul i32 %., 10*/
if ((lpm_mult_tpg_calculate_square_border_31_32_en == 1'd1))
begin
tpg_calculate_square_border_31_32_stage0_reg <= (tpg_calculate_square_border_0___reg * 32'd10);
end
end
always @(*) begin
lpm_divide_tpg_calculate_square_border_31_33_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_tpg_calculate_square_border_44_45_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %44*/
/*   %45 = mul i32 %2, 3*/
if ((lpm_mult_tpg_calculate_square_border_44_45_en == 1'd1))
begin
tpg_calculate_square_border_44_45_stage0_reg <= (tpg_calculate_square_border_0_2_reg * 32'd3);
end
end
always @(*) begin
lpm_divide_tpg_calculate_square_border_48_49_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_tpg_calculate_square_border_65_66_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %65*/
/*   %66 = mul i32 %2, 9*/
if ((lpm_mult_tpg_calculate_square_border_65_66_en == 1'd1))
begin
tpg_calculate_square_border_65_66_stage0_reg <= (tpg_calculate_square_border_0_2_reg * 32'd9);
end
end
always @(*) begin
lpm_mult_tpg_calculate_square_border_65_67_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %65*/
/*   %67 = mul i32 %4, 14*/
if ((lpm_mult_tpg_calculate_square_border_65_67_en == 1'd1))
begin
tpg_calculate_square_border_65_67_stage0_reg <= (tpg_calculate_square_border_0_4_reg * 32'd14);
end
end
always @(*) begin
lpm_divide_tpg_calculate_square_border_69_70_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_tpg_calculate_square_border_77_78_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_tpg_calculate_square_border_86_87_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* tpg_calculate_square_border: %86*/
/*   %87 = mul i32 %2, 9*/
if ((lpm_mult_tpg_calculate_square_border_86_87_en == 1'd1))
begin
tpg_calculate_square_border_86_87_stage0_reg <= (tpg_calculate_square_border_0_2_reg * 32'd9);
end
end
always @(*) begin
lpm_divide_tpg_calculate_square_border_90_91_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* tpg_calculate_square_border: %103*/
/*   ret void*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_103_237))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* tpg_calculate_square_border: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* tpg_calculate_square_border: %0*/
/*   %14 = load i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_2))
begin
memory_controller_enable_a = 1'd1;
end
/* tpg_calculate_square_border: %23*/
/*   store i32 %26, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_23_40))
begin
memory_controller_enable_a = 1'd1;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 %sq_h.0, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_77))
begin
memory_controller_enable_a = 1'd1;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 0, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_78))
begin
memory_controller_enable_a = 1'd1;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 0, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_79))
begin
memory_controller_enable_a = 1'd1;
end
/* tpg_calculate_square_border: %48*/
/*   store i32 %55, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_117))
begin
memory_controller_enable_a = 1'd1;
end
/* tpg_calculate_square_border: %56*/
/*   store i32 %60, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_56_119))
begin
memory_controller_enable_a = 1'd1;
end
/* tpg_calculate_square_border: %62*/
/*   store i32 %64, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_62_122))
begin
memory_controller_enable_a = 1'd1;
end
/* tpg_calculate_square_border: %69*/
/*   store i32 %76, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_159))
begin
memory_controller_enable_a = 1'd1;
end
/* tpg_calculate_square_border: %77*/
/*   store i32 %81, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_193))
begin
memory_controller_enable_a = 1'd1;
end
/* tpg_calculate_square_border: %83*/
/*   store i32 %85, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_83_196))
begin
memory_controller_enable_a = 1'd1;
end
/* tpg_calculate_square_border: %90*/
/*   store i32 %97, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_233))
begin
memory_controller_enable_a = 1'd1;
end
/* tpg_calculate_square_border: %98*/
/*   store i32 %102, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_98_235))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* tpg_calculate_square_border: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_1))
begin
memory_controller_address_a = tpg_calculate_square_border_0_1;
end
/* tpg_calculate_square_border: %0*/
/*   %14 = load i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_2))
begin
memory_controller_address_a = tpg_calculate_square_border_0_13_reg;
end
/* tpg_calculate_square_border: %23*/
/*   store i32 %26, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_23_40))
begin
memory_controller_address_a = tpg_calculate_square_border_23_27;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 %sq_h.0, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_77))
begin
memory_controller_address_a = tpg_calculate_square_border_34_35;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 0, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_78))
begin
memory_controller_address_a = tpg_calculate_square_border_34_39_reg;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 0, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_79))
begin
memory_controller_address_a = tpg_calculate_square_border_34_41_reg;
end
/* tpg_calculate_square_border: %48*/
/*   store i32 %55, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_117))
begin
memory_controller_address_a = tpg_calculate_square_border_34_39_reg;
end
/* tpg_calculate_square_border: %56*/
/*   store i32 %60, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_56_119))
begin
memory_controller_address_a = tpg_calculate_square_border_34_41_reg;
end
/* tpg_calculate_square_border: %62*/
/*   store i32 %64, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_62_122))
begin
memory_controller_address_a = tpg_calculate_square_border_34_41_reg;
end
/* tpg_calculate_square_border: %69*/
/*   store i32 %76, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_159))
begin
memory_controller_address_a = tpg_calculate_square_border_34_39_reg;
end
/* tpg_calculate_square_border: %77*/
/*   store i32 %81, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_193))
begin
memory_controller_address_a = tpg_calculate_square_border_34_41_reg;
end
/* tpg_calculate_square_border: %83*/
/*   store i32 %85, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_83_196))
begin
memory_controller_address_a = tpg_calculate_square_border_34_41_reg;
end
/* tpg_calculate_square_border: %90*/
/*   store i32 %97, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_233))
begin
memory_controller_address_a = tpg_calculate_square_border_34_39_reg;
end
/* tpg_calculate_square_border: %98*/
/*   store i32 %102, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_98_235))
begin
memory_controller_address_a = tpg_calculate_square_border_34_41_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tpg_calculate_square_border: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tpg_calculate_square_border: %0*/
/*   %14 = load i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_2))
begin
memory_controller_write_enable_a = 1'd0;
end
/* tpg_calculate_square_border: %23*/
/*   store i32 %26, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_23_40))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 %sq_h.0, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_77))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 0, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_78))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 0, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_79))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tpg_calculate_square_border: %48*/
/*   store i32 %55, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_117))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tpg_calculate_square_border: %56*/
/*   store i32 %60, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_56_119))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tpg_calculate_square_border: %62*/
/*   store i32 %64, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_62_122))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tpg_calculate_square_border: %69*/
/*   store i32 %76, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_159))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tpg_calculate_square_border: %77*/
/*   store i32 %81, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_193))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tpg_calculate_square_border: %83*/
/*   store i32 %85, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_83_196))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tpg_calculate_square_border: %90*/
/*   store i32 %97, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_233))
begin
memory_controller_write_enable_a = 1'd1;
end
/* tpg_calculate_square_border: %98*/
/*   store i32 %102, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_98_235))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* tpg_calculate_square_border: %23*/
/*   store i32 %26, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_23_40))
begin
memory_controller_in_a = tpg_calculate_square_border_23_26;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 %sq_h.0, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_77))
begin
memory_controller_in_a = tpg_calculate_square_border_34_sq_h_0_reg;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 0, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_78))
begin
memory_controller_in_a = 32'd0;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 0, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_79))
begin
memory_controller_in_a = 32'd0;
end
/* tpg_calculate_square_border: %48*/
/*   store i32 %55, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_117))
begin
memory_controller_in_a = tpg_calculate_square_border_48_55;
end
/* tpg_calculate_square_border: %56*/
/*   store i32 %60, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_56_119))
begin
memory_controller_in_a = tpg_calculate_square_border_56_60;
end
/* tpg_calculate_square_border: %62*/
/*   store i32 %64, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_62_122))
begin
memory_controller_in_a = tpg_calculate_square_border_62_64;
end
/* tpg_calculate_square_border: %69*/
/*   store i32 %76, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_159))
begin
memory_controller_in_a = tpg_calculate_square_border_69_76;
end
/* tpg_calculate_square_border: %77*/
/*   store i32 %81, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_193))
begin
memory_controller_in_a = tpg_calculate_square_border_77_81;
end
/* tpg_calculate_square_border: %83*/
/*   store i32 %85, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_83_196))
begin
memory_controller_in_a = tpg_calculate_square_border_83_85;
end
/* tpg_calculate_square_border: %90*/
/*   store i32 %97, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_233))
begin
memory_controller_in_a = tpg_calculate_square_border_90_97;
end
/* tpg_calculate_square_border: %98*/
/*   store i32 %102, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_98_235))
begin
memory_controller_in_a = tpg_calculate_square_border_98_102;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* tpg_calculate_square_border: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* tpg_calculate_square_border: %0*/
/*   %14 = load i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_2))
begin
memory_controller_size_a = 2'd2;
end
/* tpg_calculate_square_border: %23*/
/*   store i32 %26, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_23_40))
begin
memory_controller_size_a = 2'd2;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 %sq_h.0, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_77))
begin
memory_controller_size_a = 2'd2;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 0, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_78))
begin
memory_controller_size_a = 2'd2;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 0, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_79))
begin
memory_controller_size_a = 2'd2;
end
/* tpg_calculate_square_border: %48*/
/*   store i32 %55, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_117))
begin
memory_controller_size_a = 2'd2;
end
/* tpg_calculate_square_border: %56*/
/*   store i32 %60, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_56_119))
begin
memory_controller_size_a = 2'd2;
end
/* tpg_calculate_square_border: %62*/
/*   store i32 %64, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_62_122))
begin
memory_controller_size_a = 2'd2;
end
/* tpg_calculate_square_border: %69*/
/*   store i32 %76, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_159))
begin
memory_controller_size_a = 2'd2;
end
/* tpg_calculate_square_border: %77*/
/*   store i32 %81, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_193))
begin
memory_controller_size_a = 2'd2;
end
/* tpg_calculate_square_border: %83*/
/*   store i32 %85, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_83_196))
begin
memory_controller_size_a = 2'd2;
end
/* tpg_calculate_square_border: %90*/
/*   store i32 %97, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_233))
begin
memory_controller_size_a = 2'd2;
end
/* tpg_calculate_square_border: %98*/
/*   store i32 %102, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_98_235))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* tpg_calculate_square_border: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_1))
begin
memory_controller_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %0*/
/*   store i32 %., i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_35))
begin
memory_controller_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %16*/
/*   store i32 %.3, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_16_38))
begin
memory_controller_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %23*/
/*   %29 = load i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_23_40))
begin
memory_controller_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 %37, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_77))
begin
memory_controller_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 %2, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_78))
begin
memory_controller_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 %4, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_79))
begin
memory_controller_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %48*/
/*   store i32 %.4, i32* %40, align 4*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_116))
begin
memory_controller_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %56*/
/*   store i32 %58, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_56_119))
begin
memory_controller_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %62*/
/*   store i32 506, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_62_122))
begin
memory_controller_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %69*/
/*   store i32 %.5, i32* %40, align 4*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_158))
begin
memory_controller_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %77*/
/*   store i32 %79, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_193))
begin
memory_controller_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %83*/
/*   store i32 442, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_83_196))
begin
memory_controller_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %90*/
/*   store i32 %.6, i32* %40, align 4*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_232))
begin
memory_controller_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %98*/
/*   store i32 %100, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_98_235))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* tpg_calculate_square_border: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_1))
begin
memory_controller_address_b = tpg_calculate_square_border_0_3;
end
/* tpg_calculate_square_border: %0*/
/*   store i32 %., i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_35))
begin
memory_controller_address_b = tpg_calculate_square_border_0_12_reg;
end
/* tpg_calculate_square_border: %16*/
/*   store i32 %.3, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_16_38))
begin
memory_controller_address_b = tpg_calculate_square_border_0_12_reg;
end
/* tpg_calculate_square_border: %23*/
/*   %29 = load i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_23_40))
begin
memory_controller_address_b = tpg_calculate_square_border_23_28;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 %37, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_77))
begin
memory_controller_address_b = tpg_calculate_square_border_34_38;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 %2, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_78))
begin
memory_controller_address_b = tpg_calculate_square_border_34_40_reg;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 %4, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_79))
begin
memory_controller_address_b = tpg_calculate_square_border_34_42_reg;
end
/* tpg_calculate_square_border: %48*/
/*   store i32 %.4, i32* %40, align 4*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_116))
begin
memory_controller_address_b = tpg_calculate_square_border_34_40_reg;
end
/* tpg_calculate_square_border: %56*/
/*   store i32 %58, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_56_119))
begin
memory_controller_address_b = tpg_calculate_square_border_34_42_reg;
end
/* tpg_calculate_square_border: %62*/
/*   store i32 506, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_62_122))
begin
memory_controller_address_b = tpg_calculate_square_border_34_42_reg;
end
/* tpg_calculate_square_border: %69*/
/*   store i32 %.5, i32* %40, align 4*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_158))
begin
memory_controller_address_b = tpg_calculate_square_border_34_40_reg;
end
/* tpg_calculate_square_border: %77*/
/*   store i32 %79, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_193))
begin
memory_controller_address_b = tpg_calculate_square_border_34_42_reg;
end
/* tpg_calculate_square_border: %83*/
/*   store i32 442, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_83_196))
begin
memory_controller_address_b = tpg_calculate_square_border_34_42_reg;
end
/* tpg_calculate_square_border: %90*/
/*   store i32 %.6, i32* %40, align 4*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_232))
begin
memory_controller_address_b = tpg_calculate_square_border_34_40_reg;
end
/* tpg_calculate_square_border: %98*/
/*   store i32 %100, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_98_235))
begin
memory_controller_address_b = tpg_calculate_square_border_34_42_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tpg_calculate_square_border: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_1))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tpg_calculate_square_border: %0*/
/*   store i32 %., i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_35))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %16*/
/*   store i32 %.3, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_16_38))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %23*/
/*   %29 = load i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_23_40))
begin
memory_controller_write_enable_b = 1'd0;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 %37, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_77))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 %2, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_78))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 %4, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_79))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %48*/
/*   store i32 %.4, i32* %40, align 4*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_116))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %56*/
/*   store i32 %58, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_56_119))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %62*/
/*   store i32 506, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_62_122))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %69*/
/*   store i32 %.5, i32* %40, align 4*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_158))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %77*/
/*   store i32 %79, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_193))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %83*/
/*   store i32 442, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_83_196))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %90*/
/*   store i32 %.6, i32* %40, align 4*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_232))
begin
memory_controller_write_enable_b = 1'd1;
end
/* tpg_calculate_square_border: %98*/
/*   store i32 %100, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_98_235))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* tpg_calculate_square_border: %0*/
/*   store i32 %., i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_35))
begin
memory_controller_in_b = tpg_calculate_square_border_0__;
end
/* tpg_calculate_square_border: %16*/
/*   store i32 %.3, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_16_38))
begin
memory_controller_in_b = tpg_calculate_square_border_16__3;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 %37, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_77))
begin
memory_controller_in_b = tpg_calculate_square_border_34_37;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 %2, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_78))
begin
memory_controller_in_b = tpg_calculate_square_border_0_2_reg;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 %4, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_79))
begin
memory_controller_in_b = tpg_calculate_square_border_0_4_reg;
end
/* tpg_calculate_square_border: %48*/
/*   store i32 %.4, i32* %40, align 4*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_116))
begin
memory_controller_in_b = tpg_calculate_square_border_48__4;
end
/* tpg_calculate_square_border: %56*/
/*   store i32 %58, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_56_119))
begin
memory_controller_in_b = tpg_calculate_square_border_56_58;
end
/* tpg_calculate_square_border: %62*/
/*   store i32 506, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_62_122))
begin
memory_controller_in_b = 32'd506;
end
/* tpg_calculate_square_border: %69*/
/*   store i32 %.5, i32* %40, align 4*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_158))
begin
memory_controller_in_b = tpg_calculate_square_border_69__5;
end
/* tpg_calculate_square_border: %77*/
/*   store i32 %79, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_193))
begin
memory_controller_in_b = tpg_calculate_square_border_77_79;
end
/* tpg_calculate_square_border: %83*/
/*   store i32 442, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_83_196))
begin
memory_controller_in_b = 32'd442;
end
/* tpg_calculate_square_border: %90*/
/*   store i32 %.6, i32* %40, align 4*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_232))
begin
memory_controller_in_b = tpg_calculate_square_border_90__6;
end
/* tpg_calculate_square_border: %98*/
/*   store i32 %100, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_98_235))
begin
memory_controller_in_b = tpg_calculate_square_border_98_100;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* tpg_calculate_square_border: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_1))
begin
memory_controller_size_b = 2'd2;
end
/* tpg_calculate_square_border: %0*/
/*   store i32 %., i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_0_35))
begin
memory_controller_size_b = 2'd2;
end
/* tpg_calculate_square_border: %16*/
/*   store i32 %.3, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_16_38))
begin
memory_controller_size_b = 2'd2;
end
/* tpg_calculate_square_border: %23*/
/*   %29 = load i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_23_40))
begin
memory_controller_size_b = 2'd2;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 %37, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_77))
begin
memory_controller_size_b = 2'd2;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 %2, i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_78))
begin
memory_controller_size_b = 2'd2;
end
/* tpg_calculate_square_border: %34*/
/*   store i32 %4, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_34_79))
begin
memory_controller_size_b = 2'd2;
end
/* tpg_calculate_square_border: %48*/
/*   store i32 %.4, i32* %40, align 4*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_48_116))
begin
memory_controller_size_b = 2'd2;
end
/* tpg_calculate_square_border: %56*/
/*   store i32 %58, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_56_119))
begin
memory_controller_size_b = 2'd2;
end
/* tpg_calculate_square_border: %62*/
/*   store i32 506, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_62_122))
begin
memory_controller_size_b = 2'd2;
end
/* tpg_calculate_square_border: %69*/
/*   store i32 %.5, i32* %40, align 4*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_69_158))
begin
memory_controller_size_b = 2'd2;
end
/* tpg_calculate_square_border: %77*/
/*   store i32 %79, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_77_193))
begin
memory_controller_size_b = 2'd2;
end
/* tpg_calculate_square_border: %83*/
/*   store i32 442, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_83_196))
begin
memory_controller_size_b = 2'd2;
end
/* tpg_calculate_square_border: %90*/
/*   store i32 %.6, i32* %40, align 4*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_90_232))
begin
memory_controller_size_b = 2'd2;
end
/* tpg_calculate_square_border: %98*/
/*   store i32 %100, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_tpg_calculate_square_border_BB_98_235))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
wire [2:0] _str_address_a;
wire  _str_write_enable_a;
wire [7:0] _str_in_a;
wire [7:0] _str_out_a;
wire [2:0] _str_address_b;
wire  _str_write_enable_b;
wire [7:0] _str_in_b;
wire [7:0] _str_out_b;
reg  tpg_calculate_square_border_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_arg_tpg;
wire  tpg_calculate_square_border_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_memory_controller_address_a;
wire  tpg_calculate_square_border_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] tpg_calculate_square_border_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] tpg_calculate_square_border_memory_controller_out_a;
wire [1:0] tpg_calculate_square_border_memory_controller_size_a;
wire  tpg_calculate_square_border_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tpg_calculate_square_border_memory_controller_address_b;
wire  tpg_calculate_square_border_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] tpg_calculate_square_border_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] tpg_calculate_square_border_memory_controller_out_b;
wire [1:0] tpg_calculate_square_border_memory_controller_size_b;
reg  tpg_calculate_square_border_memory_controller_waitrequest;
wire  tpg_calculate_square_border_finish;
reg  tpg_calculate_square_border_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


tpg_calculate_square_border tpg_calculate_square_border_inst (
	.memory_controller_enable_a (tpg_calculate_square_border_memory_controller_enable_a),
	.memory_controller_address_a (tpg_calculate_square_border_memory_controller_address_a),
	.memory_controller_write_enable_a (tpg_calculate_square_border_memory_controller_write_enable_a),
	.memory_controller_in_a (tpg_calculate_square_border_memory_controller_in_a),
	.memory_controller_size_a (tpg_calculate_square_border_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (tpg_calculate_square_border_memory_controller_enable_b),
	.memory_controller_address_b (tpg_calculate_square_border_memory_controller_address_b),
	.memory_controller_write_enable_b (tpg_calculate_square_border_memory_controller_write_enable_b),
	.memory_controller_in_b (tpg_calculate_square_border_memory_controller_in_b),
	.memory_controller_size_b (tpg_calculate_square_border_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (tpg_calculate_square_border_start),
	.finish (tpg_calculate_square_border_finish),
	.arg_tpg (tpg_calculate_square_border_arg_tpg)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (tpg_calculate_square_border_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
tpg_calculate_square_border_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_start"); $finish; end
end
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
tpg_calculate_square_border_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
tpg_calculate_square_border_arg_tpg <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tpg_calculate_square_border_arg_tpg"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
begin
tpg_calculate_square_border_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
begin
tpg_calculate_square_border_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
tpg_calculate_square_border_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
tpg_calculate_square_border_finish_final = tpg_calculate_square_border_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = tpg_calculate_square_border_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = tpg_calculate_square_border_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = tpg_calculate_square_border_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = tpg_calculate_square_border_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = tpg_calculate_square_border_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = tpg_calculate_square_border_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = tpg_calculate_square_border_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = tpg_calculate_square_border_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = tpg_calculate_square_border_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = tpg_calculate_square_border_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = tpg_calculate_square_border_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = tpg_calculate_square_border_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = tpg_calculate_square_border_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = tpg_calculate_square_border_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = tpg_calculate_square_border_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = tpg_calculate_square_border_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = tpg_calculate_square_border_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = tpg_calculate_square_border_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = tpg_calculate_square_border_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @tpg_calculate_square_border(%struct.tpg_data* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = tpg_calculate_square_border_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
