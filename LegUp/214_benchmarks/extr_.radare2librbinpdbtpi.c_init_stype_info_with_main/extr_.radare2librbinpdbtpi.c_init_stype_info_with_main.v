//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:58:16 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 1
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1
// @.str = private unnamed_addr constant [8 x i8] c"default\00"

`define TAG_g__str `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g__str_a {`TAG_g__str, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [2:0] _str_address_a;
reg [2:0] _str_address_b;
reg _str_write_enable_a;
reg _str_write_enable_b;
reg [7:0] _str_in_a;
reg [7:0] _str_in_b;
wire [7:0] _str_out_a;
wire [7:0] _str_out_b;

// @.str = private unnamed_addr constant [8 x i8] c"default\00"

rom_dual_port _str (
	.clk( clk ),
	.address_a( _str_address_a ),
	.address_b( _str_address_b ),
	.q_a( _str_out_a ),
	.q_b( _str_out_b)
);
defparam _str.width_a = 8;
defparam _str.width_b = 8;
defparam _str.widthad_a = 3;
defparam _str.widthad_b = 3;
defparam _str.numwords_a = 8;
defparam _str.numwords_b = 8;
defparam _str.latency = 1;
defparam _str.init_file = "_str.mif";

wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select__str_a;
assign select__str_a = (tag_a == `TAG_g__str);
reg select__str_reg_a;
wire [7:0] memory_controller__str_out_a;
assign memory_controller__str_out_a = {8{ select__str_reg_a}} & _str_out_a;

always @(*)
begin
	_str_address_a = memory_controller_address_a [3-1+0:0] & {3{select__str_a}};
	_str_write_enable_a = memory_controller_write_enable_a & select__str_a;
	_str_in_a [8-1:0] = memory_controller_in_a[8-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0;
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller__str_out_a;
end

always @(posedge clk)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
select__str_reg_a <= select__str_a;
end

reg [2:0] select_not_struct_b;

wire select__str_b;
assign select__str_b = (tag_b == `TAG_g__str);
reg select__str_reg_b;
wire [7:0] memory_controller__str_out_b;
assign memory_controller__str_out_b = {8{ select__str_reg_b}} & _str_out_b;

always @(*)
begin
	_str_address_b = memory_controller_address_b [3-1+0:0] & {3{select__str_b}};
	_str_write_enable_b = memory_controller_write_enable_b & select__str_b;
	_str_in_b [8-1:0] = memory_controller_in_b[8-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0;
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller__str_out_b;
end

always @(posedge clk)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
select__str_reg_b <= select__str_b;
end

endmodule 

`timescale 1 ns / 1 ns
module init_stype_info
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_type_info
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_init_stype_info_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F_init_stype_info_BB_15_2 = 7'd2;
parameter [6:0] LEGUP_F_init_stype_info_BB_18_3 = 7'd3;
parameter [6:0] LEGUP_F_init_stype_info_BB_18_4 = 7'd4;
parameter [6:0] LEGUP_F_init_stype_info_BB_legup_memset_4_exit_5 = 7'd5;
parameter [6:0] LEGUP_F_init_stype_info_BB_legup_memset_4_exit_6 = 7'd6;
parameter [6:0] LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7 = 7'd7;
parameter [6:0] LEGUP_F_init_stype_info_BB__preheader_8 = 7'd8;
parameter [6:0] LEGUP_F_init_stype_info_BB_22_9 = 7'd9;
parameter [6:0] LEGUP_F_init_stype_info_BB_22_10 = 7'd10;
parameter [6:0] LEGUP_F_init_stype_info_BB_22_11 = 7'd11;
parameter [6:0] LEGUP_F_init_stype_info_BB_23_12 = 7'd12;
parameter [6:0] LEGUP_F_init_stype_info_BB_23_13 = 7'd13;
parameter [6:0] LEGUP_F_init_stype_info_BB_23_14 = 7'd14;
parameter [6:0] LEGUP_F_init_stype_info_BB_23_15 = 7'd15;
parameter [6:0] LEGUP_F_init_stype_info_BB_24_16 = 7'd16;
parameter [6:0] LEGUP_F_init_stype_info_BB_24_17 = 7'd17;
parameter [6:0] LEGUP_F_init_stype_info_BB_24_18 = 7'd18;
parameter [6:0] LEGUP_F_init_stype_info_BB_24_19 = 7'd19;
parameter [6:0] LEGUP_F_init_stype_info_BB_24_20 = 7'd20;
parameter [6:0] LEGUP_F_init_stype_info_BB_24_21 = 7'd21;
parameter [6:0] LEGUP_F_init_stype_info_BB_25_22 = 7'd22;
parameter [6:0] LEGUP_F_init_stype_info_BB_25_23 = 7'd23;
parameter [6:0] LEGUP_F_init_stype_info_BB_26_24 = 7'd24;
parameter [6:0] LEGUP_F_init_stype_info_BB_26_25 = 7'd25;
parameter [6:0] LEGUP_F_init_stype_info_BB_26_26 = 7'd26;
parameter [6:0] LEGUP_F_init_stype_info_BB_26_27 = 7'd27;
parameter [6:0] LEGUP_F_init_stype_info_BB_26_28 = 7'd28;
parameter [6:0] LEGUP_F_init_stype_info_BB_29_29 = 7'd29;
parameter [6:0] LEGUP_F_init_stype_info_BB_29_30 = 7'd30;
parameter [6:0] LEGUP_F_init_stype_info_BB_31_31 = 7'd31;
parameter [6:0] LEGUP_F_init_stype_info_BB_31_32 = 7'd32;
parameter [6:0] LEGUP_F_init_stype_info_BB_32_33 = 7'd33;
parameter [6:0] LEGUP_F_init_stype_info_BB_32_34 = 7'd34;
parameter [6:0] LEGUP_F_init_stype_info_BB_32_35 = 7'd35;
parameter [6:0] LEGUP_F_init_stype_info_BB_32_36 = 7'd36;
parameter [6:0] LEGUP_F_init_stype_info_BB_35_37 = 7'd37;
parameter [6:0] LEGUP_F_init_stype_info_BB_35_38 = 7'd38;
parameter [6:0] LEGUP_F_init_stype_info_BB_35_39 = 7'd39;
parameter [6:0] LEGUP_F_init_stype_info_BB_36_40 = 7'd40;
parameter [6:0] LEGUP_F_init_stype_info_BB_36_41 = 7'd41;
parameter [6:0] LEGUP_F_init_stype_info_BB_36_42 = 7'd42;
parameter [6:0] LEGUP_F_init_stype_info_BB_36_43 = 7'd43;
parameter [6:0] LEGUP_F_init_stype_info_BB_36_44 = 7'd44;
parameter [6:0] LEGUP_F_init_stype_info_BB_37_45 = 7'd45;
parameter [6:0] LEGUP_F_init_stype_info_BB_37_46 = 7'd46;
parameter [6:0] LEGUP_F_init_stype_info_BB_39_47 = 7'd47;
parameter [6:0] LEGUP_F_init_stype_info_BB_39_48 = 7'd48;
parameter [6:0] LEGUP_F_init_stype_info_BB_40_49 = 7'd49;
parameter [6:0] LEGUP_F_init_stype_info_BB_40_50 = 7'd50;
parameter [6:0] LEGUP_F_init_stype_info_BB_40_51 = 7'd51;
parameter [6:0] LEGUP_F_init_stype_info_BB_40_52 = 7'd52;
parameter [6:0] LEGUP_F_init_stype_info_BB_41_53 = 7'd53;
parameter [6:0] LEGUP_F_init_stype_info_BB_41_54 = 7'd54;
parameter [6:0] LEGUP_F_init_stype_info_BB_41_55 = 7'd55;
parameter [6:0] LEGUP_F_init_stype_info_BB_41_56 = 7'd56;
parameter [6:0] LEGUP_F_init_stype_info_BB_42_57 = 7'd57;
parameter [6:0] LEGUP_F_init_stype_info_BB_42_58 = 7'd58;
parameter [6:0] LEGUP_F_init_stype_info_BB_42_59 = 7'd59;
parameter [6:0] LEGUP_F_init_stype_info_BB_42_60 = 7'd60;
parameter [6:0] LEGUP_F_init_stype_info_BB_44_61 = 7'd61;
parameter [6:0] LEGUP_F_init_stype_info_BB_44_62 = 7'd62;
parameter [6:0] LEGUP_F_init_stype_info_BB_44_63 = 7'd63;
parameter [6:0] LEGUP_F_init_stype_info_BB_44_64 = 7'd64;
parameter [6:0] LEGUP_F_init_stype_info_BB_45_65 = 7'd65;
parameter [6:0] LEGUP_F_init_stype_info_BB_45_66 = 7'd66;
parameter [6:0] LEGUP_F_init_stype_info_BB_45_67 = 7'd67;
parameter [6:0] LEGUP_F_init_stype_info_BB_45_68 = 7'd68;
parameter [6:0] LEGUP_F_init_stype_info_BB_46_69 = 7'd69;
parameter [6:0] LEGUP_F_init_stype_info_BB_49_70 = 7'd70;
parameter [6:0] LEGUP_F_init_stype_info_BB_49_71 = 7'd71;
parameter [6:0] LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_loopexit_72 = 7'd72;
parameter [6:0] LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73 = 7'd73;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_type_info;
reg [6:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_0_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_15_s_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_15_s_i_0_reg;
reg [31:0] init_stype_info_15_16;
reg [31:0] init_stype_info_15_16_reg;
reg  init_stype_info_15_17;
reg  init_stype_info_15_17_reg;
reg [31:0] init_stype_info_18_19;
reg [31:0] init_stype_info_18_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_18_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_18_20_reg;
reg [31:0] init_stype_info_legup_memset_4_exit_21;
reg [31:0] init_stype_info_legup_memset_4_exit_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_26_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_26_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_26_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_26_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_29_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_29_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_32_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_32_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_32_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_32_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_37_38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_37_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_42_43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_42_43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_46_s_i1_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_46_s_i1_0_reg;
reg [31:0] init_stype_info_46_47;
reg [31:0] init_stype_info_46_47_reg;
reg  init_stype_info_46_48;
reg  init_stype_info_46_48_reg;
reg [31:0] init_stype_info_49_50;
reg [31:0] init_stype_info_49_50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_49_51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_49_51_reg;
wire [2:0] _str_address_a;
wire  _str_write_enable_a;
wire [7:0] _str_in_a;
wire [7:0] _str_out_a;
wire [2:0] _str_address_b;
wire  _str_write_enable_b;
wire [7:0] _str_in_b;
wire [7:0] _str_out_b;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_15_2;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_15_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_15_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_15_2;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_15_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_init_stype_info_BB_15_2) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_15_17 == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit_5;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_init_stype_info_BB_15_2) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_15_17 == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_18_3;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_18_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_18_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_18_3;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_18_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_18_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_18_4;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_18_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_18_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_18_4;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_18_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_18_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_15_2;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_15_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit_5;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit_6;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit_6;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_legup_memset_4_exit_21 == 32'd140)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_22_9;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_22_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_legup_memset_4_exit_21 == 32'd142)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_23_12;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_23_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_legup_memset_4_exit_21 == 32'd143)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_24_16;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_24_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_legup_memset_4_exit_21 == 32'd130)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_24_16;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_24_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_legup_memset_4_exit_21 == 32'd132)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_25_22;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_25_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_legup_memset_4_exit_21 == 32'd145)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_26_24;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_26_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_legup_memset_4_exit_21 == 32'd135)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_29_29;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_29_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_legup_memset_4_exit_21 == 32'd146)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_31_31;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_31_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_legup_memset_4_exit_21 == 32'd136)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_32_33;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_32_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_legup_memset_4_exit_21 == 32'd137)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_legup_memset_4_exit_21 == 32'd131)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_35_37;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_35_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_legup_memset_4_exit_21 == 32'd129)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_36_40;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_36_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_legup_memset_4_exit_21 == 32'd144)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_37_45;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_37_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_legup_memset_4_exit_21 == 32'd128)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_39_47;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_39_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_legup_memset_4_exit_21 == 32'd141)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_40_49;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_40_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_legup_memset_4_exit_21 == 32'd134)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_41_53;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_41_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_legup_memset_4_exit_21 == 32'd138)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_42_57;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_42_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_legup_memset_4_exit_21 == 32'd139)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_44_61;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_44_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_legup_memset_4_exit_21 == 32'd133)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_45_65;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_45_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((((((((((((((((((((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_legup_memset_4_exit_21 != 32'd140)) & (init_stype_info_legup_memset_4_exit_21 != 32'd142)) & (init_stype_info_legup_memset_4_exit_21 != 32'd143)) & (init_stype_info_legup_memset_4_exit_21 != 32'd130)) & (init_stype_info_legup_memset_4_exit_21 != 32'd132)) & (init_stype_info_legup_memset_4_exit_21 != 32'd145)) & (init_stype_info_legup_memset_4_exit_21 != 32'd135)) & (init_stype_info_legup_memset_4_exit_21 != 32'd146)) & (init_stype_info_legup_memset_4_exit_21 != 32'd136)) & (init_stype_info_legup_memset_4_exit_21 != 32'd137)) & (init_stype_info_legup_memset_4_exit_21 != 32'd131)) & (init_stype_info_legup_memset_4_exit_21 != 32'd129)) & (init_stype_info_legup_memset_4_exit_21 != 32'd144)) & (init_stype_info_legup_memset_4_exit_21 != 32'd128)) & (init_stype_info_legup_memset_4_exit_21 != 32'd141)) & (init_stype_info_legup_memset_4_exit_21 != 32'd134)) & (init_stype_info_legup_memset_4_exit_21 != 32'd138)) & (init_stype_info_legup_memset_4_exit_21 != 32'd139)) & (init_stype_info_legup_memset_4_exit_21 != 32'd133)))
begin
cur_state <= LEGUP_F_init_stype_info_BB__preheader_8;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB__preheader_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB__preheader_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB__preheader_8;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB__preheader_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB__preheader_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_46_69;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_46_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_22_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_22_9;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_22_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_22_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_22_10;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_22_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_22_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_22_10;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_22_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_22_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_22_11;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_22_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_22_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_22_11;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_22_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_22_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_23_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_23_12;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_23_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_23_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_23_13;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_23_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_23_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_23_13;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_23_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_23_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_23_14;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_23_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_23_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_23_14;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_23_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_23_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_23_15;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_23_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_23_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_23_15;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_23_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_23_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_24_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_24_16;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_24_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_24_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_24_17;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_24_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_24_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_24_17;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_24_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_24_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_24_18;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_24_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_24_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_24_18;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_24_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_24_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_24_19;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_24_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_24_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_24_19;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_24_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_24_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_24_20;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_24_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_24_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_24_20;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_24_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_24_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_24_21;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_24_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_24_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_24_21;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_24_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_24_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_25_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_25_22;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_25_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_25_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_25_23;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_25_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_25_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_25_23;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_25_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_25_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_26_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_26_24;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_26_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_26_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_26_25;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_26_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_26_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_26_25;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_26_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_26_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_26_26;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_26_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_26_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_26_26;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_26_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_26_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_26_27;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_26_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_26_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_26_27;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_26_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_26_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_26_28;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_26_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_26_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_26_28;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_26_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_26_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_29_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_29_29;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_29_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_29_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_29_30;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_29_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_29_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_29_30;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_29_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_29_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_31_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_31_31;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_31_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_31_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_31_32;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_31_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_31_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_31_32;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_31_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_31_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_32_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_32_33;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_32_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_32_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_32_34;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_32_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_32_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_32_34;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_32_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_32_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_32_35;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_32_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_32_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_32_35;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_32_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_32_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_32_36;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_32_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_32_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_32_36;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_32_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_32_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_35_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_35_37;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_35_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_35_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_35_38;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_35_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_35_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_35_38;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_35_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_35_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_35_39;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_35_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_35_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_35_39;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_35_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_35_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_36_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_36_40;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_36_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_36_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_36_41;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_36_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_36_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_36_41;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_36_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_36_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_36_42;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_36_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_36_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_36_42;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_36_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_36_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_36_43;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_36_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_36_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_36_43;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_36_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_36_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_36_44;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_36_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_36_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_36_44;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_36_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_36_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_37_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_37_45;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_37_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_37_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_37_46;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_37_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_37_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_37_46;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_37_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_37_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_39_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_39_47;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_39_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_39_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_39_48;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_39_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_39_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_39_48;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_39_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_39_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_40_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_40_49;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_40_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_40_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_40_50;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_40_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_40_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_40_50;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_40_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_40_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_40_51;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_40_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_40_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_40_51;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_40_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_40_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_40_52;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_40_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_40_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_40_52;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_40_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_40_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_41_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_41_53;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_41_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_41_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_41_54;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_41_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_41_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_41_54;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_41_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_41_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_41_55;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_41_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_41_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_41_55;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_41_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_41_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_41_56;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_41_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_41_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_41_56;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_41_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_41_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_42_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_42_57;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_42_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_42_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_42_58;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_42_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_42_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_42_58;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_42_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_42_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_42_59;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_42_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_42_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_42_59;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_42_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_42_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_42_60;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_42_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_42_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_42_60;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_42_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_42_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_44_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_44_61;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_44_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_44_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_44_62;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_44_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_44_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_44_62;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_44_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_44_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_44_63;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_44_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_44_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_44_63;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_44_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_44_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_44_64;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_44_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_44_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_44_64;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_44_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_44_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_45_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_45_65;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_45_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_45_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_45_66;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_45_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_45_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_45_66;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_45_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_45_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_45_67;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_45_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_45_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_45_67;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_45_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_45_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_45_68;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_45_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_45_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_45_68;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_45_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_45_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_46_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_46_69;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_46_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_init_stype_info_BB_46_69) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_46_48 == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_loopexit_72;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_loopexit_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_init_stype_info_BB_46_69) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_46_48 == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_49_70;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_49_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_49_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_49_70;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_49_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_49_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_49_71;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_49_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_49_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_49_71;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_49_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_49_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_46_69;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_46_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_loopexit_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_loopexit_72;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_loopexit_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_loopexit_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73;
if (reset == 1'b0 && ^(LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (reset == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 19*/
begin
init_stype_info_0_1 = (arg_type_info + 76);
end
end
always @(posedge clk) begin
/* init_stype_info: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 19*/
if ((cur_state == LEGUP_F_init_stype_info_BB_0_1))
begin
init_stype_info_0_1_reg <= init_stype_info_0_1;
if (reset == 1'b0 && ^(init_stype_info_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_0_1_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %0*/
/*   %2 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 15*/
begin
init_stype_info_0_2 = (arg_type_info + 60);
end
end
always @(posedge clk) begin
/* init_stype_info: %0*/
/*   %2 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 15*/
if ((cur_state == LEGUP_F_init_stype_info_BB_0_1))
begin
init_stype_info_0_2_reg <= init_stype_info_0_2;
if (reset == 1'b0 && ^(init_stype_info_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_0_2_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %0*/
/*   %3 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 18*/
begin
init_stype_info_0_3 = (arg_type_info + 72);
end
end
always @(posedge clk) begin
/* init_stype_info: %0*/
/*   %3 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 18*/
if ((cur_state == LEGUP_F_init_stype_info_BB_0_1))
begin
init_stype_info_0_3_reg <= init_stype_info_0_3;
if (reset == 1'b0 && ^(init_stype_info_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_0_3_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %0*/
/*   %4 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 17*/
begin
init_stype_info_0_4 = (arg_type_info + 68);
end
end
always @(posedge clk) begin
/* init_stype_info: %0*/
/*   %4 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 17*/
if ((cur_state == LEGUP_F_init_stype_info_BB_0_1))
begin
init_stype_info_0_4_reg <= init_stype_info_0_4;
if (reset == 1'b0 && ^(init_stype_info_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_0_4_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %0*/
/*   %5 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 16*/
begin
init_stype_info_0_5 = (arg_type_info + 64);
end
end
always @(posedge clk) begin
/* init_stype_info: %0*/
/*   %5 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 16*/
if ((cur_state == LEGUP_F_init_stype_info_BB_0_1))
begin
init_stype_info_0_5_reg <= init_stype_info_0_5;
if (reset == 1'b0 && ^(init_stype_info_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_0_5_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %0*/
/*   %6 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 10*/
begin
init_stype_info_0_6 = (arg_type_info + 40);
end
end
always @(posedge clk) begin
/* init_stype_info: %0*/
/*   %6 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 10*/
if ((cur_state == LEGUP_F_init_stype_info_BB_0_1))
begin
init_stype_info_0_6_reg <= init_stype_info_0_6;
if (reset == 1'b0 && ^(init_stype_info_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_0_6_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %0*/
/*   %7 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 9*/
begin
init_stype_info_0_7 = (arg_type_info + 36);
end
end
always @(posedge clk) begin
/* init_stype_info: %0*/
/*   %7 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 9*/
if ((cur_state == LEGUP_F_init_stype_info_BB_0_1))
begin
init_stype_info_0_7_reg <= init_stype_info_0_7;
if (reset == 1'b0 && ^(init_stype_info_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_0_7_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %0*/
/*   %8 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 8*/
begin
init_stype_info_0_8 = (arg_type_info + 32);
end
end
always @(posedge clk) begin
/* init_stype_info: %0*/
/*   %8 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 8*/
if ((cur_state == LEGUP_F_init_stype_info_BB_0_1))
begin
init_stype_info_0_8_reg <= init_stype_info_0_8;
if (reset == 1'b0 && ^(init_stype_info_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_0_8_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %0*/
/*   %9 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 7*/
begin
init_stype_info_0_9 = (arg_type_info + 28);
end
end
always @(posedge clk) begin
/* init_stype_info: %0*/
/*   %9 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 7*/
if ((cur_state == LEGUP_F_init_stype_info_BB_0_1))
begin
init_stype_info_0_9_reg <= init_stype_info_0_9;
if (reset == 1'b0 && ^(init_stype_info_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_0_9_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %0*/
/*   %10 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 4*/
begin
init_stype_info_0_10 = (arg_type_info + 16);
end
end
always @(posedge clk) begin
/* init_stype_info: %0*/
/*   %10 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 4*/
if ((cur_state == LEGUP_F_init_stype_info_BB_0_1))
begin
init_stype_info_0_10_reg <= init_stype_info_0_10;
if (reset == 1'b0 && ^(init_stype_info_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_0_10_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %0*/
/*   %11 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 3*/
begin
init_stype_info_0_11 = (arg_type_info + 12);
end
end
always @(posedge clk) begin
/* init_stype_info: %0*/
/*   %11 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 3*/
if ((cur_state == LEGUP_F_init_stype_info_BB_0_1))
begin
init_stype_info_0_11_reg <= init_stype_info_0_11;
if (reset == 1'b0 && ^(init_stype_info_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_0_11_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %0*/
/*   %12 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 20*/
begin
init_stype_info_0_12 = (arg_type_info + 80);
end
end
always @(posedge clk) begin
/* init_stype_info: %0*/
/*   %12 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 20*/
if ((cur_state == LEGUP_F_init_stype_info_BB_0_1))
begin
init_stype_info_0_12_reg <= init_stype_info_0_12;
if (reset == 1'b0 && ^(init_stype_info_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_0_12_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %0*/
/*   %13 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 1*/
begin
init_stype_info_0_13 = (arg_type_info + 4);
end
end
always @(posedge clk) begin
/* init_stype_info: %0*/
/*   %13 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 1*/
if ((cur_state == LEGUP_F_init_stype_info_BB_0_1))
begin
init_stype_info_0_13_reg <= init_stype_info_0_13;
if (reset == 1'b0 && ^(init_stype_info_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_0_13_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %0*/
/*   %14 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 0*/
begin
init_stype_info_0_14 = arg_type_info;
end
end
always @(posedge clk) begin
/* init_stype_info: %0*/
/*   %14 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_0_1))
begin
init_stype_info_0_14_reg <= init_stype_info_0_14;
if (reset == 1'b0 && ^(init_stype_info_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_0_14_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %15*/
/*   %s.i.0 = phi i32* [ %13, %0 ], [ %20, %18 ]*/
if (((cur_state == LEGUP_F_init_stype_info_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
init_stype_info_15_s_i_0 = init_stype_info_0_13;
end
/* init_stype_info: %15*/
/*   %s.i.0 = phi i32* [ %13, %0 ], [ %20, %18 ]*/
else /* if (((cur_state == LEGUP_F_init_stype_info_BB_18_4) & (memory_controller_waitrequest == 1'd0))) */
begin
init_stype_info_15_s_i_0 = init_stype_info_18_20_reg;
end
end
always @(posedge clk) begin
/* init_stype_info: %15*/
/*   %s.i.0 = phi i32* [ %13, %0 ], [ %20, %18 ]*/
if (((cur_state == LEGUP_F_init_stype_info_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
init_stype_info_15_s_i_0_reg <= init_stype_info_15_s_i_0;
if (reset == 1'b0 && ^(init_stype_info_15_s_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_15_s_i_0_reg"); $finish; end
end
/* init_stype_info: %15*/
/*   %s.i.0 = phi i32* [ %13, %0 ], [ %20, %18 ]*/
if (((cur_state == LEGUP_F_init_stype_info_BB_18_4) & (memory_controller_waitrequest == 1'd0)))
begin
init_stype_info_15_s_i_0_reg <= init_stype_info_15_s_i_0;
if (reset == 1'b0 && ^(init_stype_info_15_s_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_15_s_i_0_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %15*/
/*   %16 = phi i32 [ 21, %0 ], [ %19, %18 ]*/
if (((cur_state == LEGUP_F_init_stype_info_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
init_stype_info_15_16 = 32'd21;
end
/* init_stype_info: %15*/
/*   %16 = phi i32 [ 21, %0 ], [ %19, %18 ]*/
else /* if (((cur_state == LEGUP_F_init_stype_info_BB_18_4) & (memory_controller_waitrequest == 1'd0))) */
begin
init_stype_info_15_16 = init_stype_info_18_19_reg;
end
end
always @(posedge clk) begin
/* init_stype_info: %15*/
/*   %16 = phi i32 [ 21, %0 ], [ %19, %18 ]*/
if (((cur_state == LEGUP_F_init_stype_info_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
init_stype_info_15_16_reg <= init_stype_info_15_16;
if (reset == 1'b0 && ^(init_stype_info_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_15_16_reg"); $finish; end
end
/* init_stype_info: %15*/
/*   %16 = phi i32 [ 21, %0 ], [ %19, %18 ]*/
if (((cur_state == LEGUP_F_init_stype_info_BB_18_4) & (memory_controller_waitrequest == 1'd0)))
begin
init_stype_info_15_16_reg <= init_stype_info_15_16;
if (reset == 1'b0 && ^(init_stype_info_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_15_16_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %15*/
/*   %17 = icmp eq i32 %16, 0*/
begin
init_stype_info_15_17 = (init_stype_info_15_16_reg == 32'd0);
end
end
always @(posedge clk) begin
/* init_stype_info: %15*/
/*   %17 = icmp eq i32 %16, 0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_15_2))
begin
init_stype_info_15_17_reg <= init_stype_info_15_17;
if (reset == 1'b0 && ^(init_stype_info_15_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_15_17_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %18*/
/*   %19 = add i32 %16, -1*/
begin
init_stype_info_18_19 = (init_stype_info_15_16_reg + -32'd1);
end
end
always @(posedge clk) begin
/* init_stype_info: %18*/
/*   %19 = add i32 %16, -1*/
if ((cur_state == LEGUP_F_init_stype_info_BB_18_3))
begin
init_stype_info_18_19_reg <= init_stype_info_18_19;
if (reset == 1'b0 && ^(init_stype_info_18_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_18_19_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %18*/
/*   %20 = getelementptr inbounds i32* %s.i.0, i32 1*/
begin
init_stype_info_18_20 = (init_stype_info_15_s_i_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* init_stype_info: %18*/
/*   %20 = getelementptr inbounds i32* %s.i.0, i32 1*/
if ((cur_state == LEGUP_F_init_stype_info_BB_18_3))
begin
init_stype_info_18_20_reg <= init_stype_info_18_20;
if (reset == 1'b0 && ^(init_stype_info_18_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_18_20_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %legup_memset_4.exit*/
/*   %21 = load i32* %14, align 4, !tbaa !0*/
begin
init_stype_info_legup_memset_4_exit_21 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* init_stype_info: %legup_memset_4.exit*/
/*   %21 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_7))
begin
init_stype_info_legup_memset_4_exit_21_reg <= init_stype_info_legup_memset_4_exit_21;
if (reset == 1'b0 && ^(init_stype_info_legup_memset_4_exit_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_legup_memset_4_exit_21_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %26*/
/*   %27 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 12*/
begin
init_stype_info_26_27 = (arg_type_info + 48);
end
end
always @(posedge clk) begin
/* init_stype_info: %26*/
/*   %27 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 12*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_24))
begin
init_stype_info_26_27_reg <= init_stype_info_26_27;
if (reset == 1'b0 && ^(init_stype_info_26_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_26_27_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %26*/
/*   %28 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 13*/
begin
init_stype_info_26_28 = (arg_type_info + 52);
end
end
always @(posedge clk) begin
/* init_stype_info: %26*/
/*   %28 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 13*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_24))
begin
init_stype_info_26_28_reg <= init_stype_info_26_28;
if (reset == 1'b0 && ^(init_stype_info_26_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_26_28_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %29*/
/*   %30 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 21*/
begin
init_stype_info_29_30 = (arg_type_info + 84);
end
end
always @(posedge clk) begin
/* init_stype_info: %29*/
/*   %30 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 21*/
if ((cur_state == LEGUP_F_init_stype_info_BB_29_29))
begin
init_stype_info_29_30_reg <= init_stype_info_29_30;
if (reset == 1'b0 && ^(init_stype_info_29_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_29_30_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %32*/
/*   %33 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 5*/
begin
init_stype_info_32_33 = (arg_type_info + 20);
end
end
always @(posedge clk) begin
/* init_stype_info: %32*/
/*   %33 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 5*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_33))
begin
init_stype_info_32_33_reg <= init_stype_info_32_33;
if (reset == 1'b0 && ^(init_stype_info_32_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_32_33_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %32*/
/*   %34 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 6*/
begin
init_stype_info_32_34 = (arg_type_info + 24);
end
end
always @(posedge clk) begin
/* init_stype_info: %32*/
/*   %34 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 6*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_33))
begin
init_stype_info_32_34_reg <= init_stype_info_32_34;
if (reset == 1'b0 && ^(init_stype_info_32_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_32_34_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %37*/
/*   %38 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 11*/
begin
init_stype_info_37_38 = (arg_type_info + 44);
end
end
always @(posedge clk) begin
/* init_stype_info: %37*/
/*   %38 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 11*/
if ((cur_state == LEGUP_F_init_stype_info_BB_37_45))
begin
init_stype_info_37_38_reg <= init_stype_info_37_38;
if (reset == 1'b0 && ^(init_stype_info_37_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_37_38_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %42*/
/*   %43 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 2*/
begin
init_stype_info_42_43 = (arg_type_info + 8);
end
end
always @(posedge clk) begin
/* init_stype_info: %42*/
/*   %43 = getelementptr inbounds %struct.TYPE_3__* %type_info, i32 0, i32 2*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_57))
begin
init_stype_info_42_43_reg <= init_stype_info_42_43;
if (reset == 1'b0 && ^(init_stype_info_42_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_42_43_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %46*/
/*   %s.i1.0 = phi i32* [ %51, %49 ], [ %13, %.preheader ]*/
if (((cur_state == LEGUP_F_init_stype_info_BB__preheader_8) & (memory_controller_waitrequest == 1'd0)))
begin
init_stype_info_46_s_i1_0 = init_stype_info_0_13_reg;
end
/* init_stype_info: %46*/
/*   %s.i1.0 = phi i32* [ %51, %49 ], [ %13, %.preheader ]*/
else /* if (((cur_state == LEGUP_F_init_stype_info_BB_49_71) & (memory_controller_waitrequest == 1'd0))) */
begin
init_stype_info_46_s_i1_0 = init_stype_info_49_51_reg;
end
end
always @(posedge clk) begin
/* init_stype_info: %46*/
/*   %s.i1.0 = phi i32* [ %51, %49 ], [ %13, %.preheader ]*/
if (((cur_state == LEGUP_F_init_stype_info_BB__preheader_8) & (memory_controller_waitrequest == 1'd0)))
begin
init_stype_info_46_s_i1_0_reg <= init_stype_info_46_s_i1_0;
if (reset == 1'b0 && ^(init_stype_info_46_s_i1_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_46_s_i1_0_reg"); $finish; end
end
/* init_stype_info: %46*/
/*   %s.i1.0 = phi i32* [ %51, %49 ], [ %13, %.preheader ]*/
if (((cur_state == LEGUP_F_init_stype_info_BB_49_71) & (memory_controller_waitrequest == 1'd0)))
begin
init_stype_info_46_s_i1_0_reg <= init_stype_info_46_s_i1_0;
if (reset == 1'b0 && ^(init_stype_info_46_s_i1_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_46_s_i1_0_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %46*/
/*   %47 = phi i32 [ %50, %49 ], [ 18, %.preheader ]*/
if (((cur_state == LEGUP_F_init_stype_info_BB__preheader_8) & (memory_controller_waitrequest == 1'd0)))
begin
init_stype_info_46_47 = 32'd18;
end
/* init_stype_info: %46*/
/*   %47 = phi i32 [ %50, %49 ], [ 18, %.preheader ]*/
else /* if (((cur_state == LEGUP_F_init_stype_info_BB_49_71) & (memory_controller_waitrequest == 1'd0))) */
begin
init_stype_info_46_47 = init_stype_info_49_50_reg;
end
end
always @(posedge clk) begin
/* init_stype_info: %46*/
/*   %47 = phi i32 [ %50, %49 ], [ 18, %.preheader ]*/
if (((cur_state == LEGUP_F_init_stype_info_BB__preheader_8) & (memory_controller_waitrequest == 1'd0)))
begin
init_stype_info_46_47_reg <= init_stype_info_46_47;
if (reset == 1'b0 && ^(init_stype_info_46_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_46_47_reg"); $finish; end
end
/* init_stype_info: %46*/
/*   %47 = phi i32 [ %50, %49 ], [ 18, %.preheader ]*/
if (((cur_state == LEGUP_F_init_stype_info_BB_49_71) & (memory_controller_waitrequest == 1'd0)))
begin
init_stype_info_46_47_reg <= init_stype_info_46_47;
if (reset == 1'b0 && ^(init_stype_info_46_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_46_47_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %46*/
/*   %48 = icmp eq i32 %47, 0*/
begin
init_stype_info_46_48 = (init_stype_info_46_47_reg == 32'd0);
end
end
always @(posedge clk) begin
/* init_stype_info: %46*/
/*   %48 = icmp eq i32 %47, 0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_46_69))
begin
init_stype_info_46_48_reg <= init_stype_info_46_48;
if (reset == 1'b0 && ^(init_stype_info_46_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_46_48_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %49*/
/*   %50 = add i32 %47, -1*/
begin
init_stype_info_49_50 = (init_stype_info_46_47_reg + -32'd1);
end
end
always @(posedge clk) begin
/* init_stype_info: %49*/
/*   %50 = add i32 %47, -1*/
if ((cur_state == LEGUP_F_init_stype_info_BB_49_70))
begin
init_stype_info_49_50_reg <= init_stype_info_49_50;
if (reset == 1'b0 && ^(init_stype_info_49_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_49_50_reg"); $finish; end
end
end
always @(*) begin
/* init_stype_info: %49*/
/*   %51 = getelementptr inbounds i32* %s.i1.0, i32 1*/
begin
init_stype_info_49_51 = (init_stype_info_46_s_i1_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* init_stype_info: %49*/
/*   %51 = getelementptr inbounds i32* %s.i1.0, i32 1*/
if ((cur_state == LEGUP_F_init_stype_info_BB_49_70))
begin
init_stype_info_49_51_reg <= init_stype_info_49_51;
if (reset == 1'b0 && ^(init_stype_info_49_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_49_51_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* init_stype_info: %legup_memset_4.exit2*/
/*   ret void*/
if ((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit2_73))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* init_stype_info: %18*/
/*   store i32 0, i32* %s.i.0, align 4*/
if ((cur_state == LEGUP_F_init_stype_info_BB_18_3))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %legup_memset_4.exit*/
/*   %21 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_5))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %22*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_22_9))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_12))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_13))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_14))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_16))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_17))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_18))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_19))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %25*/
/*   store i32 0, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_25_22))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_24))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_25))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_26))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %29*/
/*   store i32 0, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_29_29))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %31*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_31_31))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_33))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_34))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %35*/
/*   store i32 0, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_35_37))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_40))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_41))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_42))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %37*/
/*   store i32 0, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_37_45))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %39*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_39_47))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_49))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_50))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_53))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_54))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_57))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_58))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_61))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_62))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_63))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_65))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_66))
begin
memory_controller_enable_a = 1'd1;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_67))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* init_stype_info: %18*/
/*   store i32 0, i32* %s.i.0, align 4*/
if ((cur_state == LEGUP_F_init_stype_info_BB_18_3))
begin
memory_controller_address_a = init_stype_info_15_s_i_0_reg;
end
/* init_stype_info: %legup_memset_4.exit*/
/*   %21 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_5))
begin
memory_controller_address_a = init_stype_info_0_14_reg;
end
/* init_stype_info: %22*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_22_9))
begin
memory_controller_address_a = init_stype_info_0_2_reg;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_12))
begin
memory_controller_address_a = init_stype_info_0_3_reg;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_13))
begin
memory_controller_address_a = init_stype_info_0_2_reg;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_14))
begin
memory_controller_address_a = init_stype_info_0_1_reg;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_16))
begin
memory_controller_address_a = init_stype_info_0_3_reg;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_17))
begin
memory_controller_address_a = init_stype_info_0_2_reg;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_18))
begin
memory_controller_address_a = init_stype_info_0_6_reg;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_19))
begin
memory_controller_address_a = init_stype_info_0_12_reg;
end
/* init_stype_info: %25*/
/*   store i32 0, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_25_22))
begin
memory_controller_address_a = init_stype_info_0_8_reg;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_24))
begin
memory_controller_address_a = init_stype_info_0_3_reg;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_25))
begin
memory_controller_address_a = init_stype_info_26_28_reg;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_26))
begin
memory_controller_address_a = init_stype_info_26_27_reg;
end
/* init_stype_info: %29*/
/*   store i32 0, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_29_29))
begin
memory_controller_address_a = init_stype_info_29_30;
end
/* init_stype_info: %31*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_31_31))
begin
memory_controller_address_a = init_stype_info_0_1_reg;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_33))
begin
memory_controller_address_a = init_stype_info_0_9_reg;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_34))
begin
memory_controller_address_a = init_stype_info_32_33_reg;
end
/* init_stype_info: %35*/
/*   store i32 0, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_35_37))
begin
memory_controller_address_a = init_stype_info_0_9_reg;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_40))
begin
memory_controller_address_a = init_stype_info_0_3_reg;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_41))
begin
memory_controller_address_a = init_stype_info_0_2_reg;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_42))
begin
memory_controller_address_a = init_stype_info_0_12_reg;
end
/* init_stype_info: %37*/
/*   store i32 0, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_37_45))
begin
memory_controller_address_a = init_stype_info_37_38;
end
/* init_stype_info: %39*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_39_47))
begin
memory_controller_address_a = init_stype_info_0_1_reg;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_49))
begin
memory_controller_address_a = init_stype_info_0_3_reg;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_50))
begin
memory_controller_address_a = init_stype_info_0_1_reg;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_53))
begin
memory_controller_address_a = init_stype_info_0_3_reg;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_54))
begin
memory_controller_address_a = init_stype_info_0_11_reg;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_57))
begin
memory_controller_address_a = init_stype_info_0_3_reg;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_58))
begin
memory_controller_address_a = init_stype_info_42_43_reg;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_61))
begin
memory_controller_address_a = init_stype_info_0_3_reg;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_62))
begin
memory_controller_address_a = init_stype_info_0_11_reg;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_63))
begin
memory_controller_address_a = init_stype_info_0_1_reg;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_65))
begin
memory_controller_address_a = init_stype_info_0_3_reg;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_66))
begin
memory_controller_address_a = init_stype_info_0_11_reg;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_67))
begin
memory_controller_address_a = init_stype_info_0_1_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* init_stype_info: %18*/
/*   store i32 0, i32* %s.i.0, align 4*/
if ((cur_state == LEGUP_F_init_stype_info_BB_18_3))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %legup_memset_4.exit*/
/*   %21 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_5))
begin
memory_controller_write_enable_a = 1'd0;
end
/* init_stype_info: %22*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_22_9))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_12))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_13))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_14))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_16))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_17))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_18))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_19))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %25*/
/*   store i32 0, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_25_22))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_24))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_25))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_26))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %29*/
/*   store i32 0, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_29_29))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %31*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_31_31))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_33))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_34))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %35*/
/*   store i32 0, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_35_37))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_40))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_41))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_42))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %37*/
/*   store i32 0, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_37_45))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %39*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_39_47))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_49))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_50))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_53))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_54))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_57))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_58))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_61))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_62))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_63))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_65))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_66))
begin
memory_controller_write_enable_a = 1'd1;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_67))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* init_stype_info: %18*/
/*   store i32 0, i32* %s.i.0, align 4*/
if ((cur_state == LEGUP_F_init_stype_info_BB_18_3))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %22*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_22_9))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_12))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_13))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_14))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_16))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_17))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_18))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_19))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %25*/
/*   store i32 0, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_25_22))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_24))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_25))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_26))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %29*/
/*   store i32 0, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_29_29))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %31*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_31_31))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_33))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_34))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %35*/
/*   store i32 0, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_35_37))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_40))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_41))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_42))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %37*/
/*   store i32 0, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_37_45))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %39*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_39_47))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_49))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_50))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_53))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_54))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_57))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_58))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_61))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_62))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_63))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_65))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_66))
begin
memory_controller_in_a = 32'd0;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_67))
begin
memory_controller_in_a = 32'd0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* init_stype_info: %18*/
/*   store i32 0, i32* %s.i.0, align 4*/
if ((cur_state == LEGUP_F_init_stype_info_BB_18_3))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %legup_memset_4.exit*/
/*   %21 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_legup_memset_4_exit_5))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %22*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_22_9))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_12))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_13))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_14))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_16))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_17))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_18))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_19))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %25*/
/*   store i32 0, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_25_22))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_24))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_25))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_26))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %29*/
/*   store i32 0, i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_29_29))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %31*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_31_31))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_33))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_34))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %35*/
/*   store i32 0, i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_35_37))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_40))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_41))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_42))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %37*/
/*   store i32 0, i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_37_45))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %39*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_39_47))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_49))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_50))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_53))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_54))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_57))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %43, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_58))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_61))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_62))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_63))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_65))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_66))
begin
memory_controller_size_a = 2'd2;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_67))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* init_stype_info: %22*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_22_9))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %22*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_22_10))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_12))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_13))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_14))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_16))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_17))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_18))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_19))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_20))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %25*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_25_22))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_24))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_25))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_26))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_27))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %29*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_29_29))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %31*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_31_31))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_33))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_34))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_35))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %35*/
/*   store i32 0, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_35_37))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %35*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_35_38))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_40))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_41))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_42))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_43))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %37*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_37_45))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %39*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_39_47))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_49))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_50))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_51))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_53))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_54))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_55))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_57))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_58))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_59))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_61))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_62))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_63))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_65))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_66))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_67))
begin
memory_controller_enable_b = 1'd1;
end
/* init_stype_info: %49*/
/*   store i32 0, i32* %s.i1.0, align 4*/
if ((cur_state == LEGUP_F_init_stype_info_BB_49_70))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* init_stype_info: %22*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_22_9))
begin
memory_controller_address_b = init_stype_info_0_1_reg;
end
/* init_stype_info: %22*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_22_10))
begin
memory_controller_address_b = init_stype_info_0_13_reg;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_12))
begin
memory_controller_address_b = init_stype_info_0_5_reg;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_13))
begin
memory_controller_address_b = init_stype_info_0_8_reg;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_14))
begin
memory_controller_address_b = init_stype_info_0_13_reg;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_16))
begin
memory_controller_address_b = init_stype_info_0_4_reg;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_17))
begin
memory_controller_address_b = init_stype_info_0_5_reg;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_18))
begin
memory_controller_address_b = init_stype_info_0_7_reg;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_19))
begin
memory_controller_address_b = init_stype_info_0_1_reg;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_20))
begin
memory_controller_address_b = init_stype_info_0_13_reg;
end
/* init_stype_info: %25*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_25_22))
begin
memory_controller_address_b = init_stype_info_0_13_reg;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_24))
begin
memory_controller_address_b = init_stype_info_0_4_reg;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_25))
begin
memory_controller_address_b = init_stype_info_0_5_reg;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_26))
begin
memory_controller_address_b = init_stype_info_0_1_reg;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_27))
begin
memory_controller_address_b = init_stype_info_0_13_reg;
end
/* init_stype_info: %29*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_29_29))
begin
memory_controller_address_b = init_stype_info_0_13_reg;
end
/* init_stype_info: %31*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_31_31))
begin
memory_controller_address_b = init_stype_info_0_13_reg;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_33))
begin
memory_controller_address_b = init_stype_info_32_34;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_34))
begin
memory_controller_address_b = init_stype_info_0_10_reg;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_35))
begin
memory_controller_address_b = init_stype_info_0_13_reg;
end
/* init_stype_info: %35*/
/*   store i32 0, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_35_37))
begin
memory_controller_address_b = init_stype_info_0_10_reg;
end
/* init_stype_info: %35*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_35_38))
begin
memory_controller_address_b = init_stype_info_0_13_reg;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_40))
begin
memory_controller_address_b = init_stype_info_0_4_reg;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_41))
begin
memory_controller_address_b = init_stype_info_0_5_reg;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_42))
begin
memory_controller_address_b = init_stype_info_0_1_reg;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_43))
begin
memory_controller_address_b = init_stype_info_0_13_reg;
end
/* init_stype_info: %37*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_37_45))
begin
memory_controller_address_b = init_stype_info_0_13_reg;
end
/* init_stype_info: %39*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_39_47))
begin
memory_controller_address_b = init_stype_info_0_13_reg;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_49))
begin
memory_controller_address_b = init_stype_info_0_4_reg;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_50))
begin
memory_controller_address_b = init_stype_info_0_5_reg;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_51))
begin
memory_controller_address_b = init_stype_info_0_13_reg;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_53))
begin
memory_controller_address_b = init_stype_info_0_5_reg;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_54))
begin
memory_controller_address_b = init_stype_info_0_1_reg;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_55))
begin
memory_controller_address_b = init_stype_info_0_13_reg;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_57))
begin
memory_controller_address_b = init_stype_info_0_5_reg;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_58))
begin
memory_controller_address_b = init_stype_info_0_1_reg;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_59))
begin
memory_controller_address_b = init_stype_info_0_13_reg;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_61))
begin
memory_controller_address_b = init_stype_info_0_4_reg;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_62))
begin
memory_controller_address_b = init_stype_info_0_5_reg;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_63))
begin
memory_controller_address_b = init_stype_info_0_13_reg;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_65))
begin
memory_controller_address_b = init_stype_info_0_5_reg;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_66))
begin
memory_controller_address_b = init_stype_info_0_4_reg;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_67))
begin
memory_controller_address_b = init_stype_info_0_13_reg;
end
/* init_stype_info: %49*/
/*   store i32 0, i32* %s.i1.0, align 4*/
if ((cur_state == LEGUP_F_init_stype_info_BB_49_70))
begin
memory_controller_address_b = init_stype_info_46_s_i1_0_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* init_stype_info: %22*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_22_9))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %22*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_22_10))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_12))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_13))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_14))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_16))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_17))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_18))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_19))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_20))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %25*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_25_22))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_24))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_25))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_26))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_27))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %29*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_29_29))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %31*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_31_31))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_33))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_34))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_35))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %35*/
/*   store i32 0, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_35_37))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %35*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_35_38))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_40))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_41))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_42))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_43))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %37*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_37_45))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %39*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_39_47))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_49))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_50))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_51))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_53))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_54))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_55))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_57))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_58))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_59))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_61))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_62))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_63))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_65))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_66))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_67))
begin
memory_controller_write_enable_b = 1'd1;
end
/* init_stype_info: %49*/
/*   store i32 0, i32* %s.i1.0, align 4*/
if ((cur_state == LEGUP_F_init_stype_info_BB_49_70))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* init_stype_info: %22*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_22_9))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %22*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_22_10))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_12))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_13))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_14))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_16))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_17))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_18))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_19))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_20))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %25*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_25_22))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_24))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_25))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_26))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_27))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %29*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_29_29))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %31*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_31_31))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_33))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_34))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_35))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %35*/
/*   store i32 0, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_35_37))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %35*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_35_38))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_40))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_41))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_42))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_43))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %37*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_37_45))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %39*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_39_47))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_49))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_50))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_51))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_53))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_54))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_55))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_57))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_58))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_59))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_61))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_62))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_63))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_65))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_66))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_67))
begin
memory_controller_in_b = 32'd0;
end
/* init_stype_info: %49*/
/*   store i32 0, i32* %s.i1.0, align 4*/
if ((cur_state == LEGUP_F_init_stype_info_BB_49_70))
begin
memory_controller_in_b = 32'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* init_stype_info: %22*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_22_9))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %22*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_22_10))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_12))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_13))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %23*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_23_14))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_16))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_17))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_18))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_19))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %24*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_24_20))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %25*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_25_22))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_24))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_25))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_26))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %26*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_26_27))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %29*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_29_29))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %31*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_31_31))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_33))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_34))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %32*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_32_35))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %35*/
/*   store i32 0, i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_35_37))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %35*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_35_38))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_40))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_41))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_42))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %36*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_36_43))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %37*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_37_45))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %39*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_39_47))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_49))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_50))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %40*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_40_51))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_53))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_54))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %41*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_41_55))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_57))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_58))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %42*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_42_59))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_61))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_62))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %44*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_44_63))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_65))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_66))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %45*/
/*   store i32 0, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_init_stype_info_BB_45_67))
begin
memory_controller_size_b = 2'd2;
end
/* init_stype_info: %49*/
/*   store i32 0, i32* %s.i1.0, align 4*/
if ((cur_state == LEGUP_F_init_stype_info_BB_49_70))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
wire [2:0] _str_address_a;
wire  _str_write_enable_a;
wire [7:0] _str_in_a;
wire [7:0] _str_out_a;
wire [2:0] _str_address_b;
wire  _str_write_enable_b;
wire [7:0] _str_in_b;
wire [7:0] _str_out_b;
reg  init_stype_info_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_arg_type_info;
wire  init_stype_info_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_memory_controller_address_a;
wire  init_stype_info_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] init_stype_info_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] init_stype_info_memory_controller_out_a;
wire [1:0] init_stype_info_memory_controller_size_a;
wire  init_stype_info_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] init_stype_info_memory_controller_address_b;
wire  init_stype_info_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] init_stype_info_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] init_stype_info_memory_controller_out_b;
wire [1:0] init_stype_info_memory_controller_size_b;
reg  init_stype_info_memory_controller_waitrequest;
wire  init_stype_info_finish;
reg  init_stype_info_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


init_stype_info init_stype_info_inst (
	.memory_controller_enable_a (init_stype_info_memory_controller_enable_a),
	.memory_controller_address_a (init_stype_info_memory_controller_address_a),
	.memory_controller_write_enable_a (init_stype_info_memory_controller_write_enable_a),
	.memory_controller_in_a (init_stype_info_memory_controller_in_a),
	.memory_controller_size_a (init_stype_info_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (init_stype_info_memory_controller_enable_b),
	.memory_controller_address_b (init_stype_info_memory_controller_address_b),
	.memory_controller_write_enable_b (init_stype_info_memory_controller_write_enable_b),
	.memory_controller_in_b (init_stype_info_memory_controller_in_b),
	.memory_controller_size_b (init_stype_info_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (init_stype_info_start),
	.finish (init_stype_info_finish),
	.arg_type_info (init_stype_info_arg_type_info)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (init_stype_info_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
init_stype_info_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_start"); $finish; end
end
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
init_stype_info_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
init_stype_info_arg_type_info <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to init_stype_info_arg_type_info"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
begin
init_stype_info_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
begin
init_stype_info_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
init_stype_info_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
init_stype_info_finish_final = init_stype_info_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = init_stype_info_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = init_stype_info_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = init_stype_info_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = init_stype_info_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = init_stype_info_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = init_stype_info_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = init_stype_info_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = init_stype_info_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = init_stype_info_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = init_stype_info_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = init_stype_info_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = init_stype_info_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = init_stype_info_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = init_stype_info_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = init_stype_info_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = init_stype_info_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = init_stype_info_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = init_stype_info_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = init_stype_info_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @init_stype_info(%struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = init_stype_info_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
