//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:58:18 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module encode_utf8
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_buf,
	arg_len,
	arg_ubuf,
	arg_ulen
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_encode_utf8_BB_0_1 = 6'd1;
parameter [5:0] LEGUP_F_encode_utf8_BB_3_2 = 6'd2;
parameter [5:0] LEGUP_F_encode_utf8_BB_6_3 = 6'd3;
parameter [5:0] LEGUP_F_encode_utf8_BB_6_4 = 6'd4;
parameter [5:0] LEGUP_F_encode_utf8_BB_6_5 = 6'd5;
parameter [5:0] LEGUP_F_encode_utf8_BB_9_6 = 6'd6;
parameter [5:0] LEGUP_F_encode_utf8_BB_13_7 = 6'd7;
parameter [5:0] LEGUP_F_encode_utf8_BB_13_8 = 6'd8;
parameter [5:0] LEGUP_F_encode_utf8_BB_16_9 = 6'd9;
parameter [5:0] LEGUP_F_encode_utf8_BB_18_10 = 6'd10;
parameter [5:0] LEGUP_F_encode_utf8_BB_22_11 = 6'd11;
parameter [5:0] LEGUP_F_encode_utf8_BB_22_12 = 6'd12;
parameter [5:0] LEGUP_F_encode_utf8_BB_31_13 = 6'd13;
parameter [5:0] LEGUP_F_encode_utf8_BB_33_14 = 6'd14;
parameter [5:0] LEGUP_F_encode_utf8_BB_37_15 = 6'd15;
parameter [5:0] LEGUP_F_encode_utf8_BB_37_16 = 6'd16;
parameter [5:0] LEGUP_F_encode_utf8_BB_37_17 = 6'd17;
parameter [5:0] LEGUP_F_encode_utf8_BB_51_18 = 6'd18;
parameter [5:0] LEGUP_F_encode_utf8_BB_53_19 = 6'd19;
parameter [5:0] LEGUP_F_encode_utf8_BB_57_20 = 6'd20;
parameter [5:0] LEGUP_F_encode_utf8_BB_57_21 = 6'd21;
parameter [5:0] LEGUP_F_encode_utf8_BB_57_22 = 6'd22;
parameter [5:0] LEGUP_F_encode_utf8_BB_76_23 = 6'd23;
parameter [5:0] LEGUP_F_encode_utf8_BB_80_24 = 6'd24;
parameter [5:0] LEGUP_F_encode_utf8_BB_82_25 = 6'd25;
parameter [5:0] LEGUP_F_encode_utf8_BB_82_26 = 6'd26;
parameter [5:0] LEGUP_F_encode_utf8_BB_82_27 = 6'd27;
parameter [5:0] LEGUP_F_encode_utf8_BB_82_28 = 6'd28;
parameter [5:0] LEGUP_F_encode_utf8_BB_106_29 = 6'd29;
parameter [5:0] LEGUP_F_encode_utf8_BB_108_30 = 6'd30;
parameter [5:0] LEGUP_F_encode_utf8_BB_108_31 = 6'd31;
parameter [5:0] LEGUP_F_encode_utf8_BB_108_32 = 6'd32;
parameter [5:0] LEGUP_F_encode_utf8_BB_108_33 = 6'd33;
parameter [5:0] LEGUP_F_encode_utf8_BB_137_34 = 6'd34;
parameter [5:0] LEGUP_F_encode_utf8_BB_139_35 = 6'd35;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_buf;
input [31:0] arg_len;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_ubuf;
input [31:0] arg_ulen;
reg [5:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_0_1_reg;
reg [31:0] encode_utf8_0_2;
reg [31:0] encode_utf8_0_2_reg;
reg [31:0] encode_utf8_3_4;
reg [31:0] encode_utf8_3_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_3__01;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_3__01_reg;
reg  encode_utf8_3_5;
reg  encode_utf8_3_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_6_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_6_scevgep_reg;
reg [31:0] encode_utf8_6_7;
reg [31:0] encode_utf8_6_7_reg;
reg  encode_utf8_6_8;
reg  encode_utf8_6_8_reg;
reg [31:0] encode_utf8_9_10;
reg [31:0] encode_utf8_9_10_reg;
reg [31:0] encode_utf8_9_11;
reg [31:0] encode_utf8_9_11_reg;
reg  encode_utf8_9_12;
reg  encode_utf8_9_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_13_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_13_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_13_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_13_15_reg;
reg  encode_utf8_16_17;
reg  encode_utf8_16_17_reg;
reg [31:0] encode_utf8_18_19;
reg [31:0] encode_utf8_18_19_reg;
reg [31:0] encode_utf8_18_20;
reg [31:0] encode_utf8_18_20_reg;
reg  encode_utf8_18_21;
reg  encode_utf8_18_21_reg;
reg [31:0] encode_utf8_22_23;
reg [31:0] encode_utf8_22_23_reg;
reg [31:0] encode_utf8_22_24;
reg [31:0] encode_utf8_22_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_22_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_22_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_22_26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_22_26_reg;
reg [31:0] encode_utf8_22_27;
reg [31:0] encode_utf8_22_27_reg;
reg [31:0] encode_utf8_22_28;
reg [31:0] encode_utf8_22_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_22_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_22_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_22_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_22_30_reg;
reg  encode_utf8_31_32;
reg  encode_utf8_31_32_reg;
reg [31:0] encode_utf8_33_34;
reg [31:0] encode_utf8_33_34_reg;
reg [31:0] encode_utf8_33_35;
reg [31:0] encode_utf8_33_35_reg;
reg  encode_utf8_33_36;
reg  encode_utf8_33_36_reg;
reg [31:0] encode_utf8_37_38;
reg [31:0] encode_utf8_37_38_reg;
reg [31:0] encode_utf8_37_39;
reg [31:0] encode_utf8_37_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_37_40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_37_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_37_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_37_41_reg;
reg [31:0] encode_utf8_37_42;
reg [31:0] encode_utf8_37_42_reg;
reg [31:0] encode_utf8_37_43;
reg [31:0] encode_utf8_37_43_reg;
reg [31:0] encode_utf8_37_44;
reg [31:0] encode_utf8_37_44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_37_45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_37_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_37_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_37_46_reg;
reg [31:0] encode_utf8_37_47;
reg [31:0] encode_utf8_37_47_reg;
reg [31:0] encode_utf8_37_48;
reg [31:0] encode_utf8_37_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_37_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_37_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_37_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_37_50_reg;
reg  encode_utf8_51_52;
reg  encode_utf8_51_52_reg;
reg [31:0] encode_utf8_53_54;
reg [31:0] encode_utf8_53_54_reg;
reg [31:0] encode_utf8_53_55;
reg [31:0] encode_utf8_53_55_reg;
reg  encode_utf8_53_56;
reg  encode_utf8_53_56_reg;
reg [31:0] encode_utf8_57_58;
reg [31:0] encode_utf8_57_58_reg;
reg [31:0] encode_utf8_57_59;
reg [31:0] encode_utf8_57_59_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_57_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_57_60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_57_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_57_61_reg;
reg [31:0] encode_utf8_57_62;
reg [31:0] encode_utf8_57_62_reg;
reg [31:0] encode_utf8_57_63;
reg [31:0] encode_utf8_57_63_reg;
reg [31:0] encode_utf8_57_64;
reg [31:0] encode_utf8_57_64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_57_65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_57_65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_57_66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_57_66_reg;
reg [31:0] encode_utf8_57_67;
reg [31:0] encode_utf8_57_67_reg;
reg [31:0] encode_utf8_57_68;
reg [31:0] encode_utf8_57_68_reg;
reg [31:0] encode_utf8_57_69;
reg [31:0] encode_utf8_57_69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_57_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_57_70_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_57_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_57_71_reg;
reg [31:0] encode_utf8_57_72;
reg [31:0] encode_utf8_57_72_reg;
reg [31:0] encode_utf8_57_73;
reg [31:0] encode_utf8_57_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_57_74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_57_74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_57_75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_57_75_reg;
reg  encode_utf8_76_77;
reg  encode_utf8_76_77_reg;
reg [31:0] encode_utf8_76_78;
reg [31:0] encode_utf8_76_78_reg;
reg [31:0] encode_utf8_76_79;
reg [31:0] encode_utf8_76_79_reg;
reg  encode_utf8_80_81;
reg  encode_utf8_80_81_reg;
reg [31:0] encode_utf8_82_83;
reg [31:0] encode_utf8_82_83_reg;
reg [31:0] encode_utf8_82_84;
reg [31:0] encode_utf8_82_84_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_82_85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_82_85_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_82_86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_82_86_reg;
reg [31:0] encode_utf8_82_87;
reg [31:0] encode_utf8_82_87_reg;
reg [31:0] encode_utf8_82_88;
reg [31:0] encode_utf8_82_88_reg;
reg [31:0] encode_utf8_82_89;
reg [31:0] encode_utf8_82_89_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_82_90;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_82_90_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_82_91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_82_91_reg;
reg [31:0] encode_utf8_82_92;
reg [31:0] encode_utf8_82_92_reg;
reg [31:0] encode_utf8_82_93;
reg [31:0] encode_utf8_82_93_reg;
reg [31:0] encode_utf8_82_94;
reg [31:0] encode_utf8_82_94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_82_95;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_82_95_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_82_96;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_82_96_reg;
reg [31:0] encode_utf8_82_97;
reg [31:0] encode_utf8_82_97_reg;
reg [31:0] encode_utf8_82_98;
reg [31:0] encode_utf8_82_98_reg;
reg [31:0] encode_utf8_82_99;
reg [31:0] encode_utf8_82_99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_82_100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_82_100_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_82_101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_82_101_reg;
reg [31:0] encode_utf8_82_102;
reg [31:0] encode_utf8_82_102_reg;
reg [31:0] encode_utf8_82_103;
reg [31:0] encode_utf8_82_103_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_82_104;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_82_104_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_82_105;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_82_105_reg;
reg  encode_utf8_106_107;
reg  encode_utf8_106_107_reg;
reg [31:0] encode_utf8_108_109;
reg [31:0] encode_utf8_108_109_reg;
reg [31:0] encode_utf8_108_110;
reg [31:0] encode_utf8_108_110_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_108_111;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_108_111_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_108_112;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_108_112_reg;
reg [31:0] encode_utf8_108_113;
reg [31:0] encode_utf8_108_113_reg;
reg [31:0] encode_utf8_108_114;
reg [31:0] encode_utf8_108_114_reg;
reg [31:0] encode_utf8_108_115;
reg [31:0] encode_utf8_108_115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_108_116;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_108_116_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_108_117;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_108_117_reg;
reg [31:0] encode_utf8_108_118;
reg [31:0] encode_utf8_108_118_reg;
reg [31:0] encode_utf8_108_119;
reg [31:0] encode_utf8_108_119_reg;
reg [31:0] encode_utf8_108_120;
reg [31:0] encode_utf8_108_120_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_108_121;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_108_121_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_108_122;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_108_122_reg;
reg [31:0] encode_utf8_108_123;
reg [31:0] encode_utf8_108_123_reg;
reg [31:0] encode_utf8_108_124;
reg [31:0] encode_utf8_108_124_reg;
reg [31:0] encode_utf8_108_125;
reg [31:0] encode_utf8_108_125_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_108_126;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_108_126_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_108_127;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_108_127_reg;
reg [31:0] encode_utf8_108_128;
reg [31:0] encode_utf8_108_128_reg;
reg [31:0] encode_utf8_108_129;
reg [31:0] encode_utf8_108_129_reg;
reg [31:0] encode_utf8_108_130;
reg [31:0] encode_utf8_108_130_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_108_131;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_108_131_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_108_132;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_108_132_reg;
reg [31:0] encode_utf8_108_133;
reg [31:0] encode_utf8_108_133_reg;
reg [31:0] encode_utf8_108_134;
reg [31:0] encode_utf8_108_134_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_108_135;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_108_135_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_108_136;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_108_136_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_137__1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_137__1_reg;
reg [31:0] encode_utf8_137_138;
reg [31:0] encode_utf8_137_138_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_139__0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_139__0_reg;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_3_2;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_3_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_3_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_3_2;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_3_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_utf8_BB_3_2) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_3_5 == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_6_3;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_6_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_utf8_BB_3_2) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_3_5 == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_139_35;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_139_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_6_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_6_3;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_6_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_6_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_6_4;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_6_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_6_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_6_4;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_6_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_6_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_6_5;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_6_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_6_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_6_5;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_6_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_utf8_BB_6_5) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_6_8 == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_9_6;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_9_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_utf8_BB_6_5) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_6_8 == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_16_9;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_16_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_9_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_9_6;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_9_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_utf8_BB_9_6) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_9_12 == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_139_35;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_139_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_utf8_BB_9_6) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_9_12 == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_13_7;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_13_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_13_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_13_7;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_13_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_13_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_13_8;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_13_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_13_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_13_8;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_13_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_13_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_137_34;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_137_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_16_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_16_9;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_16_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_utf8_BB_16_9) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_16_17 == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_18_10;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_18_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_utf8_BB_16_9) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_16_17 == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_31_13;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_31_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_18_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_18_10;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_18_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_utf8_BB_18_10) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_18_21 == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_139_35;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_139_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_utf8_BB_18_10) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_18_21 == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_22_11;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_22_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_22_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_22_11;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_22_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_22_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_22_12;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_22_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_22_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_22_12;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_22_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_22_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_137_34;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_137_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_31_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_31_13;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_31_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_utf8_BB_31_13) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_31_32 == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_33_14;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_33_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_utf8_BB_31_13) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_31_32 == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_51_18;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_51_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_33_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_33_14;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_33_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_utf8_BB_33_14) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_33_36 == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_139_35;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_139_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_utf8_BB_33_14) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_33_36 == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_37_15;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_37_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_37_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_37_15;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_37_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_37_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_37_16;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_37_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_37_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_37_16;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_37_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_37_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_37_17;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_37_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_37_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_37_17;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_37_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_37_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_137_34;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_137_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_51_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_51_18;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_51_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_utf8_BB_51_18) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_51_52 == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_53_19;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_53_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_utf8_BB_51_18) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_51_52 == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_76_23;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_76_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_53_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_53_19;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_53_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_utf8_BB_53_19) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_53_56 == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_139_35;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_139_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_utf8_BB_53_19) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_53_56 == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_57_20;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_57_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_57_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_57_20;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_57_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_57_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_57_21;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_57_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_57_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_57_21;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_57_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_57_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_57_22;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_57_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_57_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_57_22;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_57_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_57_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_137_34;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_137_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_76_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_76_23;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_76_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_utf8_BB_76_23) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_76_77 == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_80_24;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_80_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_utf8_BB_76_23) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_76_77 == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_106_29;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_106_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_80_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_80_24;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_80_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_utf8_BB_80_24) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_80_81 == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_139_35;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_139_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_utf8_BB_80_24) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_80_81 == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_82_25;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_82_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_82_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_82_25;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_82_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_82_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_82_26;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_82_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_82_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_82_26;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_82_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_82_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_82_27;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_82_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_82_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_82_27;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_82_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_82_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_82_28;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_82_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_82_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_82_28;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_82_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_82_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_137_34;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_137_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_106_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_106_29;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_106_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_utf8_BB_106_29) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_106_107 == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_139_35;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_139_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_encode_utf8_BB_106_29) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_106_107 == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_108_30;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_108_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_108_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_108_30;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_108_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_108_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_108_31;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_108_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_108_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_108_31;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_108_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_108_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_108_32;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_108_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_108_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_108_32;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_108_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_108_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_108_33;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_108_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_108_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_108_33;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_108_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_108_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_137_34;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_137_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_137_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_137_34;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_137_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_137_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_3_2;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_3_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_139_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_encode_utf8_BB_139_35;
if (reset == 1'b0 && ^(LEGUP_F_encode_utf8_BB_139_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_encode_utf8_BB_139_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 6'd0;
if (reset == 1'b0 && ^(6'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %0*/
/*   %1 = getelementptr inbounds i8** %buf, i32 %len*/
begin
encode_utf8_0_1 = (arg_buf + (4 * arg_len));
end
end
always @(posedge clk) begin
/* encode_utf8: %0*/
/*   %1 = getelementptr inbounds i8** %buf, i32 %len*/
if ((cur_state == LEGUP_F_encode_utf8_BB_0_1))
begin
encode_utf8_0_1_reg <= encode_utf8_0_1;
if (reset == 1'b0 && ^(encode_utf8_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_0_1_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %0*/
/*   %2 = ptrtoint i8** %1 to i32*/
begin
encode_utf8_0_2 = encode_utf8_0_1;
end
end
always @(posedge clk) begin
/* encode_utf8: %0*/
/*   %2 = ptrtoint i8** %1 to i32*/
if ((cur_state == LEGUP_F_encode_utf8_BB_0_1))
begin
encode_utf8_0_2_reg <= encode_utf8_0_2;
if (reset == 1'b0 && ^(encode_utf8_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_0_2_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %3*/
/*   %4 = phi i32 [ 0, %0 ], [ %138, %137 ]*/
if (((cur_state == LEGUP_F_encode_utf8_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
encode_utf8_3_4 = 32'd0;
end
/* encode_utf8: %3*/
/*   %4 = phi i32 [ 0, %0 ], [ %138, %137 ]*/
else /* if (((cur_state == LEGUP_F_encode_utf8_BB_137_34) & (memory_controller_waitrequest == 1'd0))) */
begin
encode_utf8_3_4 = encode_utf8_137_138;
end
end
always @(posedge clk) begin
/* encode_utf8: %3*/
/*   %4 = phi i32 [ 0, %0 ], [ %138, %137 ]*/
if (((cur_state == LEGUP_F_encode_utf8_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
encode_utf8_3_4_reg <= encode_utf8_3_4;
if (reset == 1'b0 && ^(encode_utf8_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_3_4_reg"); $finish; end
end
/* encode_utf8: %3*/
/*   %4 = phi i32 [ 0, %0 ], [ %138, %137 ]*/
if (((cur_state == LEGUP_F_encode_utf8_BB_137_34) & (memory_controller_waitrequest == 1'd0)))
begin
encode_utf8_3_4_reg <= encode_utf8_3_4;
if (reset == 1'b0 && ^(encode_utf8_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_3_4_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %3*/
/*   %.01 = phi i8** [ %buf, %0 ], [ %.1, %137 ]*/
if (((cur_state == LEGUP_F_encode_utf8_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
encode_utf8_3__01 = arg_buf;
end
/* encode_utf8: %3*/
/*   %.01 = phi i8** [ %buf, %0 ], [ %.1, %137 ]*/
else /* if (((cur_state == LEGUP_F_encode_utf8_BB_137_34) & (memory_controller_waitrequest == 1'd0))) */
begin
encode_utf8_3__01 = encode_utf8_137__1_reg;
end
end
always @(posedge clk) begin
/* encode_utf8: %3*/
/*   %.01 = phi i8** [ %buf, %0 ], [ %.1, %137 ]*/
if (((cur_state == LEGUP_F_encode_utf8_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
encode_utf8_3__01_reg <= encode_utf8_3__01;
if (reset == 1'b0 && ^(encode_utf8_3__01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_3__01_reg"); $finish; end
end
/* encode_utf8: %3*/
/*   %.01 = phi i8** [ %buf, %0 ], [ %.1, %137 ]*/
if (((cur_state == LEGUP_F_encode_utf8_BB_137_34) & (memory_controller_waitrequest == 1'd0)))
begin
encode_utf8_3__01_reg <= encode_utf8_3__01;
if (reset == 1'b0 && ^(encode_utf8_3__01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_3__01_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %3*/
/*   %5 = icmp ult i32 %4, %ulen*/
begin
encode_utf8_3_5 = (encode_utf8_3_4_reg < arg_ulen);
end
end
always @(posedge clk) begin
/* encode_utf8: %3*/
/*   %5 = icmp ult i32 %4, %ulen*/
if ((cur_state == LEGUP_F_encode_utf8_BB_3_2))
begin
encode_utf8_3_5_reg <= encode_utf8_3_5;
if (reset == 1'b0 && ^(encode_utf8_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_3_5_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %6*/
/*   %scevgep = getelementptr i32* %ubuf, i32 %4*/
begin
encode_utf8_6_scevgep = (arg_ubuf + (4 * encode_utf8_3_4_reg));
end
end
always @(posedge clk) begin
/* encode_utf8: %6*/
/*   %scevgep = getelementptr i32* %ubuf, i32 %4*/
if ((cur_state == LEGUP_F_encode_utf8_BB_6_3))
begin
encode_utf8_6_scevgep_reg <= encode_utf8_6_scevgep;
if (reset == 1'b0 && ^(encode_utf8_6_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_6_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %6*/
/*   %7 = load i32* %scevgep, align 4, !tbaa !0*/
begin
encode_utf8_6_7 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* encode_utf8: %6*/
/*   %7 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_utf8_BB_6_5))
begin
encode_utf8_6_7_reg <= encode_utf8_6_7;
if (reset == 1'b0 && ^(encode_utf8_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_6_7_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %6*/
/*   %8 = icmp slt i32 %7, 128*/
begin
encode_utf8_6_8 = ($signed(encode_utf8_6_7) < $signed(32'd128));
end
end
always @(posedge clk) begin
/* encode_utf8: %6*/
/*   %8 = icmp slt i32 %7, 128*/
if ((cur_state == LEGUP_F_encode_utf8_BB_6_5))
begin
encode_utf8_6_8_reg <= encode_utf8_6_8;
if (reset == 1'b0 && ^(encode_utf8_6_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_6_8_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %9*/
/*   %10 = ptrtoint i8** %.01 to i32*/
begin
encode_utf8_9_10 = encode_utf8_3__01_reg;
end
end
always @(posedge clk) begin
/* encode_utf8: %9*/
/*   %10 = ptrtoint i8** %.01 to i32*/
if ((cur_state == LEGUP_F_encode_utf8_BB_9_6))
begin
encode_utf8_9_10_reg <= encode_utf8_9_10;
if (reset == 1'b0 && ^(encode_utf8_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_9_10_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %9*/
/*   %11 = sub i32 %2, %10*/
begin
encode_utf8_9_11 = (encode_utf8_0_2_reg - encode_utf8_9_10);
end
end
always @(posedge clk) begin
/* encode_utf8: %9*/
/*   %11 = sub i32 %2, %10*/
if ((cur_state == LEGUP_F_encode_utf8_BB_9_6))
begin
encode_utf8_9_11_reg <= encode_utf8_9_11;
if (reset == 1'b0 && ^(encode_utf8_9_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_9_11_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %9*/
/*   %12 = icmp slt i32 %11, 4*/
begin
encode_utf8_9_12 = ($signed(encode_utf8_9_11) < $signed(32'd4));
end
end
always @(posedge clk) begin
/* encode_utf8: %9*/
/*   %12 = icmp slt i32 %11, 4*/
if ((cur_state == LEGUP_F_encode_utf8_BB_9_6))
begin
encode_utf8_9_12_reg <= encode_utf8_9_12;
if (reset == 1'b0 && ^(encode_utf8_9_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_9_12_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %13*/
/*   %14 = inttoptr i32 %7 to i8**/
begin
encode_utf8_13_14 = encode_utf8_6_7_reg;
end
end
always @(posedge clk) begin
/* encode_utf8: %13*/
/*   %14 = inttoptr i32 %7 to i8**/
if ((cur_state == LEGUP_F_encode_utf8_BB_13_7))
begin
encode_utf8_13_14_reg <= encode_utf8_13_14;
if (reset == 1'b0 && ^(encode_utf8_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_13_14_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %13*/
/*   %15 = getelementptr inbounds i8** %.01, i32 1*/
begin
encode_utf8_13_15 = (encode_utf8_3__01_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* encode_utf8: %13*/
/*   %15 = getelementptr inbounds i8** %.01, i32 1*/
if ((cur_state == LEGUP_F_encode_utf8_BB_13_7))
begin
encode_utf8_13_15_reg <= encode_utf8_13_15;
if (reset == 1'b0 && ^(encode_utf8_13_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_13_15_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %16*/
/*   %17 = icmp slt i32 %7, 2048*/
begin
encode_utf8_16_17 = ($signed(encode_utf8_6_7_reg) < $signed(32'd2048));
end
end
always @(posedge clk) begin
/* encode_utf8: %16*/
/*   %17 = icmp slt i32 %7, 2048*/
if ((cur_state == LEGUP_F_encode_utf8_BB_16_9))
begin
encode_utf8_16_17_reg <= encode_utf8_16_17;
if (reset == 1'b0 && ^(encode_utf8_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_16_17_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %18*/
/*   %19 = ptrtoint i8** %.01 to i32*/
begin
encode_utf8_18_19 = encode_utf8_3__01_reg;
end
end
always @(posedge clk) begin
/* encode_utf8: %18*/
/*   %19 = ptrtoint i8** %.01 to i32*/
if ((cur_state == LEGUP_F_encode_utf8_BB_18_10))
begin
encode_utf8_18_19_reg <= encode_utf8_18_19;
if (reset == 1'b0 && ^(encode_utf8_18_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_18_19_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %18*/
/*   %20 = sub i32 %2, %19*/
begin
encode_utf8_18_20 = (encode_utf8_0_2_reg - encode_utf8_18_19);
end
end
always @(posedge clk) begin
/* encode_utf8: %18*/
/*   %20 = sub i32 %2, %19*/
if ((cur_state == LEGUP_F_encode_utf8_BB_18_10))
begin
encode_utf8_18_20_reg <= encode_utf8_18_20;
if (reset == 1'b0 && ^(encode_utf8_18_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_18_20_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %18*/
/*   %21 = icmp slt i32 %20, 8*/
begin
encode_utf8_18_21 = ($signed(encode_utf8_18_20) < $signed(32'd8));
end
end
always @(posedge clk) begin
/* encode_utf8: %18*/
/*   %21 = icmp slt i32 %20, 8*/
if ((cur_state == LEGUP_F_encode_utf8_BB_18_10))
begin
encode_utf8_18_21_reg <= encode_utf8_18_21;
if (reset == 1'b0 && ^(encode_utf8_18_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_18_21_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %22*/
/*   %23 = ashr i32 %7, 6*/
begin
encode_utf8_22_23 = ($signed(encode_utf8_6_7_reg) >>> 32'd6);
end
end
always @(posedge clk) begin
/* encode_utf8: %22*/
/*   %23 = ashr i32 %7, 6*/
if ((cur_state == LEGUP_F_encode_utf8_BB_22_11))
begin
encode_utf8_22_23_reg <= encode_utf8_22_23;
if (reset == 1'b0 && ^(encode_utf8_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_22_23_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %22*/
/*   %24 = add nsw i32 %23, 192*/
begin
encode_utf8_22_24 = (encode_utf8_22_23 + 32'd192);
end
end
always @(posedge clk) begin
/* encode_utf8: %22*/
/*   %24 = add nsw i32 %23, 192*/
if ((cur_state == LEGUP_F_encode_utf8_BB_22_11))
begin
encode_utf8_22_24_reg <= encode_utf8_22_24;
if (reset == 1'b0 && ^(encode_utf8_22_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_22_24_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %22*/
/*   %25 = inttoptr i32 %24 to i8**/
begin
encode_utf8_22_25 = encode_utf8_22_24;
end
end
always @(posedge clk) begin
/* encode_utf8: %22*/
/*   %25 = inttoptr i32 %24 to i8**/
if ((cur_state == LEGUP_F_encode_utf8_BB_22_11))
begin
encode_utf8_22_25_reg <= encode_utf8_22_25;
if (reset == 1'b0 && ^(encode_utf8_22_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_22_25_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %22*/
/*   %26 = getelementptr inbounds i8** %.01, i32 1*/
begin
encode_utf8_22_26 = (encode_utf8_3__01_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* encode_utf8: %22*/
/*   %26 = getelementptr inbounds i8** %.01, i32 1*/
if ((cur_state == LEGUP_F_encode_utf8_BB_22_11))
begin
encode_utf8_22_26_reg <= encode_utf8_22_26;
if (reset == 1'b0 && ^(encode_utf8_22_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_22_26_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %22*/
/*   %27 = and i32 %7, 63*/
begin
encode_utf8_22_27 = (encode_utf8_6_7_reg & 32'd63);
end
end
always @(posedge clk) begin
/* encode_utf8: %22*/
/*   %27 = and i32 %7, 63*/
if ((cur_state == LEGUP_F_encode_utf8_BB_22_11))
begin
encode_utf8_22_27_reg <= encode_utf8_22_27;
if (reset == 1'b0 && ^(encode_utf8_22_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_22_27_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %22*/
/*   %28 = or i32 %27, 128*/
begin
encode_utf8_22_28 = (encode_utf8_22_27 | 32'd128);
end
end
always @(posedge clk) begin
/* encode_utf8: %22*/
/*   %28 = or i32 %27, 128*/
if ((cur_state == LEGUP_F_encode_utf8_BB_22_11))
begin
encode_utf8_22_28_reg <= encode_utf8_22_28;
if (reset == 1'b0 && ^(encode_utf8_22_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_22_28_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %22*/
/*   %29 = inttoptr i32 %28 to i8**/
begin
encode_utf8_22_29 = encode_utf8_22_28;
end
end
always @(posedge clk) begin
/* encode_utf8: %22*/
/*   %29 = inttoptr i32 %28 to i8**/
if ((cur_state == LEGUP_F_encode_utf8_BB_22_11))
begin
encode_utf8_22_29_reg <= encode_utf8_22_29;
if (reset == 1'b0 && ^(encode_utf8_22_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_22_29_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %22*/
/*   %30 = getelementptr inbounds i8** %.01, i32 2*/
begin
encode_utf8_22_30 = (encode_utf8_3__01_reg + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* encode_utf8: %22*/
/*   %30 = getelementptr inbounds i8** %.01, i32 2*/
if ((cur_state == LEGUP_F_encode_utf8_BB_22_11))
begin
encode_utf8_22_30_reg <= encode_utf8_22_30;
if (reset == 1'b0 && ^(encode_utf8_22_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_22_30_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %31*/
/*   %32 = icmp slt i32 %7, 65536*/
begin
encode_utf8_31_32 = ($signed(encode_utf8_6_7_reg) < $signed(32'd65536));
end
end
always @(posedge clk) begin
/* encode_utf8: %31*/
/*   %32 = icmp slt i32 %7, 65536*/
if ((cur_state == LEGUP_F_encode_utf8_BB_31_13))
begin
encode_utf8_31_32_reg <= encode_utf8_31_32;
if (reset == 1'b0 && ^(encode_utf8_31_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_31_32_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %33*/
/*   %34 = ptrtoint i8** %.01 to i32*/
begin
encode_utf8_33_34 = encode_utf8_3__01_reg;
end
end
always @(posedge clk) begin
/* encode_utf8: %33*/
/*   %34 = ptrtoint i8** %.01 to i32*/
if ((cur_state == LEGUP_F_encode_utf8_BB_33_14))
begin
encode_utf8_33_34_reg <= encode_utf8_33_34;
if (reset == 1'b0 && ^(encode_utf8_33_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_33_34_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %33*/
/*   %35 = sub i32 %2, %34*/
begin
encode_utf8_33_35 = (encode_utf8_0_2_reg - encode_utf8_33_34);
end
end
always @(posedge clk) begin
/* encode_utf8: %33*/
/*   %35 = sub i32 %2, %34*/
if ((cur_state == LEGUP_F_encode_utf8_BB_33_14))
begin
encode_utf8_33_35_reg <= encode_utf8_33_35;
if (reset == 1'b0 && ^(encode_utf8_33_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_33_35_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %33*/
/*   %36 = icmp slt i32 %35, 12*/
begin
encode_utf8_33_36 = ($signed(encode_utf8_33_35) < $signed(32'd12));
end
end
always @(posedge clk) begin
/* encode_utf8: %33*/
/*   %36 = icmp slt i32 %35, 12*/
if ((cur_state == LEGUP_F_encode_utf8_BB_33_14))
begin
encode_utf8_33_36_reg <= encode_utf8_33_36;
if (reset == 1'b0 && ^(encode_utf8_33_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_33_36_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %37*/
/*   %38 = ashr i32 %7, 12*/
begin
encode_utf8_37_38 = ($signed(encode_utf8_6_7_reg) >>> 32'd12);
end
end
always @(posedge clk) begin
/* encode_utf8: %37*/
/*   %38 = ashr i32 %7, 12*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_15))
begin
encode_utf8_37_38_reg <= encode_utf8_37_38;
if (reset == 1'b0 && ^(encode_utf8_37_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_37_38_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %37*/
/*   %39 = add nsw i32 %38, 224*/
begin
encode_utf8_37_39 = (encode_utf8_37_38 + 32'd224);
end
end
always @(posedge clk) begin
/* encode_utf8: %37*/
/*   %39 = add nsw i32 %38, 224*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_15))
begin
encode_utf8_37_39_reg <= encode_utf8_37_39;
if (reset == 1'b0 && ^(encode_utf8_37_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_37_39_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %37*/
/*   %40 = inttoptr i32 %39 to i8**/
begin
encode_utf8_37_40 = encode_utf8_37_39;
end
end
always @(posedge clk) begin
/* encode_utf8: %37*/
/*   %40 = inttoptr i32 %39 to i8**/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_15))
begin
encode_utf8_37_40_reg <= encode_utf8_37_40;
if (reset == 1'b0 && ^(encode_utf8_37_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_37_40_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %37*/
/*   %41 = getelementptr inbounds i8** %.01, i32 1*/
begin
encode_utf8_37_41 = (encode_utf8_3__01_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* encode_utf8: %37*/
/*   %41 = getelementptr inbounds i8** %.01, i32 1*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_15))
begin
encode_utf8_37_41_reg <= encode_utf8_37_41;
if (reset == 1'b0 && ^(encode_utf8_37_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_37_41_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %37*/
/*   %42 = lshr i32 %7, 6*/
begin
encode_utf8_37_42 = (encode_utf8_6_7_reg >>> (32'd6 % 32));
end
end
always @(posedge clk) begin
/* encode_utf8: %37*/
/*   %42 = lshr i32 %7, 6*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_15))
begin
encode_utf8_37_42_reg <= encode_utf8_37_42;
if (reset == 1'b0 && ^(encode_utf8_37_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_37_42_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %37*/
/*   %43 = and i32 %42, 63*/
begin
encode_utf8_37_43 = (encode_utf8_37_42 & 32'd63);
end
end
always @(posedge clk) begin
/* encode_utf8: %37*/
/*   %43 = and i32 %42, 63*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_15))
begin
encode_utf8_37_43_reg <= encode_utf8_37_43;
if (reset == 1'b0 && ^(encode_utf8_37_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_37_43_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %37*/
/*   %44 = or i32 %43, 128*/
begin
encode_utf8_37_44 = (encode_utf8_37_43 | 32'd128);
end
end
always @(posedge clk) begin
/* encode_utf8: %37*/
/*   %44 = or i32 %43, 128*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_15))
begin
encode_utf8_37_44_reg <= encode_utf8_37_44;
if (reset == 1'b0 && ^(encode_utf8_37_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_37_44_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %37*/
/*   %45 = inttoptr i32 %44 to i8**/
begin
encode_utf8_37_45 = encode_utf8_37_44;
end
end
always @(posedge clk) begin
/* encode_utf8: %37*/
/*   %45 = inttoptr i32 %44 to i8**/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_15))
begin
encode_utf8_37_45_reg <= encode_utf8_37_45;
if (reset == 1'b0 && ^(encode_utf8_37_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_37_45_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %37*/
/*   %46 = getelementptr inbounds i8** %.01, i32 2*/
begin
encode_utf8_37_46 = (encode_utf8_3__01_reg + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* encode_utf8: %37*/
/*   %46 = getelementptr inbounds i8** %.01, i32 2*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_15))
begin
encode_utf8_37_46_reg <= encode_utf8_37_46;
if (reset == 1'b0 && ^(encode_utf8_37_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_37_46_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %37*/
/*   %47 = and i32 %7, 63*/
begin
encode_utf8_37_47 = (encode_utf8_6_7_reg & 32'd63);
end
end
always @(posedge clk) begin
/* encode_utf8: %37*/
/*   %47 = and i32 %7, 63*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_15))
begin
encode_utf8_37_47_reg <= encode_utf8_37_47;
if (reset == 1'b0 && ^(encode_utf8_37_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_37_47_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %37*/
/*   %48 = or i32 %47, 128*/
begin
encode_utf8_37_48 = (encode_utf8_37_47 | 32'd128);
end
end
always @(posedge clk) begin
/* encode_utf8: %37*/
/*   %48 = or i32 %47, 128*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_15))
begin
encode_utf8_37_48_reg <= encode_utf8_37_48;
if (reset == 1'b0 && ^(encode_utf8_37_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_37_48_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %37*/
/*   %49 = inttoptr i32 %48 to i8**/
begin
encode_utf8_37_49 = encode_utf8_37_48;
end
end
always @(posedge clk) begin
/* encode_utf8: %37*/
/*   %49 = inttoptr i32 %48 to i8**/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_15))
begin
encode_utf8_37_49_reg <= encode_utf8_37_49;
if (reset == 1'b0 && ^(encode_utf8_37_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_37_49_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %37*/
/*   %50 = getelementptr inbounds i8** %.01, i32 3*/
begin
encode_utf8_37_50 = (encode_utf8_3__01_reg + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* encode_utf8: %37*/
/*   %50 = getelementptr inbounds i8** %.01, i32 3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_15))
begin
encode_utf8_37_50_reg <= encode_utf8_37_50;
if (reset == 1'b0 && ^(encode_utf8_37_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_37_50_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %51*/
/*   %52 = icmp slt i32 %7, 2097152*/
begin
encode_utf8_51_52 = ($signed(encode_utf8_6_7_reg) < $signed(32'd2097152));
end
end
always @(posedge clk) begin
/* encode_utf8: %51*/
/*   %52 = icmp slt i32 %7, 2097152*/
if ((cur_state == LEGUP_F_encode_utf8_BB_51_18))
begin
encode_utf8_51_52_reg <= encode_utf8_51_52;
if (reset == 1'b0 && ^(encode_utf8_51_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_51_52_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %53*/
/*   %54 = ptrtoint i8** %.01 to i32*/
begin
encode_utf8_53_54 = encode_utf8_3__01_reg;
end
end
always @(posedge clk) begin
/* encode_utf8: %53*/
/*   %54 = ptrtoint i8** %.01 to i32*/
if ((cur_state == LEGUP_F_encode_utf8_BB_53_19))
begin
encode_utf8_53_54_reg <= encode_utf8_53_54;
if (reset == 1'b0 && ^(encode_utf8_53_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_53_54_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %53*/
/*   %55 = sub i32 %2, %54*/
begin
encode_utf8_53_55 = (encode_utf8_0_2_reg - encode_utf8_53_54);
end
end
always @(posedge clk) begin
/* encode_utf8: %53*/
/*   %55 = sub i32 %2, %54*/
if ((cur_state == LEGUP_F_encode_utf8_BB_53_19))
begin
encode_utf8_53_55_reg <= encode_utf8_53_55;
if (reset == 1'b0 && ^(encode_utf8_53_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_53_55_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %53*/
/*   %56 = icmp slt i32 %55, 16*/
begin
encode_utf8_53_56 = ($signed(encode_utf8_53_55) < $signed(32'd16));
end
end
always @(posedge clk) begin
/* encode_utf8: %53*/
/*   %56 = icmp slt i32 %55, 16*/
if ((cur_state == LEGUP_F_encode_utf8_BB_53_19))
begin
encode_utf8_53_56_reg <= encode_utf8_53_56;
if (reset == 1'b0 && ^(encode_utf8_53_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_53_56_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %57*/
/*   %58 = ashr i32 %7, 18*/
begin
encode_utf8_57_58 = ($signed(encode_utf8_6_7_reg) >>> 32'd18);
end
end
always @(posedge clk) begin
/* encode_utf8: %57*/
/*   %58 = ashr i32 %7, 18*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
encode_utf8_57_58_reg <= encode_utf8_57_58;
if (reset == 1'b0 && ^(encode_utf8_57_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_57_58_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %57*/
/*   %59 = add nsw i32 %58, 240*/
begin
encode_utf8_57_59 = (encode_utf8_57_58 + 32'd240);
end
end
always @(posedge clk) begin
/* encode_utf8: %57*/
/*   %59 = add nsw i32 %58, 240*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
encode_utf8_57_59_reg <= encode_utf8_57_59;
if (reset == 1'b0 && ^(encode_utf8_57_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_57_59_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %57*/
/*   %60 = inttoptr i32 %59 to i8**/
begin
encode_utf8_57_60 = encode_utf8_57_59;
end
end
always @(posedge clk) begin
/* encode_utf8: %57*/
/*   %60 = inttoptr i32 %59 to i8**/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
encode_utf8_57_60_reg <= encode_utf8_57_60;
if (reset == 1'b0 && ^(encode_utf8_57_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_57_60_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %57*/
/*   %61 = getelementptr inbounds i8** %.01, i32 1*/
begin
encode_utf8_57_61 = (encode_utf8_3__01_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* encode_utf8: %57*/
/*   %61 = getelementptr inbounds i8** %.01, i32 1*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
encode_utf8_57_61_reg <= encode_utf8_57_61;
if (reset == 1'b0 && ^(encode_utf8_57_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_57_61_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %57*/
/*   %62 = lshr i32 %7, 12*/
begin
encode_utf8_57_62 = (encode_utf8_6_7_reg >>> (32'd12 % 32));
end
end
always @(posedge clk) begin
/* encode_utf8: %57*/
/*   %62 = lshr i32 %7, 12*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
encode_utf8_57_62_reg <= encode_utf8_57_62;
if (reset == 1'b0 && ^(encode_utf8_57_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_57_62_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %57*/
/*   %63 = and i32 %62, 63*/
begin
encode_utf8_57_63 = (encode_utf8_57_62 & 32'd63);
end
end
always @(posedge clk) begin
/* encode_utf8: %57*/
/*   %63 = and i32 %62, 63*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
encode_utf8_57_63_reg <= encode_utf8_57_63;
if (reset == 1'b0 && ^(encode_utf8_57_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_57_63_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %57*/
/*   %64 = or i32 %63, 128*/
begin
encode_utf8_57_64 = (encode_utf8_57_63 | 32'd128);
end
end
always @(posedge clk) begin
/* encode_utf8: %57*/
/*   %64 = or i32 %63, 128*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
encode_utf8_57_64_reg <= encode_utf8_57_64;
if (reset == 1'b0 && ^(encode_utf8_57_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_57_64_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %57*/
/*   %65 = inttoptr i32 %64 to i8**/
begin
encode_utf8_57_65 = encode_utf8_57_64;
end
end
always @(posedge clk) begin
/* encode_utf8: %57*/
/*   %65 = inttoptr i32 %64 to i8**/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
encode_utf8_57_65_reg <= encode_utf8_57_65;
if (reset == 1'b0 && ^(encode_utf8_57_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_57_65_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %57*/
/*   %66 = getelementptr inbounds i8** %.01, i32 2*/
begin
encode_utf8_57_66 = (encode_utf8_3__01_reg + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* encode_utf8: %57*/
/*   %66 = getelementptr inbounds i8** %.01, i32 2*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
encode_utf8_57_66_reg <= encode_utf8_57_66;
if (reset == 1'b0 && ^(encode_utf8_57_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_57_66_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %57*/
/*   %67 = lshr i32 %7, 6*/
begin
encode_utf8_57_67 = (encode_utf8_6_7_reg >>> (32'd6 % 32));
end
end
always @(posedge clk) begin
/* encode_utf8: %57*/
/*   %67 = lshr i32 %7, 6*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
encode_utf8_57_67_reg <= encode_utf8_57_67;
if (reset == 1'b0 && ^(encode_utf8_57_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_57_67_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %57*/
/*   %68 = and i32 %67, 63*/
begin
encode_utf8_57_68 = (encode_utf8_57_67 & 32'd63);
end
end
always @(posedge clk) begin
/* encode_utf8: %57*/
/*   %68 = and i32 %67, 63*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
encode_utf8_57_68_reg <= encode_utf8_57_68;
if (reset == 1'b0 && ^(encode_utf8_57_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_57_68_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %57*/
/*   %69 = or i32 %68, 128*/
begin
encode_utf8_57_69 = (encode_utf8_57_68 | 32'd128);
end
end
always @(posedge clk) begin
/* encode_utf8: %57*/
/*   %69 = or i32 %68, 128*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
encode_utf8_57_69_reg <= encode_utf8_57_69;
if (reset == 1'b0 && ^(encode_utf8_57_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_57_69_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %57*/
/*   %70 = inttoptr i32 %69 to i8**/
begin
encode_utf8_57_70 = encode_utf8_57_69;
end
end
always @(posedge clk) begin
/* encode_utf8: %57*/
/*   %70 = inttoptr i32 %69 to i8**/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
encode_utf8_57_70_reg <= encode_utf8_57_70;
if (reset == 1'b0 && ^(encode_utf8_57_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_57_70_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %57*/
/*   %71 = getelementptr inbounds i8** %.01, i32 3*/
begin
encode_utf8_57_71 = (encode_utf8_3__01_reg + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* encode_utf8: %57*/
/*   %71 = getelementptr inbounds i8** %.01, i32 3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
encode_utf8_57_71_reg <= encode_utf8_57_71;
if (reset == 1'b0 && ^(encode_utf8_57_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_57_71_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %57*/
/*   %72 = and i32 %7, 63*/
begin
encode_utf8_57_72 = (encode_utf8_6_7_reg & 32'd63);
end
end
always @(posedge clk) begin
/* encode_utf8: %57*/
/*   %72 = and i32 %7, 63*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
encode_utf8_57_72_reg <= encode_utf8_57_72;
if (reset == 1'b0 && ^(encode_utf8_57_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_57_72_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %57*/
/*   %73 = or i32 %72, 128*/
begin
encode_utf8_57_73 = (encode_utf8_57_72 | 32'd128);
end
end
always @(posedge clk) begin
/* encode_utf8: %57*/
/*   %73 = or i32 %72, 128*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
encode_utf8_57_73_reg <= encode_utf8_57_73;
if (reset == 1'b0 && ^(encode_utf8_57_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_57_73_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %57*/
/*   %74 = inttoptr i32 %73 to i8**/
begin
encode_utf8_57_74 = encode_utf8_57_73;
end
end
always @(posedge clk) begin
/* encode_utf8: %57*/
/*   %74 = inttoptr i32 %73 to i8**/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
encode_utf8_57_74_reg <= encode_utf8_57_74;
if (reset == 1'b0 && ^(encode_utf8_57_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_57_74_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %57*/
/*   %75 = getelementptr inbounds i8** %.01, i32 4*/
begin
encode_utf8_57_75 = (encode_utf8_3__01_reg + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* encode_utf8: %57*/
/*   %75 = getelementptr inbounds i8** %.01, i32 4*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
encode_utf8_57_75_reg <= encode_utf8_57_75;
if (reset == 1'b0 && ^(encode_utf8_57_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_57_75_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %76*/
/*   %77 = icmp slt i32 %7, 67108864*/
begin
encode_utf8_76_77 = ($signed(encode_utf8_6_7_reg) < $signed(32'd67108864));
end
end
always @(posedge clk) begin
/* encode_utf8: %76*/
/*   %77 = icmp slt i32 %7, 67108864*/
if ((cur_state == LEGUP_F_encode_utf8_BB_76_23))
begin
encode_utf8_76_77_reg <= encode_utf8_76_77;
if (reset == 1'b0 && ^(encode_utf8_76_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_76_77_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %76*/
/*   %78 = ptrtoint i8** %.01 to i32*/
begin
encode_utf8_76_78 = encode_utf8_3__01_reg;
end
end
always @(posedge clk) begin
/* encode_utf8: %76*/
/*   %78 = ptrtoint i8** %.01 to i32*/
if ((cur_state == LEGUP_F_encode_utf8_BB_76_23))
begin
encode_utf8_76_78_reg <= encode_utf8_76_78;
if (reset == 1'b0 && ^(encode_utf8_76_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_76_78_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %76*/
/*   %79 = sub i32 %2, %78*/
begin
encode_utf8_76_79 = (encode_utf8_0_2_reg - encode_utf8_76_78);
end
end
always @(posedge clk) begin
/* encode_utf8: %76*/
/*   %79 = sub i32 %2, %78*/
if ((cur_state == LEGUP_F_encode_utf8_BB_76_23))
begin
encode_utf8_76_79_reg <= encode_utf8_76_79;
if (reset == 1'b0 && ^(encode_utf8_76_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_76_79_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %80*/
/*   %81 = icmp slt i32 %79, 20*/
begin
encode_utf8_80_81 = ($signed(encode_utf8_76_79_reg) < $signed(32'd20));
end
end
always @(posedge clk) begin
/* encode_utf8: %80*/
/*   %81 = icmp slt i32 %79, 20*/
if ((cur_state == LEGUP_F_encode_utf8_BB_80_24))
begin
encode_utf8_80_81_reg <= encode_utf8_80_81;
if (reset == 1'b0 && ^(encode_utf8_80_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_80_81_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %82*/
/*   %83 = ashr i32 %7, 24*/
begin
encode_utf8_82_83 = ($signed(encode_utf8_6_7_reg) >>> 32'd24);
end
end
always @(posedge clk) begin
/* encode_utf8: %82*/
/*   %83 = ashr i32 %7, 24*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
encode_utf8_82_83_reg <= encode_utf8_82_83;
if (reset == 1'b0 && ^(encode_utf8_82_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_82_83_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %82*/
/*   %84 = add nsw i32 %83, 248*/
begin
encode_utf8_82_84 = (encode_utf8_82_83 + 32'd248);
end
end
always @(posedge clk) begin
/* encode_utf8: %82*/
/*   %84 = add nsw i32 %83, 248*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
encode_utf8_82_84_reg <= encode_utf8_82_84;
if (reset == 1'b0 && ^(encode_utf8_82_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_82_84_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %82*/
/*   %85 = inttoptr i32 %84 to i8**/
begin
encode_utf8_82_85 = encode_utf8_82_84;
end
end
always @(posedge clk) begin
/* encode_utf8: %82*/
/*   %85 = inttoptr i32 %84 to i8**/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
encode_utf8_82_85_reg <= encode_utf8_82_85;
if (reset == 1'b0 && ^(encode_utf8_82_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_82_85_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %82*/
/*   %86 = getelementptr inbounds i8** %.01, i32 1*/
begin
encode_utf8_82_86 = (encode_utf8_3__01_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* encode_utf8: %82*/
/*   %86 = getelementptr inbounds i8** %.01, i32 1*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
encode_utf8_82_86_reg <= encode_utf8_82_86;
if (reset == 1'b0 && ^(encode_utf8_82_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_82_86_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %82*/
/*   %87 = lshr i32 %7, 18*/
begin
encode_utf8_82_87 = (encode_utf8_6_7_reg >>> (32'd18 % 32));
end
end
always @(posedge clk) begin
/* encode_utf8: %82*/
/*   %87 = lshr i32 %7, 18*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
encode_utf8_82_87_reg <= encode_utf8_82_87;
if (reset == 1'b0 && ^(encode_utf8_82_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_82_87_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %82*/
/*   %88 = and i32 %87, 63*/
begin
encode_utf8_82_88 = (encode_utf8_82_87 & 32'd63);
end
end
always @(posedge clk) begin
/* encode_utf8: %82*/
/*   %88 = and i32 %87, 63*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
encode_utf8_82_88_reg <= encode_utf8_82_88;
if (reset == 1'b0 && ^(encode_utf8_82_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_82_88_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %82*/
/*   %89 = or i32 %88, 128*/
begin
encode_utf8_82_89 = (encode_utf8_82_88 | 32'd128);
end
end
always @(posedge clk) begin
/* encode_utf8: %82*/
/*   %89 = or i32 %88, 128*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
encode_utf8_82_89_reg <= encode_utf8_82_89;
if (reset == 1'b0 && ^(encode_utf8_82_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_82_89_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %82*/
/*   %90 = inttoptr i32 %89 to i8**/
begin
encode_utf8_82_90 = encode_utf8_82_89;
end
end
always @(posedge clk) begin
/* encode_utf8: %82*/
/*   %90 = inttoptr i32 %89 to i8**/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
encode_utf8_82_90_reg <= encode_utf8_82_90;
if (reset == 1'b0 && ^(encode_utf8_82_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_82_90_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %82*/
/*   %91 = getelementptr inbounds i8** %.01, i32 2*/
begin
encode_utf8_82_91 = (encode_utf8_3__01_reg + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* encode_utf8: %82*/
/*   %91 = getelementptr inbounds i8** %.01, i32 2*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
encode_utf8_82_91_reg <= encode_utf8_82_91;
if (reset == 1'b0 && ^(encode_utf8_82_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_82_91_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %82*/
/*   %92 = lshr i32 %7, 12*/
begin
encode_utf8_82_92 = (encode_utf8_6_7_reg >>> (32'd12 % 32));
end
end
always @(posedge clk) begin
/* encode_utf8: %82*/
/*   %92 = lshr i32 %7, 12*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
encode_utf8_82_92_reg <= encode_utf8_82_92;
if (reset == 1'b0 && ^(encode_utf8_82_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_82_92_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %82*/
/*   %93 = and i32 %92, 63*/
begin
encode_utf8_82_93 = (encode_utf8_82_92 & 32'd63);
end
end
always @(posedge clk) begin
/* encode_utf8: %82*/
/*   %93 = and i32 %92, 63*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
encode_utf8_82_93_reg <= encode_utf8_82_93;
if (reset == 1'b0 && ^(encode_utf8_82_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_82_93_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %82*/
/*   %94 = or i32 %93, 128*/
begin
encode_utf8_82_94 = (encode_utf8_82_93 | 32'd128);
end
end
always @(posedge clk) begin
/* encode_utf8: %82*/
/*   %94 = or i32 %93, 128*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
encode_utf8_82_94_reg <= encode_utf8_82_94;
if (reset == 1'b0 && ^(encode_utf8_82_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_82_94_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %82*/
/*   %95 = inttoptr i32 %94 to i8**/
begin
encode_utf8_82_95 = encode_utf8_82_94;
end
end
always @(posedge clk) begin
/* encode_utf8: %82*/
/*   %95 = inttoptr i32 %94 to i8**/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
encode_utf8_82_95_reg <= encode_utf8_82_95;
if (reset == 1'b0 && ^(encode_utf8_82_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_82_95_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %82*/
/*   %96 = getelementptr inbounds i8** %.01, i32 3*/
begin
encode_utf8_82_96 = (encode_utf8_3__01_reg + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* encode_utf8: %82*/
/*   %96 = getelementptr inbounds i8** %.01, i32 3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
encode_utf8_82_96_reg <= encode_utf8_82_96;
if (reset == 1'b0 && ^(encode_utf8_82_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_82_96_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %82*/
/*   %97 = lshr i32 %7, 6*/
begin
encode_utf8_82_97 = (encode_utf8_6_7_reg >>> (32'd6 % 32));
end
end
always @(posedge clk) begin
/* encode_utf8: %82*/
/*   %97 = lshr i32 %7, 6*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
encode_utf8_82_97_reg <= encode_utf8_82_97;
if (reset == 1'b0 && ^(encode_utf8_82_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_82_97_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %82*/
/*   %98 = and i32 %97, 63*/
begin
encode_utf8_82_98 = (encode_utf8_82_97 & 32'd63);
end
end
always @(posedge clk) begin
/* encode_utf8: %82*/
/*   %98 = and i32 %97, 63*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
encode_utf8_82_98_reg <= encode_utf8_82_98;
if (reset == 1'b0 && ^(encode_utf8_82_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_82_98_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %82*/
/*   %99 = or i32 %98, 128*/
begin
encode_utf8_82_99 = (encode_utf8_82_98 | 32'd128);
end
end
always @(posedge clk) begin
/* encode_utf8: %82*/
/*   %99 = or i32 %98, 128*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
encode_utf8_82_99_reg <= encode_utf8_82_99;
if (reset == 1'b0 && ^(encode_utf8_82_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_82_99_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %82*/
/*   %100 = inttoptr i32 %99 to i8**/
begin
encode_utf8_82_100 = encode_utf8_82_99;
end
end
always @(posedge clk) begin
/* encode_utf8: %82*/
/*   %100 = inttoptr i32 %99 to i8**/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
encode_utf8_82_100_reg <= encode_utf8_82_100;
if (reset == 1'b0 && ^(encode_utf8_82_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_82_100_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %82*/
/*   %101 = getelementptr inbounds i8** %.01, i32 4*/
begin
encode_utf8_82_101 = (encode_utf8_3__01_reg + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* encode_utf8: %82*/
/*   %101 = getelementptr inbounds i8** %.01, i32 4*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
encode_utf8_82_101_reg <= encode_utf8_82_101;
if (reset == 1'b0 && ^(encode_utf8_82_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_82_101_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %82*/
/*   %102 = and i32 %7, 63*/
begin
encode_utf8_82_102 = (encode_utf8_6_7_reg & 32'd63);
end
end
always @(posedge clk) begin
/* encode_utf8: %82*/
/*   %102 = and i32 %7, 63*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
encode_utf8_82_102_reg <= encode_utf8_82_102;
if (reset == 1'b0 && ^(encode_utf8_82_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_82_102_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %82*/
/*   %103 = or i32 %102, 128*/
begin
encode_utf8_82_103 = (encode_utf8_82_102 | 32'd128);
end
end
always @(posedge clk) begin
/* encode_utf8: %82*/
/*   %103 = or i32 %102, 128*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
encode_utf8_82_103_reg <= encode_utf8_82_103;
if (reset == 1'b0 && ^(encode_utf8_82_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_82_103_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %82*/
/*   %104 = inttoptr i32 %103 to i8**/
begin
encode_utf8_82_104 = encode_utf8_82_103;
end
end
always @(posedge clk) begin
/* encode_utf8: %82*/
/*   %104 = inttoptr i32 %103 to i8**/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
encode_utf8_82_104_reg <= encode_utf8_82_104;
if (reset == 1'b0 && ^(encode_utf8_82_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_82_104_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %82*/
/*   %105 = getelementptr inbounds i8** %.01, i32 5*/
begin
encode_utf8_82_105 = (encode_utf8_3__01_reg + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* encode_utf8: %82*/
/*   %105 = getelementptr inbounds i8** %.01, i32 5*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
encode_utf8_82_105_reg <= encode_utf8_82_105;
if (reset == 1'b0 && ^(encode_utf8_82_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_82_105_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %106*/
/*   %107 = icmp slt i32 %79, 24*/
begin
encode_utf8_106_107 = ($signed(encode_utf8_76_79_reg) < $signed(32'd24));
end
end
always @(posedge clk) begin
/* encode_utf8: %106*/
/*   %107 = icmp slt i32 %79, 24*/
if ((cur_state == LEGUP_F_encode_utf8_BB_106_29))
begin
encode_utf8_106_107_reg <= encode_utf8_106_107;
if (reset == 1'b0 && ^(encode_utf8_106_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_106_107_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %109 = ashr i32 %7, 30*/
begin
encode_utf8_108_109 = ($signed(encode_utf8_6_7_reg) >>> 32'd30);
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %109 = ashr i32 %7, 30*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_109_reg <= encode_utf8_108_109;
if (reset == 1'b0 && ^(encode_utf8_108_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_109_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %110 = add nsw i32 %109, 252*/
begin
encode_utf8_108_110 = (encode_utf8_108_109 + 32'd252);
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %110 = add nsw i32 %109, 252*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_110_reg <= encode_utf8_108_110;
if (reset == 1'b0 && ^(encode_utf8_108_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_110_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %111 = inttoptr i32 %110 to i8**/
begin
encode_utf8_108_111 = encode_utf8_108_110;
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %111 = inttoptr i32 %110 to i8**/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_111_reg <= encode_utf8_108_111;
if (reset == 1'b0 && ^(encode_utf8_108_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_111_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %112 = getelementptr inbounds i8** %.01, i32 1*/
begin
encode_utf8_108_112 = (encode_utf8_3__01_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %112 = getelementptr inbounds i8** %.01, i32 1*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_112_reg <= encode_utf8_108_112;
if (reset == 1'b0 && ^(encode_utf8_108_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_112_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %113 = lshr i32 %7, 24*/
begin
encode_utf8_108_113 = (encode_utf8_6_7_reg >>> (32'd24 % 32));
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %113 = lshr i32 %7, 24*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_113_reg <= encode_utf8_108_113;
if (reset == 1'b0 && ^(encode_utf8_108_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_113_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %114 = and i32 %113, 63*/
begin
encode_utf8_108_114 = (encode_utf8_108_113 & 32'd63);
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %114 = and i32 %113, 63*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_114_reg <= encode_utf8_108_114;
if (reset == 1'b0 && ^(encode_utf8_108_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_114_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %115 = or i32 %114, 128*/
begin
encode_utf8_108_115 = (encode_utf8_108_114 | 32'd128);
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %115 = or i32 %114, 128*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_115_reg <= encode_utf8_108_115;
if (reset == 1'b0 && ^(encode_utf8_108_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_115_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %116 = inttoptr i32 %115 to i8**/
begin
encode_utf8_108_116 = encode_utf8_108_115;
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %116 = inttoptr i32 %115 to i8**/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_116_reg <= encode_utf8_108_116;
if (reset == 1'b0 && ^(encode_utf8_108_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_116_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %117 = getelementptr inbounds i8** %.01, i32 2*/
begin
encode_utf8_108_117 = (encode_utf8_3__01_reg + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %117 = getelementptr inbounds i8** %.01, i32 2*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_117_reg <= encode_utf8_108_117;
if (reset == 1'b0 && ^(encode_utf8_108_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_117_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %118 = lshr i32 %7, 18*/
begin
encode_utf8_108_118 = (encode_utf8_6_7_reg >>> (32'd18 % 32));
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %118 = lshr i32 %7, 18*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_118_reg <= encode_utf8_108_118;
if (reset == 1'b0 && ^(encode_utf8_108_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_118_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %119 = and i32 %118, 63*/
begin
encode_utf8_108_119 = (encode_utf8_108_118 & 32'd63);
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %119 = and i32 %118, 63*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_119_reg <= encode_utf8_108_119;
if (reset == 1'b0 && ^(encode_utf8_108_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_119_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %120 = or i32 %119, 128*/
begin
encode_utf8_108_120 = (encode_utf8_108_119 | 32'd128);
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %120 = or i32 %119, 128*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_120_reg <= encode_utf8_108_120;
if (reset == 1'b0 && ^(encode_utf8_108_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_120_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %121 = inttoptr i32 %120 to i8**/
begin
encode_utf8_108_121 = encode_utf8_108_120;
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %121 = inttoptr i32 %120 to i8**/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_121_reg <= encode_utf8_108_121;
if (reset == 1'b0 && ^(encode_utf8_108_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_121_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %122 = getelementptr inbounds i8** %.01, i32 3*/
begin
encode_utf8_108_122 = (encode_utf8_3__01_reg + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %122 = getelementptr inbounds i8** %.01, i32 3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_122_reg <= encode_utf8_108_122;
if (reset == 1'b0 && ^(encode_utf8_108_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_122_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %123 = lshr i32 %7, 12*/
begin
encode_utf8_108_123 = (encode_utf8_6_7_reg >>> (32'd12 % 32));
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %123 = lshr i32 %7, 12*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_123_reg <= encode_utf8_108_123;
if (reset == 1'b0 && ^(encode_utf8_108_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_123_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %124 = and i32 %123, 63*/
begin
encode_utf8_108_124 = (encode_utf8_108_123 & 32'd63);
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %124 = and i32 %123, 63*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_124_reg <= encode_utf8_108_124;
if (reset == 1'b0 && ^(encode_utf8_108_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_124_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %125 = or i32 %124, 128*/
begin
encode_utf8_108_125 = (encode_utf8_108_124 | 32'd128);
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %125 = or i32 %124, 128*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_125_reg <= encode_utf8_108_125;
if (reset == 1'b0 && ^(encode_utf8_108_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_125_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %126 = inttoptr i32 %125 to i8**/
begin
encode_utf8_108_126 = encode_utf8_108_125;
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %126 = inttoptr i32 %125 to i8**/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_126_reg <= encode_utf8_108_126;
if (reset == 1'b0 && ^(encode_utf8_108_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_126_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %127 = getelementptr inbounds i8** %.01, i32 4*/
begin
encode_utf8_108_127 = (encode_utf8_3__01_reg + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %127 = getelementptr inbounds i8** %.01, i32 4*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_127_reg <= encode_utf8_108_127;
if (reset == 1'b0 && ^(encode_utf8_108_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_127_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %128 = lshr i32 %7, 6*/
begin
encode_utf8_108_128 = (encode_utf8_6_7_reg >>> (32'd6 % 32));
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %128 = lshr i32 %7, 6*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_128_reg <= encode_utf8_108_128;
if (reset == 1'b0 && ^(encode_utf8_108_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_128_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %129 = and i32 %128, 63*/
begin
encode_utf8_108_129 = (encode_utf8_108_128 & 32'd63);
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %129 = and i32 %128, 63*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_129_reg <= encode_utf8_108_129;
if (reset == 1'b0 && ^(encode_utf8_108_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_129_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %130 = or i32 %129, 128*/
begin
encode_utf8_108_130 = (encode_utf8_108_129 | 32'd128);
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %130 = or i32 %129, 128*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_130_reg <= encode_utf8_108_130;
if (reset == 1'b0 && ^(encode_utf8_108_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_130_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %131 = inttoptr i32 %130 to i8**/
begin
encode_utf8_108_131 = encode_utf8_108_130;
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %131 = inttoptr i32 %130 to i8**/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_131_reg <= encode_utf8_108_131;
if (reset == 1'b0 && ^(encode_utf8_108_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_131_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %132 = getelementptr inbounds i8** %.01, i32 5*/
begin
encode_utf8_108_132 = (encode_utf8_3__01_reg + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %132 = getelementptr inbounds i8** %.01, i32 5*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_132_reg <= encode_utf8_108_132;
if (reset == 1'b0 && ^(encode_utf8_108_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_132_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %133 = and i32 %7, 63*/
begin
encode_utf8_108_133 = (encode_utf8_6_7_reg & 32'd63);
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %133 = and i32 %7, 63*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_133_reg <= encode_utf8_108_133;
if (reset == 1'b0 && ^(encode_utf8_108_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_133_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %134 = or i32 %133, 128*/
begin
encode_utf8_108_134 = (encode_utf8_108_133 | 32'd128);
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %134 = or i32 %133, 128*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_134_reg <= encode_utf8_108_134;
if (reset == 1'b0 && ^(encode_utf8_108_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_134_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %135 = inttoptr i32 %134 to i8**/
begin
encode_utf8_108_135 = encode_utf8_108_134;
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %135 = inttoptr i32 %134 to i8**/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_135_reg <= encode_utf8_108_135;
if (reset == 1'b0 && ^(encode_utf8_108_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_135_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %108*/
/*   %136 = getelementptr inbounds i8** %.01, i32 6*/
begin
encode_utf8_108_136 = (encode_utf8_3__01_reg + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* encode_utf8: %108*/
/*   %136 = getelementptr inbounds i8** %.01, i32 6*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
encode_utf8_108_136_reg <= encode_utf8_108_136;
if (reset == 1'b0 && ^(encode_utf8_108_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_108_136_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %137*/
/*   %.1 = phi i8** [ %15, %13 ], [ %30, %22 ], [ %50, %37 ], [ %75, %57 ], [ %105, %82 ], [ %136, %108 ]*/
if (((cur_state == LEGUP_F_encode_utf8_BB_13_8) & (memory_controller_waitrequest == 1'd0)))
begin
encode_utf8_137__1 = encode_utf8_13_15_reg;
end
/* encode_utf8: %137*/
/*   %.1 = phi i8** [ %15, %13 ], [ %30, %22 ], [ %50, %37 ], [ %75, %57 ], [ %105, %82 ], [ %136, %108 ]*/
else if (((cur_state == LEGUP_F_encode_utf8_BB_22_12) & (memory_controller_waitrequest == 1'd0)))
begin
encode_utf8_137__1 = encode_utf8_22_30_reg;
end
/* encode_utf8: %137*/
/*   %.1 = phi i8** [ %15, %13 ], [ %30, %22 ], [ %50, %37 ], [ %75, %57 ], [ %105, %82 ], [ %136, %108 ]*/
else if (((cur_state == LEGUP_F_encode_utf8_BB_37_17) & (memory_controller_waitrequest == 1'd0)))
begin
encode_utf8_137__1 = encode_utf8_37_50_reg;
end
/* encode_utf8: %137*/
/*   %.1 = phi i8** [ %15, %13 ], [ %30, %22 ], [ %50, %37 ], [ %75, %57 ], [ %105, %82 ], [ %136, %108 ]*/
else if (((cur_state == LEGUP_F_encode_utf8_BB_57_22) & (memory_controller_waitrequest == 1'd0)))
begin
encode_utf8_137__1 = encode_utf8_57_75_reg;
end
/* encode_utf8: %137*/
/*   %.1 = phi i8** [ %15, %13 ], [ %30, %22 ], [ %50, %37 ], [ %75, %57 ], [ %105, %82 ], [ %136, %108 ]*/
else if (((cur_state == LEGUP_F_encode_utf8_BB_82_28) & (memory_controller_waitrequest == 1'd0)))
begin
encode_utf8_137__1 = encode_utf8_82_105_reg;
end
/* encode_utf8: %137*/
/*   %.1 = phi i8** [ %15, %13 ], [ %30, %22 ], [ %50, %37 ], [ %75, %57 ], [ %105, %82 ], [ %136, %108 ]*/
else /* if (((cur_state == LEGUP_F_encode_utf8_BB_108_33) & (memory_controller_waitrequest == 1'd0))) */
begin
encode_utf8_137__1 = encode_utf8_108_136_reg;
end
end
always @(posedge clk) begin
/* encode_utf8: %137*/
/*   %.1 = phi i8** [ %15, %13 ], [ %30, %22 ], [ %50, %37 ], [ %75, %57 ], [ %105, %82 ], [ %136, %108 ]*/
if (((cur_state == LEGUP_F_encode_utf8_BB_13_8) & (memory_controller_waitrequest == 1'd0)))
begin
encode_utf8_137__1_reg <= encode_utf8_137__1;
if (reset == 1'b0 && ^(encode_utf8_137__1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_137__1_reg"); $finish; end
end
/* encode_utf8: %137*/
/*   %.1 = phi i8** [ %15, %13 ], [ %30, %22 ], [ %50, %37 ], [ %75, %57 ], [ %105, %82 ], [ %136, %108 ]*/
if (((cur_state == LEGUP_F_encode_utf8_BB_22_12) & (memory_controller_waitrequest == 1'd0)))
begin
encode_utf8_137__1_reg <= encode_utf8_137__1;
if (reset == 1'b0 && ^(encode_utf8_137__1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_137__1_reg"); $finish; end
end
/* encode_utf8: %137*/
/*   %.1 = phi i8** [ %15, %13 ], [ %30, %22 ], [ %50, %37 ], [ %75, %57 ], [ %105, %82 ], [ %136, %108 ]*/
if (((cur_state == LEGUP_F_encode_utf8_BB_37_17) & (memory_controller_waitrequest == 1'd0)))
begin
encode_utf8_137__1_reg <= encode_utf8_137__1;
if (reset == 1'b0 && ^(encode_utf8_137__1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_137__1_reg"); $finish; end
end
/* encode_utf8: %137*/
/*   %.1 = phi i8** [ %15, %13 ], [ %30, %22 ], [ %50, %37 ], [ %75, %57 ], [ %105, %82 ], [ %136, %108 ]*/
if (((cur_state == LEGUP_F_encode_utf8_BB_57_22) & (memory_controller_waitrequest == 1'd0)))
begin
encode_utf8_137__1_reg <= encode_utf8_137__1;
if (reset == 1'b0 && ^(encode_utf8_137__1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_137__1_reg"); $finish; end
end
/* encode_utf8: %137*/
/*   %.1 = phi i8** [ %15, %13 ], [ %30, %22 ], [ %50, %37 ], [ %75, %57 ], [ %105, %82 ], [ %136, %108 ]*/
if (((cur_state == LEGUP_F_encode_utf8_BB_82_28) & (memory_controller_waitrequest == 1'd0)))
begin
encode_utf8_137__1_reg <= encode_utf8_137__1;
if (reset == 1'b0 && ^(encode_utf8_137__1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_137__1_reg"); $finish; end
end
/* encode_utf8: %137*/
/*   %.1 = phi i8** [ %15, %13 ], [ %30, %22 ], [ %50, %37 ], [ %75, %57 ], [ %105, %82 ], [ %136, %108 ]*/
if (((cur_state == LEGUP_F_encode_utf8_BB_108_33) & (memory_controller_waitrequest == 1'd0)))
begin
encode_utf8_137__1_reg <= encode_utf8_137__1;
if (reset == 1'b0 && ^(encode_utf8_137__1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_137__1_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %137*/
/*   %138 = add i32 %4, 1*/
begin
encode_utf8_137_138 = (encode_utf8_3_4_reg + 32'd1);
end
end
always @(posedge clk) begin
/* encode_utf8: %137*/
/*   %138 = add i32 %4, 1*/
if ((cur_state == LEGUP_F_encode_utf8_BB_137_34))
begin
encode_utf8_137_138_reg <= encode_utf8_137_138;
if (reset == 1'b0 && ^(encode_utf8_137_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_137_138_reg"); $finish; end
end
end
always @(*) begin
/* encode_utf8: %139*/
/*   %.0 = phi i8** [ null, %9 ], [ null, %18 ], [ null, %33 ], [ null, %53 ], [ null, %80 ], [ null, %106 ], [ %.01, %3 ]*/
if ((((cur_state == LEGUP_F_encode_utf8_BB_3_2) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_3_5 == 1'd0)))
begin
encode_utf8_139__0 = encode_utf8_3__01_reg;
end
/* encode_utf8: %139*/
/*   %.0 = phi i8** [ null, %9 ], [ null, %18 ], [ null, %33 ], [ null, %53 ], [ null, %80 ], [ null, %106 ], [ %.01, %3 ]*/
else if ((((cur_state == LEGUP_F_encode_utf8_BB_9_6) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_9_12 == 1'd1)))
begin
encode_utf8_139__0 = 0;
end
/* encode_utf8: %139*/
/*   %.0 = phi i8** [ null, %9 ], [ null, %18 ], [ null, %33 ], [ null, %53 ], [ null, %80 ], [ null, %106 ], [ %.01, %3 ]*/
else if ((((cur_state == LEGUP_F_encode_utf8_BB_18_10) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_18_21 == 1'd1)))
begin
encode_utf8_139__0 = 0;
end
/* encode_utf8: %139*/
/*   %.0 = phi i8** [ null, %9 ], [ null, %18 ], [ null, %33 ], [ null, %53 ], [ null, %80 ], [ null, %106 ], [ %.01, %3 ]*/
else if ((((cur_state == LEGUP_F_encode_utf8_BB_33_14) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_33_36 == 1'd1)))
begin
encode_utf8_139__0 = 0;
end
/* encode_utf8: %139*/
/*   %.0 = phi i8** [ null, %9 ], [ null, %18 ], [ null, %33 ], [ null, %53 ], [ null, %80 ], [ null, %106 ], [ %.01, %3 ]*/
else if ((((cur_state == LEGUP_F_encode_utf8_BB_53_19) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_53_56 == 1'd1)))
begin
encode_utf8_139__0 = 0;
end
/* encode_utf8: %139*/
/*   %.0 = phi i8** [ null, %9 ], [ null, %18 ], [ null, %33 ], [ null, %53 ], [ null, %80 ], [ null, %106 ], [ %.01, %3 ]*/
else if ((((cur_state == LEGUP_F_encode_utf8_BB_80_24) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_80_81 == 1'd1)))
begin
encode_utf8_139__0 = 0;
end
/* encode_utf8: %139*/
/*   %.0 = phi i8** [ null, %9 ], [ null, %18 ], [ null, %33 ], [ null, %53 ], [ null, %80 ], [ null, %106 ], [ %.01, %3 ]*/
else /* if ((((cur_state == LEGUP_F_encode_utf8_BB_106_29) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_106_107 == 1'd1))) */
begin
encode_utf8_139__0 = 0;
end
end
always @(posedge clk) begin
/* encode_utf8: %139*/
/*   %.0 = phi i8** [ null, %9 ], [ null, %18 ], [ null, %33 ], [ null, %53 ], [ null, %80 ], [ null, %106 ], [ %.01, %3 ]*/
if ((((cur_state == LEGUP_F_encode_utf8_BB_3_2) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_3_5 == 1'd0)))
begin
encode_utf8_139__0_reg <= encode_utf8_139__0;
if (reset == 1'b0 && ^(encode_utf8_139__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_139__0_reg"); $finish; end
end
/* encode_utf8: %139*/
/*   %.0 = phi i8** [ null, %9 ], [ null, %18 ], [ null, %33 ], [ null, %53 ], [ null, %80 ], [ null, %106 ], [ %.01, %3 ]*/
if ((((cur_state == LEGUP_F_encode_utf8_BB_9_6) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_9_12 == 1'd1)))
begin
encode_utf8_139__0_reg <= encode_utf8_139__0;
if (reset == 1'b0 && ^(encode_utf8_139__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_139__0_reg"); $finish; end
end
/* encode_utf8: %139*/
/*   %.0 = phi i8** [ null, %9 ], [ null, %18 ], [ null, %33 ], [ null, %53 ], [ null, %80 ], [ null, %106 ], [ %.01, %3 ]*/
if ((((cur_state == LEGUP_F_encode_utf8_BB_18_10) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_18_21 == 1'd1)))
begin
encode_utf8_139__0_reg <= encode_utf8_139__0;
if (reset == 1'b0 && ^(encode_utf8_139__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_139__0_reg"); $finish; end
end
/* encode_utf8: %139*/
/*   %.0 = phi i8** [ null, %9 ], [ null, %18 ], [ null, %33 ], [ null, %53 ], [ null, %80 ], [ null, %106 ], [ %.01, %3 ]*/
if ((((cur_state == LEGUP_F_encode_utf8_BB_33_14) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_33_36 == 1'd1)))
begin
encode_utf8_139__0_reg <= encode_utf8_139__0;
if (reset == 1'b0 && ^(encode_utf8_139__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_139__0_reg"); $finish; end
end
/* encode_utf8: %139*/
/*   %.0 = phi i8** [ null, %9 ], [ null, %18 ], [ null, %33 ], [ null, %53 ], [ null, %80 ], [ null, %106 ], [ %.01, %3 ]*/
if ((((cur_state == LEGUP_F_encode_utf8_BB_53_19) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_53_56 == 1'd1)))
begin
encode_utf8_139__0_reg <= encode_utf8_139__0;
if (reset == 1'b0 && ^(encode_utf8_139__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_139__0_reg"); $finish; end
end
/* encode_utf8: %139*/
/*   %.0 = phi i8** [ null, %9 ], [ null, %18 ], [ null, %33 ], [ null, %53 ], [ null, %80 ], [ null, %106 ], [ %.01, %3 ]*/
if ((((cur_state == LEGUP_F_encode_utf8_BB_80_24) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_80_81 == 1'd1)))
begin
encode_utf8_139__0_reg <= encode_utf8_139__0;
if (reset == 1'b0 && ^(encode_utf8_139__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_139__0_reg"); $finish; end
end
/* encode_utf8: %139*/
/*   %.0 = phi i8** [ null, %9 ], [ null, %18 ], [ null, %33 ], [ null, %53 ], [ null, %80 ], [ null, %106 ], [ %.01, %3 ]*/
if ((((cur_state == LEGUP_F_encode_utf8_BB_106_29) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_106_107 == 1'd1)))
begin
encode_utf8_139__0_reg <= encode_utf8_139__0;
if (reset == 1'b0 && ^(encode_utf8_139__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_139__0_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* encode_utf8: %139*/
/*   ret i8** %.0*/
if ((cur_state == LEGUP_F_encode_utf8_BB_139_35))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* encode_utf8: %6*/
/*   %7 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_utf8_BB_6_3))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_utf8: %22*/
/*   store i8* %29, i8** %26, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_22_11))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_utf8: %37*/
/*   store i8* %45, i8** %41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_15))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_utf8: %57*/
/*   store i8* %65, i8** %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_utf8: %57*/
/*   store i8* %70, i8** %66, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_21))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_utf8: %82*/
/*   store i8* %90, i8** %86, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_utf8: %82*/
/*   store i8* %95, i8** %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_26))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_utf8: %108*/
/*   store i8* %116, i8** %112, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_utf8: %108*/
/*   store i8* %121, i8** %117, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_31))
begin
memory_controller_enable_a = 1'd1;
end
/* encode_utf8: %108*/
/*   store i8* %131, i8** %127, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_32))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* encode_utf8: %6*/
/*   %7 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_utf8_BB_6_3))
begin
memory_controller_address_a = encode_utf8_6_scevgep;
end
/* encode_utf8: %22*/
/*   store i8* %29, i8** %26, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_22_11))
begin
memory_controller_address_a = encode_utf8_22_26;
end
/* encode_utf8: %37*/
/*   store i8* %45, i8** %41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_15))
begin
memory_controller_address_a = encode_utf8_37_41;
end
/* encode_utf8: %57*/
/*   store i8* %65, i8** %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
memory_controller_address_a = encode_utf8_57_61;
end
/* encode_utf8: %57*/
/*   store i8* %70, i8** %66, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_21))
begin
memory_controller_address_a = encode_utf8_57_66_reg;
end
/* encode_utf8: %82*/
/*   store i8* %90, i8** %86, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
memory_controller_address_a = encode_utf8_82_86;
end
/* encode_utf8: %82*/
/*   store i8* %95, i8** %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_26))
begin
memory_controller_address_a = encode_utf8_82_91_reg;
end
/* encode_utf8: %108*/
/*   store i8* %116, i8** %112, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
memory_controller_address_a = encode_utf8_108_112;
end
/* encode_utf8: %108*/
/*   store i8* %121, i8** %117, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_31))
begin
memory_controller_address_a = encode_utf8_108_117_reg;
end
/* encode_utf8: %108*/
/*   store i8* %131, i8** %127, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_32))
begin
memory_controller_address_a = encode_utf8_108_127_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* encode_utf8: %6*/
/*   %7 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_utf8_BB_6_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* encode_utf8: %22*/
/*   store i8* %29, i8** %26, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_22_11))
begin
memory_controller_write_enable_a = 1'd1;
end
/* encode_utf8: %37*/
/*   store i8* %45, i8** %41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_15))
begin
memory_controller_write_enable_a = 1'd1;
end
/* encode_utf8: %57*/
/*   store i8* %65, i8** %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
memory_controller_write_enable_a = 1'd1;
end
/* encode_utf8: %57*/
/*   store i8* %70, i8** %66, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_21))
begin
memory_controller_write_enable_a = 1'd1;
end
/* encode_utf8: %82*/
/*   store i8* %90, i8** %86, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
memory_controller_write_enable_a = 1'd1;
end
/* encode_utf8: %82*/
/*   store i8* %95, i8** %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_26))
begin
memory_controller_write_enable_a = 1'd1;
end
/* encode_utf8: %108*/
/*   store i8* %116, i8** %112, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
memory_controller_write_enable_a = 1'd1;
end
/* encode_utf8: %108*/
/*   store i8* %121, i8** %117, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_31))
begin
memory_controller_write_enable_a = 1'd1;
end
/* encode_utf8: %108*/
/*   store i8* %131, i8** %127, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_32))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* encode_utf8: %22*/
/*   store i8* %29, i8** %26, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_22_11))
begin
memory_controller_in_a = encode_utf8_22_29;
end
/* encode_utf8: %37*/
/*   store i8* %45, i8** %41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_15))
begin
memory_controller_in_a = encode_utf8_37_45;
end
/* encode_utf8: %57*/
/*   store i8* %65, i8** %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
memory_controller_in_a = encode_utf8_57_65;
end
/* encode_utf8: %57*/
/*   store i8* %70, i8** %66, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_21))
begin
memory_controller_in_a = encode_utf8_57_70_reg;
end
/* encode_utf8: %82*/
/*   store i8* %90, i8** %86, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
memory_controller_in_a = encode_utf8_82_90;
end
/* encode_utf8: %82*/
/*   store i8* %95, i8** %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_26))
begin
memory_controller_in_a = encode_utf8_82_95_reg;
end
/* encode_utf8: %108*/
/*   store i8* %116, i8** %112, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
memory_controller_in_a = encode_utf8_108_116;
end
/* encode_utf8: %108*/
/*   store i8* %121, i8** %117, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_31))
begin
memory_controller_in_a = encode_utf8_108_121_reg;
end
/* encode_utf8: %108*/
/*   store i8* %131, i8** %127, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_32))
begin
memory_controller_in_a = encode_utf8_108_131_reg;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* encode_utf8: %6*/
/*   %7 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_encode_utf8_BB_6_3))
begin
memory_controller_size_a = 2'd2;
end
/* encode_utf8: %22*/
/*   store i8* %29, i8** %26, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_22_11))
begin
memory_controller_size_a = 2'd2;
end
/* encode_utf8: %37*/
/*   store i8* %45, i8** %41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_15))
begin
memory_controller_size_a = 2'd2;
end
/* encode_utf8: %57*/
/*   store i8* %65, i8** %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
memory_controller_size_a = 2'd2;
end
/* encode_utf8: %57*/
/*   store i8* %70, i8** %66, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_21))
begin
memory_controller_size_a = 2'd2;
end
/* encode_utf8: %82*/
/*   store i8* %90, i8** %86, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
memory_controller_size_a = 2'd2;
end
/* encode_utf8: %82*/
/*   store i8* %95, i8** %91, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_26))
begin
memory_controller_size_a = 2'd2;
end
/* encode_utf8: %108*/
/*   store i8* %116, i8** %112, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
memory_controller_size_a = 2'd2;
end
/* encode_utf8: %108*/
/*   store i8* %121, i8** %117, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_31))
begin
memory_controller_size_a = 2'd2;
end
/* encode_utf8: %108*/
/*   store i8* %131, i8** %127, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_32))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* encode_utf8: %13*/
/*   store i8* %14, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_13_7))
begin
memory_controller_enable_b = 1'd1;
end
/* encode_utf8: %22*/
/*   store i8* %25, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_22_11))
begin
memory_controller_enable_b = 1'd1;
end
/* encode_utf8: %37*/
/*   store i8* %40, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_15))
begin
memory_controller_enable_b = 1'd1;
end
/* encode_utf8: %37*/
/*   store i8* %49, i8** %46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_16))
begin
memory_controller_enable_b = 1'd1;
end
/* encode_utf8: %57*/
/*   store i8* %60, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
memory_controller_enable_b = 1'd1;
end
/* encode_utf8: %57*/
/*   store i8* %74, i8** %71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_21))
begin
memory_controller_enable_b = 1'd1;
end
/* encode_utf8: %82*/
/*   store i8* %85, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
memory_controller_enable_b = 1'd1;
end
/* encode_utf8: %82*/
/*   store i8* %100, i8** %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_26))
begin
memory_controller_enable_b = 1'd1;
end
/* encode_utf8: %82*/
/*   store i8* %104, i8** %101, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_27))
begin
memory_controller_enable_b = 1'd1;
end
/* encode_utf8: %108*/
/*   store i8* %111, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
memory_controller_enable_b = 1'd1;
end
/* encode_utf8: %108*/
/*   store i8* %126, i8** %122, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_31))
begin
memory_controller_enable_b = 1'd1;
end
/* encode_utf8: %108*/
/*   store i8* %135, i8** %132, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_32))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* encode_utf8: %13*/
/*   store i8* %14, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_13_7))
begin
memory_controller_address_b = encode_utf8_3__01_reg;
end
/* encode_utf8: %22*/
/*   store i8* %25, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_22_11))
begin
memory_controller_address_b = encode_utf8_3__01_reg;
end
/* encode_utf8: %37*/
/*   store i8* %40, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_15))
begin
memory_controller_address_b = encode_utf8_3__01_reg;
end
/* encode_utf8: %37*/
/*   store i8* %49, i8** %46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_16))
begin
memory_controller_address_b = encode_utf8_37_46_reg;
end
/* encode_utf8: %57*/
/*   store i8* %60, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
memory_controller_address_b = encode_utf8_3__01_reg;
end
/* encode_utf8: %57*/
/*   store i8* %74, i8** %71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_21))
begin
memory_controller_address_b = encode_utf8_57_71_reg;
end
/* encode_utf8: %82*/
/*   store i8* %85, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
memory_controller_address_b = encode_utf8_3__01_reg;
end
/* encode_utf8: %82*/
/*   store i8* %100, i8** %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_26))
begin
memory_controller_address_b = encode_utf8_82_96_reg;
end
/* encode_utf8: %82*/
/*   store i8* %104, i8** %101, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_27))
begin
memory_controller_address_b = encode_utf8_82_101_reg;
end
/* encode_utf8: %108*/
/*   store i8* %111, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
memory_controller_address_b = encode_utf8_3__01_reg;
end
/* encode_utf8: %108*/
/*   store i8* %126, i8** %122, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_31))
begin
memory_controller_address_b = encode_utf8_108_122_reg;
end
/* encode_utf8: %108*/
/*   store i8* %135, i8** %132, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_32))
begin
memory_controller_address_b = encode_utf8_108_132_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* encode_utf8: %13*/
/*   store i8* %14, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_13_7))
begin
memory_controller_write_enable_b = 1'd1;
end
/* encode_utf8: %22*/
/*   store i8* %25, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_22_11))
begin
memory_controller_write_enable_b = 1'd1;
end
/* encode_utf8: %37*/
/*   store i8* %40, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_15))
begin
memory_controller_write_enable_b = 1'd1;
end
/* encode_utf8: %37*/
/*   store i8* %49, i8** %46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_16))
begin
memory_controller_write_enable_b = 1'd1;
end
/* encode_utf8: %57*/
/*   store i8* %60, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
memory_controller_write_enable_b = 1'd1;
end
/* encode_utf8: %57*/
/*   store i8* %74, i8** %71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_21))
begin
memory_controller_write_enable_b = 1'd1;
end
/* encode_utf8: %82*/
/*   store i8* %85, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
memory_controller_write_enable_b = 1'd1;
end
/* encode_utf8: %82*/
/*   store i8* %100, i8** %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_26))
begin
memory_controller_write_enable_b = 1'd1;
end
/* encode_utf8: %82*/
/*   store i8* %104, i8** %101, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_27))
begin
memory_controller_write_enable_b = 1'd1;
end
/* encode_utf8: %108*/
/*   store i8* %111, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
memory_controller_write_enable_b = 1'd1;
end
/* encode_utf8: %108*/
/*   store i8* %126, i8** %122, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_31))
begin
memory_controller_write_enable_b = 1'd1;
end
/* encode_utf8: %108*/
/*   store i8* %135, i8** %132, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_32))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* encode_utf8: %13*/
/*   store i8* %14, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_13_7))
begin
memory_controller_in_b = encode_utf8_13_14;
end
/* encode_utf8: %22*/
/*   store i8* %25, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_22_11))
begin
memory_controller_in_b = encode_utf8_22_25;
end
/* encode_utf8: %37*/
/*   store i8* %40, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_15))
begin
memory_controller_in_b = encode_utf8_37_40;
end
/* encode_utf8: %37*/
/*   store i8* %49, i8** %46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_16))
begin
memory_controller_in_b = encode_utf8_37_49_reg;
end
/* encode_utf8: %57*/
/*   store i8* %60, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
memory_controller_in_b = encode_utf8_57_60;
end
/* encode_utf8: %57*/
/*   store i8* %74, i8** %71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_21))
begin
memory_controller_in_b = encode_utf8_57_74_reg;
end
/* encode_utf8: %82*/
/*   store i8* %85, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
memory_controller_in_b = encode_utf8_82_85;
end
/* encode_utf8: %82*/
/*   store i8* %100, i8** %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_26))
begin
memory_controller_in_b = encode_utf8_82_100_reg;
end
/* encode_utf8: %82*/
/*   store i8* %104, i8** %101, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_27))
begin
memory_controller_in_b = encode_utf8_82_104_reg;
end
/* encode_utf8: %108*/
/*   store i8* %111, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
memory_controller_in_b = encode_utf8_108_111;
end
/* encode_utf8: %108*/
/*   store i8* %126, i8** %122, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_31))
begin
memory_controller_in_b = encode_utf8_108_126_reg;
end
/* encode_utf8: %108*/
/*   store i8* %135, i8** %132, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_32))
begin
memory_controller_in_b = encode_utf8_108_135_reg;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* encode_utf8: %13*/
/*   store i8* %14, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_13_7))
begin
memory_controller_size_b = 2'd2;
end
/* encode_utf8: %22*/
/*   store i8* %25, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_22_11))
begin
memory_controller_size_b = 2'd2;
end
/* encode_utf8: %37*/
/*   store i8* %40, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_15))
begin
memory_controller_size_b = 2'd2;
end
/* encode_utf8: %37*/
/*   store i8* %49, i8** %46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_37_16))
begin
memory_controller_size_b = 2'd2;
end
/* encode_utf8: %57*/
/*   store i8* %60, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_20))
begin
memory_controller_size_b = 2'd2;
end
/* encode_utf8: %57*/
/*   store i8* %74, i8** %71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_57_21))
begin
memory_controller_size_b = 2'd2;
end
/* encode_utf8: %82*/
/*   store i8* %85, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_25))
begin
memory_controller_size_b = 2'd2;
end
/* encode_utf8: %82*/
/*   store i8* %100, i8** %96, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_26))
begin
memory_controller_size_b = 2'd2;
end
/* encode_utf8: %82*/
/*   store i8* %104, i8** %101, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_82_27))
begin
memory_controller_size_b = 2'd2;
end
/* encode_utf8: %108*/
/*   store i8* %111, i8** %.01, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_30))
begin
memory_controller_size_b = 2'd2;
end
/* encode_utf8: %108*/
/*   store i8* %126, i8** %122, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_31))
begin
memory_controller_size_b = 2'd2;
end
/* encode_utf8: %108*/
/*   store i8* %135, i8** %132, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_encode_utf8_BB_108_32))
begin
memory_controller_size_b = 2'd2;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* encode_utf8: %139*/
/*   ret i8** %.0*/
if ((cur_state == LEGUP_F_encode_utf8_BB_139_35))
begin
return_val <= encode_utf8_139__0_reg;
if (reset == 1'b0 && ^(encode_utf8_139__0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_1_reg;
reg  encode_utf8_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_arg_buf;
reg [31:0] encode_utf8_arg_len;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_arg_ubuf;
reg [31:0] encode_utf8_arg_ulen;
wire  encode_utf8_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_memory_controller_address_a;
wire  encode_utf8_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] encode_utf8_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] encode_utf8_memory_controller_out_a;
wire [1:0] encode_utf8_memory_controller_size_a;
wire  encode_utf8_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_memory_controller_address_b;
wire  encode_utf8_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] encode_utf8_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] encode_utf8_memory_controller_out_b;
wire [1:0] encode_utf8_memory_controller_size_b;
reg  encode_utf8_memory_controller_waitrequest;
wire  encode_utf8_finish;
reg  encode_utf8_finish_final;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] encode_utf8_return_val;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


encode_utf8 encode_utf8_inst (
	.memory_controller_enable_a (encode_utf8_memory_controller_enable_a),
	.memory_controller_address_a (encode_utf8_memory_controller_address_a),
	.memory_controller_write_enable_a (encode_utf8_memory_controller_write_enable_a),
	.memory_controller_in_a (encode_utf8_memory_controller_in_a),
	.memory_controller_size_a (encode_utf8_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (encode_utf8_memory_controller_enable_b),
	.memory_controller_address_b (encode_utf8_memory_controller_address_b),
	.memory_controller_write_enable_b (encode_utf8_memory_controller_write_enable_b),
	.memory_controller_in_b (encode_utf8_memory_controller_in_b),
	.memory_controller_size_b (encode_utf8_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (encode_utf8_start),
	.finish (encode_utf8_finish),
	.return_val (encode_utf8_return_val),
	.arg_buf (encode_utf8_arg_buf),
	.arg_len (encode_utf8_arg_len),
	.arg_ubuf (encode_utf8_arg_ubuf),
	.arg_ulen (encode_utf8_arg_ulen)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (encode_utf8_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
begin
main_0_1 = encode_utf8_return_val;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
main_0_1_reg <= main_0_1;
if (reset == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_1_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
encode_utf8_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_start"); $finish; end
end
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
encode_utf8_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
encode_utf8_arg_buf <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_arg_buf"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
encode_utf8_arg_len <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_arg_len"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
encode_utf8_arg_ubuf <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_arg_ubuf"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
encode_utf8_arg_ulen <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to encode_utf8_arg_ulen"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
begin
encode_utf8_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
begin
encode_utf8_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
encode_utf8_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
encode_utf8_finish_final = encode_utf8_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = encode_utf8_memory_controller_enable_a;
end
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = encode_utf8_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_utf8_memory_controller_address_a;
end
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_utf8_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = encode_utf8_memory_controller_write_enable_a;
end
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = encode_utf8_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_utf8_memory_controller_in_a;
end
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_utf8_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = encode_utf8_memory_controller_size_a;
end
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = encode_utf8_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = encode_utf8_memory_controller_enable_b;
end
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = encode_utf8_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_utf8_memory_controller_address_b;
end
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = encode_utf8_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = encode_utf8_memory_controller_write_enable_b;
end
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = encode_utf8_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_utf8_memory_controller_in_b;
end
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = encode_utf8_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = encode_utf8_memory_controller_size_b;
end
/* main: %0*/
/*   %1 = tail call i8** @encode_utf8(i8** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = encode_utf8_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
