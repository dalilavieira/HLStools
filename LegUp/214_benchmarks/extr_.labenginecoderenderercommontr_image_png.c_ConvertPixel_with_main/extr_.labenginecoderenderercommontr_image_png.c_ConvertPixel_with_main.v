//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:54:21 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module ConvertPixel
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_IHDR,
	arg_OutPtr,
	arg_DecompPtr,
	arg_HasTransparentColour,
	arg_TransparentColour,
	arg_OutPal
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_ConvertPixel_BB_0_1 = 8'd1;
parameter [7:0] LEGUP_F_ConvertPixel_BB_6_2 = 8'd2;
parameter [7:0] LEGUP_F_ConvertPixel_BB_6_3 = 8'd3;
parameter [7:0] LEGUP_F_ConvertPixel_BB_6_4 = 8'd4;
parameter [7:0] LEGUP_F_ConvertPixel_BB_9_5 = 8'd5;
parameter [7:0] LEGUP_F_ConvertPixel_BB_9_6 = 8'd6;
parameter [7:0] LEGUP_F_ConvertPixel_BB_9_7 = 8'd7;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_8 = 8'd8;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_9 = 8'd9;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_10 = 8'd10;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_11 = 8'd11;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_12 = 8'd12;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_13 = 8'd13;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_14 = 8'd14;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_15 = 8'd15;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_16 = 8'd16;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_17 = 8'd17;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_18 = 8'd18;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_19 = 8'd19;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_20 = 8'd20;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_21 = 8'd21;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_22 = 8'd22;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_23 = 8'd23;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_24 = 8'd24;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_25 = 8'd25;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_26 = 8'd26;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_27 = 8'd27;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_28 = 8'd28;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_29 = 8'd29;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_30 = 8'd30;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_31 = 8'd31;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_32 = 8'd32;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_33 = 8'd33;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_34 = 8'd34;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_35 = 8'd35;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_36 = 8'd36;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_37 = 8'd37;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_38 = 8'd38;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_39 = 8'd39;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_40 = 8'd40;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_41 = 8'd41;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_42 = 8'd42;
parameter [7:0] LEGUP_F_ConvertPixel_BB_12_43 = 8'd43;
parameter [7:0] LEGUP_F_ConvertPixel_BB_22_44 = 8'd44;
parameter [7:0] LEGUP_F_ConvertPixel_BB_22_45 = 8'd45;
parameter [7:0] LEGUP_F_ConvertPixel_BB_22_46 = 8'd46;
parameter [7:0] LEGUP_F_ConvertPixel_BB_27_47 = 8'd47;
parameter [7:0] LEGUP_F_ConvertPixel_BB_27_48 = 8'd48;
parameter [7:0] LEGUP_F_ConvertPixel_BB_28_49 = 8'd49;
parameter [7:0] LEGUP_F_ConvertPixel_BB_28_50 = 8'd50;
parameter [7:0] LEGUP_F_ConvertPixel_BB_28_51 = 8'd51;
parameter [7:0] LEGUP_F_ConvertPixel_BB_28_52 = 8'd52;
parameter [7:0] LEGUP_F_ConvertPixel_BB_28_53 = 8'd53;
parameter [7:0] LEGUP_F_ConvertPixel_BB_28_54 = 8'd54;
parameter [7:0] LEGUP_F_ConvertPixel_BB_28_55 = 8'd55;
parameter [7:0] LEGUP_F_ConvertPixel_BB_28_56 = 8'd56;
parameter [7:0] LEGUP_F_ConvertPixel_BB_28_57 = 8'd57;
parameter [7:0] LEGUP_F_ConvertPixel_BB_28_58 = 8'd58;
parameter [7:0] LEGUP_F_ConvertPixel_BB_36_59 = 8'd59;
parameter [7:0] LEGUP_F_ConvertPixel_BB_36_60 = 8'd60;
parameter [7:0] LEGUP_F_ConvertPixel_BB_36_61 = 8'd61;
parameter [7:0] LEGUP_F_ConvertPixel_BB_39_62 = 8'd62;
parameter [7:0] LEGUP_F_ConvertPixel_BB_39_63 = 8'd63;
parameter [7:0] LEGUP_F_ConvertPixel_BB_39_64 = 8'd64;
parameter [7:0] LEGUP_F_ConvertPixel_BB_44_65 = 8'd65;
parameter [7:0] LEGUP_F_ConvertPixel_BB_44_66 = 8'd66;
parameter [7:0] LEGUP_F_ConvertPixel_BB_45_67 = 8'd67;
parameter [7:0] LEGUP_F_ConvertPixel_BB_45_68 = 8'd68;
parameter [7:0] LEGUP_F_ConvertPixel_BB_45_69 = 8'd69;
parameter [7:0] LEGUP_F_ConvertPixel_BB_49_70 = 8'd70;
parameter [7:0] LEGUP_F_ConvertPixel_BB_49_71 = 8'd71;
parameter [7:0] LEGUP_F_ConvertPixel_BB_49_72 = 8'd72;
parameter [7:0] LEGUP_F_ConvertPixel_BB_55_73 = 8'd73;
parameter [7:0] LEGUP_F_ConvertPixel_BB_55_74 = 8'd74;
parameter [7:0] LEGUP_F_ConvertPixel_BB_56_75 = 8'd75;
parameter [7:0] LEGUP_F_ConvertPixel_BB_56_76 = 8'd76;
parameter [7:0] LEGUP_F_ConvertPixel_BB_56_77 = 8'd77;
parameter [7:0] LEGUP_F_ConvertPixel_BB_59_78 = 8'd78;
parameter [7:0] LEGUP_F_ConvertPixel_BB_59_79 = 8'd79;
parameter [7:0] LEGUP_F_ConvertPixel_BB_59_80 = 8'd80;
parameter [7:0] LEGUP_F_ConvertPixel_BB_59_81 = 8'd81;
parameter [7:0] LEGUP_F_ConvertPixel_BB_59_82 = 8'd82;
parameter [7:0] LEGUP_F_ConvertPixel_BB_59_83 = 8'd83;
parameter [7:0] LEGUP_F_ConvertPixel_BB_59_84 = 8'd84;
parameter [7:0] LEGUP_F_ConvertPixel_BB_59_85 = 8'd85;
parameter [7:0] LEGUP_F_ConvertPixel_BB_59_86 = 8'd86;
parameter [7:0] LEGUP_F_ConvertPixel_BB_59_87 = 8'd87;
parameter [7:0] LEGUP_F_ConvertPixel_BB_69_88 = 8'd88;
parameter [7:0] LEGUP_F_ConvertPixel_BB_69_89 = 8'd89;
parameter [7:0] LEGUP_F_ConvertPixel_BB_69_90 = 8'd90;
parameter [7:0] LEGUP_F_ConvertPixel_BB_74_91 = 8'd91;
parameter [7:0] LEGUP_F_ConvertPixel_BB_74_92 = 8'd92;
parameter [7:0] LEGUP_F_ConvertPixel_BB_74_93 = 8'd93;
parameter [7:0] LEGUP_F_ConvertPixel_BB_79_94 = 8'd94;
parameter [7:0] LEGUP_F_ConvertPixel_BB_79_95 = 8'd95;
parameter [7:0] LEGUP_F_ConvertPixel_BB_79_96 = 8'd96;
parameter [7:0] LEGUP_F_ConvertPixel_BB_84_97 = 8'd97;
parameter [7:0] LEGUP_F_ConvertPixel_BB_84_98 = 8'd98;
parameter [7:0] LEGUP_F_ConvertPixel_BB_85_99 = 8'd99;
parameter [7:0] LEGUP_F_ConvertPixel_BB_85_100 = 8'd100;
parameter [7:0] LEGUP_F_ConvertPixel_BB_85_101 = 8'd101;
parameter [7:0] LEGUP_F_ConvertPixel_BB_85_102 = 8'd102;
parameter [7:0] LEGUP_F_ConvertPixel_BB_85_103 = 8'd103;
parameter [7:0] LEGUP_F_ConvertPixel_BB_85_104 = 8'd104;
parameter [7:0] LEGUP_F_ConvertPixel_BB_85_105 = 8'd105;
parameter [7:0] LEGUP_F_ConvertPixel_BB_85_106 = 8'd106;
parameter [7:0] LEGUP_F_ConvertPixel_BB_85_107 = 8'd107;
parameter [7:0] LEGUP_F_ConvertPixel_BB_85_108 = 8'd108;
parameter [7:0] LEGUP_F_ConvertPixel_BB_95_109 = 8'd109;
parameter [7:0] LEGUP_F_ConvertPixel_BB_95_110 = 8'd110;
parameter [7:0] LEGUP_F_ConvertPixel_BB_95_111 = 8'd111;
parameter [7:0] LEGUP_F_ConvertPixel_BB_99_112 = 8'd112;
parameter [7:0] LEGUP_F_ConvertPixel_BB_99_113 = 8'd113;
parameter [7:0] LEGUP_F_ConvertPixel_BB_99_114 = 8'd114;
parameter [7:0] LEGUP_F_ConvertPixel_BB_105_115 = 8'd115;
parameter [7:0] LEGUP_F_ConvertPixel_BB_105_116 = 8'd116;
parameter [7:0] LEGUP_F_ConvertPixel_BB_105_117 = 8'd117;
parameter [7:0] LEGUP_F_ConvertPixel_BB_110_118 = 8'd118;
parameter [7:0] LEGUP_F_ConvertPixel_BB_110_119 = 8'd119;
parameter [7:0] LEGUP_F_ConvertPixel_BB_110_120 = 8'd120;
parameter [7:0] LEGUP_F_ConvertPixel_BB_116_121 = 8'd121;
parameter [7:0] LEGUP_F_ConvertPixel_BB_116_122 = 8'd122;
parameter [7:0] LEGUP_F_ConvertPixel_BB_116_123 = 8'd123;
parameter [7:0] LEGUP_F_ConvertPixel_BB_121_124 = 8'd124;
parameter [7:0] LEGUP_F_ConvertPixel_BB_121_125 = 8'd125;
parameter [7:0] LEGUP_F_ConvertPixel_BB_121_126 = 8'd126;
parameter [7:0] LEGUP_F_ConvertPixel_BB_127_127 = 8'd127;
parameter [7:0] LEGUP_F_ConvertPixel_BB_127_128 = 8'd128;
parameter [7:0] LEGUP_F_ConvertPixel_BB_128_129 = 8'd129;
parameter [7:0] LEGUP_F_ConvertPixel_BB_128_130 = 8'd130;
parameter [7:0] LEGUP_F_ConvertPixel_BB_128_131 = 8'd131;
parameter [7:0] LEGUP_F_ConvertPixel_BB_128_132 = 8'd132;
parameter [7:0] LEGUP_F_ConvertPixel_BB_128_133 = 8'd133;
parameter [7:0] LEGUP_F_ConvertPixel_BB_128_134 = 8'd134;
parameter [7:0] LEGUP_F_ConvertPixel_BB_128_135 = 8'd135;
parameter [7:0] LEGUP_F_ConvertPixel_BB_128_136 = 8'd136;
parameter [7:0] LEGUP_F_ConvertPixel_BB_128_137 = 8'd137;
parameter [7:0] LEGUP_F_ConvertPixel_BB_128_138 = 8'd138;
parameter [7:0] LEGUP_F_ConvertPixel_BB_128_139 = 8'd139;
parameter [7:0] LEGUP_F_ConvertPixel_BB_128_140 = 8'd140;
parameter [7:0] LEGUP_F_ConvertPixel_BB_128_141 = 8'd141;
parameter [7:0] LEGUP_F_ConvertPixel_BB_139_142 = 8'd142;
parameter [7:0] LEGUP_F_ConvertPixel_BB_139_143 = 8'd143;
parameter [7:0] LEGUP_F_ConvertPixel_BB_139_144 = 8'd144;
parameter [7:0] LEGUP_F_ConvertPixel_BB_142_145 = 8'd145;
parameter [7:0] LEGUP_F_ConvertPixel_BB_142_146 = 8'd146;
parameter [7:0] LEGUP_F_ConvertPixel_BB_142_147 = 8'd147;
parameter [7:0] LEGUP_F_ConvertPixel_BB_142_148 = 8'd148;
parameter [7:0] LEGUP_F_ConvertPixel_BB_142_149 = 8'd149;
parameter [7:0] LEGUP_F_ConvertPixel_BB_142_150 = 8'd150;
parameter [7:0] LEGUP_F_ConvertPixel_BB_142_151 = 8'd151;
parameter [7:0] LEGUP_F_ConvertPixel_BB_142_152 = 8'd152;
parameter [7:0] LEGUP_F_ConvertPixel_BB_142_153 = 8'd153;
parameter [7:0] LEGUP_F_ConvertPixel_BB_142_154 = 8'd154;
parameter [7:0] LEGUP_F_ConvertPixel_BB_142_155 = 8'd155;
parameter [7:0] LEGUP_F_ConvertPixel_BB_142_156 = 8'd156;
parameter [7:0] LEGUP_F_ConvertPixel_BB_142_157 = 8'd157;
parameter [7:0] LEGUP_F_ConvertPixel_BB_151_158 = 8'd158;
parameter [7:0] LEGUP_F_ConvertPixel_BB_151_159 = 8'd159;
parameter [7:0] LEGUP_F_ConvertPixel_BB_151_160 = 8'd160;
parameter [7:0] LEGUP_F_ConvertPixel_BB_151_161 = 8'd161;
parameter [7:0] LEGUP_F_ConvertPixel_BB_151_162 = 8'd162;
parameter [7:0] LEGUP_F_ConvertPixel_BB_151_163 = 8'd163;
parameter [7:0] LEGUP_F_ConvertPixel_BB_151_164 = 8'd164;
parameter [7:0] LEGUP_F_ConvertPixel_BB_151_165 = 8'd165;
parameter [7:0] LEGUP_F_ConvertPixel_BB_151_166 = 8'd166;
parameter [7:0] LEGUP_F_ConvertPixel_BB_151_167 = 8'd167;
parameter [7:0] LEGUP_F_ConvertPixel_BB_151_168 = 8'd168;
parameter [7:0] LEGUP_F_ConvertPixel_BB_151_169 = 8'd169;
parameter [7:0] LEGUP_F_ConvertPixel_BB_151_170 = 8'd170;
parameter [7:0] LEGUP_F_ConvertPixel_BB_160_171 = 8'd171;
parameter [7:0] LEGUP_F_ConvertPixel_BB_160_172 = 8'd172;
parameter [7:0] LEGUP_F_ConvertPixel_BB_160_173 = 8'd173;
parameter [7:0] LEGUP_F_ConvertPixel_BB_163_174 = 8'd174;
parameter [7:0] LEGUP_F_ConvertPixel_BB_163_175 = 8'd175;
parameter [7:0] LEGUP_F_ConvertPixel_BB_163_176 = 8'd176;
parameter [7:0] LEGUP_F_ConvertPixel_BB_163_177 = 8'd177;
parameter [7:0] LEGUP_F_ConvertPixel_BB_163_178 = 8'd178;
parameter [7:0] LEGUP_F_ConvertPixel_BB_163_179 = 8'd179;
parameter [7:0] LEGUP_F_ConvertPixel_BB_163_180 = 8'd180;
parameter [7:0] LEGUP_F_ConvertPixel_BB_163_181 = 8'd181;
parameter [7:0] LEGUP_F_ConvertPixel_BB_163_182 = 8'd182;
parameter [7:0] LEGUP_F_ConvertPixel_BB_163_183 = 8'd183;
parameter [7:0] LEGUP_F_ConvertPixel_BB_163_184 = 8'd184;
parameter [7:0] LEGUP_F_ConvertPixel_BB_163_185 = 8'd185;
parameter [7:0] LEGUP_F_ConvertPixel_BB_163_186 = 8'd186;
parameter [7:0] LEGUP_F_ConvertPixel_BB_174_187 = 8'd187;
parameter [7:0] LEGUP_F_ConvertPixel_BB_174_188 = 8'd188;
parameter [7:0] LEGUP_F_ConvertPixel_BB_174_189 = 8'd189;
parameter [7:0] LEGUP_F_ConvertPixel_BB_174_190 = 8'd190;
parameter [7:0] LEGUP_F_ConvertPixel_BB_174_191 = 8'd191;
parameter [7:0] LEGUP_F_ConvertPixel_BB_174_192 = 8'd192;
parameter [7:0] LEGUP_F_ConvertPixel_BB_174_193 = 8'd193;
parameter [7:0] LEGUP_F_ConvertPixel_BB_174_194 = 8'd194;
parameter [7:0] LEGUP_F_ConvertPixel_BB_174_195 = 8'd195;
parameter [7:0] LEGUP_F_ConvertPixel_BB_174_196 = 8'd196;
parameter [7:0] LEGUP_F_ConvertPixel_BB_174_197 = 8'd197;
parameter [7:0] LEGUP_F_ConvertPixel_BB_174_198 = 8'd198;
parameter [7:0] LEGUP_F_ConvertPixel_BB_174_199 = 8'd199;
parameter [7:0] LEGUP_F_ConvertPixel_BB_185_200 = 8'd200;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_IHDR;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_OutPtr;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_DecompPtr;
input [31:0] arg_HasTransparentColour;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_TransparentColour;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_OutPal;
reg [7:0] cur_state;
reg  ConvertPixel_0_1;
reg  ConvertPixel_0_1_reg;
reg  ConvertPixel_0_2;
reg  ConvertPixel_0_2_reg;
reg  ConvertPixel_0_or_cond;
reg  ConvertPixel_0_or_cond_reg;
reg  ConvertPixel_0_3;
reg  ConvertPixel_0_3_reg;
reg  ConvertPixel_0_or_cond1;
reg  ConvertPixel_0_or_cond1_reg;
reg  ConvertPixel_0_4;
reg  ConvertPixel_0_4_reg;
reg  ConvertPixel_0_or_cond2;
reg  ConvertPixel_0_or_cond2_reg;
reg  ConvertPixel_0_5;
reg  ConvertPixel_0_5_reg;
reg  ConvertPixel_0_or_cond3;
reg  ConvertPixel_0_or_cond3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_6_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_6_7_reg;
reg [31:0] ConvertPixel_6_8;
reg [31:0] ConvertPixel_6_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_9_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_9_10_reg;
reg [31:0] ConvertPixel_9_11;
reg [31:0] ConvertPixel_9_11_reg;
reg [31:0] ConvertPixel_12_13;
reg [31:0] ConvertPixel_12_13_reg;
reg [31:0] ConvertPixel_12_14;
reg [31:0] ConvertPixel_12_14_reg;
reg [31:0] ConvertPixel_12_15;
reg [31:0] ConvertPixel_12_15_reg;
reg [31:0] ConvertPixel_12_16;
reg [31:0] ConvertPixel_12_16_reg;
reg [31:0] ConvertPixel_12_17;
reg [31:0] ConvertPixel_12_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_12_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_12_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_12_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_12_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_12_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_12_20_reg;
reg  ConvertPixel_12_21;
reg  ConvertPixel_12_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_22_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_22_23_reg;
reg [31:0] ConvertPixel_22_24;
reg [31:0] ConvertPixel_22_24_reg;
reg [31:0] ConvertPixel_22_25;
reg [31:0] ConvertPixel_22_25_reg;
reg  ConvertPixel_22_26;
reg  ConvertPixel_22_26_reg;
reg [31:0] ConvertPixel_28_29;
reg [31:0] ConvertPixel_28_29_reg;
reg [31:0] ConvertPixel_28_30;
reg [31:0] ConvertPixel_28_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_28_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_28_31_reg;
reg [31:0] ConvertPixel_28_32;
reg [31:0] ConvertPixel_28_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_28_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_28_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_28_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_28_34_reg;
reg  ConvertPixel_28_35;
reg  ConvertPixel_28_35_reg;
reg [31:0] ConvertPixel_36_37;
reg [31:0] ConvertPixel_36_37_reg;
reg  ConvertPixel_36_38;
reg  ConvertPixel_36_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_39_40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_39_40_reg;
reg [31:0] ConvertPixel_39_41;
reg [31:0] ConvertPixel_39_41_reg;
reg [31:0] ConvertPixel_39_42;
reg [31:0] ConvertPixel_39_42_reg;
reg  ConvertPixel_39_43;
reg  ConvertPixel_39_43_reg;
reg [31:0] ConvertPixel_45_46;
reg [31:0] ConvertPixel_45_46_reg;
reg [31:0] ConvertPixel_45_47;
reg [31:0] ConvertPixel_45_47_reg;
reg  ConvertPixel_45_48;
reg  ConvertPixel_45_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_49_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_49_50_reg;
reg [31:0] ConvertPixel_49_51;
reg [31:0] ConvertPixel_49_51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_49_52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_49_52_reg;
reg [31:0] ConvertPixel_49_53;
reg [31:0] ConvertPixel_49_53_reg;
reg  ConvertPixel_49_54;
reg  ConvertPixel_49_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_56_57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_56_57_reg;
reg [31:0] ConvertPixel_56_58;
reg [31:0] ConvertPixel_56_58_reg;
reg [31:0] ConvertPixel_59_60;
reg [31:0] ConvertPixel_59_60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_59_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_59_61_reg;
reg [31:0] ConvertPixel_59_62;
reg [31:0] ConvertPixel_59_62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_59_63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_59_63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_59_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_59_64_reg;
reg [31:0] ConvertPixel_59_65;
reg [31:0] ConvertPixel_59_65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_59_66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_59_66_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_59_67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_59_67_reg;
reg  ConvertPixel_59_68;
reg  ConvertPixel_59_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_69_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_69_70_reg;
reg [31:0] ConvertPixel_69_71;
reg [31:0] ConvertPixel_69_71_reg;
reg [31:0] ConvertPixel_69_72;
reg [31:0] ConvertPixel_69_72_reg;
reg  ConvertPixel_69_73;
reg  ConvertPixel_69_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_74_75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_74_75_reg;
reg [31:0] ConvertPixel_74_76;
reg [31:0] ConvertPixel_74_76_reg;
reg [31:0] ConvertPixel_74_77;
reg [31:0] ConvertPixel_74_77_reg;
reg  ConvertPixel_74_78;
reg  ConvertPixel_74_78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_79_80;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_79_80_reg;
reg [31:0] ConvertPixel_79_81;
reg [31:0] ConvertPixel_79_81_reg;
reg [31:0] ConvertPixel_79_82;
reg [31:0] ConvertPixel_79_82_reg;
reg  ConvertPixel_79_83;
reg  ConvertPixel_79_83_reg;
reg [31:0] ConvertPixel_85_86;
reg [31:0] ConvertPixel_85_86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_85_87;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_85_87_reg;
reg [31:0] ConvertPixel_85_88;
reg [31:0] ConvertPixel_85_88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_85_89;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_85_89_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_85_90;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_85_90_reg;
reg [31:0] ConvertPixel_85_91;
reg [31:0] ConvertPixel_85_91_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_85_92;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_85_92_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_85_93;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_85_93_reg;
reg  ConvertPixel_85_94;
reg  ConvertPixel_85_94_reg;
reg [31:0] ConvertPixel_95_96;
reg [31:0] ConvertPixel_95_96_reg;
reg [31:0] ConvertPixel_95_97;
reg [31:0] ConvertPixel_95_97_reg;
reg  ConvertPixel_95_98;
reg  ConvertPixel_95_98_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_99_100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_99_100_reg;
reg [31:0] ConvertPixel_99_101;
reg [31:0] ConvertPixel_99_101_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_99_102;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_99_102_reg;
reg [31:0] ConvertPixel_99_103;
reg [31:0] ConvertPixel_99_103_reg;
reg  ConvertPixel_99_104;
reg  ConvertPixel_99_104_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_105_106;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_105_106_reg;
reg [31:0] ConvertPixel_105_107;
reg [31:0] ConvertPixel_105_107_reg;
reg [31:0] ConvertPixel_105_108;
reg [31:0] ConvertPixel_105_108_reg;
reg  ConvertPixel_105_109;
reg  ConvertPixel_105_109_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_110_111;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_110_111_reg;
reg [31:0] ConvertPixel_110_112;
reg [31:0] ConvertPixel_110_112_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_110_113;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_110_113_reg;
reg [31:0] ConvertPixel_110_114;
reg [31:0] ConvertPixel_110_114_reg;
reg  ConvertPixel_110_115;
reg  ConvertPixel_110_115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_116_117;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_116_117_reg;
reg [31:0] ConvertPixel_116_118;
reg [31:0] ConvertPixel_116_118_reg;
reg [31:0] ConvertPixel_116_119;
reg [31:0] ConvertPixel_116_119_reg;
reg  ConvertPixel_116_120;
reg  ConvertPixel_116_120_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_121_122;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_121_122_reg;
reg [31:0] ConvertPixel_121_123;
reg [31:0] ConvertPixel_121_123_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_121_124;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_121_124_reg;
reg [31:0] ConvertPixel_121_125;
reg [31:0] ConvertPixel_121_125_reg;
reg  ConvertPixel_121_126;
reg  ConvertPixel_121_126_reg;
reg [31:0] ConvertPixel_128_129;
reg [31:0] ConvertPixel_128_129_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_128_130;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_128_130_reg;
reg [31:0] ConvertPixel_128_131;
reg [31:0] ConvertPixel_128_131_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_128_132;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_128_132_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_128_133;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_128_133_reg;
reg [31:0] ConvertPixel_128_134;
reg [31:0] ConvertPixel_128_134_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_128_135;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_128_135_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_128_136;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_128_136_reg;
reg [31:0] ConvertPixel_128_137;
reg [31:0] ConvertPixel_128_137_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_128_138;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_128_138_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_139_140;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_139_140_reg;
reg [31:0] ConvertPixel_139_141;
reg [31:0] ConvertPixel_139_141_reg;
reg [31:0] ConvertPixel_142_143;
reg [31:0] ConvertPixel_142_143_reg;
reg [31:0] ConvertPixel_142_144;
reg [31:0] ConvertPixel_142_144_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_142_145;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_142_145_reg;
reg [31:0] ConvertPixel_142_146;
reg [31:0] ConvertPixel_142_146_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_142_147;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_142_147_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_142_148;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_142_148_reg;
reg [31:0] ConvertPixel_142_149;
reg [31:0] ConvertPixel_142_149_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_142_150;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_142_150_reg;
reg [31:0] ConvertPixel_151_152;
reg [31:0] ConvertPixel_151_152_reg;
reg [31:0] ConvertPixel_151_153;
reg [31:0] ConvertPixel_151_153_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_151_154;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_151_154_reg;
reg [31:0] ConvertPixel_151_155;
reg [31:0] ConvertPixel_151_155_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_151_156;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_151_156_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_151_157;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_151_157_reg;
reg [31:0] ConvertPixel_151_158;
reg [31:0] ConvertPixel_151_158_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_151_159;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_151_159_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_160_161;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_160_161_reg;
reg [31:0] ConvertPixel_160_162;
reg [31:0] ConvertPixel_160_162_reg;
reg [31:0] ConvertPixel_163_164;
reg [31:0] ConvertPixel_163_164_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_163_165;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_163_165_reg;
reg [31:0] ConvertPixel_163_166;
reg [31:0] ConvertPixel_163_166_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_163_167;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_163_167_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_163_168;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_163_168_reg;
reg [31:0] ConvertPixel_163_169;
reg [31:0] ConvertPixel_163_169_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_163_170;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_163_170_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_163_171;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_163_171_reg;
reg [31:0] ConvertPixel_163_172;
reg [31:0] ConvertPixel_163_172_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_163_173;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_163_173_reg;
reg [31:0] ConvertPixel_174_175;
reg [31:0] ConvertPixel_174_175_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_174_176;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_174_176_reg;
reg [31:0] ConvertPixel_174_177;
reg [31:0] ConvertPixel_174_177_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_174_178;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_174_178_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_174_179;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_174_179_reg;
reg [31:0] ConvertPixel_174_180;
reg [31:0] ConvertPixel_174_180_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_174_181;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_174_181_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_174_182;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_174_182_reg;
reg [31:0] ConvertPixel_174_183;
reg [31:0] ConvertPixel_174_183_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_174_184;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_174_184_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg [31:0] ConvertPixel_signed_divide_32_0_op0;
reg [31:0] ConvertPixel_signed_divide_32_0_op1;
wire [31:0] lpm_divide_ConvertPixel_12_15_temp_out;
wire [31:0] ConvertPixel_12_15_unused;
reg  lpm_divide_ConvertPixel_12_15_en;
reg [31:0] lpm_divide_ConvertPixel_12_15_out;
reg [31:0] ConvertPixel_signed_divide_32_0;
reg  lpm_mult_ConvertPixel_12_17_en;
reg [31:0] ConvertPixel_12_17_stage0_reg;

/*   %15 = sdiv i32 255, %14*/
lpm_divide lpm_divide_ConvertPixel_12_15 (
	.quotient (lpm_divide_ConvertPixel_12_15_temp_out),
	.remain (ConvertPixel_12_15_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_ConvertPixel_12_15_en),
	.numer (ConvertPixel_signed_divide_32_0_op0),
	.denom (ConvertPixel_signed_divide_32_0_op1)
);

defparam
	lpm_divide_ConvertPixel_12_15.lpm_pipeline = 32,
	lpm_divide_ConvertPixel_12_15.lpm_widthn = 32,
	lpm_divide_ConvertPixel_12_15.lpm_widthd = 32,
	lpm_divide_ConvertPixel_12_15.lpm_drepresentation = "SIGNED",
	lpm_divide_ConvertPixel_12_15.lpm_nrepresentation = "SIGNED",
	lpm_divide_ConvertPixel_12_15.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_0_or_cond3 == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_0_1) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_0_or_cond3 == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_6_2;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_6_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_6_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_6_2;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_6_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_6_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_6_3;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_6_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_6_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_6_3;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_6_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_6_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_6_4;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_6_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_6_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_6_4;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_6_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_6_4) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_6_8 == 32'd132)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_9_5;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_9_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_6_4) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_6_8 == 32'd129)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_56_75;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_56_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_6_4) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_6_8 == 32'd130)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_129;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_6_4) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_6_8 == 32'd131)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_139_142;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_139_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_6_4) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_6_8 == 32'd128)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_160_171;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_160_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((((((cur_state == LEGUP_F_ConvertPixel_BB_6_4) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_6_8 != 32'd132)) & (ConvertPixel_6_8 != 32'd129)) & (ConvertPixel_6_8 != 32'd130)) & (ConvertPixel_6_8 != 32'd131)) & (ConvertPixel_6_8 != 32'd128)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_9_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_9_5;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_9_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_9_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_9_6;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_9_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_9_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_9_6;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_9_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_9_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_9_7;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_9_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_9_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_9_7;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_9_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_9_7) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_9_11 == 32'd137)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_8;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_9_7) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_9_11 == 32'd135)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_8;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_9_7) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_9_11 == 32'd134)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_8;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_9_7) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_9_11 == 32'd133)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_28_49;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_28_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_9_7) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_9_11 == 32'd136)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_28_49;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_28_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((((((cur_state == LEGUP_F_ConvertPixel_BB_9_7) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_9_11 != 32'd137)) & (ConvertPixel_9_11 != 32'd135)) & (ConvertPixel_9_11 != 32'd134)) & (ConvertPixel_9_11 != 32'd133)) & (ConvertPixel_9_11 != 32'd136)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_8;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_9;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_9;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_10;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_10;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_11;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_11;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_12;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_12;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_13;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_13;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_14;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_14;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_15;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_15;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_16;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_16;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_17;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_17;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_18;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_18;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_19;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_19;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_20;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_20;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_21;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_21;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_22;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_22;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_23;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_23;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_24;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_24;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_25;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_25;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_26;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_26;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_27;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_27;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_28;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_28;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_29;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_29;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_30;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_30;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_31;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_31;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_32;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_32;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_33;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_33;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_34;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_34;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_35;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_35;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_36;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_36;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_37;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_37;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_38;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_38;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_39;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_39;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_40;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_40;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_41;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_41;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_42;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_42;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_43;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_12_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_12_43;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_12_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_12_43) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_12_21_reg == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_12_43) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_12_21_reg == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_22_44;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_22_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_22_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_22_44;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_22_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_22_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_22_45;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_22_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_22_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_22_45;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_22_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_22_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_22_46;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_22_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_22_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_22_46;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_22_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_22_46) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_22_26 == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_27_47;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_27_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_22_46) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_22_26 == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_27_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_27_47;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_27_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_27_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_27_48;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_27_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_27_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_27_48;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_27_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_27_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_28_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_28_49;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_28_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_28_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_28_50;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_28_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_28_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_28_50;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_28_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_28_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_28_51;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_28_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_28_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_28_51;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_28_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_28_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_28_52;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_28_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_28_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_28_52;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_28_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_28_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_28_53;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_28_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_28_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_28_53;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_28_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_28_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_28_54;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_28_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_28_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_28_54;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_28_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_28_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_28_55;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_28_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_28_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_28_55;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_28_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_28_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_28_56;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_28_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_28_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_28_56;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_28_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_28_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_28_57;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_28_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_28_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_28_57;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_28_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_28_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_28_58;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_28_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_28_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_28_58;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_28_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_28_58) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_28_35_reg == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_28_58) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_28_35_reg == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_36_59;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_36_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_36_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_36_59;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_36_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_36_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_36_60;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_36_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_36_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_36_60;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_36_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_36_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_36_61;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_36_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_36_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_36_61;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_36_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_36_61) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_36_38 == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_39_62;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_39_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_36_61) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_36_38 == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_45_67;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_45_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_39_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_39_62;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_39_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_39_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_39_63;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_39_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_39_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_39_63;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_39_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_39_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_39_64;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_39_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_39_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_39_64;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_39_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_39_64) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_39_43 == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_44_65;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_44_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_39_64) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_39_43 == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_44_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_44_65;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_44_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_44_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_44_66;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_44_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_44_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_44_66;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_44_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_44_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_45_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_45_67;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_45_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_45_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_45_68;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_45_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_45_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_45_68;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_45_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_45_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_45_69;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_45_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_45_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_45_69;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_45_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_45_69) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_45_48 == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_49_70;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_49_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_45_69) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_45_48 == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_49_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_49_70;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_49_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_49_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_49_71;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_49_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_49_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_49_71;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_49_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_49_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_49_72;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_49_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_49_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_49_72;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_49_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_49_72) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_49_54 == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_55_73;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_55_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_49_72) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_49_54 == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_55_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_55_73;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_55_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_55_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_55_74;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_55_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_55_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_55_74;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_55_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_55_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_56_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_56_75;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_56_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_56_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_56_76;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_56_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_56_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_56_76;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_56_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_56_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_56_77;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_56_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_56_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_56_77;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_56_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_56_77) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_56_58 == 32'd133)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_59_78;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_59_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_56_77) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_56_58 == 32'd136)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_85_99;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_85_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((((cur_state == LEGUP_F_ConvertPixel_BB_56_77) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_56_58 != 32'd133)) & (ConvertPixel_56_58 != 32'd136)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_59_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_59_78;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_59_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_59_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_59_79;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_59_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_59_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_59_79;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_59_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_59_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_59_80;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_59_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_59_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_59_80;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_59_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_59_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_59_81;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_59_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_59_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_59_81;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_59_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_59_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_59_82;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_59_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_59_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_59_82;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_59_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_59_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_59_83;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_59_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_59_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_59_83;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_59_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_59_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_59_84;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_59_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_59_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_59_84;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_59_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_59_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_59_85;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_59_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_59_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_59_85;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_59_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_59_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_59_86;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_59_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_59_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_59_86;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_59_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_59_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_59_87;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_59_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_59_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_59_87;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_59_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_59_87) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_59_68_reg == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_59_87) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_59_68_reg == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_69_88;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_69_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_69_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_69_88;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_69_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_69_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_69_89;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_69_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_69_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_69_89;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_69_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_69_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_69_90;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_69_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_69_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_69_90;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_69_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_69_90) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_69_73 == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_74_91;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_74_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_69_90) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_69_73 == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_74_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_74_91;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_74_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_74_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_74_92;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_74_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_74_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_74_92;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_74_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_74_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_74_93;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_74_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_74_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_74_93;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_74_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_74_93) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_74_78 == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_79_94;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_79_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_74_93) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_74_78 == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_79_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_79_94;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_79_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_79_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_79_95;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_79_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_79_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_79_95;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_79_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_79_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_79_96;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_79_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_79_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_79_96;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_79_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_79_96) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_79_83 == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_84_97;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_84_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_79_96) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_79_83 == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_84_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_84_97;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_84_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_84_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_84_98;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_84_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_84_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_84_98;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_84_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_84_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_85_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_85_99;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_85_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_85_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_85_100;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_85_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_85_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_85_100;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_85_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_85_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_85_101;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_85_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_85_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_85_101;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_85_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_85_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_85_102;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_85_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_85_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_85_102;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_85_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_85_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_85_103;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_85_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_85_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_85_103;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_85_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_85_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_85_104;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_85_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_85_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_85_104;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_85_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_85_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_85_105;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_85_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_85_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_85_105;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_85_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_85_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_85_106;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_85_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_85_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_85_106;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_85_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_85_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_85_107;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_85_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_85_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_85_107;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_85_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_85_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_85_108;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_85_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_85_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_85_108;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_85_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_85_108) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_85_94_reg == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_85_108) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_85_94_reg == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_95_109;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_95_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_95_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_95_109;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_95_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_95_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_95_110;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_95_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_95_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_95_110;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_95_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_95_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_95_111;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_95_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_95_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_95_111;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_95_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_95_111) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_95_98 == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_99_112;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_99_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_95_111) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_95_98 == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_99_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_99_112;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_99_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_99_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_99_113;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_99_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_99_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_99_113;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_99_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_99_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_99_114;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_99_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_99_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_99_114;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_99_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_99_114) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_99_104 == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_105_115;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_105_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_99_114) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_99_104 == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_105_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_105_115;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_105_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_105_115) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_105_116;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_105_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_105_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_105_116;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_105_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_105_116) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_105_117;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_105_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_105_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_105_117;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_105_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_105_117) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_105_109 == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_110_118;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_110_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_105_117) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_105_109 == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_110_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_110_118;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_110_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_110_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_110_119;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_110_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_110_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_110_119;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_110_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_110_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_110_120;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_110_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_110_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_110_120;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_110_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_110_120) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_110_115 == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_116_121;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_116_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_110_120) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_110_115 == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_116_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_116_121;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_116_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_116_121) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_116_122;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_116_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_116_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_116_122;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_116_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_116_122) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_116_123;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_116_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_116_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_116_123;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_116_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_116_123) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_116_120 == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_121_124;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_121_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_116_123) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_116_120 == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_121_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_121_124;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_121_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_121_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_121_125;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_121_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_121_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_121_125;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_121_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_121_125) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_121_126;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_121_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_121_126) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_121_126;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_121_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_121_126) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_121_126 == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_127_127;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_127_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_121_126) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_121_126 == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_127_127) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_127_127;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_127_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_127_127) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_127_128;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_127_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_127_128) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_127_128;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_127_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_127_128) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_129) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_129;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_129) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_130;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_130) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_130;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_130) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_131;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_131) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_131;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_131) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_132;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_132) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_132;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_132) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_133;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_133) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_133;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_133) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_134;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_134) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_134;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_134) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_135;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_135) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_135;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_135) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_136;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_136) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_136;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_136) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_137;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_137) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_137;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_137) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_138;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_138) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_138;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_138) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_139;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_139) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_139;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_139) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_140;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_140) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_140;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_140) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_141;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_141) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_128_141;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_128_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_128_141) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_139_142) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_139_142;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_139_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_139_142) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_139_143;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_139_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_139_143) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_139_143;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_139_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_139_143) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_139_144;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_139_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_139_144) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_139_144;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_139_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_139_144) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_139_141 == 32'd133)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_145;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_139_144) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_139_141 == 32'd136)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_158;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((((cur_state == LEGUP_F_ConvertPixel_BB_139_144) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_139_141 != 32'd133)) & (ConvertPixel_139_141 != 32'd136)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_145) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_145;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_145) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_146;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_146) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_146;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_146) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_147;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_147) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_147;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_147) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_148;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_148) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_148;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_148) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_149;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_149) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_149;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_149) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_150;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_150) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_150;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_150) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_151;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_151) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_151;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_151) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_152;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_152) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_152;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_152) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_153;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_153) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_153;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_153) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_154;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_154) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_154;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_154) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_155;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_155) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_155;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_155) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_156;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_156) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_156;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_156) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_157;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_157) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_142_157;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_142_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_142_157) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_158) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_158;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_158) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_159;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_159) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_159;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_159) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_160;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_160) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_160;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_160) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_161;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_161) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_161;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_161) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_162;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_162) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_162;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_162) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_163;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_163) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_163;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_163) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_164;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_164) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_164;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_164) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_165;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_165) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_165;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_165) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_166;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_166) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_166;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_166) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_167;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_167) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_167;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_167) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_168;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_168) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_168;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_168) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_169;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_169) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_169;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_169) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_170;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_170) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_151_170;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_151_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_151_170) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_160_171) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_160_171;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_160_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_160_171) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_160_172;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_160_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_160_172) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_160_172;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_160_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_160_172) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_160_173;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_160_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_160_173) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_160_173;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_160_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_160_173) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_160_162 == 32'd133)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_174;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ConvertPixel_BB_160_173) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_160_162 == 32'd136)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_187;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((((cur_state == LEGUP_F_ConvertPixel_BB_160_173) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_160_162 != 32'd133)) & (ConvertPixel_160_162 != 32'd136)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_174) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_174;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_174) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_175;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_175) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_175;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_175) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_176;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_176) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_176;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_176) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_177;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_177) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_177;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_177) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_178;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_178) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_178;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_178) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_179;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_179) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_179;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_179) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_180;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_180) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_180;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_180) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_181;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_181) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_181;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_181) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_182;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_182) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_182;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_182) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_183;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_183) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_183;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_183) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_184;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_184) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_184;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_184) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_185;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_185) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_185;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_185) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_186;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_186) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_163_186;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_163_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_163_186) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_187) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_187;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_187) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_188;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_188) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_188;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_188) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_189;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_189) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_189;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_189) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_190;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_190) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_190;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_190) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_191;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_191) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_191;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_191) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_192;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_192) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_192;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_192) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_193;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_193) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_193;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_193) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_194;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_194) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_194;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_194) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_195;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_195) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_195;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_195) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_196;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_196) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_196;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_196) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_197;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_197) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_197;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_197) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_198;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_198) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_198;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_198) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_199;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_199) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_174_199;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_174_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_174_199) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_185_200) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ConvertPixel_BB_185_200;
if (reset == 1'b0 && ^(LEGUP_F_ConvertPixel_BB_185_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ConvertPixel_BB_185_200) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 8'd0;
if (reset == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %0*/
/*   %1 = icmp eq %struct.PNG_Chunk_IHDR* %IHDR, null*/
begin
ConvertPixel_0_1 = (arg_IHDR == 0);
end
end
always @(posedge clk) begin
/* ConvertPixel: %0*/
/*   %1 = icmp eq %struct.PNG_Chunk_IHDR* %IHDR, null*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_0_1))
begin
ConvertPixel_0_1_reg <= ConvertPixel_0_1;
if (reset == 1'b0 && ^(ConvertPixel_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_0_1_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %0*/
/*   %2 = icmp eq i32* %OutPtr, null*/
begin
ConvertPixel_0_2 = (arg_OutPtr == 0);
end
end
always @(posedge clk) begin
/* ConvertPixel: %0*/
/*   %2 = icmp eq i32* %OutPtr, null*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_0_1))
begin
ConvertPixel_0_2_reg <= ConvertPixel_0_2;
if (reset == 1'b0 && ^(ConvertPixel_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_0_2_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %0*/
/*   %or.cond = or i1 %1, %2*/
begin
ConvertPixel_0_or_cond = (ConvertPixel_0_1 | ConvertPixel_0_2);
end
end
always @(posedge clk) begin
/* ConvertPixel: %0*/
/*   %or.cond = or i1 %1, %2*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_0_1))
begin
ConvertPixel_0_or_cond_reg <= ConvertPixel_0_or_cond;
if (reset == 1'b0 && ^(ConvertPixel_0_or_cond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_0_or_cond_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %0*/
/*   %3 = icmp eq i32* %DecompPtr, null*/
begin
ConvertPixel_0_3 = (arg_DecompPtr == 0);
end
end
always @(posedge clk) begin
/* ConvertPixel: %0*/
/*   %3 = icmp eq i32* %DecompPtr, null*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_0_1))
begin
ConvertPixel_0_3_reg <= ConvertPixel_0_3;
if (reset == 1'b0 && ^(ConvertPixel_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_0_3_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %0*/
/*   %or.cond1 = or i1 %or.cond, %3*/
begin
ConvertPixel_0_or_cond1 = (ConvertPixel_0_or_cond | ConvertPixel_0_3);
end
end
always @(posedge clk) begin
/* ConvertPixel: %0*/
/*   %or.cond1 = or i1 %or.cond, %3*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_0_1))
begin
ConvertPixel_0_or_cond1_reg <= ConvertPixel_0_or_cond1;
if (reset == 1'b0 && ^(ConvertPixel_0_or_cond1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_0_or_cond1_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %0*/
/*   %4 = icmp eq i32* %TransparentColour, null*/
begin
ConvertPixel_0_4 = (arg_TransparentColour == 0);
end
end
always @(posedge clk) begin
/* ConvertPixel: %0*/
/*   %4 = icmp eq i32* %TransparentColour, null*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_0_1))
begin
ConvertPixel_0_4_reg <= ConvertPixel_0_4;
if (reset == 1'b0 && ^(ConvertPixel_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_0_4_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %0*/
/*   %or.cond2 = or i1 %or.cond1, %4*/
begin
ConvertPixel_0_or_cond2 = (ConvertPixel_0_or_cond1 | ConvertPixel_0_4);
end
end
always @(posedge clk) begin
/* ConvertPixel: %0*/
/*   %or.cond2 = or i1 %or.cond1, %4*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_0_1))
begin
ConvertPixel_0_or_cond2_reg <= ConvertPixel_0_or_cond2;
if (reset == 1'b0 && ^(ConvertPixel_0_or_cond2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_0_or_cond2_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %0*/
/*   %5 = icmp eq i32* %OutPal, null*/
begin
ConvertPixel_0_5 = (arg_OutPal == 0);
end
end
always @(posedge clk) begin
/* ConvertPixel: %0*/
/*   %5 = icmp eq i32* %OutPal, null*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_0_1))
begin
ConvertPixel_0_5_reg <= ConvertPixel_0_5;
if (reset == 1'b0 && ^(ConvertPixel_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_0_5_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %0*/
/*   %or.cond3 = or i1 %or.cond2, %5*/
begin
ConvertPixel_0_or_cond3 = (ConvertPixel_0_or_cond2 | ConvertPixel_0_5);
end
end
always @(posedge clk) begin
/* ConvertPixel: %0*/
/*   %or.cond3 = or i1 %or.cond2, %5*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_0_1))
begin
ConvertPixel_0_or_cond3_reg <= ConvertPixel_0_or_cond3;
if (reset == 1'b0 && ^(ConvertPixel_0_or_cond3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_0_or_cond3_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %6*/
/*   %7 = getelementptr inbounds %struct.PNG_Chunk_IHDR* %IHDR, i32 0, i32 0*/
begin
ConvertPixel_6_7 = arg_IHDR;
end
end
always @(posedge clk) begin
/* ConvertPixel: %6*/
/*   %7 = getelementptr inbounds %struct.PNG_Chunk_IHDR* %IHDR, i32 0, i32 0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_6_2))
begin
ConvertPixel_6_7_reg <= ConvertPixel_6_7;
if (reset == 1'b0 && ^(ConvertPixel_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_6_7_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %6*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
begin
ConvertPixel_6_8 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %6*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_6_4))
begin
ConvertPixel_6_8_reg <= ConvertPixel_6_8;
if (reset == 1'b0 && ^(ConvertPixel_6_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_6_8_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %9*/
/*   %10 = getelementptr inbounds %struct.PNG_Chunk_IHDR* %IHDR, i32 0, i32 1*/
begin
ConvertPixel_9_10 = (arg_IHDR + 4);
end
end
always @(posedge clk) begin
/* ConvertPixel: %9*/
/*   %10 = getelementptr inbounds %struct.PNG_Chunk_IHDR* %IHDR, i32 0, i32 1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_9_5))
begin
ConvertPixel_9_10_reg <= ConvertPixel_9_10;
if (reset == 1'b0 && ^(ConvertPixel_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_9_10_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %9*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
begin
ConvertPixel_9_11 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %9*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_9_7))
begin
ConvertPixel_9_11_reg <= ConvertPixel_9_11;
if (reset == 1'b0 && ^(ConvertPixel_9_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_9_11_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %12*/
/*   %13 = shl i32 1, %11*/
begin
ConvertPixel_12_13 = (32'd1 <<< (ConvertPixel_9_11_reg % 32));
end
end
always @(posedge clk) begin
/* ConvertPixel: %12*/
/*   %13 = shl i32 1, %11*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_8))
begin
ConvertPixel_12_13_reg <= ConvertPixel_12_13;
if (reset == 1'b0 && ^(ConvertPixel_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_12_13_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %12*/
/*   %14 = add nsw i32 %13, -1*/
begin
ConvertPixel_12_14 = (ConvertPixel_12_13 + -32'd1);
end
end
always @(posedge clk) begin
/* ConvertPixel: %12*/
/*   %14 = add nsw i32 %13, -1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_8))
begin
ConvertPixel_12_14_reg <= ConvertPixel_12_14;
if (reset == 1'b0 && ^(ConvertPixel_12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_12_14_reg"); $finish; end
end
end
always @(*) begin
ConvertPixel_12_15 = ConvertPixel_signed_divide_32_0;
end
always @(posedge clk) begin
/* ConvertPixel: %12*/
/*   %15 = sdiv i32 255, %14*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_40))
begin
ConvertPixel_12_15_reg <= ConvertPixel_12_15;
if (reset == 1'b0 && ^(ConvertPixel_12_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_12_15_reg"); $finish; end
end
/* ConvertPixel: %12*/
/*   %15 = sdiv i32 255, %14*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_40))
begin
ConvertPixel_12_15_reg <= ConvertPixel_12_15;
if (reset == 1'b0 && ^(ConvertPixel_12_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_12_15_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %12*/
/*   %16 = load i32* %DecompPtr, align 4, !tbaa !0*/
begin
ConvertPixel_12_16 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %12*/
/*   %16 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_10))
begin
ConvertPixel_12_16_reg <= ConvertPixel_12_16;
if (reset == 1'b0 && ^(ConvertPixel_12_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_12_16_reg"); $finish; end
end
end
always @(*) begin
ConvertPixel_12_17 = ConvertPixel_12_17_stage0_reg;
end
always @(posedge clk) begin
/* ConvertPixel: %12*/
/*   %17 = mul nsw i32 %16, %15*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_41))
begin
ConvertPixel_12_17_reg <= ConvertPixel_12_17;
if (reset == 1'b0 && ^(ConvertPixel_12_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_12_17_reg"); $finish; end
end
/* ConvertPixel: %12*/
/*   %17 = mul nsw i32 %16, %15*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_41))
begin
ConvertPixel_12_17_reg <= ConvertPixel_12_17;
if (reset == 1'b0 && ^(ConvertPixel_12_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_12_17_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %12*/
/*   %18 = getelementptr inbounds i32* %OutPtr, i32 1*/
begin
ConvertPixel_12_18 = (arg_OutPtr + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* ConvertPixel: %12*/
/*   %18 = getelementptr inbounds i32* %OutPtr, i32 1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_8))
begin
ConvertPixel_12_18_reg <= ConvertPixel_12_18;
if (reset == 1'b0 && ^(ConvertPixel_12_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_12_18_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %12*/
/*   %19 = getelementptr inbounds i32* %OutPtr, i32 2*/
begin
ConvertPixel_12_19 = (arg_OutPtr + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* ConvertPixel: %12*/
/*   %19 = getelementptr inbounds i32* %OutPtr, i32 2*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_8))
begin
ConvertPixel_12_19_reg <= ConvertPixel_12_19;
if (reset == 1'b0 && ^(ConvertPixel_12_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_12_19_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %12*/
/*   %20 = getelementptr inbounds i32* %OutPtr, i32 3*/
begin
ConvertPixel_12_20 = (arg_OutPtr + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* ConvertPixel: %12*/
/*   %20 = getelementptr inbounds i32* %OutPtr, i32 3*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_8))
begin
ConvertPixel_12_20_reg <= ConvertPixel_12_20;
if (reset == 1'b0 && ^(ConvertPixel_12_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_12_20_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %12*/
/*   %21 = icmp eq i32 %HasTransparentColour, 0*/
begin
ConvertPixel_12_21 = (arg_HasTransparentColour == 32'd0);
end
end
always @(posedge clk) begin
/* ConvertPixel: %12*/
/*   %21 = icmp eq i32 %HasTransparentColour, 0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_8))
begin
ConvertPixel_12_21_reg <= ConvertPixel_12_21;
if (reset == 1'b0 && ^(ConvertPixel_12_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_12_21_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %22*/
/*   %23 = getelementptr inbounds i32* %TransparentColour, i32 1*/
begin
ConvertPixel_22_23 = (arg_TransparentColour + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* ConvertPixel: %22*/
/*   %23 = getelementptr inbounds i32* %TransparentColour, i32 1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_22_44))
begin
ConvertPixel_22_23_reg <= ConvertPixel_22_23;
if (reset == 1'b0 && ^(ConvertPixel_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_22_23_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %22*/
/*   %24 = load i32* %23, align 4, !tbaa !0*/
begin
ConvertPixel_22_24 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %22*/
/*   %24 = load i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_22_46))
begin
ConvertPixel_22_24_reg <= ConvertPixel_22_24;
if (reset == 1'b0 && ^(ConvertPixel_22_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_22_24_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %22*/
/*   %25 = load i32* %DecompPtr, align 4, !tbaa !0*/
begin
ConvertPixel_22_25 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %22*/
/*   %25 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_22_46))
begin
ConvertPixel_22_25_reg <= ConvertPixel_22_25;
if (reset == 1'b0 && ^(ConvertPixel_22_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_22_25_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %22*/
/*   %26 = icmp eq i32 %24, %25*/
begin
ConvertPixel_22_26 = (ConvertPixel_22_24 == ConvertPixel_22_25);
end
end
always @(posedge clk) begin
/* ConvertPixel: %22*/
/*   %26 = icmp eq i32 %24, %25*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_22_46))
begin
ConvertPixel_22_26_reg <= ConvertPixel_22_26;
if (reset == 1'b0 && ^(ConvertPixel_22_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_22_26_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %28*/
/*   %29 = load i32* %DecompPtr, align 4, !tbaa !0*/
begin
ConvertPixel_28_29 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %28*/
/*   %29 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_51))
begin
ConvertPixel_28_29_reg <= ConvertPixel_28_29;
if (reset == 1'b0 && ^(ConvertPixel_28_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_28_29_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %28*/
/*   %30 = load i32* %DecompPtr, align 4, !tbaa !0*/
begin
ConvertPixel_28_30 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %28*/
/*   %30 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_54))
begin
ConvertPixel_28_30_reg <= ConvertPixel_28_30;
if (reset == 1'b0 && ^(ConvertPixel_28_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_28_30_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %28*/
/*   %31 = getelementptr inbounds i32* %OutPtr, i32 1*/
begin
ConvertPixel_28_31 = (arg_OutPtr + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* ConvertPixel: %28*/
/*   %31 = getelementptr inbounds i32* %OutPtr, i32 1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_49))
begin
ConvertPixel_28_31_reg <= ConvertPixel_28_31;
if (reset == 1'b0 && ^(ConvertPixel_28_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_28_31_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %28*/
/*   %32 = load i32* %DecompPtr, align 4, !tbaa !0*/
begin
ConvertPixel_28_32 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %28*/
/*   %32 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_57))
begin
ConvertPixel_28_32_reg <= ConvertPixel_28_32;
if (reset == 1'b0 && ^(ConvertPixel_28_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_28_32_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %28*/
/*   %33 = getelementptr inbounds i32* %OutPtr, i32 2*/
begin
ConvertPixel_28_33 = (arg_OutPtr + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* ConvertPixel: %28*/
/*   %33 = getelementptr inbounds i32* %OutPtr, i32 2*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_49))
begin
ConvertPixel_28_33_reg <= ConvertPixel_28_33;
if (reset == 1'b0 && ^(ConvertPixel_28_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_28_33_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %28*/
/*   %34 = getelementptr inbounds i32* %OutPtr, i32 3*/
begin
ConvertPixel_28_34 = (arg_OutPtr + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* ConvertPixel: %28*/
/*   %34 = getelementptr inbounds i32* %OutPtr, i32 3*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_49))
begin
ConvertPixel_28_34_reg <= ConvertPixel_28_34;
if (reset == 1'b0 && ^(ConvertPixel_28_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_28_34_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %28*/
/*   %35 = icmp eq i32 %HasTransparentColour, 0*/
begin
ConvertPixel_28_35 = (arg_HasTransparentColour == 32'd0);
end
end
always @(posedge clk) begin
/* ConvertPixel: %28*/
/*   %35 = icmp eq i32 %HasTransparentColour, 0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_49))
begin
ConvertPixel_28_35_reg <= ConvertPixel_28_35;
if (reset == 1'b0 && ^(ConvertPixel_28_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_28_35_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %36*/
/*   %37 = load i32* %10, align 4, !tbaa !0*/
begin
ConvertPixel_36_37 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %36*/
/*   %37 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_36_61))
begin
ConvertPixel_36_37_reg <= ConvertPixel_36_37;
if (reset == 1'b0 && ^(ConvertPixel_36_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_36_37_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %36*/
/*   %38 = icmp eq i32 %37, 133*/
begin
ConvertPixel_36_38 = (ConvertPixel_36_37 == 32'd133);
end
end
always @(posedge clk) begin
/* ConvertPixel: %36*/
/*   %38 = icmp eq i32 %37, 133*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_36_61))
begin
ConvertPixel_36_38_reg <= ConvertPixel_36_38;
if (reset == 1'b0 && ^(ConvertPixel_36_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_36_38_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %39*/
/*   %40 = getelementptr inbounds i32* %TransparentColour, i32 1*/
begin
ConvertPixel_39_40 = (arg_TransparentColour + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* ConvertPixel: %39*/
/*   %40 = getelementptr inbounds i32* %TransparentColour, i32 1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_39_62))
begin
ConvertPixel_39_40_reg <= ConvertPixel_39_40;
if (reset == 1'b0 && ^(ConvertPixel_39_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_39_40_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %39*/
/*   %41 = load i32* %40, align 4, !tbaa !0*/
begin
ConvertPixel_39_41 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %39*/
/*   %41 = load i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_39_64))
begin
ConvertPixel_39_41_reg <= ConvertPixel_39_41;
if (reset == 1'b0 && ^(ConvertPixel_39_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_39_41_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %39*/
/*   %42 = load i32* %DecompPtr, align 4, !tbaa !0*/
begin
ConvertPixel_39_42 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %39*/
/*   %42 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_39_64))
begin
ConvertPixel_39_42_reg <= ConvertPixel_39_42;
if (reset == 1'b0 && ^(ConvertPixel_39_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_39_42_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %39*/
/*   %43 = icmp eq i32 %41, %42*/
begin
ConvertPixel_39_43 = (ConvertPixel_39_41 == ConvertPixel_39_42);
end
end
always @(posedge clk) begin
/* ConvertPixel: %39*/
/*   %43 = icmp eq i32 %41, %42*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_39_64))
begin
ConvertPixel_39_43_reg <= ConvertPixel_39_43;
if (reset == 1'b0 && ^(ConvertPixel_39_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_39_43_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %45*/
/*   %46 = load i32* %TransparentColour, align 4, !tbaa !0*/
begin
ConvertPixel_45_46 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %45*/
/*   %46 = load i32* %TransparentColour, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_45_69))
begin
ConvertPixel_45_46_reg <= ConvertPixel_45_46;
if (reset == 1'b0 && ^(ConvertPixel_45_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_45_46_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %45*/
/*   %47 = load i32* %DecompPtr, align 4, !tbaa !0*/
begin
ConvertPixel_45_47 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %45*/
/*   %47 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_45_69))
begin
ConvertPixel_45_47_reg <= ConvertPixel_45_47;
if (reset == 1'b0 && ^(ConvertPixel_45_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_45_47_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %45*/
/*   %48 = icmp eq i32 %46, %47*/
begin
ConvertPixel_45_48 = (ConvertPixel_45_46 == ConvertPixel_45_47);
end
end
always @(posedge clk) begin
/* ConvertPixel: %45*/
/*   %48 = icmp eq i32 %46, %47*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_45_69))
begin
ConvertPixel_45_48_reg <= ConvertPixel_45_48;
if (reset == 1'b0 && ^(ConvertPixel_45_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_45_48_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %49*/
/*   %50 = getelementptr inbounds i32* %TransparentColour, i32 1*/
begin
ConvertPixel_49_50 = (arg_TransparentColour + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* ConvertPixel: %49*/
/*   %50 = getelementptr inbounds i32* %TransparentColour, i32 1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_49_70))
begin
ConvertPixel_49_50_reg <= ConvertPixel_49_50;
if (reset == 1'b0 && ^(ConvertPixel_49_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_49_50_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %49*/
/*   %51 = load i32* %50, align 4, !tbaa !0*/
begin
ConvertPixel_49_51 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %49*/
/*   %51 = load i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_49_72))
begin
ConvertPixel_49_51_reg <= ConvertPixel_49_51;
if (reset == 1'b0 && ^(ConvertPixel_49_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_49_51_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %49*/
/*   %52 = getelementptr inbounds i32* %DecompPtr, i32 1*/
begin
ConvertPixel_49_52 = (arg_DecompPtr + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* ConvertPixel: %49*/
/*   %52 = getelementptr inbounds i32* %DecompPtr, i32 1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_49_70))
begin
ConvertPixel_49_52_reg <= ConvertPixel_49_52;
if (reset == 1'b0 && ^(ConvertPixel_49_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_49_52_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %49*/
/*   %53 = load i32* %52, align 4, !tbaa !0*/
begin
ConvertPixel_49_53 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %49*/
/*   %53 = load i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_49_72))
begin
ConvertPixel_49_53_reg <= ConvertPixel_49_53;
if (reset == 1'b0 && ^(ConvertPixel_49_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_49_53_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %49*/
/*   %54 = icmp eq i32 %51, %53*/
begin
ConvertPixel_49_54 = (ConvertPixel_49_51 == ConvertPixel_49_53);
end
end
always @(posedge clk) begin
/* ConvertPixel: %49*/
/*   %54 = icmp eq i32 %51, %53*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_49_72))
begin
ConvertPixel_49_54_reg <= ConvertPixel_49_54;
if (reset == 1'b0 && ^(ConvertPixel_49_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_49_54_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %56*/
/*   %57 = getelementptr inbounds %struct.PNG_Chunk_IHDR* %IHDR, i32 0, i32 1*/
begin
ConvertPixel_56_57 = (arg_IHDR + 4);
end
end
always @(posedge clk) begin
/* ConvertPixel: %56*/
/*   %57 = getelementptr inbounds %struct.PNG_Chunk_IHDR* %IHDR, i32 0, i32 1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_56_75))
begin
ConvertPixel_56_57_reg <= ConvertPixel_56_57;
if (reset == 1'b0 && ^(ConvertPixel_56_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_56_57_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %56*/
/*   %58 = load i32* %57, align 4, !tbaa !0*/
begin
ConvertPixel_56_58 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %56*/
/*   %58 = load i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_56_77))
begin
ConvertPixel_56_58_reg <= ConvertPixel_56_58;
if (reset == 1'b0 && ^(ConvertPixel_56_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_56_58_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %59*/
/*   %60 = load i32* %DecompPtr, align 4, !tbaa !0*/
begin
ConvertPixel_59_60 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %59*/
/*   %60 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_80))
begin
ConvertPixel_59_60_reg <= ConvertPixel_59_60;
if (reset == 1'b0 && ^(ConvertPixel_59_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_59_60_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %59*/
/*   %61 = getelementptr inbounds i32* %DecompPtr, i32 1*/
begin
ConvertPixel_59_61 = (arg_DecompPtr + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* ConvertPixel: %59*/
/*   %61 = getelementptr inbounds i32* %DecompPtr, i32 1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_78))
begin
ConvertPixel_59_61_reg <= ConvertPixel_59_61;
if (reset == 1'b0 && ^(ConvertPixel_59_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_59_61_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %59*/
/*   %62 = load i32* %61, align 4, !tbaa !0*/
begin
ConvertPixel_59_62 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %59*/
/*   %62 = load i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_83))
begin
ConvertPixel_59_62_reg <= ConvertPixel_59_62;
if (reset == 1'b0 && ^(ConvertPixel_59_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_59_62_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %59*/
/*   %63 = getelementptr inbounds i32* %OutPtr, i32 1*/
begin
ConvertPixel_59_63 = (arg_OutPtr + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* ConvertPixel: %59*/
/*   %63 = getelementptr inbounds i32* %OutPtr, i32 1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_78))
begin
ConvertPixel_59_63_reg <= ConvertPixel_59_63;
if (reset == 1'b0 && ^(ConvertPixel_59_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_59_63_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %59*/
/*   %64 = getelementptr inbounds i32* %DecompPtr, i32 2*/
begin
ConvertPixel_59_64 = (arg_DecompPtr + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* ConvertPixel: %59*/
/*   %64 = getelementptr inbounds i32* %DecompPtr, i32 2*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_78))
begin
ConvertPixel_59_64_reg <= ConvertPixel_59_64;
if (reset == 1'b0 && ^(ConvertPixel_59_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_59_64_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %59*/
/*   %65 = load i32* %64, align 4, !tbaa !0*/
begin
ConvertPixel_59_65 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %59*/
/*   %65 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_86))
begin
ConvertPixel_59_65_reg <= ConvertPixel_59_65;
if (reset == 1'b0 && ^(ConvertPixel_59_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_59_65_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %59*/
/*   %66 = getelementptr inbounds i32* %OutPtr, i32 2*/
begin
ConvertPixel_59_66 = (arg_OutPtr + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* ConvertPixel: %59*/
/*   %66 = getelementptr inbounds i32* %OutPtr, i32 2*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_78))
begin
ConvertPixel_59_66_reg <= ConvertPixel_59_66;
if (reset == 1'b0 && ^(ConvertPixel_59_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_59_66_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %59*/
/*   %67 = getelementptr inbounds i32* %OutPtr, i32 3*/
begin
ConvertPixel_59_67 = (arg_OutPtr + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* ConvertPixel: %59*/
/*   %67 = getelementptr inbounds i32* %OutPtr, i32 3*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_78))
begin
ConvertPixel_59_67_reg <= ConvertPixel_59_67;
if (reset == 1'b0 && ^(ConvertPixel_59_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_59_67_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %59*/
/*   %68 = icmp eq i32 %HasTransparentColour, 0*/
begin
ConvertPixel_59_68 = (arg_HasTransparentColour == 32'd0);
end
end
always @(posedge clk) begin
/* ConvertPixel: %59*/
/*   %68 = icmp eq i32 %HasTransparentColour, 0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_78))
begin
ConvertPixel_59_68_reg <= ConvertPixel_59_68;
if (reset == 1'b0 && ^(ConvertPixel_59_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_59_68_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %69*/
/*   %70 = getelementptr inbounds i32* %TransparentColour, i32 1*/
begin
ConvertPixel_69_70 = (arg_TransparentColour + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* ConvertPixel: %69*/
/*   %70 = getelementptr inbounds i32* %TransparentColour, i32 1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_69_88))
begin
ConvertPixel_69_70_reg <= ConvertPixel_69_70;
if (reset == 1'b0 && ^(ConvertPixel_69_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_69_70_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %69*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
begin
ConvertPixel_69_71 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %69*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_69_90))
begin
ConvertPixel_69_71_reg <= ConvertPixel_69_71;
if (reset == 1'b0 && ^(ConvertPixel_69_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_69_71_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %69*/
/*   %72 = load i32* %DecompPtr, align 4, !tbaa !0*/
begin
ConvertPixel_69_72 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %69*/
/*   %72 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_69_90))
begin
ConvertPixel_69_72_reg <= ConvertPixel_69_72;
if (reset == 1'b0 && ^(ConvertPixel_69_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_69_72_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %69*/
/*   %73 = icmp eq i32 %71, %72*/
begin
ConvertPixel_69_73 = (ConvertPixel_69_71 == ConvertPixel_69_72);
end
end
always @(posedge clk) begin
/* ConvertPixel: %69*/
/*   %73 = icmp eq i32 %71, %72*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_69_90))
begin
ConvertPixel_69_73_reg <= ConvertPixel_69_73;
if (reset == 1'b0 && ^(ConvertPixel_69_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_69_73_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %74*/
/*   %75 = getelementptr inbounds i32* %TransparentColour, i32 3*/
begin
ConvertPixel_74_75 = (arg_TransparentColour + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* ConvertPixel: %74*/
/*   %75 = getelementptr inbounds i32* %TransparentColour, i32 3*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_74_91))
begin
ConvertPixel_74_75_reg <= ConvertPixel_74_75;
if (reset == 1'b0 && ^(ConvertPixel_74_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_74_75_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %74*/
/*   %76 = load i32* %75, align 4, !tbaa !0*/
begin
ConvertPixel_74_76 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %74*/
/*   %76 = load i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_74_93))
begin
ConvertPixel_74_76_reg <= ConvertPixel_74_76;
if (reset == 1'b0 && ^(ConvertPixel_74_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_74_76_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %74*/
/*   %77 = load i32* %61, align 4, !tbaa !0*/
begin
ConvertPixel_74_77 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %74*/
/*   %77 = load i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_74_93))
begin
ConvertPixel_74_77_reg <= ConvertPixel_74_77;
if (reset == 1'b0 && ^(ConvertPixel_74_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_74_77_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %74*/
/*   %78 = icmp eq i32 %76, %77*/
begin
ConvertPixel_74_78 = (ConvertPixel_74_76 == ConvertPixel_74_77);
end
end
always @(posedge clk) begin
/* ConvertPixel: %74*/
/*   %78 = icmp eq i32 %76, %77*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_74_93))
begin
ConvertPixel_74_78_reg <= ConvertPixel_74_78;
if (reset == 1'b0 && ^(ConvertPixel_74_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_74_78_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %79*/
/*   %80 = getelementptr inbounds i32* %TransparentColour, i32 5*/
begin
ConvertPixel_79_80 = (arg_TransparentColour + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* ConvertPixel: %79*/
/*   %80 = getelementptr inbounds i32* %TransparentColour, i32 5*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_79_94))
begin
ConvertPixel_79_80_reg <= ConvertPixel_79_80;
if (reset == 1'b0 && ^(ConvertPixel_79_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_79_80_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %79*/
/*   %81 = load i32* %80, align 4, !tbaa !0*/
begin
ConvertPixel_79_81 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %79*/
/*   %81 = load i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_79_96))
begin
ConvertPixel_79_81_reg <= ConvertPixel_79_81;
if (reset == 1'b0 && ^(ConvertPixel_79_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_79_81_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %79*/
/*   %82 = load i32* %64, align 4, !tbaa !0*/
begin
ConvertPixel_79_82 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %79*/
/*   %82 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_79_96))
begin
ConvertPixel_79_82_reg <= ConvertPixel_79_82;
if (reset == 1'b0 && ^(ConvertPixel_79_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_79_82_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %79*/
/*   %83 = icmp eq i32 %81, %82*/
begin
ConvertPixel_79_83 = (ConvertPixel_79_81 == ConvertPixel_79_82);
end
end
always @(posedge clk) begin
/* ConvertPixel: %79*/
/*   %83 = icmp eq i32 %81, %82*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_79_96))
begin
ConvertPixel_79_83_reg <= ConvertPixel_79_83;
if (reset == 1'b0 && ^(ConvertPixel_79_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_79_83_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %85*/
/*   %86 = load i32* %DecompPtr, align 4, !tbaa !0*/
begin
ConvertPixel_85_86 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %85*/
/*   %86 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_101))
begin
ConvertPixel_85_86_reg <= ConvertPixel_85_86;
if (reset == 1'b0 && ^(ConvertPixel_85_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_85_86_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %85*/
/*   %87 = getelementptr inbounds i32* %DecompPtr, i32 2*/
begin
ConvertPixel_85_87 = (arg_DecompPtr + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* ConvertPixel: %85*/
/*   %87 = getelementptr inbounds i32* %DecompPtr, i32 2*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_99))
begin
ConvertPixel_85_87_reg <= ConvertPixel_85_87;
if (reset == 1'b0 && ^(ConvertPixel_85_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_85_87_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %85*/
/*   %88 = load i32* %87, align 4, !tbaa !0*/
begin
ConvertPixel_85_88 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %85*/
/*   %88 = load i32* %87, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_104))
begin
ConvertPixel_85_88_reg <= ConvertPixel_85_88;
if (reset == 1'b0 && ^(ConvertPixel_85_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_85_88_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %85*/
/*   %89 = getelementptr inbounds i32* %OutPtr, i32 1*/
begin
ConvertPixel_85_89 = (arg_OutPtr + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* ConvertPixel: %85*/
/*   %89 = getelementptr inbounds i32* %OutPtr, i32 1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_99))
begin
ConvertPixel_85_89_reg <= ConvertPixel_85_89;
if (reset == 1'b0 && ^(ConvertPixel_85_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_85_89_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %85*/
/*   %90 = getelementptr inbounds i32* %DecompPtr, i32 4*/
begin
ConvertPixel_85_90 = (arg_DecompPtr + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* ConvertPixel: %85*/
/*   %90 = getelementptr inbounds i32* %DecompPtr, i32 4*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_99))
begin
ConvertPixel_85_90_reg <= ConvertPixel_85_90;
if (reset == 1'b0 && ^(ConvertPixel_85_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_85_90_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %85*/
/*   %91 = load i32* %90, align 4, !tbaa !0*/
begin
ConvertPixel_85_91 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %85*/
/*   %91 = load i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_107))
begin
ConvertPixel_85_91_reg <= ConvertPixel_85_91;
if (reset == 1'b0 && ^(ConvertPixel_85_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_85_91_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %85*/
/*   %92 = getelementptr inbounds i32* %OutPtr, i32 2*/
begin
ConvertPixel_85_92 = (arg_OutPtr + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* ConvertPixel: %85*/
/*   %92 = getelementptr inbounds i32* %OutPtr, i32 2*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_99))
begin
ConvertPixel_85_92_reg <= ConvertPixel_85_92;
if (reset == 1'b0 && ^(ConvertPixel_85_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_85_92_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %85*/
/*   %93 = getelementptr inbounds i32* %OutPtr, i32 3*/
begin
ConvertPixel_85_93 = (arg_OutPtr + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* ConvertPixel: %85*/
/*   %93 = getelementptr inbounds i32* %OutPtr, i32 3*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_99))
begin
ConvertPixel_85_93_reg <= ConvertPixel_85_93;
if (reset == 1'b0 && ^(ConvertPixel_85_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_85_93_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %85*/
/*   %94 = icmp eq i32 %HasTransparentColour, 0*/
begin
ConvertPixel_85_94 = (arg_HasTransparentColour == 32'd0);
end
end
always @(posedge clk) begin
/* ConvertPixel: %85*/
/*   %94 = icmp eq i32 %HasTransparentColour, 0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_99))
begin
ConvertPixel_85_94_reg <= ConvertPixel_85_94;
if (reset == 1'b0 && ^(ConvertPixel_85_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_85_94_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %95*/
/*   %96 = load i32* %TransparentColour, align 4, !tbaa !0*/
begin
ConvertPixel_95_96 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %95*/
/*   %96 = load i32* %TransparentColour, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_95_111))
begin
ConvertPixel_95_96_reg <= ConvertPixel_95_96;
if (reset == 1'b0 && ^(ConvertPixel_95_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_95_96_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %95*/
/*   %97 = load i32* %DecompPtr, align 4, !tbaa !0*/
begin
ConvertPixel_95_97 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %95*/
/*   %97 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_95_111))
begin
ConvertPixel_95_97_reg <= ConvertPixel_95_97;
if (reset == 1'b0 && ^(ConvertPixel_95_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_95_97_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %95*/
/*   %98 = icmp eq i32 %96, %97*/
begin
ConvertPixel_95_98 = (ConvertPixel_95_96 == ConvertPixel_95_97);
end
end
always @(posedge clk) begin
/* ConvertPixel: %95*/
/*   %98 = icmp eq i32 %96, %97*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_95_111))
begin
ConvertPixel_95_98_reg <= ConvertPixel_95_98;
if (reset == 1'b0 && ^(ConvertPixel_95_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_95_98_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %99*/
/*   %100 = getelementptr inbounds i32* %TransparentColour, i32 1*/
begin
ConvertPixel_99_100 = (arg_TransparentColour + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* ConvertPixel: %99*/
/*   %100 = getelementptr inbounds i32* %TransparentColour, i32 1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_99_112))
begin
ConvertPixel_99_100_reg <= ConvertPixel_99_100;
if (reset == 1'b0 && ^(ConvertPixel_99_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_99_100_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %99*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
begin
ConvertPixel_99_101 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %99*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_99_114))
begin
ConvertPixel_99_101_reg <= ConvertPixel_99_101;
if (reset == 1'b0 && ^(ConvertPixel_99_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_99_101_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %99*/
/*   %102 = getelementptr inbounds i32* %DecompPtr, i32 1*/
begin
ConvertPixel_99_102 = (arg_DecompPtr + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* ConvertPixel: %99*/
/*   %102 = getelementptr inbounds i32* %DecompPtr, i32 1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_99_112))
begin
ConvertPixel_99_102_reg <= ConvertPixel_99_102;
if (reset == 1'b0 && ^(ConvertPixel_99_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_99_102_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %99*/
/*   %103 = load i32* %102, align 4, !tbaa !0*/
begin
ConvertPixel_99_103 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %99*/
/*   %103 = load i32* %102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_99_114))
begin
ConvertPixel_99_103_reg <= ConvertPixel_99_103;
if (reset == 1'b0 && ^(ConvertPixel_99_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_99_103_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %99*/
/*   %104 = icmp eq i32 %101, %103*/
begin
ConvertPixel_99_104 = (ConvertPixel_99_101 == ConvertPixel_99_103);
end
end
always @(posedge clk) begin
/* ConvertPixel: %99*/
/*   %104 = icmp eq i32 %101, %103*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_99_114))
begin
ConvertPixel_99_104_reg <= ConvertPixel_99_104;
if (reset == 1'b0 && ^(ConvertPixel_99_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_99_104_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %105*/
/*   %106 = getelementptr inbounds i32* %TransparentColour, i32 2*/
begin
ConvertPixel_105_106 = (arg_TransparentColour + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* ConvertPixel: %105*/
/*   %106 = getelementptr inbounds i32* %TransparentColour, i32 2*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_105_115))
begin
ConvertPixel_105_106_reg <= ConvertPixel_105_106;
if (reset == 1'b0 && ^(ConvertPixel_105_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_105_106_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %105*/
/*   %107 = load i32* %106, align 4, !tbaa !0*/
begin
ConvertPixel_105_107 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %105*/
/*   %107 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_105_117))
begin
ConvertPixel_105_107_reg <= ConvertPixel_105_107;
if (reset == 1'b0 && ^(ConvertPixel_105_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_105_107_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %105*/
/*   %108 = load i32* %87, align 4, !tbaa !0*/
begin
ConvertPixel_105_108 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %105*/
/*   %108 = load i32* %87, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_105_117))
begin
ConvertPixel_105_108_reg <= ConvertPixel_105_108;
if (reset == 1'b0 && ^(ConvertPixel_105_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_105_108_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %105*/
/*   %109 = icmp eq i32 %107, %108*/
begin
ConvertPixel_105_109 = (ConvertPixel_105_107 == ConvertPixel_105_108);
end
end
always @(posedge clk) begin
/* ConvertPixel: %105*/
/*   %109 = icmp eq i32 %107, %108*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_105_117))
begin
ConvertPixel_105_109_reg <= ConvertPixel_105_109;
if (reset == 1'b0 && ^(ConvertPixel_105_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_105_109_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %110*/
/*   %111 = getelementptr inbounds i32* %TransparentColour, i32 3*/
begin
ConvertPixel_110_111 = (arg_TransparentColour + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* ConvertPixel: %110*/
/*   %111 = getelementptr inbounds i32* %TransparentColour, i32 3*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_110_118))
begin
ConvertPixel_110_111_reg <= ConvertPixel_110_111;
if (reset == 1'b0 && ^(ConvertPixel_110_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_110_111_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %110*/
/*   %112 = load i32* %111, align 4, !tbaa !0*/
begin
ConvertPixel_110_112 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %110*/
/*   %112 = load i32* %111, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_110_120))
begin
ConvertPixel_110_112_reg <= ConvertPixel_110_112;
if (reset == 1'b0 && ^(ConvertPixel_110_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_110_112_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %110*/
/*   %113 = getelementptr inbounds i32* %DecompPtr, i32 3*/
begin
ConvertPixel_110_113 = (arg_DecompPtr + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* ConvertPixel: %110*/
/*   %113 = getelementptr inbounds i32* %DecompPtr, i32 3*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_110_118))
begin
ConvertPixel_110_113_reg <= ConvertPixel_110_113;
if (reset == 1'b0 && ^(ConvertPixel_110_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_110_113_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %110*/
/*   %114 = load i32* %113, align 4, !tbaa !0*/
begin
ConvertPixel_110_114 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %110*/
/*   %114 = load i32* %113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_110_120))
begin
ConvertPixel_110_114_reg <= ConvertPixel_110_114;
if (reset == 1'b0 && ^(ConvertPixel_110_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_110_114_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %110*/
/*   %115 = icmp eq i32 %112, %114*/
begin
ConvertPixel_110_115 = (ConvertPixel_110_112 == ConvertPixel_110_114);
end
end
always @(posedge clk) begin
/* ConvertPixel: %110*/
/*   %115 = icmp eq i32 %112, %114*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_110_120))
begin
ConvertPixel_110_115_reg <= ConvertPixel_110_115;
if (reset == 1'b0 && ^(ConvertPixel_110_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_110_115_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %116*/
/*   %117 = getelementptr inbounds i32* %TransparentColour, i32 4*/
begin
ConvertPixel_116_117 = (arg_TransparentColour + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* ConvertPixel: %116*/
/*   %117 = getelementptr inbounds i32* %TransparentColour, i32 4*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_116_121))
begin
ConvertPixel_116_117_reg <= ConvertPixel_116_117;
if (reset == 1'b0 && ^(ConvertPixel_116_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_116_117_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %116*/
/*   %118 = load i32* %117, align 4, !tbaa !0*/
begin
ConvertPixel_116_118 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %116*/
/*   %118 = load i32* %117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_116_123))
begin
ConvertPixel_116_118_reg <= ConvertPixel_116_118;
if (reset == 1'b0 && ^(ConvertPixel_116_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_116_118_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %116*/
/*   %119 = load i32* %90, align 4, !tbaa !0*/
begin
ConvertPixel_116_119 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %116*/
/*   %119 = load i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_116_123))
begin
ConvertPixel_116_119_reg <= ConvertPixel_116_119;
if (reset == 1'b0 && ^(ConvertPixel_116_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_116_119_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %116*/
/*   %120 = icmp eq i32 %118, %119*/
begin
ConvertPixel_116_120 = (ConvertPixel_116_118 == ConvertPixel_116_119);
end
end
always @(posedge clk) begin
/* ConvertPixel: %116*/
/*   %120 = icmp eq i32 %118, %119*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_116_123))
begin
ConvertPixel_116_120_reg <= ConvertPixel_116_120;
if (reset == 1'b0 && ^(ConvertPixel_116_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_116_120_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %121*/
/*   %122 = getelementptr inbounds i32* %TransparentColour, i32 5*/
begin
ConvertPixel_121_122 = (arg_TransparentColour + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* ConvertPixel: %121*/
/*   %122 = getelementptr inbounds i32* %TransparentColour, i32 5*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_121_124))
begin
ConvertPixel_121_122_reg <= ConvertPixel_121_122;
if (reset == 1'b0 && ^(ConvertPixel_121_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_121_122_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %121*/
/*   %123 = load i32* %122, align 4, !tbaa !0*/
begin
ConvertPixel_121_123 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %121*/
/*   %123 = load i32* %122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_121_126))
begin
ConvertPixel_121_123_reg <= ConvertPixel_121_123;
if (reset == 1'b0 && ^(ConvertPixel_121_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_121_123_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %121*/
/*   %124 = getelementptr inbounds i32* %DecompPtr, i32 5*/
begin
ConvertPixel_121_124 = (arg_DecompPtr + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* ConvertPixel: %121*/
/*   %124 = getelementptr inbounds i32* %DecompPtr, i32 5*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_121_124))
begin
ConvertPixel_121_124_reg <= ConvertPixel_121_124;
if (reset == 1'b0 && ^(ConvertPixel_121_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_121_124_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %121*/
/*   %125 = load i32* %124, align 4, !tbaa !0*/
begin
ConvertPixel_121_125 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %121*/
/*   %125 = load i32* %124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_121_126))
begin
ConvertPixel_121_125_reg <= ConvertPixel_121_125;
if (reset == 1'b0 && ^(ConvertPixel_121_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_121_125_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %121*/
/*   %126 = icmp eq i32 %123, %125*/
begin
ConvertPixel_121_126 = (ConvertPixel_121_123 == ConvertPixel_121_125);
end
end
always @(posedge clk) begin
/* ConvertPixel: %121*/
/*   %126 = icmp eq i32 %123, %125*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_121_126))
begin
ConvertPixel_121_126_reg <= ConvertPixel_121_126;
if (reset == 1'b0 && ^(ConvertPixel_121_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_121_126_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %128*/
/*   %129 = load i32* %OutPal, align 4, !tbaa !0*/
begin
ConvertPixel_128_129 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %128*/
/*   %129 = load i32* %OutPal, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_131))
begin
ConvertPixel_128_129_reg <= ConvertPixel_128_129;
if (reset == 1'b0 && ^(ConvertPixel_128_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_128_129_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %128*/
/*   %130 = getelementptr inbounds i32* %OutPal, i32 1*/
begin
ConvertPixel_128_130 = (arg_OutPal + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* ConvertPixel: %128*/
/*   %130 = getelementptr inbounds i32* %OutPal, i32 1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_129))
begin
ConvertPixel_128_130_reg <= ConvertPixel_128_130;
if (reset == 1'b0 && ^(ConvertPixel_128_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_128_130_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %128*/
/*   %131 = load i32* %130, align 4, !tbaa !0*/
begin
ConvertPixel_128_131 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %128*/
/*   %131 = load i32* %130, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_134))
begin
ConvertPixel_128_131_reg <= ConvertPixel_128_131;
if (reset == 1'b0 && ^(ConvertPixel_128_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_128_131_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %128*/
/*   %132 = getelementptr inbounds i32* %OutPtr, i32 1*/
begin
ConvertPixel_128_132 = (arg_OutPtr + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* ConvertPixel: %128*/
/*   %132 = getelementptr inbounds i32* %OutPtr, i32 1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_129))
begin
ConvertPixel_128_132_reg <= ConvertPixel_128_132;
if (reset == 1'b0 && ^(ConvertPixel_128_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_128_132_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %128*/
/*   %133 = getelementptr inbounds i32* %OutPal, i32 2*/
begin
ConvertPixel_128_133 = (arg_OutPal + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* ConvertPixel: %128*/
/*   %133 = getelementptr inbounds i32* %OutPal, i32 2*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_129))
begin
ConvertPixel_128_133_reg <= ConvertPixel_128_133;
if (reset == 1'b0 && ^(ConvertPixel_128_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_128_133_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %128*/
/*   %134 = load i32* %133, align 4, !tbaa !0*/
begin
ConvertPixel_128_134 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %128*/
/*   %134 = load i32* %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_137))
begin
ConvertPixel_128_134_reg <= ConvertPixel_128_134;
if (reset == 1'b0 && ^(ConvertPixel_128_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_128_134_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %128*/
/*   %135 = getelementptr inbounds i32* %OutPtr, i32 2*/
begin
ConvertPixel_128_135 = (arg_OutPtr + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* ConvertPixel: %128*/
/*   %135 = getelementptr inbounds i32* %OutPtr, i32 2*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_129))
begin
ConvertPixel_128_135_reg <= ConvertPixel_128_135;
if (reset == 1'b0 && ^(ConvertPixel_128_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_128_135_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %128*/
/*   %136 = getelementptr inbounds i32* %OutPal, i32 3*/
begin
ConvertPixel_128_136 = (arg_OutPal + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* ConvertPixel: %128*/
/*   %136 = getelementptr inbounds i32* %OutPal, i32 3*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_129))
begin
ConvertPixel_128_136_reg <= ConvertPixel_128_136;
if (reset == 1'b0 && ^(ConvertPixel_128_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_128_136_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %128*/
/*   %137 = load i32* %136, align 4, !tbaa !0*/
begin
ConvertPixel_128_137 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %128*/
/*   %137 = load i32* %136, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_140))
begin
ConvertPixel_128_137_reg <= ConvertPixel_128_137;
if (reset == 1'b0 && ^(ConvertPixel_128_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_128_137_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %128*/
/*   %138 = getelementptr inbounds i32* %OutPtr, i32 3*/
begin
ConvertPixel_128_138 = (arg_OutPtr + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* ConvertPixel: %128*/
/*   %138 = getelementptr inbounds i32* %OutPtr, i32 3*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_129))
begin
ConvertPixel_128_138_reg <= ConvertPixel_128_138;
if (reset == 1'b0 && ^(ConvertPixel_128_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_128_138_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %139*/
/*   %140 = getelementptr inbounds %struct.PNG_Chunk_IHDR* %IHDR, i32 0, i32 1*/
begin
ConvertPixel_139_140 = (arg_IHDR + 4);
end
end
always @(posedge clk) begin
/* ConvertPixel: %139*/
/*   %140 = getelementptr inbounds %struct.PNG_Chunk_IHDR* %IHDR, i32 0, i32 1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_139_142))
begin
ConvertPixel_139_140_reg <= ConvertPixel_139_140;
if (reset == 1'b0 && ^(ConvertPixel_139_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_139_140_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %139*/
/*   %141 = load i32* %140, align 4, !tbaa !0*/
begin
ConvertPixel_139_141 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %139*/
/*   %141 = load i32* %140, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_139_144))
begin
ConvertPixel_139_141_reg <= ConvertPixel_139_141;
if (reset == 1'b0 && ^(ConvertPixel_139_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_139_141_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %142*/
/*   %143 = load i32* %DecompPtr, align 4, !tbaa !0*/
begin
ConvertPixel_142_143 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %142*/
/*   %143 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_147))
begin
ConvertPixel_142_143_reg <= ConvertPixel_142_143;
if (reset == 1'b0 && ^(ConvertPixel_142_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_142_143_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %142*/
/*   %144 = load i32* %DecompPtr, align 4, !tbaa !0*/
begin
ConvertPixel_142_144 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %142*/
/*   %144 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_150))
begin
ConvertPixel_142_144_reg <= ConvertPixel_142_144;
if (reset == 1'b0 && ^(ConvertPixel_142_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_142_144_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %142*/
/*   %145 = getelementptr inbounds i32* %OutPtr, i32 1*/
begin
ConvertPixel_142_145 = (arg_OutPtr + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* ConvertPixel: %142*/
/*   %145 = getelementptr inbounds i32* %OutPtr, i32 1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_145))
begin
ConvertPixel_142_145_reg <= ConvertPixel_142_145;
if (reset == 1'b0 && ^(ConvertPixel_142_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_142_145_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %142*/
/*   %146 = load i32* %DecompPtr, align 4, !tbaa !0*/
begin
ConvertPixel_142_146 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %142*/
/*   %146 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_153))
begin
ConvertPixel_142_146_reg <= ConvertPixel_142_146;
if (reset == 1'b0 && ^(ConvertPixel_142_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_142_146_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %142*/
/*   %147 = getelementptr inbounds i32* %OutPtr, i32 2*/
begin
ConvertPixel_142_147 = (arg_OutPtr + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* ConvertPixel: %142*/
/*   %147 = getelementptr inbounds i32* %OutPtr, i32 2*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_145))
begin
ConvertPixel_142_147_reg <= ConvertPixel_142_147;
if (reset == 1'b0 && ^(ConvertPixel_142_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_142_147_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %142*/
/*   %148 = getelementptr inbounds i32* %DecompPtr, i32 1*/
begin
ConvertPixel_142_148 = (arg_DecompPtr + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* ConvertPixel: %142*/
/*   %148 = getelementptr inbounds i32* %DecompPtr, i32 1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_145))
begin
ConvertPixel_142_148_reg <= ConvertPixel_142_148;
if (reset == 1'b0 && ^(ConvertPixel_142_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_142_148_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %142*/
/*   %149 = load i32* %148, align 4, !tbaa !0*/
begin
ConvertPixel_142_149 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %142*/
/*   %149 = load i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_156))
begin
ConvertPixel_142_149_reg <= ConvertPixel_142_149;
if (reset == 1'b0 && ^(ConvertPixel_142_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_142_149_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %142*/
/*   %150 = getelementptr inbounds i32* %OutPtr, i32 3*/
begin
ConvertPixel_142_150 = (arg_OutPtr + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* ConvertPixel: %142*/
/*   %150 = getelementptr inbounds i32* %OutPtr, i32 3*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_145))
begin
ConvertPixel_142_150_reg <= ConvertPixel_142_150;
if (reset == 1'b0 && ^(ConvertPixel_142_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_142_150_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %151*/
/*   %152 = load i32* %DecompPtr, align 4, !tbaa !0*/
begin
ConvertPixel_151_152 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %151*/
/*   %152 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_160))
begin
ConvertPixel_151_152_reg <= ConvertPixel_151_152;
if (reset == 1'b0 && ^(ConvertPixel_151_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_151_152_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %151*/
/*   %153 = load i32* %DecompPtr, align 4, !tbaa !0*/
begin
ConvertPixel_151_153 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %151*/
/*   %153 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_163))
begin
ConvertPixel_151_153_reg <= ConvertPixel_151_153;
if (reset == 1'b0 && ^(ConvertPixel_151_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_151_153_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %151*/
/*   %154 = getelementptr inbounds i32* %OutPtr, i32 1*/
begin
ConvertPixel_151_154 = (arg_OutPtr + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* ConvertPixel: %151*/
/*   %154 = getelementptr inbounds i32* %OutPtr, i32 1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_158))
begin
ConvertPixel_151_154_reg <= ConvertPixel_151_154;
if (reset == 1'b0 && ^(ConvertPixel_151_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_151_154_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %151*/
/*   %155 = load i32* %DecompPtr, align 4, !tbaa !0*/
begin
ConvertPixel_151_155 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %151*/
/*   %155 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_166))
begin
ConvertPixel_151_155_reg <= ConvertPixel_151_155;
if (reset == 1'b0 && ^(ConvertPixel_151_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_151_155_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %151*/
/*   %156 = getelementptr inbounds i32* %OutPtr, i32 2*/
begin
ConvertPixel_151_156 = (arg_OutPtr + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* ConvertPixel: %151*/
/*   %156 = getelementptr inbounds i32* %OutPtr, i32 2*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_158))
begin
ConvertPixel_151_156_reg <= ConvertPixel_151_156;
if (reset == 1'b0 && ^(ConvertPixel_151_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_151_156_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %151*/
/*   %157 = getelementptr inbounds i32* %DecompPtr, i32 2*/
begin
ConvertPixel_151_157 = (arg_DecompPtr + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* ConvertPixel: %151*/
/*   %157 = getelementptr inbounds i32* %DecompPtr, i32 2*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_158))
begin
ConvertPixel_151_157_reg <= ConvertPixel_151_157;
if (reset == 1'b0 && ^(ConvertPixel_151_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_151_157_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %151*/
/*   %158 = load i32* %157, align 4, !tbaa !0*/
begin
ConvertPixel_151_158 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %151*/
/*   %158 = load i32* %157, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_169))
begin
ConvertPixel_151_158_reg <= ConvertPixel_151_158;
if (reset == 1'b0 && ^(ConvertPixel_151_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_151_158_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %151*/
/*   %159 = getelementptr inbounds i32* %OutPtr, i32 3*/
begin
ConvertPixel_151_159 = (arg_OutPtr + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* ConvertPixel: %151*/
/*   %159 = getelementptr inbounds i32* %OutPtr, i32 3*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_158))
begin
ConvertPixel_151_159_reg <= ConvertPixel_151_159;
if (reset == 1'b0 && ^(ConvertPixel_151_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_151_159_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %160*/
/*   %161 = getelementptr inbounds %struct.PNG_Chunk_IHDR* %IHDR, i32 0, i32 1*/
begin
ConvertPixel_160_161 = (arg_IHDR + 4);
end
end
always @(posedge clk) begin
/* ConvertPixel: %160*/
/*   %161 = getelementptr inbounds %struct.PNG_Chunk_IHDR* %IHDR, i32 0, i32 1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_160_171))
begin
ConvertPixel_160_161_reg <= ConvertPixel_160_161;
if (reset == 1'b0 && ^(ConvertPixel_160_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_160_161_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %160*/
/*   %162 = load i32* %161, align 4, !tbaa !0*/
begin
ConvertPixel_160_162 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %160*/
/*   %162 = load i32* %161, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_160_173))
begin
ConvertPixel_160_162_reg <= ConvertPixel_160_162;
if (reset == 1'b0 && ^(ConvertPixel_160_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_160_162_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %163*/
/*   %164 = load i32* %DecompPtr, align 4, !tbaa !0*/
begin
ConvertPixel_163_164 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %163*/
/*   %164 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_176))
begin
ConvertPixel_163_164_reg <= ConvertPixel_163_164;
if (reset == 1'b0 && ^(ConvertPixel_163_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_163_164_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %163*/
/*   %165 = getelementptr inbounds i32* %DecompPtr, i32 1*/
begin
ConvertPixel_163_165 = (arg_DecompPtr + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* ConvertPixel: %163*/
/*   %165 = getelementptr inbounds i32* %DecompPtr, i32 1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_174))
begin
ConvertPixel_163_165_reg <= ConvertPixel_163_165;
if (reset == 1'b0 && ^(ConvertPixel_163_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_163_165_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %163*/
/*   %166 = load i32* %165, align 4, !tbaa !0*/
begin
ConvertPixel_163_166 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %163*/
/*   %166 = load i32* %165, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_179))
begin
ConvertPixel_163_166_reg <= ConvertPixel_163_166;
if (reset == 1'b0 && ^(ConvertPixel_163_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_163_166_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %163*/
/*   %167 = getelementptr inbounds i32* %OutPtr, i32 1*/
begin
ConvertPixel_163_167 = (arg_OutPtr + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* ConvertPixel: %163*/
/*   %167 = getelementptr inbounds i32* %OutPtr, i32 1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_174))
begin
ConvertPixel_163_167_reg <= ConvertPixel_163_167;
if (reset == 1'b0 && ^(ConvertPixel_163_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_163_167_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %163*/
/*   %168 = getelementptr inbounds i32* %DecompPtr, i32 2*/
begin
ConvertPixel_163_168 = (arg_DecompPtr + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* ConvertPixel: %163*/
/*   %168 = getelementptr inbounds i32* %DecompPtr, i32 2*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_174))
begin
ConvertPixel_163_168_reg <= ConvertPixel_163_168;
if (reset == 1'b0 && ^(ConvertPixel_163_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_163_168_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %163*/
/*   %169 = load i32* %168, align 4, !tbaa !0*/
begin
ConvertPixel_163_169 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %163*/
/*   %169 = load i32* %168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_182))
begin
ConvertPixel_163_169_reg <= ConvertPixel_163_169;
if (reset == 1'b0 && ^(ConvertPixel_163_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_163_169_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %163*/
/*   %170 = getelementptr inbounds i32* %OutPtr, i32 2*/
begin
ConvertPixel_163_170 = (arg_OutPtr + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* ConvertPixel: %163*/
/*   %170 = getelementptr inbounds i32* %OutPtr, i32 2*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_174))
begin
ConvertPixel_163_170_reg <= ConvertPixel_163_170;
if (reset == 1'b0 && ^(ConvertPixel_163_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_163_170_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %163*/
/*   %171 = getelementptr inbounds i32* %DecompPtr, i32 3*/
begin
ConvertPixel_163_171 = (arg_DecompPtr + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* ConvertPixel: %163*/
/*   %171 = getelementptr inbounds i32* %DecompPtr, i32 3*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_174))
begin
ConvertPixel_163_171_reg <= ConvertPixel_163_171;
if (reset == 1'b0 && ^(ConvertPixel_163_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_163_171_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %163*/
/*   %172 = load i32* %171, align 4, !tbaa !0*/
begin
ConvertPixel_163_172 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %163*/
/*   %172 = load i32* %171, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_185))
begin
ConvertPixel_163_172_reg <= ConvertPixel_163_172;
if (reset == 1'b0 && ^(ConvertPixel_163_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_163_172_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %163*/
/*   %173 = getelementptr inbounds i32* %OutPtr, i32 3*/
begin
ConvertPixel_163_173 = (arg_OutPtr + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* ConvertPixel: %163*/
/*   %173 = getelementptr inbounds i32* %OutPtr, i32 3*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_174))
begin
ConvertPixel_163_173_reg <= ConvertPixel_163_173;
if (reset == 1'b0 && ^(ConvertPixel_163_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_163_173_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %174*/
/*   %175 = load i32* %DecompPtr, align 4, !tbaa !0*/
begin
ConvertPixel_174_175 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %174*/
/*   %175 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_189))
begin
ConvertPixel_174_175_reg <= ConvertPixel_174_175;
if (reset == 1'b0 && ^(ConvertPixel_174_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_174_175_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %174*/
/*   %176 = getelementptr inbounds i32* %DecompPtr, i32 2*/
begin
ConvertPixel_174_176 = (arg_DecompPtr + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* ConvertPixel: %174*/
/*   %176 = getelementptr inbounds i32* %DecompPtr, i32 2*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_187))
begin
ConvertPixel_174_176_reg <= ConvertPixel_174_176;
if (reset == 1'b0 && ^(ConvertPixel_174_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_174_176_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %174*/
/*   %177 = load i32* %176, align 4, !tbaa !0*/
begin
ConvertPixel_174_177 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %174*/
/*   %177 = load i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_192))
begin
ConvertPixel_174_177_reg <= ConvertPixel_174_177;
if (reset == 1'b0 && ^(ConvertPixel_174_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_174_177_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %174*/
/*   %178 = getelementptr inbounds i32* %OutPtr, i32 1*/
begin
ConvertPixel_174_178 = (arg_OutPtr + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* ConvertPixel: %174*/
/*   %178 = getelementptr inbounds i32* %OutPtr, i32 1*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_187))
begin
ConvertPixel_174_178_reg <= ConvertPixel_174_178;
if (reset == 1'b0 && ^(ConvertPixel_174_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_174_178_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %174*/
/*   %179 = getelementptr inbounds i32* %DecompPtr, i32 4*/
begin
ConvertPixel_174_179 = (arg_DecompPtr + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* ConvertPixel: %174*/
/*   %179 = getelementptr inbounds i32* %DecompPtr, i32 4*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_187))
begin
ConvertPixel_174_179_reg <= ConvertPixel_174_179;
if (reset == 1'b0 && ^(ConvertPixel_174_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_174_179_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %174*/
/*   %180 = load i32* %179, align 4, !tbaa !0*/
begin
ConvertPixel_174_180 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %174*/
/*   %180 = load i32* %179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_195))
begin
ConvertPixel_174_180_reg <= ConvertPixel_174_180;
if (reset == 1'b0 && ^(ConvertPixel_174_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_174_180_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %174*/
/*   %181 = getelementptr inbounds i32* %OutPtr, i32 2*/
begin
ConvertPixel_174_181 = (arg_OutPtr + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* ConvertPixel: %174*/
/*   %181 = getelementptr inbounds i32* %OutPtr, i32 2*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_187))
begin
ConvertPixel_174_181_reg <= ConvertPixel_174_181;
if (reset == 1'b0 && ^(ConvertPixel_174_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_174_181_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %174*/
/*   %182 = getelementptr inbounds i32* %DecompPtr, i32 6*/
begin
ConvertPixel_174_182 = (arg_DecompPtr + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* ConvertPixel: %174*/
/*   %182 = getelementptr inbounds i32* %DecompPtr, i32 6*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_187))
begin
ConvertPixel_174_182_reg <= ConvertPixel_174_182;
if (reset == 1'b0 && ^(ConvertPixel_174_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_174_182_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %174*/
/*   %183 = load i32* %182, align 4, !tbaa !0*/
begin
ConvertPixel_174_183 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ConvertPixel: %174*/
/*   %183 = load i32* %182, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_198))
begin
ConvertPixel_174_183_reg <= ConvertPixel_174_183;
if (reset == 1'b0 && ^(ConvertPixel_174_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_174_183_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %174*/
/*   %184 = getelementptr inbounds i32* %OutPtr, i32 3*/
begin
ConvertPixel_174_184 = (arg_OutPtr + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* ConvertPixel: %174*/
/*   %184 = getelementptr inbounds i32* %OutPtr, i32 3*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_187))
begin
ConvertPixel_174_184_reg <= ConvertPixel_174_184;
if (reset == 1'b0 && ^(ConvertPixel_174_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_174_184_reg"); $finish; end
end
end
always @(*) begin
/* ConvertPixel: %12*/
/*   %15 = sdiv i32 255, %14*/
if (reset) begin ConvertPixel_signed_divide_32_0_op0 = 0; end
begin
ConvertPixel_signed_divide_32_0_op0 = 32'd255;
end
end
always @(*) begin
/* ConvertPixel: %12*/
/*   %15 = sdiv i32 255, %14*/
begin
ConvertPixel_signed_divide_32_0_op1 = ConvertPixel_12_14;
end
end
always @(*) begin
lpm_divide_ConvertPixel_12_15_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_ConvertPixel_12_15_out = lpm_divide_ConvertPixel_12_15_temp_out;
end
always @(*) begin
ConvertPixel_signed_divide_32_0 = lpm_divide_ConvertPixel_12_15_out;
end
always @(*) begin
lpm_mult_ConvertPixel_12_17_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* ConvertPixel: %12*/
/*   %17 = mul nsw i32 %16, %15*/
if ((lpm_mult_ConvertPixel_12_17_en == 1'd1))
begin
ConvertPixel_12_17_stage0_reg <= (ConvertPixel_12_16_reg * ConvertPixel_12_15);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* ConvertPixel: %185*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_185_200))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* ConvertPixel: %6*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_6_2))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %12*/
/*   %16 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_8))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %12*/
/*   store i32 %17, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_41))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %12*/
/*   store i32 %17, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_42))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %22*/
/*   %24 = load i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_22_44))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %28*/
/*   %29 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_49))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %28*/
/*   store i32 %29, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_51))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %28*/
/*   %32 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_55))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %28*/
/*   store i32 %32, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_57))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %39*/
/*   %41 = load i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_39_62))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %45*/
/*   %46 = load i32* %TransparentColour, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_45_67))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %49*/
/*   %51 = load i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_49_70))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %59*/
/*   %60 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_78))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %59*/
/*   store i32 %60, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_80))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %59*/
/*   store i32 %62, i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_83))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %59*/
/*   store i32 %65, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_86))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %69*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_69_88))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %74*/
/*   %76 = load i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_74_91))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %79*/
/*   %81 = load i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_79_94))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %85*/
/*   store i32 %91, i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_107))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %95*/
/*   %96 = load i32* %TransparentColour, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_95_109))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %99*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_99_112))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %105*/
/*   %107 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_105_115))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %110*/
/*   %112 = load i32* %111, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_110_118))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %116*/
/*   %118 = load i32* %117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_116_121))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %121*/
/*   %123 = load i32* %122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_121_124))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %128*/
/*   %134 = load i32* %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_135))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %128*/
/*   store i32 %134, i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_137))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %139*/
/*   %141 = load i32* %140, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_139_142))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %142*/
/*   %143 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_145))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %142*/
/*   store i32 %143, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_147))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %142*/
/*   %146 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_151))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %142*/
/*   store i32 %146, i32* %147, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_153))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %142*/
/*   store i32 %149, i32* %150, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_156))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %151*/
/*   %155 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_164))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %151*/
/*   store i32 %155, i32* %156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_166))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %151*/
/*   store i32 %158, i32* %159, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_169))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %163*/
/*   %166 = load i32* %165, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_177))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %163*/
/*   %169 = load i32* %168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_180))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %163*/
/*   store i32 %169, i32* %170, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_182))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %174*/
/*   %175 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_187))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %174*/
/*   store i32 %175, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_189))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %174*/
/*   %177 = load i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_190))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %174*/
/*   %180 = load i32* %179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_193))
begin
memory_controller_enable_a = 1'd1;
end
/* ConvertPixel: %174*/
/*   store i32 %180, i32* %181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_195))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* ConvertPixel: %6*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_6_2))
begin
memory_controller_address_a = ConvertPixel_6_7;
end
/* ConvertPixel: %12*/
/*   %16 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_8))
begin
memory_controller_address_a = arg_DecompPtr;
end
/* ConvertPixel: %12*/
/*   store i32 %17, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_41))
begin
memory_controller_address_a = arg_OutPtr;
end
/* ConvertPixel: %12*/
/*   store i32 %17, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_42))
begin
memory_controller_address_a = ConvertPixel_12_19_reg;
end
/* ConvertPixel: %22*/
/*   %24 = load i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_22_44))
begin
memory_controller_address_a = ConvertPixel_22_23;
end
/* ConvertPixel: %28*/
/*   %29 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_49))
begin
memory_controller_address_a = arg_DecompPtr;
end
/* ConvertPixel: %28*/
/*   store i32 %29, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_51))
begin
memory_controller_address_a = arg_OutPtr;
end
/* ConvertPixel: %28*/
/*   %32 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_55))
begin
memory_controller_address_a = arg_DecompPtr;
end
/* ConvertPixel: %28*/
/*   store i32 %32, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_57))
begin
memory_controller_address_a = ConvertPixel_28_33_reg;
end
/* ConvertPixel: %39*/
/*   %41 = load i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_39_62))
begin
memory_controller_address_a = ConvertPixel_39_40;
end
/* ConvertPixel: %45*/
/*   %46 = load i32* %TransparentColour, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_45_67))
begin
memory_controller_address_a = arg_TransparentColour;
end
/* ConvertPixel: %49*/
/*   %51 = load i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_49_70))
begin
memory_controller_address_a = ConvertPixel_49_50;
end
/* ConvertPixel: %59*/
/*   %60 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_78))
begin
memory_controller_address_a = arg_DecompPtr;
end
/* ConvertPixel: %59*/
/*   store i32 %60, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_80))
begin
memory_controller_address_a = arg_OutPtr;
end
/* ConvertPixel: %59*/
/*   store i32 %62, i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_83))
begin
memory_controller_address_a = ConvertPixel_59_63_reg;
end
/* ConvertPixel: %59*/
/*   store i32 %65, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_86))
begin
memory_controller_address_a = ConvertPixel_59_66_reg;
end
/* ConvertPixel: %69*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_69_88))
begin
memory_controller_address_a = ConvertPixel_69_70;
end
/* ConvertPixel: %74*/
/*   %76 = load i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_74_91))
begin
memory_controller_address_a = ConvertPixel_74_75;
end
/* ConvertPixel: %79*/
/*   %81 = load i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_79_94))
begin
memory_controller_address_a = ConvertPixel_79_80;
end
/* ConvertPixel: %85*/
/*   store i32 %91, i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_107))
begin
memory_controller_address_a = ConvertPixel_85_92_reg;
end
/* ConvertPixel: %95*/
/*   %96 = load i32* %TransparentColour, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_95_109))
begin
memory_controller_address_a = arg_TransparentColour;
end
/* ConvertPixel: %99*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_99_112))
begin
memory_controller_address_a = ConvertPixel_99_100;
end
/* ConvertPixel: %105*/
/*   %107 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_105_115))
begin
memory_controller_address_a = ConvertPixel_105_106;
end
/* ConvertPixel: %110*/
/*   %112 = load i32* %111, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_110_118))
begin
memory_controller_address_a = ConvertPixel_110_111;
end
/* ConvertPixel: %116*/
/*   %118 = load i32* %117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_116_121))
begin
memory_controller_address_a = ConvertPixel_116_117;
end
/* ConvertPixel: %121*/
/*   %123 = load i32* %122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_121_124))
begin
memory_controller_address_a = ConvertPixel_121_122;
end
/* ConvertPixel: %128*/
/*   %134 = load i32* %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_135))
begin
memory_controller_address_a = ConvertPixel_128_133_reg;
end
/* ConvertPixel: %128*/
/*   store i32 %134, i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_137))
begin
memory_controller_address_a = ConvertPixel_128_135_reg;
end
/* ConvertPixel: %139*/
/*   %141 = load i32* %140, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_139_142))
begin
memory_controller_address_a = ConvertPixel_139_140;
end
/* ConvertPixel: %142*/
/*   %143 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_145))
begin
memory_controller_address_a = arg_DecompPtr;
end
/* ConvertPixel: %142*/
/*   store i32 %143, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_147))
begin
memory_controller_address_a = arg_OutPtr;
end
/* ConvertPixel: %142*/
/*   %146 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_151))
begin
memory_controller_address_a = arg_DecompPtr;
end
/* ConvertPixel: %142*/
/*   store i32 %146, i32* %147, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_153))
begin
memory_controller_address_a = ConvertPixel_142_147_reg;
end
/* ConvertPixel: %142*/
/*   store i32 %149, i32* %150, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_156))
begin
memory_controller_address_a = ConvertPixel_142_150_reg;
end
/* ConvertPixel: %151*/
/*   %155 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_164))
begin
memory_controller_address_a = arg_DecompPtr;
end
/* ConvertPixel: %151*/
/*   store i32 %155, i32* %156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_166))
begin
memory_controller_address_a = ConvertPixel_151_156_reg;
end
/* ConvertPixel: %151*/
/*   store i32 %158, i32* %159, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_169))
begin
memory_controller_address_a = ConvertPixel_151_159_reg;
end
/* ConvertPixel: %163*/
/*   %166 = load i32* %165, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_177))
begin
memory_controller_address_a = ConvertPixel_163_165_reg;
end
/* ConvertPixel: %163*/
/*   %169 = load i32* %168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_180))
begin
memory_controller_address_a = ConvertPixel_163_168_reg;
end
/* ConvertPixel: %163*/
/*   store i32 %169, i32* %170, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_182))
begin
memory_controller_address_a = ConvertPixel_163_170_reg;
end
/* ConvertPixel: %174*/
/*   %175 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_187))
begin
memory_controller_address_a = arg_DecompPtr;
end
/* ConvertPixel: %174*/
/*   store i32 %175, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_189))
begin
memory_controller_address_a = arg_OutPtr;
end
/* ConvertPixel: %174*/
/*   %177 = load i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_190))
begin
memory_controller_address_a = ConvertPixel_174_176_reg;
end
/* ConvertPixel: %174*/
/*   %180 = load i32* %179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_193))
begin
memory_controller_address_a = ConvertPixel_174_179_reg;
end
/* ConvertPixel: %174*/
/*   store i32 %180, i32* %181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_195))
begin
memory_controller_address_a = ConvertPixel_174_181_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %6*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_6_2))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %12*/
/*   %16 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_8))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %12*/
/*   store i32 %17, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_41))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ConvertPixel: %12*/
/*   store i32 %17, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_42))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ConvertPixel: %22*/
/*   %24 = load i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_22_44))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %28*/
/*   %29 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_49))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %28*/
/*   store i32 %29, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_51))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ConvertPixel: %28*/
/*   %32 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_55))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %28*/
/*   store i32 %32, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_57))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ConvertPixel: %39*/
/*   %41 = load i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_39_62))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %45*/
/*   %46 = load i32* %TransparentColour, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_45_67))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %49*/
/*   %51 = load i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_49_70))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %59*/
/*   %60 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_78))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %59*/
/*   store i32 %60, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_80))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ConvertPixel: %59*/
/*   store i32 %62, i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_83))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ConvertPixel: %59*/
/*   store i32 %65, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_86))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ConvertPixel: %69*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_69_88))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %74*/
/*   %76 = load i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_74_91))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %79*/
/*   %81 = load i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_79_94))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %85*/
/*   store i32 %91, i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_107))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ConvertPixel: %95*/
/*   %96 = load i32* %TransparentColour, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_95_109))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %99*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_99_112))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %105*/
/*   %107 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_105_115))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %110*/
/*   %112 = load i32* %111, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_110_118))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %116*/
/*   %118 = load i32* %117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_116_121))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %121*/
/*   %123 = load i32* %122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_121_124))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %128*/
/*   %134 = load i32* %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_135))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %128*/
/*   store i32 %134, i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_137))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ConvertPixel: %139*/
/*   %141 = load i32* %140, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_139_142))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %142*/
/*   %143 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_145))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %142*/
/*   store i32 %143, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_147))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ConvertPixel: %142*/
/*   %146 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_151))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %142*/
/*   store i32 %146, i32* %147, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_153))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ConvertPixel: %142*/
/*   store i32 %149, i32* %150, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_156))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ConvertPixel: %151*/
/*   %155 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_164))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %151*/
/*   store i32 %155, i32* %156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_166))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ConvertPixel: %151*/
/*   store i32 %158, i32* %159, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_169))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ConvertPixel: %163*/
/*   %166 = load i32* %165, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_177))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %163*/
/*   %169 = load i32* %168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_180))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %163*/
/*   store i32 %169, i32* %170, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_182))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ConvertPixel: %174*/
/*   %175 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_187))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %174*/
/*   store i32 %175, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_189))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ConvertPixel: %174*/
/*   %177 = load i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_190))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %174*/
/*   %180 = load i32* %179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_193))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ConvertPixel: %174*/
/*   store i32 %180, i32* %181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_195))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* ConvertPixel: %12*/
/*   store i32 %17, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_41))
begin
memory_controller_in_a = ConvertPixel_12_17;
end
/* ConvertPixel: %12*/
/*   store i32 %17, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_42))
begin
memory_controller_in_a = ConvertPixel_12_17_reg;
end
/* ConvertPixel: %28*/
/*   store i32 %29, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_51))
begin
memory_controller_in_a = ConvertPixel_28_29;
end
/* ConvertPixel: %28*/
/*   store i32 %32, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_57))
begin
memory_controller_in_a = ConvertPixel_28_32;
end
/* ConvertPixel: %59*/
/*   store i32 %60, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_80))
begin
memory_controller_in_a = ConvertPixel_59_60;
end
/* ConvertPixel: %59*/
/*   store i32 %62, i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_83))
begin
memory_controller_in_a = ConvertPixel_59_62;
end
/* ConvertPixel: %59*/
/*   store i32 %65, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_86))
begin
memory_controller_in_a = ConvertPixel_59_65;
end
/* ConvertPixel: %85*/
/*   store i32 %91, i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_107))
begin
memory_controller_in_a = ConvertPixel_85_91;
end
/* ConvertPixel: %128*/
/*   store i32 %134, i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_137))
begin
memory_controller_in_a = ConvertPixel_128_134;
end
/* ConvertPixel: %142*/
/*   store i32 %143, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_147))
begin
memory_controller_in_a = ConvertPixel_142_143;
end
/* ConvertPixel: %142*/
/*   store i32 %146, i32* %147, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_153))
begin
memory_controller_in_a = ConvertPixel_142_146;
end
/* ConvertPixel: %142*/
/*   store i32 %149, i32* %150, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_156))
begin
memory_controller_in_a = ConvertPixel_142_149;
end
/* ConvertPixel: %151*/
/*   store i32 %155, i32* %156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_166))
begin
memory_controller_in_a = ConvertPixel_151_155;
end
/* ConvertPixel: %151*/
/*   store i32 %158, i32* %159, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_169))
begin
memory_controller_in_a = ConvertPixel_151_158;
end
/* ConvertPixel: %163*/
/*   store i32 %169, i32* %170, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_182))
begin
memory_controller_in_a = ConvertPixel_163_169;
end
/* ConvertPixel: %174*/
/*   store i32 %175, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_189))
begin
memory_controller_in_a = ConvertPixel_174_175;
end
/* ConvertPixel: %174*/
/*   store i32 %180, i32* %181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_195))
begin
memory_controller_in_a = ConvertPixel_174_180;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* ConvertPixel: %6*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_6_2))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %12*/
/*   %16 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_8))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %12*/
/*   store i32 %17, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_41))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %12*/
/*   store i32 %17, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_42))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %22*/
/*   %24 = load i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_22_44))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %28*/
/*   %29 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_49))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %28*/
/*   store i32 %29, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_51))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %28*/
/*   %32 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_55))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %28*/
/*   store i32 %32, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_57))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %39*/
/*   %41 = load i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_39_62))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %45*/
/*   %46 = load i32* %TransparentColour, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_45_67))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %49*/
/*   %51 = load i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_49_70))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %59*/
/*   %60 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_78))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %59*/
/*   store i32 %60, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_80))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %59*/
/*   store i32 %62, i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_83))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %59*/
/*   store i32 %65, i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_86))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %69*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_69_88))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %74*/
/*   %76 = load i32* %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_74_91))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %79*/
/*   %81 = load i32* %80, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_79_94))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %85*/
/*   store i32 %91, i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_107))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %95*/
/*   %96 = load i32* %TransparentColour, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_95_109))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %99*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_99_112))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %105*/
/*   %107 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_105_115))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %110*/
/*   %112 = load i32* %111, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_110_118))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %116*/
/*   %118 = load i32* %117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_116_121))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %121*/
/*   %123 = load i32* %122, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_121_124))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %128*/
/*   %134 = load i32* %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_135))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %128*/
/*   store i32 %134, i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_137))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %139*/
/*   %141 = load i32* %140, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_139_142))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %142*/
/*   %143 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_145))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %142*/
/*   store i32 %143, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_147))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %142*/
/*   %146 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_151))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %142*/
/*   store i32 %146, i32* %147, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_153))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %142*/
/*   store i32 %149, i32* %150, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_156))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %151*/
/*   %155 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_164))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %151*/
/*   store i32 %155, i32* %156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_166))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %151*/
/*   store i32 %158, i32* %159, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_169))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %163*/
/*   %166 = load i32* %165, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_177))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %163*/
/*   %169 = load i32* %168, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_180))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %163*/
/*   store i32 %169, i32* %170, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_182))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %174*/
/*   %175 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_187))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %174*/
/*   store i32 %175, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_189))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %174*/
/*   %177 = load i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_190))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %174*/
/*   %180 = load i32* %179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_193))
begin
memory_controller_size_a = 2'd2;
end
/* ConvertPixel: %174*/
/*   store i32 %180, i32* %181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_195))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* ConvertPixel: %9*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_9_5))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %12*/
/*   store i32 %17, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_41))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %12*/
/*   store i32 255, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_42))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %22*/
/*   %25 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_22_44))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %27*/
/*   store i32 0, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_27_47))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %28*/
/*   %30 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_52))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %28*/
/*   store i32 %30, i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_54))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %28*/
/*   store i32 255, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_57))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %36*/
/*   %37 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_36_59))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %39*/
/*   %42 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_39_62))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %44*/
/*   store i32 0, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_44_65))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %45*/
/*   %47 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_45_67))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %49*/
/*   %53 = load i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_49_70))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %55*/
/*   store i32 0, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_55_73))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %56*/
/*   %58 = load i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_56_75))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %59*/
/*   %62 = load i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_81))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %59*/
/*   %65 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_84))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %59*/
/*   store i32 255, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_86))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %69*/
/*   %72 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_69_88))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %74*/
/*   %77 = load i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_74_91))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %79*/
/*   %82 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_79_94))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %84*/
/*   store i32 0, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_84_97))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %85*/
/*   %86 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_99))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %85*/
/*   store i32 %86, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_101))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %85*/
/*   %88 = load i32* %87, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_102))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %85*/
/*   store i32 %88, i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_104))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %85*/
/*   %91 = load i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_105))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %85*/
/*   store i32 255, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_107))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %95*/
/*   %97 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_95_109))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %99*/
/*   %103 = load i32* %102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_99_112))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %105*/
/*   %108 = load i32* %87, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_105_115))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %110*/
/*   %114 = load i32* %113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_110_118))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %116*/
/*   %119 = load i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_116_121))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %121*/
/*   %125 = load i32* %124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_121_124))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %127*/
/*   store i32 0, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_127_127))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %128*/
/*   %129 = load i32* %OutPal, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_129))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %128*/
/*   store i32 %129, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_131))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %128*/
/*   %131 = load i32* %130, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_132))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %128*/
/*   store i32 %131, i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_134))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %128*/
/*   %137 = load i32* %136, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_138))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %128*/
/*   store i32 %137, i32* %138, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_140))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %142*/
/*   %144 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_148))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %142*/
/*   store i32 %144, i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_150))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %142*/
/*   %149 = load i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_154))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %151*/
/*   %152 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_158))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %151*/
/*   store i32 %152, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_160))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %151*/
/*   %153 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_161))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %151*/
/*   store i32 %153, i32* %154, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_163))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %151*/
/*   %158 = load i32* %157, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_167))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %160*/
/*   %162 = load i32* %161, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_160_171))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %163*/
/*   %164 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_174))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %163*/
/*   store i32 %164, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_176))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %163*/
/*   store i32 %166, i32* %167, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_179))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %163*/
/*   %172 = load i32* %171, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_183))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %163*/
/*   store i32 %172, i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_185))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %174*/
/*   store i32 %177, i32* %178, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_192))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %174*/
/*   %183 = load i32* %182, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_196))
begin
memory_controller_enable_b = 1'd1;
end
/* ConvertPixel: %174*/
/*   store i32 %183, i32* %184, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_198))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* ConvertPixel: %9*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_9_5))
begin
memory_controller_address_b = ConvertPixel_9_10;
end
/* ConvertPixel: %12*/
/*   store i32 %17, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_41))
begin
memory_controller_address_b = ConvertPixel_12_18_reg;
end
/* ConvertPixel: %12*/
/*   store i32 255, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_42))
begin
memory_controller_address_b = ConvertPixel_12_20_reg;
end
/* ConvertPixel: %22*/
/*   %25 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_22_44))
begin
memory_controller_address_b = arg_DecompPtr;
end
/* ConvertPixel: %27*/
/*   store i32 0, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_27_47))
begin
memory_controller_address_b = ConvertPixel_12_20_reg;
end
/* ConvertPixel: %28*/
/*   %30 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_52))
begin
memory_controller_address_b = arg_DecompPtr;
end
/* ConvertPixel: %28*/
/*   store i32 %30, i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_54))
begin
memory_controller_address_b = ConvertPixel_28_31_reg;
end
/* ConvertPixel: %28*/
/*   store i32 255, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_57))
begin
memory_controller_address_b = ConvertPixel_28_34_reg;
end
/* ConvertPixel: %36*/
/*   %37 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_36_59))
begin
memory_controller_address_b = ConvertPixel_9_10_reg;
end
/* ConvertPixel: %39*/
/*   %42 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_39_62))
begin
memory_controller_address_b = arg_DecompPtr;
end
/* ConvertPixel: %44*/
/*   store i32 0, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_44_65))
begin
memory_controller_address_b = ConvertPixel_28_34_reg;
end
/* ConvertPixel: %45*/
/*   %47 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_45_67))
begin
memory_controller_address_b = arg_DecompPtr;
end
/* ConvertPixel: %49*/
/*   %53 = load i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_49_70))
begin
memory_controller_address_b = ConvertPixel_49_52;
end
/* ConvertPixel: %55*/
/*   store i32 0, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_55_73))
begin
memory_controller_address_b = ConvertPixel_28_34_reg;
end
/* ConvertPixel: %56*/
/*   %58 = load i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_56_75))
begin
memory_controller_address_b = ConvertPixel_56_57;
end
/* ConvertPixel: %59*/
/*   %62 = load i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_81))
begin
memory_controller_address_b = ConvertPixel_59_61_reg;
end
/* ConvertPixel: %59*/
/*   %65 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_84))
begin
memory_controller_address_b = ConvertPixel_59_64_reg;
end
/* ConvertPixel: %59*/
/*   store i32 255, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_86))
begin
memory_controller_address_b = ConvertPixel_59_67_reg;
end
/* ConvertPixel: %69*/
/*   %72 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_69_88))
begin
memory_controller_address_b = arg_DecompPtr;
end
/* ConvertPixel: %74*/
/*   %77 = load i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_74_91))
begin
memory_controller_address_b = ConvertPixel_59_61_reg;
end
/* ConvertPixel: %79*/
/*   %82 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_79_94))
begin
memory_controller_address_b = ConvertPixel_59_64_reg;
end
/* ConvertPixel: %84*/
/*   store i32 0, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_84_97))
begin
memory_controller_address_b = ConvertPixel_59_67_reg;
end
/* ConvertPixel: %85*/
/*   %86 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_99))
begin
memory_controller_address_b = arg_DecompPtr;
end
/* ConvertPixel: %85*/
/*   store i32 %86, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_101))
begin
memory_controller_address_b = arg_OutPtr;
end
/* ConvertPixel: %85*/
/*   %88 = load i32* %87, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_102))
begin
memory_controller_address_b = ConvertPixel_85_87_reg;
end
/* ConvertPixel: %85*/
/*   store i32 %88, i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_104))
begin
memory_controller_address_b = ConvertPixel_85_89_reg;
end
/* ConvertPixel: %85*/
/*   %91 = load i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_105))
begin
memory_controller_address_b = ConvertPixel_85_90_reg;
end
/* ConvertPixel: %85*/
/*   store i32 255, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_107))
begin
memory_controller_address_b = ConvertPixel_85_93_reg;
end
/* ConvertPixel: %95*/
/*   %97 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_95_109))
begin
memory_controller_address_b = arg_DecompPtr;
end
/* ConvertPixel: %99*/
/*   %103 = load i32* %102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_99_112))
begin
memory_controller_address_b = ConvertPixel_99_102;
end
/* ConvertPixel: %105*/
/*   %108 = load i32* %87, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_105_115))
begin
memory_controller_address_b = ConvertPixel_85_87_reg;
end
/* ConvertPixel: %110*/
/*   %114 = load i32* %113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_110_118))
begin
memory_controller_address_b = ConvertPixel_110_113;
end
/* ConvertPixel: %116*/
/*   %119 = load i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_116_121))
begin
memory_controller_address_b = ConvertPixel_85_90_reg;
end
/* ConvertPixel: %121*/
/*   %125 = load i32* %124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_121_124))
begin
memory_controller_address_b = ConvertPixel_121_124;
end
/* ConvertPixel: %127*/
/*   store i32 0, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_127_127))
begin
memory_controller_address_b = ConvertPixel_85_93_reg;
end
/* ConvertPixel: %128*/
/*   %129 = load i32* %OutPal, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_129))
begin
memory_controller_address_b = arg_OutPal;
end
/* ConvertPixel: %128*/
/*   store i32 %129, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_131))
begin
memory_controller_address_b = arg_OutPtr;
end
/* ConvertPixel: %128*/
/*   %131 = load i32* %130, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_132))
begin
memory_controller_address_b = ConvertPixel_128_130_reg;
end
/* ConvertPixel: %128*/
/*   store i32 %131, i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_134))
begin
memory_controller_address_b = ConvertPixel_128_132_reg;
end
/* ConvertPixel: %128*/
/*   %137 = load i32* %136, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_138))
begin
memory_controller_address_b = ConvertPixel_128_136_reg;
end
/* ConvertPixel: %128*/
/*   store i32 %137, i32* %138, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_140))
begin
memory_controller_address_b = ConvertPixel_128_138_reg;
end
/* ConvertPixel: %142*/
/*   %144 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_148))
begin
memory_controller_address_b = arg_DecompPtr;
end
/* ConvertPixel: %142*/
/*   store i32 %144, i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_150))
begin
memory_controller_address_b = ConvertPixel_142_145_reg;
end
/* ConvertPixel: %142*/
/*   %149 = load i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_154))
begin
memory_controller_address_b = ConvertPixel_142_148_reg;
end
/* ConvertPixel: %151*/
/*   %152 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_158))
begin
memory_controller_address_b = arg_DecompPtr;
end
/* ConvertPixel: %151*/
/*   store i32 %152, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_160))
begin
memory_controller_address_b = arg_OutPtr;
end
/* ConvertPixel: %151*/
/*   %153 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_161))
begin
memory_controller_address_b = arg_DecompPtr;
end
/* ConvertPixel: %151*/
/*   store i32 %153, i32* %154, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_163))
begin
memory_controller_address_b = ConvertPixel_151_154_reg;
end
/* ConvertPixel: %151*/
/*   %158 = load i32* %157, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_167))
begin
memory_controller_address_b = ConvertPixel_151_157_reg;
end
/* ConvertPixel: %160*/
/*   %162 = load i32* %161, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_160_171))
begin
memory_controller_address_b = ConvertPixel_160_161;
end
/* ConvertPixel: %163*/
/*   %164 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_174))
begin
memory_controller_address_b = arg_DecompPtr;
end
/* ConvertPixel: %163*/
/*   store i32 %164, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_176))
begin
memory_controller_address_b = arg_OutPtr;
end
/* ConvertPixel: %163*/
/*   store i32 %166, i32* %167, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_179))
begin
memory_controller_address_b = ConvertPixel_163_167_reg;
end
/* ConvertPixel: %163*/
/*   %172 = load i32* %171, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_183))
begin
memory_controller_address_b = ConvertPixel_163_171_reg;
end
/* ConvertPixel: %163*/
/*   store i32 %172, i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_185))
begin
memory_controller_address_b = ConvertPixel_163_173_reg;
end
/* ConvertPixel: %174*/
/*   store i32 %177, i32* %178, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_192))
begin
memory_controller_address_b = ConvertPixel_174_178_reg;
end
/* ConvertPixel: %174*/
/*   %183 = load i32* %182, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_196))
begin
memory_controller_address_b = ConvertPixel_174_182_reg;
end
/* ConvertPixel: %174*/
/*   store i32 %183, i32* %184, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_198))
begin
memory_controller_address_b = ConvertPixel_174_184_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %9*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_9_5))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %12*/
/*   store i32 %17, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_41))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ConvertPixel: %12*/
/*   store i32 255, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_42))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ConvertPixel: %22*/
/*   %25 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_22_44))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %27*/
/*   store i32 0, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_27_47))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ConvertPixel: %28*/
/*   %30 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_52))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %28*/
/*   store i32 %30, i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_54))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ConvertPixel: %28*/
/*   store i32 255, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_57))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ConvertPixel: %36*/
/*   %37 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_36_59))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %39*/
/*   %42 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_39_62))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %44*/
/*   store i32 0, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_44_65))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ConvertPixel: %45*/
/*   %47 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_45_67))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %49*/
/*   %53 = load i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_49_70))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %55*/
/*   store i32 0, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_55_73))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ConvertPixel: %56*/
/*   %58 = load i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_56_75))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %59*/
/*   %62 = load i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_81))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %59*/
/*   %65 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_84))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %59*/
/*   store i32 255, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_86))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ConvertPixel: %69*/
/*   %72 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_69_88))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %74*/
/*   %77 = load i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_74_91))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %79*/
/*   %82 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_79_94))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %84*/
/*   store i32 0, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_84_97))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ConvertPixel: %85*/
/*   %86 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_99))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %85*/
/*   store i32 %86, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_101))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ConvertPixel: %85*/
/*   %88 = load i32* %87, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_102))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %85*/
/*   store i32 %88, i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_104))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ConvertPixel: %85*/
/*   %91 = load i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_105))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %85*/
/*   store i32 255, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_107))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ConvertPixel: %95*/
/*   %97 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_95_109))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %99*/
/*   %103 = load i32* %102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_99_112))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %105*/
/*   %108 = load i32* %87, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_105_115))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %110*/
/*   %114 = load i32* %113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_110_118))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %116*/
/*   %119 = load i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_116_121))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %121*/
/*   %125 = load i32* %124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_121_124))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %127*/
/*   store i32 0, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_127_127))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ConvertPixel: %128*/
/*   %129 = load i32* %OutPal, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_129))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %128*/
/*   store i32 %129, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_131))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ConvertPixel: %128*/
/*   %131 = load i32* %130, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_132))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %128*/
/*   store i32 %131, i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_134))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ConvertPixel: %128*/
/*   %137 = load i32* %136, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_138))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %128*/
/*   store i32 %137, i32* %138, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_140))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ConvertPixel: %142*/
/*   %144 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_148))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %142*/
/*   store i32 %144, i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_150))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ConvertPixel: %142*/
/*   %149 = load i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_154))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %151*/
/*   %152 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_158))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %151*/
/*   store i32 %152, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_160))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ConvertPixel: %151*/
/*   %153 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_161))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %151*/
/*   store i32 %153, i32* %154, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_163))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ConvertPixel: %151*/
/*   %158 = load i32* %157, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_167))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %160*/
/*   %162 = load i32* %161, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_160_171))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %163*/
/*   %164 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_174))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %163*/
/*   store i32 %164, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_176))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ConvertPixel: %163*/
/*   store i32 %166, i32* %167, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_179))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ConvertPixel: %163*/
/*   %172 = load i32* %171, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_183))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %163*/
/*   store i32 %172, i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_185))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ConvertPixel: %174*/
/*   store i32 %177, i32* %178, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_192))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ConvertPixel: %174*/
/*   %183 = load i32* %182, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_196))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ConvertPixel: %174*/
/*   store i32 %183, i32* %184, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_198))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* ConvertPixel: %12*/
/*   store i32 %17, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_41))
begin
memory_controller_in_b = ConvertPixel_12_17;
end
/* ConvertPixel: %12*/
/*   store i32 255, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_42))
begin
memory_controller_in_b = 32'd255;
end
/* ConvertPixel: %27*/
/*   store i32 0, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_27_47))
begin
memory_controller_in_b = 32'd0;
end
/* ConvertPixel: %28*/
/*   store i32 %30, i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_54))
begin
memory_controller_in_b = ConvertPixel_28_30;
end
/* ConvertPixel: %28*/
/*   store i32 255, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_57))
begin
memory_controller_in_b = 32'd255;
end
/* ConvertPixel: %44*/
/*   store i32 0, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_44_65))
begin
memory_controller_in_b = 32'd0;
end
/* ConvertPixel: %55*/
/*   store i32 0, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_55_73))
begin
memory_controller_in_b = 32'd0;
end
/* ConvertPixel: %59*/
/*   store i32 255, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_86))
begin
memory_controller_in_b = 32'd255;
end
/* ConvertPixel: %84*/
/*   store i32 0, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_84_97))
begin
memory_controller_in_b = 32'd0;
end
/* ConvertPixel: %85*/
/*   store i32 %86, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_101))
begin
memory_controller_in_b = ConvertPixel_85_86;
end
/* ConvertPixel: %85*/
/*   store i32 %88, i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_104))
begin
memory_controller_in_b = ConvertPixel_85_88;
end
/* ConvertPixel: %85*/
/*   store i32 255, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_107))
begin
memory_controller_in_b = 32'd255;
end
/* ConvertPixel: %127*/
/*   store i32 0, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_127_127))
begin
memory_controller_in_b = 32'd0;
end
/* ConvertPixel: %128*/
/*   store i32 %129, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_131))
begin
memory_controller_in_b = ConvertPixel_128_129;
end
/* ConvertPixel: %128*/
/*   store i32 %131, i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_134))
begin
memory_controller_in_b = ConvertPixel_128_131;
end
/* ConvertPixel: %128*/
/*   store i32 %137, i32* %138, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_140))
begin
memory_controller_in_b = ConvertPixel_128_137;
end
/* ConvertPixel: %142*/
/*   store i32 %144, i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_150))
begin
memory_controller_in_b = ConvertPixel_142_144;
end
/* ConvertPixel: %151*/
/*   store i32 %152, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_160))
begin
memory_controller_in_b = ConvertPixel_151_152;
end
/* ConvertPixel: %151*/
/*   store i32 %153, i32* %154, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_163))
begin
memory_controller_in_b = ConvertPixel_151_153;
end
/* ConvertPixel: %163*/
/*   store i32 %164, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_176))
begin
memory_controller_in_b = ConvertPixel_163_164;
end
/* ConvertPixel: %163*/
/*   store i32 %166, i32* %167, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_179))
begin
memory_controller_in_b = ConvertPixel_163_166;
end
/* ConvertPixel: %163*/
/*   store i32 %172, i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_185))
begin
memory_controller_in_b = ConvertPixel_163_172;
end
/* ConvertPixel: %174*/
/*   store i32 %177, i32* %178, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_192))
begin
memory_controller_in_b = ConvertPixel_174_177;
end
/* ConvertPixel: %174*/
/*   store i32 %183, i32* %184, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_198))
begin
memory_controller_in_b = ConvertPixel_174_183;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* ConvertPixel: %9*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_9_5))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %12*/
/*   store i32 %17, i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_41))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %12*/
/*   store i32 255, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_12_42))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %22*/
/*   %25 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_22_44))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %27*/
/*   store i32 0, i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_27_47))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %28*/
/*   %30 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_52))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %28*/
/*   store i32 %30, i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_54))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %28*/
/*   store i32 255, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_28_57))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %36*/
/*   %37 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_36_59))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %39*/
/*   %42 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_39_62))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %44*/
/*   store i32 0, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_44_65))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %45*/
/*   %47 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_45_67))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %49*/
/*   %53 = load i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_49_70))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %55*/
/*   store i32 0, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_55_73))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %56*/
/*   %58 = load i32* %57, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_56_75))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %59*/
/*   %62 = load i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_81))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %59*/
/*   %65 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_84))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %59*/
/*   store i32 255, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_59_86))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %69*/
/*   %72 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_69_88))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %74*/
/*   %77 = load i32* %61, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_74_91))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %79*/
/*   %82 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_79_94))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %84*/
/*   store i32 0, i32* %67, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_84_97))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %85*/
/*   %86 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_99))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %85*/
/*   store i32 %86, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_101))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %85*/
/*   %88 = load i32* %87, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_102))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %85*/
/*   store i32 %88, i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_104))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %85*/
/*   %91 = load i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_105))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %85*/
/*   store i32 255, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_85_107))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %95*/
/*   %97 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_95_109))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %99*/
/*   %103 = load i32* %102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_99_112))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %105*/
/*   %108 = load i32* %87, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_105_115))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %110*/
/*   %114 = load i32* %113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_110_118))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %116*/
/*   %119 = load i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_116_121))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %121*/
/*   %125 = load i32* %124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_121_124))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %127*/
/*   store i32 0, i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_127_127))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %128*/
/*   %129 = load i32* %OutPal, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_129))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %128*/
/*   store i32 %129, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_131))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %128*/
/*   %131 = load i32* %130, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_132))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %128*/
/*   store i32 %131, i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_134))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %128*/
/*   %137 = load i32* %136, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_138))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %128*/
/*   store i32 %137, i32* %138, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_128_140))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %142*/
/*   %144 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_148))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %142*/
/*   store i32 %144, i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_150))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %142*/
/*   %149 = load i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_142_154))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %151*/
/*   %152 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_158))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %151*/
/*   store i32 %152, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_160))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %151*/
/*   %153 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_161))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %151*/
/*   store i32 %153, i32* %154, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_163))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %151*/
/*   %158 = load i32* %157, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_151_167))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %160*/
/*   %162 = load i32* %161, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_160_171))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %163*/
/*   %164 = load i32* %DecompPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_174))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %163*/
/*   store i32 %164, i32* %OutPtr, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_176))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %163*/
/*   store i32 %166, i32* %167, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_179))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %163*/
/*   %172 = load i32* %171, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_183))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %163*/
/*   store i32 %172, i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_163_185))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %174*/
/*   store i32 %177, i32* %178, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_192))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %174*/
/*   %183 = load i32* %182, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_196))
begin
memory_controller_size_b = 2'd2;
end
/* ConvertPixel: %174*/
/*   store i32 %183, i32* %184, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_174_198))
begin
memory_controller_size_b = 2'd2;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* ConvertPixel: %185*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_ConvertPixel_BB_185_200))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg [31:0] main_0_1;
reg [31:0] main_0_1_reg;
reg  ConvertPixel_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_arg_IHDR;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_arg_OutPtr;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_arg_DecompPtr;
reg [31:0] ConvertPixel_arg_HasTransparentColour;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_arg_TransparentColour;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_arg_OutPal;
wire  ConvertPixel_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_memory_controller_address_a;
wire  ConvertPixel_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] ConvertPixel_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] ConvertPixel_memory_controller_out_a;
wire [1:0] ConvertPixel_memory_controller_size_a;
wire  ConvertPixel_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ConvertPixel_memory_controller_address_b;
wire  ConvertPixel_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] ConvertPixel_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] ConvertPixel_memory_controller_out_b;
wire [1:0] ConvertPixel_memory_controller_size_b;
reg  ConvertPixel_memory_controller_waitrequest;
wire  ConvertPixel_finish;
reg  ConvertPixel_finish_final;
wire [31:0] ConvertPixel_return_val;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


ConvertPixel ConvertPixel_inst (
	.memory_controller_enable_a (ConvertPixel_memory_controller_enable_a),
	.memory_controller_address_a (ConvertPixel_memory_controller_address_a),
	.memory_controller_write_enable_a (ConvertPixel_memory_controller_write_enable_a),
	.memory_controller_in_a (ConvertPixel_memory_controller_in_a),
	.memory_controller_size_a (ConvertPixel_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (ConvertPixel_memory_controller_enable_b),
	.memory_controller_address_b (ConvertPixel_memory_controller_address_b),
	.memory_controller_write_enable_b (ConvertPixel_memory_controller_write_enable_b),
	.memory_controller_in_b (ConvertPixel_memory_controller_in_b),
	.memory_controller_size_b (ConvertPixel_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (ConvertPixel_start),
	.finish (ConvertPixel_finish),
	.return_val (ConvertPixel_return_val),
	.arg_IHDR (ConvertPixel_arg_IHDR),
	.arg_OutPtr (ConvertPixel_arg_OutPtr),
	.arg_DecompPtr (ConvertPixel_arg_DecompPtr),
	.arg_HasTransparentColour (ConvertPixel_arg_HasTransparentColour),
	.arg_TransparentColour (ConvertPixel_arg_TransparentColour),
	.arg_OutPal (ConvertPixel_arg_OutPal)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (ConvertPixel_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
begin
main_0_1 = ConvertPixel_return_val;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
main_0_1_reg <= main_0_1;
if (reset == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_1_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
ConvertPixel_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_start"); $finish; end
end
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
ConvertPixel_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
ConvertPixel_arg_IHDR <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_arg_IHDR"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
ConvertPixel_arg_OutPtr <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_arg_OutPtr"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
ConvertPixel_arg_DecompPtr <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_arg_DecompPtr"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
ConvertPixel_arg_HasTransparentColour <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_arg_HasTransparentColour"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
ConvertPixel_arg_TransparentColour <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_arg_TransparentColour"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
ConvertPixel_arg_OutPal <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ConvertPixel_arg_OutPal"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
begin
ConvertPixel_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
begin
ConvertPixel_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
ConvertPixel_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
ConvertPixel_finish_final = ConvertPixel_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = ConvertPixel_memory_controller_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = ConvertPixel_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ConvertPixel_memory_controller_address_a;
end
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ConvertPixel_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = ConvertPixel_memory_controller_write_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = ConvertPixel_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ConvertPixel_memory_controller_in_a;
end
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ConvertPixel_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = ConvertPixel_memory_controller_size_a;
end
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = ConvertPixel_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = ConvertPixel_memory_controller_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = ConvertPixel_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ConvertPixel_memory_controller_address_b;
end
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ConvertPixel_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = ConvertPixel_memory_controller_write_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = ConvertPixel_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ConvertPixel_memory_controller_in_b;
end
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ConvertPixel_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = ConvertPixel_memory_controller_size_b;
end
/* main: %0*/
/*   %1 = tail call i32 @ConvertPixel(%struct.PNG_Chunk_IHDR* undef, i32* undef, i32* undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = ConvertPixel_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
