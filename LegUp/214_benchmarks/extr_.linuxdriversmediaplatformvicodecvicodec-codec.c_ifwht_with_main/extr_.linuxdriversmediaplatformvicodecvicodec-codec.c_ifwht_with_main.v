//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:55:36 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module ifwht
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_block,
	arg_output_block,
	arg_intra
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_ifwht_BB__preheader6_1 = 6'd1;
parameter [5:0] LEGUP_F_ifwht_BB_1_2 = 6'd2;
parameter [5:0] LEGUP_F_ifwht_BB_1_3 = 6'd3;
parameter [5:0] LEGUP_F_ifwht_BB_1_4 = 6'd4;
parameter [5:0] LEGUP_F_ifwht_BB_1_5 = 6'd5;
parameter [5:0] LEGUP_F_ifwht_BB_1_6 = 6'd6;
parameter [5:0] LEGUP_F_ifwht_BB_1_7 = 6'd7;
parameter [5:0] LEGUP_F_ifwht_BB_1_8 = 6'd8;
parameter [5:0] LEGUP_F_ifwht_BB_1_9 = 6'd9;
parameter [5:0] LEGUP_F_ifwht_BB_1_10 = 6'd10;
parameter [5:0] LEGUP_F_ifwht_BB_1_11 = 6'd11;
parameter [5:0] LEGUP_F_ifwht_BB_35_12 = 6'd12;
parameter [5:0] LEGUP_F_ifwht_BB_35_13 = 6'd13;
parameter [5:0] LEGUP_F_ifwht_BB_35_14 = 6'd14;
parameter [5:0] LEGUP_F_ifwht_BB_35_15 = 6'd15;
parameter [5:0] LEGUP_F_ifwht_BB_35_16 = 6'd16;
parameter [5:0] LEGUP_F_ifwht_BB_35_17 = 6'd17;
parameter [5:0] LEGUP_F_ifwht_BB_35_18 = 6'd18;
parameter [5:0] LEGUP_F_ifwht_BB_35_19 = 6'd19;
parameter [5:0] LEGUP_F_ifwht_BB_35_20 = 6'd20;
parameter [5:0] LEGUP_F_ifwht_BB_35_21 = 6'd21;
parameter [5:0] LEGUP_F_ifwht_BB_35_22 = 6'd22;
parameter [5:0] LEGUP_F_ifwht_BB__preheader3_23 = 6'd23;
parameter [5:0] LEGUP_F_ifwht_BB__preheader3_24 = 6'd24;
parameter [5:0] LEGUP_F_ifwht_BB__preheader3_25 = 6'd25;
parameter [5:0] LEGUP_F_ifwht_BB__preheader3_26 = 6'd26;
parameter [5:0] LEGUP_F_ifwht_BB__preheader3_27 = 6'd27;
parameter [5:0] LEGUP_F_ifwht_BB__preheader_28 = 6'd28;
parameter [5:0] LEGUP_F_ifwht_BB__preheader_29 = 6'd29;
parameter [5:0] LEGUP_F_ifwht_BB__preheader_30 = 6'd30;
parameter [5:0] LEGUP_F_ifwht_BB__preheader_31 = 6'd31;
parameter [5:0] LEGUP_F_ifwht_BB__preheader_32 = 6'd32;
parameter [5:0] LEGUP_F_ifwht_BB_91_33 = 6'd33;
parameter [5:0] LEGUP_F_ifwht_BB_91_34 = 6'd34;
parameter [5:0] LEGUP_F_ifwht_BB_93_35 = 6'd35;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_block;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_output_block;
input [31:0] arg_intra;
reg [5:0] cur_state;
reg  ifwht__preheader6_not_;
reg  ifwht__preheader6_not__reg;
reg [31:0] ifwht_1_i_012;
reg [31:0] ifwht_1_i_012_reg;
reg [31:0] ifwht_1_tmp31;
reg [31:0] ifwht_1_tmp31_reg;
reg [31:0] ifwht_1_tmp3254;
reg [31:0] ifwht_1_tmp3254_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep_reg;
reg [31:0] ifwht_1_tmp3355;
reg [31:0] ifwht_1_tmp3355_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep34_reg;
reg [31:0] ifwht_1_tmp3556;
reg [31:0] ifwht_1_tmp3556_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep36_reg;
reg [31:0] ifwht_1_tmp3757;
reg [31:0] ifwht_1_tmp3757_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep38_reg;
reg [31:0] ifwht_1_tmp3958;
reg [31:0] ifwht_1_tmp3958_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep40_reg;
reg [31:0] ifwht_1_tmp4159;
reg [31:0] ifwht_1_tmp4159_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep42_reg;
reg [31:0] ifwht_1_tmp4360;
reg [31:0] ifwht_1_tmp4360_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_out_011;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_out_011_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep46_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_scevgep52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_tmp_010;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_1_tmp_010_reg;
reg [31:0] ifwht_1_2;
reg [31:0] ifwht_1_2_reg;
reg [31:0] ifwht_1_3;
reg [31:0] ifwht_1_3_reg;
reg [31:0] ifwht_1_4;
reg [31:0] ifwht_1_4_reg;
reg [31:0] ifwht_1_5;
reg [31:0] ifwht_1_5_reg;
reg [31:0] ifwht_1_6;
reg [31:0] ifwht_1_6_reg;
reg [31:0] ifwht_1_7;
reg [31:0] ifwht_1_7_reg;
reg [31:0] ifwht_1_8;
reg [31:0] ifwht_1_8_reg;
reg [31:0] ifwht_1_9;
reg [31:0] ifwht_1_9_reg;
reg [31:0] ifwht_1_10;
reg [31:0] ifwht_1_10_reg;
reg [31:0] ifwht_1_11;
reg [31:0] ifwht_1_11_reg;
reg [31:0] ifwht_1_12;
reg [31:0] ifwht_1_12_reg;
reg [31:0] ifwht_1_13;
reg [31:0] ifwht_1_13_reg;
reg [31:0] ifwht_1_14;
reg [31:0] ifwht_1_14_reg;
reg [31:0] ifwht_1_15;
reg [31:0] ifwht_1_15_reg;
reg [31:0] ifwht_1_16;
reg [31:0] ifwht_1_16_reg;
reg [31:0] ifwht_1_17;
reg [31:0] ifwht_1_17_reg;
reg [31:0] ifwht_1_18;
reg [31:0] ifwht_1_18_reg;
reg [31:0] ifwht_1_19;
reg [31:0] ifwht_1_19_reg;
reg [31:0] ifwht_1_20;
reg [31:0] ifwht_1_20_reg;
reg [31:0] ifwht_1_21;
reg [31:0] ifwht_1_21_reg;
reg [31:0] ifwht_1_22;
reg [31:0] ifwht_1_22_reg;
reg [31:0] ifwht_1_23;
reg [31:0] ifwht_1_23_reg;
reg [31:0] ifwht_1_24;
reg [31:0] ifwht_1_24_reg;
reg [31:0] ifwht_1_25;
reg [31:0] ifwht_1_25_reg;
reg [31:0] ifwht_1_26;
reg [31:0] ifwht_1_26_reg;
reg [31:0] ifwht_1_27;
reg [31:0] ifwht_1_27_reg;
reg [31:0] ifwht_1_28;
reg [31:0] ifwht_1_28_reg;
reg [31:0] ifwht_1_29;
reg [31:0] ifwht_1_29_reg;
reg [31:0] ifwht_1_30;
reg [31:0] ifwht_1_30_reg;
reg [31:0] ifwht_1_31;
reg [31:0] ifwht_1_31_reg;
reg [31:0] ifwht_1_32;
reg [31:0] ifwht_1_32_reg;
reg [31:0] ifwht_1_33;
reg [31:0] ifwht_1_33_reg;
reg [31:0] ifwht_1_34;
reg [31:0] ifwht_1_34_reg;
reg  ifwht_1_exitcond30;
reg  ifwht_1_exitcond30_reg;
reg [31:0] ifwht_35_i_19;
reg [31:0] ifwht_35_i_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_35_out_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_35_out_17_reg;
reg [31:0] ifwht_35_tmp;
reg [31:0] ifwht_35_tmp_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_35_scevgep_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_35_scevgep_7_reg;
reg [31:0] ifwht_35_tmp18;
reg [31:0] ifwht_35_tmp18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_35_scevgep_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_35_scevgep_6_reg;
reg [31:0] ifwht_35_tmp20;
reg [31:0] ifwht_35_tmp20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_35_scevgep_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_35_scevgep_5_reg;
reg [31:0] ifwht_35_tmp22;
reg [31:0] ifwht_35_tmp22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_35_scevgep_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_35_scevgep_4_reg;
reg [31:0] ifwht_35_tmp24;
reg [31:0] ifwht_35_tmp24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_35_scevgep_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_35_scevgep_3_reg;
reg [31:0] ifwht_35_tmp26;
reg [31:0] ifwht_35_tmp26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_35_scevgep_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_35_scevgep_2_reg;
reg [31:0] ifwht_35_tmp28;
reg [31:0] ifwht_35_tmp28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_35_scevgep_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_35_scevgep_1_reg;
reg [31:0] ifwht_35_36;
reg [31:0] ifwht_35_36_reg;
reg [31:0] ifwht_35_37;
reg [31:0] ifwht_35_37_reg;
reg [31:0] ifwht_35_38;
reg [31:0] ifwht_35_38_reg;
reg [31:0] ifwht_35_39;
reg [31:0] ifwht_35_39_reg;
reg [31:0] ifwht_35_40;
reg [31:0] ifwht_35_40_reg;
reg [31:0] ifwht_35_41;
reg [31:0] ifwht_35_41_reg;
reg [31:0] ifwht_35_42;
reg [31:0] ifwht_35_42_reg;
reg [31:0] ifwht_35_43;
reg [31:0] ifwht_35_43_reg;
reg [31:0] ifwht_35_44;
reg [31:0] ifwht_35_44_reg;
reg [31:0] ifwht_35_45;
reg [31:0] ifwht_35_45_reg;
reg [31:0] ifwht_35_46;
reg [31:0] ifwht_35_46_reg;
reg [31:0] ifwht_35_47;
reg [31:0] ifwht_35_47_reg;
reg [31:0] ifwht_35_48;
reg [31:0] ifwht_35_48_reg;
reg [31:0] ifwht_35_49;
reg [31:0] ifwht_35_49_reg;
reg [31:0] ifwht_35_50;
reg [31:0] ifwht_35_50_reg;
reg [31:0] ifwht_35_51;
reg [31:0] ifwht_35_51_reg;
reg [31:0] ifwht_35_52;
reg [31:0] ifwht_35_52_reg;
reg [31:0] ifwht_35_53;
reg [31:0] ifwht_35_53_reg;
reg [31:0] ifwht_35_54;
reg [31:0] ifwht_35_54_reg;
reg [31:0] ifwht_35_55;
reg [31:0] ifwht_35_55_reg;
reg [31:0] ifwht_35_56;
reg [31:0] ifwht_35_56_reg;
reg [31:0] ifwht_35_57;
reg [31:0] ifwht_35_57_reg;
reg [31:0] ifwht_35_58;
reg [31:0] ifwht_35_58_reg;
reg [31:0] ifwht_35_59;
reg [31:0] ifwht_35_59_reg;
reg [31:0] ifwht_35_60;
reg [31:0] ifwht_35_60_reg;
reg [31:0] ifwht_35_61;
reg [31:0] ifwht_35_61_reg;
reg [31:0] ifwht_35_62;
reg [31:0] ifwht_35_62_reg;
reg [31:0] ifwht_35_63;
reg [31:0] ifwht_35_63_reg;
reg [31:0] ifwht_35_64;
reg [31:0] ifwht_35_64_reg;
reg [31:0] ifwht_35_65;
reg [31:0] ifwht_35_65_reg;
reg [31:0] ifwht_35_66;
reg [31:0] ifwht_35_66_reg;
reg [31:0] ifwht_35_67;
reg [31:0] ifwht_35_67_reg;
reg [31:0] ifwht_35_68;
reg [31:0] ifwht_35_68_reg;
reg [31:0] ifwht__preheader3_69;
reg [31:0] ifwht__preheader3_69_reg;
reg [31:0] ifwht__preheader3_70;
reg [31:0] ifwht__preheader3_70_reg;
reg [31:0] ifwht__preheader3_71;
reg [31:0] ifwht__preheader3_71_reg;
reg [31:0] ifwht__preheader3_72;
reg [31:0] ifwht__preheader3_72_reg;
reg [31:0] ifwht__preheader3_73;
reg [31:0] ifwht__preheader3_73_reg;
reg [31:0] ifwht__preheader3_74;
reg [31:0] ifwht__preheader3_74_reg;
reg [31:0] ifwht__preheader3_75;
reg [31:0] ifwht__preheader3_75_reg;
reg [31:0] ifwht__preheader3_76;
reg [31:0] ifwht__preheader3_76_reg;
reg [31:0] ifwht__preheader3_77;
reg [31:0] ifwht__preheader3_77_reg;
reg [31:0] ifwht__preheader3_78;
reg [31:0] ifwht__preheader3_78_reg;
reg [31:0] ifwht__preheader3_79;
reg [31:0] ifwht__preheader3_79_reg;
reg [31:0] ifwht__preheader3_80;
reg [31:0] ifwht__preheader3_80_reg;
reg [31:0] ifwht__preheader3_81;
reg [31:0] ifwht__preheader3_81_reg;
reg [31:0] ifwht__preheader3_82;
reg [31:0] ifwht__preheader3_82_reg;
reg [31:0] ifwht__preheader3_83;
reg [31:0] ifwht__preheader3_83_reg;
reg [31:0] ifwht__preheader_84;
reg [31:0] ifwht__preheader_84_reg;
reg [31:0] ifwht__preheader_85;
reg [31:0] ifwht__preheader_85_reg;
reg [31:0] ifwht__preheader_86;
reg [31:0] ifwht__preheader_86_reg;
reg [31:0] ifwht__preheader_87;
reg [31:0] ifwht__preheader_87_reg;
reg [31:0] ifwht__preheader_88;
reg [31:0] ifwht__preheader_88_reg;
reg [31:0] ifwht__preheader_89;
reg [31:0] ifwht__preheader_89_reg;
reg [31:0] ifwht__preheader_90;
reg [31:0] ifwht__preheader_90_reg;
reg [31:0] ifwht_91_storemerge;
reg [31:0] ifwht_91_storemerge_reg;
reg [31:0] ifwht_91_92;
reg [31:0] ifwht_91_92_reg;
reg  ifwht_91_exitcond;
reg  ifwht_91_exitcond_reg;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_1_2;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB__preheader6_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB__preheader6_1;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB__preheader6_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB__preheader6_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_35_12;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_35_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_1_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_1_2;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_1_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_1_3;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_1_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_1_3;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_1_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_1_4;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_1_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_1_4;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_1_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_1_5;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_1_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_1_5;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_1_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_1_6;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_1_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_1_6;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_1_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_1_7;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_1_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_1_7;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_1_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_1_8;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_1_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_1_8;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_1_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_1_9;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_1_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_1_9;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_1_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_1_10;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_1_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_1_10;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_1_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_1_11;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_1_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_1_11;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ifwht_BB_1_11) & (memory_controller_waitrequest == 1'd0)) & (ifwht_1_exitcond30_reg == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB__preheader6_1;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB__preheader6_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ifwht_BB_1_11) & (memory_controller_waitrequest == 1'd0)) & (ifwht_1_exitcond30_reg == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_1_2;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_35_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_35_12;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_35_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_35_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_35_13;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_35_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_35_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_35_13;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_35_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_35_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_35_14;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_35_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_35_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_35_14;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_35_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_35_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_35_15;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_35_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_35_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_35_15;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_35_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_35_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_35_16;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_35_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_35_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_35_16;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_35_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_35_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_35_17;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_35_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_35_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_35_17;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_35_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_35_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_35_18;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_35_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_35_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_35_18;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_35_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_35_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_35_19;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_35_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_35_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_35_19;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_35_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_35_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_35_20;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_35_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_35_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_35_20;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_35_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_35_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_35_21;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_35_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_35_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_35_21;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_35_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_35_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_35_22;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_35_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_35_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_35_22;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_35_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ifwht_BB_35_22) & (memory_controller_waitrequest == 1'd0)) & (ifwht__preheader6_not__reg == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB__preheader_28;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB__preheader_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ifwht_BB_35_22) & (memory_controller_waitrequest == 1'd0)) & (ifwht__preheader6_not__reg == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB__preheader3_23;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB__preheader3_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB__preheader3_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB__preheader3_23;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB__preheader3_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB__preheader3_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB__preheader3_24;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB__preheader3_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB__preheader3_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB__preheader3_24;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB__preheader3_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB__preheader3_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB__preheader3_25;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB__preheader3_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB__preheader3_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB__preheader3_25;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB__preheader3_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB__preheader3_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB__preheader3_26;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB__preheader3_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB__preheader3_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB__preheader3_26;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB__preheader3_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB__preheader3_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB__preheader3_27;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB__preheader3_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB__preheader3_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB__preheader3_27;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB__preheader3_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB__preheader3_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_91_33;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_91_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB__preheader_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB__preheader_28;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB__preheader_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB__preheader_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB__preheader_29;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB__preheader_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB__preheader_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB__preheader_29;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB__preheader_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB__preheader_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB__preheader_30;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB__preheader_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB__preheader_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB__preheader_30;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB__preheader_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB__preheader_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB__preheader_31;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB__preheader_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB__preheader_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB__preheader_31;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB__preheader_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB__preheader_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB__preheader_32;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB__preheader_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB__preheader_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB__preheader_32;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB__preheader_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB__preheader_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_91_33;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_91_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_91_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_91_33;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_91_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_91_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_91_34;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_91_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_91_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_91_34;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_91_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ifwht_BB_91_34) & (memory_controller_waitrequest == 1'd0)) & (ifwht_91_exitcond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_93_35;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_93_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ifwht_BB_91_34) & (memory_controller_waitrequest == 1'd0)) & (ifwht_91_exitcond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_ifwht_BB_35_12;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_35_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_93_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ifwht_BB_93_35;
if (reset == 1'b0 && ^(LEGUP_F_ifwht_BB_93_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ifwht_BB_93_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 6'd0;
if (reset == 1'b0 && ^(6'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* ifwht: %.preheader6*/
/*   %not. = icmp eq i32 %intra, 0*/
begin
ifwht__preheader6_not_ = (arg_intra == 32'd0);
end
end
always @(posedge clk) begin
/* ifwht: %.preheader6*/
/*   %not. = icmp eq i32 %intra, 0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader6_1))
begin
ifwht__preheader6_not__reg <= ifwht__preheader6_not_;
if (reset == 1'b0 && ^(ifwht__preheader6_not_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht__preheader6_not__reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %i.012 = phi i32 [ 0, %0 ], [ %34, %1 ]*/
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
ifwht_1_i_012 = 32'd0;
end
/* ifwht: %1*/
/*   %i.012 = phi i32 [ 0, %0 ], [ %34, %1 ]*/
else /* if ((((cur_state == LEGUP_F_ifwht_BB_1_11) & (memory_controller_waitrequest == 1'd0)) & (ifwht_1_exitcond30_reg == 1'd0))) */
begin
ifwht_1_i_012 = ifwht_1_34_reg;
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %i.012 = phi i32 [ 0, %0 ], [ %34, %1 ]*/
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
ifwht_1_i_012_reg <= ifwht_1_i_012;
if (reset == 1'b0 && ^(ifwht_1_i_012) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_i_012_reg"); $finish; end
end
/* ifwht: %1*/
/*   %i.012 = phi i32 [ 0, %0 ], [ %34, %1 ]*/
if ((((cur_state == LEGUP_F_ifwht_BB_1_11) & (memory_controller_waitrequest == 1'd0)) & (ifwht_1_exitcond30_reg == 1'd0)))
begin
ifwht_1_i_012_reg <= ifwht_1_i_012;
if (reset == 1'b0 && ^(ifwht_1_i_012) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_i_012_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %tmp31 = shl i32 %i.012, 3*/
begin
ifwht_1_tmp31 = (ifwht_1_i_012_reg <<< (32'd3 % 32));
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %tmp31 = shl i32 %i.012, 3*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_tmp31_reg <= ifwht_1_tmp31;
if (reset == 1'b0 && ^(ifwht_1_tmp31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_tmp31_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %tmp3254 = or i32 %tmp31, 1*/
begin
ifwht_1_tmp3254 = (ifwht_1_tmp31 | 32'd1);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %tmp3254 = or i32 %tmp31, 1*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_tmp3254_reg <= ifwht_1_tmp3254;
if (reset == 1'b0 && ^(ifwht_1_tmp3254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_tmp3254_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %scevgep = getelementptr i32* %output_block, i32 %tmp3254*/
begin
ifwht_1_scevgep = (arg_output_block + (4 * ifwht_1_tmp3254));
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %scevgep = getelementptr i32* %output_block, i32 %tmp3254*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_scevgep_reg <= ifwht_1_scevgep;
if (reset == 1'b0 && ^(ifwht_1_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %tmp3355 = or i32 %tmp31, 2*/
begin
ifwht_1_tmp3355 = (ifwht_1_tmp31 | 32'd2);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %tmp3355 = or i32 %tmp31, 2*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_tmp3355_reg <= ifwht_1_tmp3355;
if (reset == 1'b0 && ^(ifwht_1_tmp3355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_tmp3355_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %scevgep34 = getelementptr i32* %output_block, i32 %tmp3355*/
begin
ifwht_1_scevgep34 = (arg_output_block + (4 * ifwht_1_tmp3355));
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %scevgep34 = getelementptr i32* %output_block, i32 %tmp3355*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_scevgep34_reg <= ifwht_1_scevgep34;
if (reset == 1'b0 && ^(ifwht_1_scevgep34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_scevgep34_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %tmp3556 = or i32 %tmp31, 3*/
begin
ifwht_1_tmp3556 = (ifwht_1_tmp31 | 32'd3);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %tmp3556 = or i32 %tmp31, 3*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_tmp3556_reg <= ifwht_1_tmp3556;
if (reset == 1'b0 && ^(ifwht_1_tmp3556) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_tmp3556_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %scevgep36 = getelementptr i32* %output_block, i32 %tmp3556*/
begin
ifwht_1_scevgep36 = (arg_output_block + (4 * ifwht_1_tmp3556));
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %scevgep36 = getelementptr i32* %output_block, i32 %tmp3556*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_scevgep36_reg <= ifwht_1_scevgep36;
if (reset == 1'b0 && ^(ifwht_1_scevgep36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_scevgep36_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %tmp3757 = or i32 %tmp31, 4*/
begin
ifwht_1_tmp3757 = (ifwht_1_tmp31 | 32'd4);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %tmp3757 = or i32 %tmp31, 4*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_tmp3757_reg <= ifwht_1_tmp3757;
if (reset == 1'b0 && ^(ifwht_1_tmp3757) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_tmp3757_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %scevgep38 = getelementptr i32* %output_block, i32 %tmp3757*/
begin
ifwht_1_scevgep38 = (arg_output_block + (4 * ifwht_1_tmp3757));
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %scevgep38 = getelementptr i32* %output_block, i32 %tmp3757*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_scevgep38_reg <= ifwht_1_scevgep38;
if (reset == 1'b0 && ^(ifwht_1_scevgep38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_scevgep38_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %tmp3958 = or i32 %tmp31, 5*/
begin
ifwht_1_tmp3958 = (ifwht_1_tmp31 | 32'd5);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %tmp3958 = or i32 %tmp31, 5*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_tmp3958_reg <= ifwht_1_tmp3958;
if (reset == 1'b0 && ^(ifwht_1_tmp3958) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_tmp3958_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %scevgep40 = getelementptr i32* %output_block, i32 %tmp3958*/
begin
ifwht_1_scevgep40 = (arg_output_block + (4 * ifwht_1_tmp3958));
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %scevgep40 = getelementptr i32* %output_block, i32 %tmp3958*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_scevgep40_reg <= ifwht_1_scevgep40;
if (reset == 1'b0 && ^(ifwht_1_scevgep40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_scevgep40_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %tmp4159 = or i32 %tmp31, 6*/
begin
ifwht_1_tmp4159 = (ifwht_1_tmp31 | 32'd6);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %tmp4159 = or i32 %tmp31, 6*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_tmp4159_reg <= ifwht_1_tmp4159;
if (reset == 1'b0 && ^(ifwht_1_tmp4159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_tmp4159_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %scevgep42 = getelementptr i32* %output_block, i32 %tmp4159*/
begin
ifwht_1_scevgep42 = (arg_output_block + (4 * ifwht_1_tmp4159));
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %scevgep42 = getelementptr i32* %output_block, i32 %tmp4159*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_scevgep42_reg <= ifwht_1_scevgep42;
if (reset == 1'b0 && ^(ifwht_1_scevgep42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_scevgep42_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %tmp4360 = or i32 %tmp31, 7*/
begin
ifwht_1_tmp4360 = (ifwht_1_tmp31 | 32'd7);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %tmp4360 = or i32 %tmp31, 7*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_tmp4360_reg <= ifwht_1_tmp4360;
if (reset == 1'b0 && ^(ifwht_1_tmp4360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_tmp4360_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %scevgep44 = getelementptr i32* %output_block, i32 %tmp4360*/
begin
ifwht_1_scevgep44 = (arg_output_block + (4 * ifwht_1_tmp4360));
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %scevgep44 = getelementptr i32* %output_block, i32 %tmp4360*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_scevgep44_reg <= ifwht_1_scevgep44;
if (reset == 1'b0 && ^(ifwht_1_scevgep44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_scevgep44_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %out.011 = getelementptr i32* %output_block, i32 %tmp31*/
begin
ifwht_1_out_011 = (arg_output_block + (4 * ifwht_1_tmp31));
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %out.011 = getelementptr i32* %output_block, i32 %tmp31*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_out_011_reg <= ifwht_1_out_011;
if (reset == 1'b0 && ^(ifwht_1_out_011) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_out_011_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %scevgep46 = getelementptr i32* %block, i32 %tmp3254*/
begin
ifwht_1_scevgep46 = (arg_block + (4 * ifwht_1_tmp3254));
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %scevgep46 = getelementptr i32* %block, i32 %tmp3254*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_scevgep46_reg <= ifwht_1_scevgep46;
if (reset == 1'b0 && ^(ifwht_1_scevgep46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_scevgep46_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %scevgep47 = getelementptr i32* %block, i32 %tmp3355*/
begin
ifwht_1_scevgep47 = (arg_block + (4 * ifwht_1_tmp3355));
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %scevgep47 = getelementptr i32* %block, i32 %tmp3355*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_scevgep47_reg <= ifwht_1_scevgep47;
if (reset == 1'b0 && ^(ifwht_1_scevgep47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_scevgep47_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %scevgep48 = getelementptr i32* %block, i32 %tmp3556*/
begin
ifwht_1_scevgep48 = (arg_block + (4 * ifwht_1_tmp3556));
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %scevgep48 = getelementptr i32* %block, i32 %tmp3556*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_scevgep48_reg <= ifwht_1_scevgep48;
if (reset == 1'b0 && ^(ifwht_1_scevgep48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_scevgep48_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %scevgep49 = getelementptr i32* %block, i32 %tmp3757*/
begin
ifwht_1_scevgep49 = (arg_block + (4 * ifwht_1_tmp3757));
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %scevgep49 = getelementptr i32* %block, i32 %tmp3757*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_scevgep49_reg <= ifwht_1_scevgep49;
if (reset == 1'b0 && ^(ifwht_1_scevgep49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_scevgep49_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %scevgep50 = getelementptr i32* %block, i32 %tmp3958*/
begin
ifwht_1_scevgep50 = (arg_block + (4 * ifwht_1_tmp3958));
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %scevgep50 = getelementptr i32* %block, i32 %tmp3958*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_scevgep50_reg <= ifwht_1_scevgep50;
if (reset == 1'b0 && ^(ifwht_1_scevgep50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_scevgep50_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %scevgep51 = getelementptr i32* %block, i32 %tmp4159*/
begin
ifwht_1_scevgep51 = (arg_block + (4 * ifwht_1_tmp4159));
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %scevgep51 = getelementptr i32* %block, i32 %tmp4159*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_scevgep51_reg <= ifwht_1_scevgep51;
if (reset == 1'b0 && ^(ifwht_1_scevgep51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_scevgep51_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %scevgep52 = getelementptr i32* %block, i32 %tmp4360*/
begin
ifwht_1_scevgep52 = (arg_block + (4 * ifwht_1_tmp4360));
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %scevgep52 = getelementptr i32* %block, i32 %tmp4360*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_scevgep52_reg <= ifwht_1_scevgep52;
if (reset == 1'b0 && ^(ifwht_1_scevgep52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_scevgep52_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %tmp.010 = getelementptr i32* %block, i32 %tmp31*/
begin
ifwht_1_tmp_010 = (arg_block + (4 * ifwht_1_tmp31));
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %tmp.010 = getelementptr i32* %block, i32 %tmp31*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_tmp_010_reg <= ifwht_1_tmp_010;
if (reset == 1'b0 && ^(ifwht_1_tmp_010) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_tmp_010_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %2 = load i32* %tmp.010, align 4, !tbaa !0*/
begin
ifwht_1_2 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %2 = load i32* %tmp.010, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_4))
begin
ifwht_1_2_reg <= ifwht_1_2;
if (reset == 1'b0 && ^(ifwht_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_2_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %3 = load i32* %scevgep46, align 4, !tbaa !0*/
begin
ifwht_1_3 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %3 = load i32* %scevgep46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_4))
begin
ifwht_1_3_reg <= ifwht_1_3;
if (reset == 1'b0 && ^(ifwht_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_3_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %4 = add nsw i32 %3, %2*/
begin
ifwht_1_4 = (ifwht_1_3 + ifwht_1_2);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %4 = add nsw i32 %3, %2*/
if ((cur_state == LEGUP_F_ifwht_BB_1_4))
begin
ifwht_1_4_reg <= ifwht_1_4;
if (reset == 1'b0 && ^(ifwht_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_4_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %5 = sub nsw i32 %2, %3*/
begin
ifwht_1_5 = (ifwht_1_2 - ifwht_1_3);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %5 = sub nsw i32 %2, %3*/
if ((cur_state == LEGUP_F_ifwht_BB_1_4))
begin
ifwht_1_5_reg <= ifwht_1_5;
if (reset == 1'b0 && ^(ifwht_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_5_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %6 = load i32* %scevgep47, align 4, !tbaa !0*/
begin
ifwht_1_6 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %6 = load i32* %scevgep47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_5))
begin
ifwht_1_6_reg <= ifwht_1_6;
if (reset == 1'b0 && ^(ifwht_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_6_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %7 = load i32* %scevgep48, align 4, !tbaa !0*/
begin
ifwht_1_7 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %7 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_5))
begin
ifwht_1_7_reg <= ifwht_1_7;
if (reset == 1'b0 && ^(ifwht_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_7_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %8 = add nsw i32 %7, %6*/
begin
ifwht_1_8 = (ifwht_1_7 + ifwht_1_6);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %8 = add nsw i32 %7, %6*/
if ((cur_state == LEGUP_F_ifwht_BB_1_5))
begin
ifwht_1_8_reg <= ifwht_1_8;
if (reset == 1'b0 && ^(ifwht_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_8_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %9 = sub nsw i32 %6, %7*/
begin
ifwht_1_9 = (ifwht_1_6 - ifwht_1_7);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %9 = sub nsw i32 %6, %7*/
if ((cur_state == LEGUP_F_ifwht_BB_1_5))
begin
ifwht_1_9_reg <= ifwht_1_9;
if (reset == 1'b0 && ^(ifwht_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_9_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %10 = load i32* %scevgep49, align 4, !tbaa !0*/
begin
ifwht_1_10 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %10 = load i32* %scevgep49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_6))
begin
ifwht_1_10_reg <= ifwht_1_10;
if (reset == 1'b0 && ^(ifwht_1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_10_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %11 = load i32* %scevgep50, align 4, !tbaa !0*/
begin
ifwht_1_11 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %11 = load i32* %scevgep50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_6))
begin
ifwht_1_11_reg <= ifwht_1_11;
if (reset == 1'b0 && ^(ifwht_1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_11_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %12 = add nsw i32 %11, %10*/
begin
ifwht_1_12 = (ifwht_1_11 + ifwht_1_10);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %12 = add nsw i32 %11, %10*/
if ((cur_state == LEGUP_F_ifwht_BB_1_6))
begin
ifwht_1_12_reg <= ifwht_1_12;
if (reset == 1'b0 && ^(ifwht_1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_12_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %13 = sub nsw i32 %10, %11*/
begin
ifwht_1_13 = (ifwht_1_10 - ifwht_1_11);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %13 = sub nsw i32 %10, %11*/
if ((cur_state == LEGUP_F_ifwht_BB_1_6))
begin
ifwht_1_13_reg <= ifwht_1_13;
if (reset == 1'b0 && ^(ifwht_1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_13_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %14 = load i32* %scevgep51, align 4, !tbaa !0*/
begin
ifwht_1_14 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %14 = load i32* %scevgep51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
ifwht_1_14_reg <= ifwht_1_14;
if (reset == 1'b0 && ^(ifwht_1_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_14_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %15 = load i32* %scevgep52, align 4, !tbaa !0*/
begin
ifwht_1_15 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %15 = load i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
ifwht_1_15_reg <= ifwht_1_15;
if (reset == 1'b0 && ^(ifwht_1_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_15_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %16 = add nsw i32 %15, %14*/
begin
ifwht_1_16 = (ifwht_1_15 + ifwht_1_14);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %16 = add nsw i32 %15, %14*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
ifwht_1_16_reg <= ifwht_1_16;
if (reset == 1'b0 && ^(ifwht_1_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_16_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %17 = sub nsw i32 %14, %15*/
begin
ifwht_1_17 = (ifwht_1_14 - ifwht_1_15);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %17 = sub nsw i32 %14, %15*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
ifwht_1_17_reg <= ifwht_1_17;
if (reset == 1'b0 && ^(ifwht_1_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_17_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %18 = add nsw i32 %8, %4*/
begin
ifwht_1_18 = (ifwht_1_8 + ifwht_1_4_reg);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %18 = add nsw i32 %8, %4*/
if ((cur_state == LEGUP_F_ifwht_BB_1_5))
begin
ifwht_1_18_reg <= ifwht_1_18;
if (reset == 1'b0 && ^(ifwht_1_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_18_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %19 = sub nsw i32 %4, %8*/
begin
ifwht_1_19 = (ifwht_1_4_reg - ifwht_1_8);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %19 = sub nsw i32 %4, %8*/
if ((cur_state == LEGUP_F_ifwht_BB_1_5))
begin
ifwht_1_19_reg <= ifwht_1_19;
if (reset == 1'b0 && ^(ifwht_1_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_19_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %20 = sub nsw i32 %5, %9*/
begin
ifwht_1_20 = (ifwht_1_5_reg - ifwht_1_9);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %20 = sub nsw i32 %5, %9*/
if ((cur_state == LEGUP_F_ifwht_BB_1_5))
begin
ifwht_1_20_reg <= ifwht_1_20;
if (reset == 1'b0 && ^(ifwht_1_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_20_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %21 = add nsw i32 %9, %5*/
begin
ifwht_1_21 = (ifwht_1_9 + ifwht_1_5_reg);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %21 = add nsw i32 %9, %5*/
if ((cur_state == LEGUP_F_ifwht_BB_1_5))
begin
ifwht_1_21_reg <= ifwht_1_21;
if (reset == 1'b0 && ^(ifwht_1_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_21_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %22 = add nsw i32 %16, %12*/
begin
ifwht_1_22 = (ifwht_1_16 + ifwht_1_12_reg);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %22 = add nsw i32 %16, %12*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
ifwht_1_22_reg <= ifwht_1_22;
if (reset == 1'b0 && ^(ifwht_1_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_22_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %23 = sub nsw i32 %12, %16*/
begin
ifwht_1_23 = (ifwht_1_12_reg - ifwht_1_16);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %23 = sub nsw i32 %12, %16*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
ifwht_1_23_reg <= ifwht_1_23;
if (reset == 1'b0 && ^(ifwht_1_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_23_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %24 = sub nsw i32 %13, %17*/
begin
ifwht_1_24 = (ifwht_1_13_reg - ifwht_1_17);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %24 = sub nsw i32 %13, %17*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
ifwht_1_24_reg <= ifwht_1_24;
if (reset == 1'b0 && ^(ifwht_1_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_24_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %25 = add nsw i32 %17, %13*/
begin
ifwht_1_25 = (ifwht_1_17 + ifwht_1_13_reg);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %25 = add nsw i32 %17, %13*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
ifwht_1_25_reg <= ifwht_1_25;
if (reset == 1'b0 && ^(ifwht_1_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_25_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %26 = add nsw i32 %22, %18*/
begin
ifwht_1_26 = (ifwht_1_22 + ifwht_1_18_reg);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %26 = add nsw i32 %22, %18*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
ifwht_1_26_reg <= ifwht_1_26;
if (reset == 1'b0 && ^(ifwht_1_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_26_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %27 = sub nsw i32 %18, %22*/
begin
ifwht_1_27 = (ifwht_1_18_reg - ifwht_1_22);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %27 = sub nsw i32 %18, %22*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
ifwht_1_27_reg <= ifwht_1_27;
if (reset == 1'b0 && ^(ifwht_1_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_27_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %28 = sub nsw i32 %19, %23*/
begin
ifwht_1_28 = (ifwht_1_19_reg - ifwht_1_23);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %28 = sub nsw i32 %19, %23*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
ifwht_1_28_reg <= ifwht_1_28;
if (reset == 1'b0 && ^(ifwht_1_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_28_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %29 = add nsw i32 %23, %19*/
begin
ifwht_1_29 = (ifwht_1_23 + ifwht_1_19_reg);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %29 = add nsw i32 %23, %19*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
ifwht_1_29_reg <= ifwht_1_29;
if (reset == 1'b0 && ^(ifwht_1_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_29_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %30 = add nsw i32 %24, %20*/
begin
ifwht_1_30 = (ifwht_1_24 + ifwht_1_20_reg);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %30 = add nsw i32 %24, %20*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
ifwht_1_30_reg <= ifwht_1_30;
if (reset == 1'b0 && ^(ifwht_1_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_30_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %31 = sub nsw i32 %20, %24*/
begin
ifwht_1_31 = (ifwht_1_20_reg - ifwht_1_24);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %31 = sub nsw i32 %20, %24*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
ifwht_1_31_reg <= ifwht_1_31;
if (reset == 1'b0 && ^(ifwht_1_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_31_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %32 = sub nsw i32 %21, %25*/
begin
ifwht_1_32 = (ifwht_1_21_reg - ifwht_1_25);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %32 = sub nsw i32 %21, %25*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
ifwht_1_32_reg <= ifwht_1_32;
if (reset == 1'b0 && ^(ifwht_1_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_32_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %33 = add nsw i32 %25, %21*/
begin
ifwht_1_33 = (ifwht_1_25 + ifwht_1_21_reg);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %33 = add nsw i32 %25, %21*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
ifwht_1_33_reg <= ifwht_1_33;
if (reset == 1'b0 && ^(ifwht_1_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_33_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %34 = add nsw i32 %i.012, 1*/
begin
ifwht_1_34 = (ifwht_1_i_012_reg + 32'd1);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %34 = add nsw i32 %i.012, 1*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_34_reg <= ifwht_1_34;
if (reset == 1'b0 && ^(ifwht_1_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_34_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %1*/
/*   %exitcond30 = icmp eq i32 %34, 8*/
begin
ifwht_1_exitcond30 = (ifwht_1_34 == 32'd8);
end
end
always @(posedge clk) begin
/* ifwht: %1*/
/*   %exitcond30 = icmp eq i32 %34, 8*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
ifwht_1_exitcond30_reg <= ifwht_1_exitcond30;
if (reset == 1'b0 && ^(ifwht_1_exitcond30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_1_exitcond30_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %i.19 = phi i32 [ 0, %.preheader6 ], [ %92, %91 ]*/
if (((cur_state == LEGUP_F_ifwht_BB__preheader6_1) & (memory_controller_waitrequest == 1'd0)))
begin
ifwht_35_i_19 = 32'd0;
end
/* ifwht: %35*/
/*   %i.19 = phi i32 [ 0, %.preheader6 ], [ %92, %91 ]*/
else /* if ((((cur_state == LEGUP_F_ifwht_BB_91_34) & (memory_controller_waitrequest == 1'd0)) & (ifwht_91_exitcond_reg == 1'd0))) */
begin
ifwht_35_i_19 = ifwht_91_92_reg;
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %i.19 = phi i32 [ 0, %.preheader6 ], [ %92, %91 ]*/
if (((cur_state == LEGUP_F_ifwht_BB__preheader6_1) & (memory_controller_waitrequest == 1'd0)))
begin
ifwht_35_i_19_reg <= ifwht_35_i_19;
if (reset == 1'b0 && ^(ifwht_35_i_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_i_19_reg"); $finish; end
end
/* ifwht: %35*/
/*   %i.19 = phi i32 [ 0, %.preheader6 ], [ %92, %91 ]*/
if ((((cur_state == LEGUP_F_ifwht_BB_91_34) & (memory_controller_waitrequest == 1'd0)) & (ifwht_91_exitcond_reg == 1'd0)))
begin
ifwht_35_i_19_reg <= ifwht_35_i_19;
if (reset == 1'b0 && ^(ifwht_35_i_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_i_19_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %out.17 = getelementptr i32* %output_block, i32 %i.19*/
begin
ifwht_35_out_17 = (arg_output_block + (4 * ifwht_35_i_19_reg));
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %out.17 = getelementptr i32* %output_block, i32 %i.19*/
if ((cur_state == LEGUP_F_ifwht_BB_35_12))
begin
ifwht_35_out_17_reg <= ifwht_35_out_17;
if (reset == 1'b0 && ^(ifwht_35_out_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_out_17_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %tmp = add i32 %i.19, 56*/
begin
ifwht_35_tmp = (ifwht_35_i_19_reg + 32'd56);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %tmp = add i32 %i.19, 56*/
if ((cur_state == LEGUP_F_ifwht_BB_35_12))
begin
ifwht_35_tmp_reg <= ifwht_35_tmp;
if (reset == 1'b0 && ^(ifwht_35_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_tmp_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %scevgep.7 = getelementptr i32* %output_block, i32 %tmp*/
begin
ifwht_35_scevgep_7 = (arg_output_block + (4 * ifwht_35_tmp_reg));
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %scevgep.7 = getelementptr i32* %output_block, i32 %tmp*/
if ((cur_state == LEGUP_F_ifwht_BB_35_13))
begin
ifwht_35_scevgep_7_reg <= ifwht_35_scevgep_7;
if (reset == 1'b0 && ^(ifwht_35_scevgep_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_scevgep_7_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %tmp18 = add i32 %i.19, 48*/
begin
ifwht_35_tmp18 = (ifwht_35_i_19_reg + 32'd48);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %tmp18 = add i32 %i.19, 48*/
if ((cur_state == LEGUP_F_ifwht_BB_35_12))
begin
ifwht_35_tmp18_reg <= ifwht_35_tmp18;
if (reset == 1'b0 && ^(ifwht_35_tmp18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_tmp18_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %scevgep.6 = getelementptr i32* %output_block, i32 %tmp18*/
begin
ifwht_35_scevgep_6 = (arg_output_block + (4 * ifwht_35_tmp18_reg));
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %scevgep.6 = getelementptr i32* %output_block, i32 %tmp18*/
if ((cur_state == LEGUP_F_ifwht_BB_35_13))
begin
ifwht_35_scevgep_6_reg <= ifwht_35_scevgep_6;
if (reset == 1'b0 && ^(ifwht_35_scevgep_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_scevgep_6_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %tmp20 = add i32 %i.19, 40*/
begin
ifwht_35_tmp20 = (ifwht_35_i_19_reg + 32'd40);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %tmp20 = add i32 %i.19, 40*/
if ((cur_state == LEGUP_F_ifwht_BB_35_12))
begin
ifwht_35_tmp20_reg <= ifwht_35_tmp20;
if (reset == 1'b0 && ^(ifwht_35_tmp20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_tmp20_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %scevgep.5 = getelementptr i32* %output_block, i32 %tmp20*/
begin
ifwht_35_scevgep_5 = (arg_output_block + (4 * ifwht_35_tmp20_reg));
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %scevgep.5 = getelementptr i32* %output_block, i32 %tmp20*/
if ((cur_state == LEGUP_F_ifwht_BB_35_13))
begin
ifwht_35_scevgep_5_reg <= ifwht_35_scevgep_5;
if (reset == 1'b0 && ^(ifwht_35_scevgep_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_scevgep_5_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %tmp22 = add i32 %i.19, 32*/
begin
ifwht_35_tmp22 = (ifwht_35_i_19_reg + 32'd32);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %tmp22 = add i32 %i.19, 32*/
if ((cur_state == LEGUP_F_ifwht_BB_35_12))
begin
ifwht_35_tmp22_reg <= ifwht_35_tmp22;
if (reset == 1'b0 && ^(ifwht_35_tmp22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_tmp22_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %scevgep.4 = getelementptr i32* %output_block, i32 %tmp22*/
begin
ifwht_35_scevgep_4 = (arg_output_block + (4 * ifwht_35_tmp22_reg));
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %scevgep.4 = getelementptr i32* %output_block, i32 %tmp22*/
if ((cur_state == LEGUP_F_ifwht_BB_35_13))
begin
ifwht_35_scevgep_4_reg <= ifwht_35_scevgep_4;
if (reset == 1'b0 && ^(ifwht_35_scevgep_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_scevgep_4_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %tmp24 = add i32 %i.19, 24*/
begin
ifwht_35_tmp24 = (ifwht_35_i_19_reg + 32'd24);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %tmp24 = add i32 %i.19, 24*/
if ((cur_state == LEGUP_F_ifwht_BB_35_12))
begin
ifwht_35_tmp24_reg <= ifwht_35_tmp24;
if (reset == 1'b0 && ^(ifwht_35_tmp24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_tmp24_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %scevgep.3 = getelementptr i32* %output_block, i32 %tmp24*/
begin
ifwht_35_scevgep_3 = (arg_output_block + (4 * ifwht_35_tmp24_reg));
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %scevgep.3 = getelementptr i32* %output_block, i32 %tmp24*/
if ((cur_state == LEGUP_F_ifwht_BB_35_13))
begin
ifwht_35_scevgep_3_reg <= ifwht_35_scevgep_3;
if (reset == 1'b0 && ^(ifwht_35_scevgep_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_scevgep_3_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %tmp26 = add i32 %i.19, 16*/
begin
ifwht_35_tmp26 = (ifwht_35_i_19_reg + 32'd16);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %tmp26 = add i32 %i.19, 16*/
if ((cur_state == LEGUP_F_ifwht_BB_35_12))
begin
ifwht_35_tmp26_reg <= ifwht_35_tmp26;
if (reset == 1'b0 && ^(ifwht_35_tmp26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_tmp26_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %scevgep.2 = getelementptr i32* %output_block, i32 %tmp26*/
begin
ifwht_35_scevgep_2 = (arg_output_block + (4 * ifwht_35_tmp26_reg));
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %scevgep.2 = getelementptr i32* %output_block, i32 %tmp26*/
if ((cur_state == LEGUP_F_ifwht_BB_35_13))
begin
ifwht_35_scevgep_2_reg <= ifwht_35_scevgep_2;
if (reset == 1'b0 && ^(ifwht_35_scevgep_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_scevgep_2_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %tmp28 = add i32 %i.19, 8*/
begin
ifwht_35_tmp28 = (ifwht_35_i_19_reg + 32'd8);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %tmp28 = add i32 %i.19, 8*/
if ((cur_state == LEGUP_F_ifwht_BB_35_12))
begin
ifwht_35_tmp28_reg <= ifwht_35_tmp28;
if (reset == 1'b0 && ^(ifwht_35_tmp28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_tmp28_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %scevgep.1 = getelementptr i32* %output_block, i32 %tmp28*/
begin
ifwht_35_scevgep_1 = (arg_output_block + (4 * ifwht_35_tmp28_reg));
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %scevgep.1 = getelementptr i32* %output_block, i32 %tmp28*/
if ((cur_state == LEGUP_F_ifwht_BB_35_13))
begin
ifwht_35_scevgep_1_reg <= ifwht_35_scevgep_1;
if (reset == 1'b0 && ^(ifwht_35_scevgep_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_scevgep_1_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %36 = load i32* %out.17, align 4, !tbaa !0*/
begin
ifwht_35_36 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %36 = load i32* %out.17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_14))
begin
ifwht_35_36_reg <= ifwht_35_36;
if (reset == 1'b0 && ^(ifwht_35_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_36_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %37 = load i32* %scevgep.1, align 4, !tbaa !0*/
begin
ifwht_35_37 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %37 = load i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_15))
begin
ifwht_35_37_reg <= ifwht_35_37;
if (reset == 1'b0 && ^(ifwht_35_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_37_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %38 = add nsw i32 %37, %36*/
begin
ifwht_35_38 = (ifwht_35_37 + ifwht_35_36_reg);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %38 = add nsw i32 %37, %36*/
if ((cur_state == LEGUP_F_ifwht_BB_35_15))
begin
ifwht_35_38_reg <= ifwht_35_38;
if (reset == 1'b0 && ^(ifwht_35_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_38_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %39 = sub nsw i32 %36, %37*/
begin
ifwht_35_39 = (ifwht_35_36_reg - ifwht_35_37);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %39 = sub nsw i32 %36, %37*/
if ((cur_state == LEGUP_F_ifwht_BB_35_15))
begin
ifwht_35_39_reg <= ifwht_35_39;
if (reset == 1'b0 && ^(ifwht_35_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_39_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %40 = load i32* %scevgep.2, align 4, !tbaa !0*/
begin
ifwht_35_40 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %40 = load i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_15))
begin
ifwht_35_40_reg <= ifwht_35_40;
if (reset == 1'b0 && ^(ifwht_35_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_40_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %41 = load i32* %scevgep.3, align 4, !tbaa !0*/
begin
ifwht_35_41 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %41 = load i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_16))
begin
ifwht_35_41_reg <= ifwht_35_41;
if (reset == 1'b0 && ^(ifwht_35_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_41_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %42 = add nsw i32 %41, %40*/
begin
ifwht_35_42 = (ifwht_35_41 + ifwht_35_40_reg);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %42 = add nsw i32 %41, %40*/
if ((cur_state == LEGUP_F_ifwht_BB_35_16))
begin
ifwht_35_42_reg <= ifwht_35_42;
if (reset == 1'b0 && ^(ifwht_35_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_42_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %43 = sub nsw i32 %40, %41*/
begin
ifwht_35_43 = (ifwht_35_40_reg - ifwht_35_41);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %43 = sub nsw i32 %40, %41*/
if ((cur_state == LEGUP_F_ifwht_BB_35_16))
begin
ifwht_35_43_reg <= ifwht_35_43;
if (reset == 1'b0 && ^(ifwht_35_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_43_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %44 = load i32* %scevgep.4, align 4, !tbaa !0*/
begin
ifwht_35_44 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %44 = load i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_16))
begin
ifwht_35_44_reg <= ifwht_35_44;
if (reset == 1'b0 && ^(ifwht_35_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_44_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %45 = load i32* %scevgep.5, align 4, !tbaa !0*/
begin
ifwht_35_45 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %45 = load i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_17))
begin
ifwht_35_45_reg <= ifwht_35_45;
if (reset == 1'b0 && ^(ifwht_35_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_45_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %46 = add nsw i32 %45, %44*/
begin
ifwht_35_46 = (ifwht_35_45 + ifwht_35_44_reg);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %46 = add nsw i32 %45, %44*/
if ((cur_state == LEGUP_F_ifwht_BB_35_17))
begin
ifwht_35_46_reg <= ifwht_35_46;
if (reset == 1'b0 && ^(ifwht_35_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_46_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %47 = sub nsw i32 %44, %45*/
begin
ifwht_35_47 = (ifwht_35_44_reg - ifwht_35_45);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %47 = sub nsw i32 %44, %45*/
if ((cur_state == LEGUP_F_ifwht_BB_35_17))
begin
ifwht_35_47_reg <= ifwht_35_47;
if (reset == 1'b0 && ^(ifwht_35_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_47_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %48 = load i32* %scevgep.6, align 4, !tbaa !0*/
begin
ifwht_35_48 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %48 = load i32* %scevgep.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_17))
begin
ifwht_35_48_reg <= ifwht_35_48;
if (reset == 1'b0 && ^(ifwht_35_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_48_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %49 = load i32* %scevgep.7, align 4, !tbaa !0*/
begin
ifwht_35_49 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %49 = load i32* %scevgep.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
ifwht_35_49_reg <= ifwht_35_49;
if (reset == 1'b0 && ^(ifwht_35_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_49_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %50 = add nsw i32 %49, %48*/
begin
ifwht_35_50 = (ifwht_35_49 + ifwht_35_48_reg);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %50 = add nsw i32 %49, %48*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
ifwht_35_50_reg <= ifwht_35_50;
if (reset == 1'b0 && ^(ifwht_35_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_50_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %51 = sub nsw i32 %48, %49*/
begin
ifwht_35_51 = (ifwht_35_48_reg - ifwht_35_49);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %51 = sub nsw i32 %48, %49*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
ifwht_35_51_reg <= ifwht_35_51;
if (reset == 1'b0 && ^(ifwht_35_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_51_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %52 = add nsw i32 %42, %38*/
begin
ifwht_35_52 = (ifwht_35_42 + ifwht_35_38_reg);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %52 = add nsw i32 %42, %38*/
if ((cur_state == LEGUP_F_ifwht_BB_35_16))
begin
ifwht_35_52_reg <= ifwht_35_52;
if (reset == 1'b0 && ^(ifwht_35_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_52_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %53 = sub nsw i32 %38, %42*/
begin
ifwht_35_53 = (ifwht_35_38_reg - ifwht_35_42);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %53 = sub nsw i32 %38, %42*/
if ((cur_state == LEGUP_F_ifwht_BB_35_16))
begin
ifwht_35_53_reg <= ifwht_35_53;
if (reset == 1'b0 && ^(ifwht_35_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_53_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %54 = sub nsw i32 %39, %43*/
begin
ifwht_35_54 = (ifwht_35_39_reg - ifwht_35_43);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %54 = sub nsw i32 %39, %43*/
if ((cur_state == LEGUP_F_ifwht_BB_35_16))
begin
ifwht_35_54_reg <= ifwht_35_54;
if (reset == 1'b0 && ^(ifwht_35_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_54_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %55 = add nsw i32 %43, %39*/
begin
ifwht_35_55 = (ifwht_35_43 + ifwht_35_39_reg);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %55 = add nsw i32 %43, %39*/
if ((cur_state == LEGUP_F_ifwht_BB_35_16))
begin
ifwht_35_55_reg <= ifwht_35_55;
if (reset == 1'b0 && ^(ifwht_35_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_55_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %56 = add nsw i32 %50, %46*/
begin
ifwht_35_56 = (ifwht_35_50 + ifwht_35_46_reg);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %56 = add nsw i32 %50, %46*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
ifwht_35_56_reg <= ifwht_35_56;
if (reset == 1'b0 && ^(ifwht_35_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_56_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %57 = sub nsw i32 %46, %50*/
begin
ifwht_35_57 = (ifwht_35_46_reg - ifwht_35_50);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %57 = sub nsw i32 %46, %50*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
ifwht_35_57_reg <= ifwht_35_57;
if (reset == 1'b0 && ^(ifwht_35_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_57_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %58 = sub nsw i32 %47, %51*/
begin
ifwht_35_58 = (ifwht_35_47_reg - ifwht_35_51);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %58 = sub nsw i32 %47, %51*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
ifwht_35_58_reg <= ifwht_35_58;
if (reset == 1'b0 && ^(ifwht_35_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_58_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %59 = add nsw i32 %51, %47*/
begin
ifwht_35_59 = (ifwht_35_51 + ifwht_35_47_reg);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %59 = add nsw i32 %51, %47*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
ifwht_35_59_reg <= ifwht_35_59;
if (reset == 1'b0 && ^(ifwht_35_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_59_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %60 = add nsw i32 %56, %52*/
begin
ifwht_35_60 = (ifwht_35_56 + ifwht_35_52_reg);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %60 = add nsw i32 %56, %52*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
ifwht_35_60_reg <= ifwht_35_60;
if (reset == 1'b0 && ^(ifwht_35_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_60_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %61 = sub nsw i32 %52, %56*/
begin
ifwht_35_61 = (ifwht_35_52_reg - ifwht_35_56);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %61 = sub nsw i32 %52, %56*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
ifwht_35_61_reg <= ifwht_35_61;
if (reset == 1'b0 && ^(ifwht_35_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_61_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %62 = sub nsw i32 %53, %57*/
begin
ifwht_35_62 = (ifwht_35_53_reg - ifwht_35_57);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %62 = sub nsw i32 %53, %57*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
ifwht_35_62_reg <= ifwht_35_62;
if (reset == 1'b0 && ^(ifwht_35_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_62_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %63 = add nsw i32 %57, %53*/
begin
ifwht_35_63 = (ifwht_35_57 + ifwht_35_53_reg);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %63 = add nsw i32 %57, %53*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
ifwht_35_63_reg <= ifwht_35_63;
if (reset == 1'b0 && ^(ifwht_35_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_63_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %64 = add nsw i32 %58, %54*/
begin
ifwht_35_64 = (ifwht_35_58 + ifwht_35_54_reg);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %64 = add nsw i32 %58, %54*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
ifwht_35_64_reg <= ifwht_35_64;
if (reset == 1'b0 && ^(ifwht_35_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_64_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %65 = sub nsw i32 %54, %58*/
begin
ifwht_35_65 = (ifwht_35_54_reg - ifwht_35_58);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %65 = sub nsw i32 %54, %58*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
ifwht_35_65_reg <= ifwht_35_65;
if (reset == 1'b0 && ^(ifwht_35_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_65_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %66 = sub nsw i32 %55, %59*/
begin
ifwht_35_66 = (ifwht_35_55_reg - ifwht_35_59);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %66 = sub nsw i32 %55, %59*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
ifwht_35_66_reg <= ifwht_35_66;
if (reset == 1'b0 && ^(ifwht_35_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_66_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %67 = add nsw i32 %59, %55*/
begin
ifwht_35_67 = (ifwht_35_59 + ifwht_35_55_reg);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %67 = add nsw i32 %59, %55*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
ifwht_35_67_reg <= ifwht_35_67;
if (reset == 1'b0 && ^(ifwht_35_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_67_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %35*/
/*   %68 = ashr i32 %60, 6*/
begin
ifwht_35_68 = ($signed(ifwht_35_60) >>> 32'd6);
end
end
always @(posedge clk) begin
/* ifwht: %35*/
/*   %68 = ashr i32 %60, 6*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
ifwht_35_68_reg <= ifwht_35_68;
if (reset == 1'b0 && ^(ifwht_35_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_35_68_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %.preheader3*/
/*   %69 = add nsw i32 %68, 128*/
begin
ifwht__preheader3_69 = (ifwht_35_68_reg + 32'd128);
end
end
always @(posedge clk) begin
/* ifwht: %.preheader3*/
/*   %69 = add nsw i32 %68, 128*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
ifwht__preheader3_69_reg <= ifwht__preheader3_69;
if (reset == 1'b0 && ^(ifwht__preheader3_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht__preheader3_69_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %.preheader3*/
/*   %70 = ashr i32 %61, 6*/
begin
ifwht__preheader3_70 = ($signed(ifwht_35_61_reg) >>> 32'd6);
end
end
always @(posedge clk) begin
/* ifwht: %.preheader3*/
/*   %70 = ashr i32 %61, 6*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
ifwht__preheader3_70_reg <= ifwht__preheader3_70;
if (reset == 1'b0 && ^(ifwht__preheader3_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht__preheader3_70_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %.preheader3*/
/*   %71 = add nsw i32 %70, 128*/
begin
ifwht__preheader3_71 = (ifwht__preheader3_70 + 32'd128);
end
end
always @(posedge clk) begin
/* ifwht: %.preheader3*/
/*   %71 = add nsw i32 %70, 128*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
ifwht__preheader3_71_reg <= ifwht__preheader3_71;
if (reset == 1'b0 && ^(ifwht__preheader3_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht__preheader3_71_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %.preheader3*/
/*   %72 = ashr i32 %62, 6*/
begin
ifwht__preheader3_72 = ($signed(ifwht_35_62_reg) >>> 32'd6);
end
end
always @(posedge clk) begin
/* ifwht: %.preheader3*/
/*   %72 = ashr i32 %62, 6*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
ifwht__preheader3_72_reg <= ifwht__preheader3_72;
if (reset == 1'b0 && ^(ifwht__preheader3_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht__preheader3_72_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %.preheader3*/
/*   %73 = add nsw i32 %72, 128*/
begin
ifwht__preheader3_73 = (ifwht__preheader3_72 + 32'd128);
end
end
always @(posedge clk) begin
/* ifwht: %.preheader3*/
/*   %73 = add nsw i32 %72, 128*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
ifwht__preheader3_73_reg <= ifwht__preheader3_73;
if (reset == 1'b0 && ^(ifwht__preheader3_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht__preheader3_73_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %.preheader3*/
/*   %74 = ashr i32 %63, 6*/
begin
ifwht__preheader3_74 = ($signed(ifwht_35_63_reg) >>> 32'd6);
end
end
always @(posedge clk) begin
/* ifwht: %.preheader3*/
/*   %74 = ashr i32 %63, 6*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
ifwht__preheader3_74_reg <= ifwht__preheader3_74;
if (reset == 1'b0 && ^(ifwht__preheader3_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht__preheader3_74_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %.preheader3*/
/*   %75 = add nsw i32 %74, 128*/
begin
ifwht__preheader3_75 = (ifwht__preheader3_74 + 32'd128);
end
end
always @(posedge clk) begin
/* ifwht: %.preheader3*/
/*   %75 = add nsw i32 %74, 128*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
ifwht__preheader3_75_reg <= ifwht__preheader3_75;
if (reset == 1'b0 && ^(ifwht__preheader3_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht__preheader3_75_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %.preheader3*/
/*   %76 = ashr i32 %64, 6*/
begin
ifwht__preheader3_76 = ($signed(ifwht_35_64_reg) >>> 32'd6);
end
end
always @(posedge clk) begin
/* ifwht: %.preheader3*/
/*   %76 = ashr i32 %64, 6*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
ifwht__preheader3_76_reg <= ifwht__preheader3_76;
if (reset == 1'b0 && ^(ifwht__preheader3_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht__preheader3_76_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %.preheader3*/
/*   %77 = add nsw i32 %76, 128*/
begin
ifwht__preheader3_77 = (ifwht__preheader3_76 + 32'd128);
end
end
always @(posedge clk) begin
/* ifwht: %.preheader3*/
/*   %77 = add nsw i32 %76, 128*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
ifwht__preheader3_77_reg <= ifwht__preheader3_77;
if (reset == 1'b0 && ^(ifwht__preheader3_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht__preheader3_77_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %.preheader3*/
/*   %78 = ashr i32 %65, 6*/
begin
ifwht__preheader3_78 = ($signed(ifwht_35_65_reg) >>> 32'd6);
end
end
always @(posedge clk) begin
/* ifwht: %.preheader3*/
/*   %78 = ashr i32 %65, 6*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
ifwht__preheader3_78_reg <= ifwht__preheader3_78;
if (reset == 1'b0 && ^(ifwht__preheader3_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht__preheader3_78_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %.preheader3*/
/*   %79 = add nsw i32 %78, 128*/
begin
ifwht__preheader3_79 = (ifwht__preheader3_78 + 32'd128);
end
end
always @(posedge clk) begin
/* ifwht: %.preheader3*/
/*   %79 = add nsw i32 %78, 128*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
ifwht__preheader3_79_reg <= ifwht__preheader3_79;
if (reset == 1'b0 && ^(ifwht__preheader3_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht__preheader3_79_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %.preheader3*/
/*   %80 = ashr i32 %66, 6*/
begin
ifwht__preheader3_80 = ($signed(ifwht_35_66_reg) >>> 32'd6);
end
end
always @(posedge clk) begin
/* ifwht: %.preheader3*/
/*   %80 = ashr i32 %66, 6*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
ifwht__preheader3_80_reg <= ifwht__preheader3_80;
if (reset == 1'b0 && ^(ifwht__preheader3_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht__preheader3_80_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %.preheader3*/
/*   %81 = add nsw i32 %80, 128*/
begin
ifwht__preheader3_81 = (ifwht__preheader3_80 + 32'd128);
end
end
always @(posedge clk) begin
/* ifwht: %.preheader3*/
/*   %81 = add nsw i32 %80, 128*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
ifwht__preheader3_81_reg <= ifwht__preheader3_81;
if (reset == 1'b0 && ^(ifwht__preheader3_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht__preheader3_81_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %.preheader3*/
/*   %82 = ashr i32 %67, 6*/
begin
ifwht__preheader3_82 = ($signed(ifwht_35_67_reg) >>> 32'd6);
end
end
always @(posedge clk) begin
/* ifwht: %.preheader3*/
/*   %82 = ashr i32 %67, 6*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
ifwht__preheader3_82_reg <= ifwht__preheader3_82;
if (reset == 1'b0 && ^(ifwht__preheader3_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht__preheader3_82_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %.preheader3*/
/*   %83 = add nsw i32 %82, 128*/
begin
ifwht__preheader3_83 = (ifwht__preheader3_82 + 32'd128);
end
end
always @(posedge clk) begin
/* ifwht: %.preheader3*/
/*   %83 = add nsw i32 %82, 128*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
ifwht__preheader3_83_reg <= ifwht__preheader3_83;
if (reset == 1'b0 && ^(ifwht__preheader3_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht__preheader3_83_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %.preheader*/
/*   %84 = ashr i32 %61, 6*/
begin
ifwht__preheader_84 = ($signed(ifwht_35_61_reg) >>> 32'd6);
end
end
always @(posedge clk) begin
/* ifwht: %.preheader*/
/*   %84 = ashr i32 %61, 6*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_28))
begin
ifwht__preheader_84_reg <= ifwht__preheader_84;
if (reset == 1'b0 && ^(ifwht__preheader_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht__preheader_84_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %.preheader*/
/*   %85 = ashr i32 %62, 6*/
begin
ifwht__preheader_85 = ($signed(ifwht_35_62_reg) >>> 32'd6);
end
end
always @(posedge clk) begin
/* ifwht: %.preheader*/
/*   %85 = ashr i32 %62, 6*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_28))
begin
ifwht__preheader_85_reg <= ifwht__preheader_85;
if (reset == 1'b0 && ^(ifwht__preheader_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht__preheader_85_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %.preheader*/
/*   %86 = ashr i32 %63, 6*/
begin
ifwht__preheader_86 = ($signed(ifwht_35_63_reg) >>> 32'd6);
end
end
always @(posedge clk) begin
/* ifwht: %.preheader*/
/*   %86 = ashr i32 %63, 6*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_28))
begin
ifwht__preheader_86_reg <= ifwht__preheader_86;
if (reset == 1'b0 && ^(ifwht__preheader_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht__preheader_86_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %.preheader*/
/*   %87 = ashr i32 %64, 6*/
begin
ifwht__preheader_87 = ($signed(ifwht_35_64_reg) >>> 32'd6);
end
end
always @(posedge clk) begin
/* ifwht: %.preheader*/
/*   %87 = ashr i32 %64, 6*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_28))
begin
ifwht__preheader_87_reg <= ifwht__preheader_87;
if (reset == 1'b0 && ^(ifwht__preheader_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht__preheader_87_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %.preheader*/
/*   %88 = ashr i32 %65, 6*/
begin
ifwht__preheader_88 = ($signed(ifwht_35_65_reg) >>> 32'd6);
end
end
always @(posedge clk) begin
/* ifwht: %.preheader*/
/*   %88 = ashr i32 %65, 6*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_28))
begin
ifwht__preheader_88_reg <= ifwht__preheader_88;
if (reset == 1'b0 && ^(ifwht__preheader_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht__preheader_88_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %.preheader*/
/*   %89 = ashr i32 %66, 6*/
begin
ifwht__preheader_89 = ($signed(ifwht_35_66_reg) >>> 32'd6);
end
end
always @(posedge clk) begin
/* ifwht: %.preheader*/
/*   %89 = ashr i32 %66, 6*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_28))
begin
ifwht__preheader_89_reg <= ifwht__preheader_89;
if (reset == 1'b0 && ^(ifwht__preheader_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht__preheader_89_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %.preheader*/
/*   %90 = ashr i32 %67, 6*/
begin
ifwht__preheader_90 = ($signed(ifwht_35_67_reg) >>> 32'd6);
end
end
always @(posedge clk) begin
/* ifwht: %.preheader*/
/*   %90 = ashr i32 %67, 6*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_28))
begin
ifwht__preheader_90_reg <= ifwht__preheader_90;
if (reset == 1'b0 && ^(ifwht__preheader_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht__preheader_90_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %91*/
/*   %storemerge = phi i32 [ %83, %.preheader3 ], [ %90, %.preheader ]*/
if (((cur_state == LEGUP_F_ifwht_BB__preheader3_27) & (memory_controller_waitrequest == 1'd0)))
begin
ifwht_91_storemerge = ifwht__preheader3_83_reg;
end
/* ifwht: %91*/
/*   %storemerge = phi i32 [ %83, %.preheader3 ], [ %90, %.preheader ]*/
else /* if (((cur_state == LEGUP_F_ifwht_BB__preheader_32) & (memory_controller_waitrequest == 1'd0))) */
begin
ifwht_91_storemerge = ifwht__preheader_90_reg;
end
end
always @(posedge clk) begin
/* ifwht: %91*/
/*   %storemerge = phi i32 [ %83, %.preheader3 ], [ %90, %.preheader ]*/
if (((cur_state == LEGUP_F_ifwht_BB__preheader3_27) & (memory_controller_waitrequest == 1'd0)))
begin
ifwht_91_storemerge_reg <= ifwht_91_storemerge;
if (reset == 1'b0 && ^(ifwht_91_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_91_storemerge_reg"); $finish; end
end
/* ifwht: %91*/
/*   %storemerge = phi i32 [ %83, %.preheader3 ], [ %90, %.preheader ]*/
if (((cur_state == LEGUP_F_ifwht_BB__preheader_32) & (memory_controller_waitrequest == 1'd0)))
begin
ifwht_91_storemerge_reg <= ifwht_91_storemerge;
if (reset == 1'b0 && ^(ifwht_91_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_91_storemerge_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %91*/
/*   %92 = add nsw i32 %i.19, 1*/
begin
ifwht_91_92 = (ifwht_35_i_19_reg + 32'd1);
end
end
always @(posedge clk) begin
/* ifwht: %91*/
/*   %92 = add nsw i32 %i.19, 1*/
if ((cur_state == LEGUP_F_ifwht_BB_91_33))
begin
ifwht_91_92_reg <= ifwht_91_92;
if (reset == 1'b0 && ^(ifwht_91_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_91_92_reg"); $finish; end
end
end
always @(*) begin
/* ifwht: %91*/
/*   %exitcond = icmp eq i32 %92, 8*/
begin
ifwht_91_exitcond = (ifwht_91_92 == 32'd8);
end
end
always @(posedge clk) begin
/* ifwht: %91*/
/*   %exitcond = icmp eq i32 %92, 8*/
if ((cur_state == LEGUP_F_ifwht_BB_91_33))
begin
ifwht_91_exitcond_reg <= ifwht_91_exitcond;
if (reset == 1'b0 && ^(ifwht_91_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_91_exitcond_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* ifwht: %93*/
/*   ret void*/
if ((cur_state == LEGUP_F_ifwht_BB_93_35))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* ifwht: %1*/
/*   %2 = load i32* %tmp.010, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
memory_controller_enable_a = 1'd1;
end
/* ifwht: %1*/
/*   %6 = load i32* %scevgep47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_3))
begin
memory_controller_enable_a = 1'd1;
end
/* ifwht: %1*/
/*   %10 = load i32* %scevgep49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_4))
begin
memory_controller_enable_a = 1'd1;
end
/* ifwht: %1*/
/*   %14 = load i32* %scevgep51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_5))
begin
memory_controller_enable_a = 1'd1;
end
/* ifwht: %1*/
/*   store i32 %26, i32* %out.011, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
memory_controller_enable_a = 1'd1;
end
/* ifwht: %1*/
/*   store i32 %28, i32* %scevgep34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_8))
begin
memory_controller_enable_a = 1'd1;
end
/* ifwht: %1*/
/*   store i32 %30, i32* %scevgep38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_9))
begin
memory_controller_enable_a = 1'd1;
end
/* ifwht: %1*/
/*   store i32 %32, i32* %scevgep42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_10))
begin
memory_controller_enable_a = 1'd1;
end
/* ifwht: %35*/
/*   %36 = load i32* %out.17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_12))
begin
memory_controller_enable_a = 1'd1;
end
/* ifwht: %35*/
/*   %37 = load i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_13))
begin
memory_controller_enable_a = 1'd1;
end
/* ifwht: %35*/
/*   %44 = load i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_14))
begin
memory_controller_enable_a = 1'd1;
end
/* ifwht: %35*/
/*   %45 = load i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_15))
begin
memory_controller_enable_a = 1'd1;
end
/* ifwht: %35*/
/*   store i32 %60, i32* %out.17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
memory_controller_enable_a = 1'd1;
end
/* ifwht: %35*/
/*   store i32 %62, i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_19))
begin
memory_controller_enable_a = 1'd1;
end
/* ifwht: %35*/
/*   store i32 %64, i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_20))
begin
memory_controller_enable_a = 1'd1;
end
/* ifwht: %35*/
/*   store i32 %66, i32* %scevgep.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_21))
begin
memory_controller_enable_a = 1'd1;
end
/* ifwht: %.preheader3*/
/*   store i32 %69, i32* %out.17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
memory_controller_enable_a = 1'd1;
end
/* ifwht: %.preheader3*/
/*   store i32 %73, i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_24))
begin
memory_controller_enable_a = 1'd1;
end
/* ifwht: %.preheader3*/
/*   store i32 %77, i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_25))
begin
memory_controller_enable_a = 1'd1;
end
/* ifwht: %.preheader3*/
/*   store i32 %81, i32* %scevgep.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_26))
begin
memory_controller_enable_a = 1'd1;
end
/* ifwht: %.preheader*/
/*   store i32 %68, i32* %out.17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_28))
begin
memory_controller_enable_a = 1'd1;
end
/* ifwht: %.preheader*/
/*   store i32 %85, i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_29))
begin
memory_controller_enable_a = 1'd1;
end
/* ifwht: %.preheader*/
/*   store i32 %87, i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_30))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* ifwht: %1*/
/*   %2 = load i32* %tmp.010, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
memory_controller_address_a = ifwht_1_tmp_010;
end
/* ifwht: %1*/
/*   %6 = load i32* %scevgep47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_3))
begin
memory_controller_address_a = ifwht_1_scevgep47_reg;
end
/* ifwht: %1*/
/*   %10 = load i32* %scevgep49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_4))
begin
memory_controller_address_a = ifwht_1_scevgep49_reg;
end
/* ifwht: %1*/
/*   %14 = load i32* %scevgep51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_5))
begin
memory_controller_address_a = ifwht_1_scevgep51_reg;
end
/* ifwht: %1*/
/*   store i32 %26, i32* %out.011, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
memory_controller_address_a = ifwht_1_out_011_reg;
end
/* ifwht: %1*/
/*   store i32 %28, i32* %scevgep34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_8))
begin
memory_controller_address_a = ifwht_1_scevgep34_reg;
end
/* ifwht: %1*/
/*   store i32 %30, i32* %scevgep38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_9))
begin
memory_controller_address_a = ifwht_1_scevgep38_reg;
end
/* ifwht: %1*/
/*   store i32 %32, i32* %scevgep42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_10))
begin
memory_controller_address_a = ifwht_1_scevgep42_reg;
end
/* ifwht: %35*/
/*   %36 = load i32* %out.17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_12))
begin
memory_controller_address_a = ifwht_35_out_17;
end
/* ifwht: %35*/
/*   %37 = load i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_13))
begin
memory_controller_address_a = ifwht_35_scevgep_1;
end
/* ifwht: %35*/
/*   %44 = load i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_14))
begin
memory_controller_address_a = ifwht_35_scevgep_4_reg;
end
/* ifwht: %35*/
/*   %45 = load i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_15))
begin
memory_controller_address_a = ifwht_35_scevgep_5_reg;
end
/* ifwht: %35*/
/*   store i32 %60, i32* %out.17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
memory_controller_address_a = ifwht_35_out_17_reg;
end
/* ifwht: %35*/
/*   store i32 %62, i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_19))
begin
memory_controller_address_a = ifwht_35_scevgep_2_reg;
end
/* ifwht: %35*/
/*   store i32 %64, i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_20))
begin
memory_controller_address_a = ifwht_35_scevgep_4_reg;
end
/* ifwht: %35*/
/*   store i32 %66, i32* %scevgep.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_21))
begin
memory_controller_address_a = ifwht_35_scevgep_6_reg;
end
/* ifwht: %.preheader3*/
/*   store i32 %69, i32* %out.17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
memory_controller_address_a = ifwht_35_out_17_reg;
end
/* ifwht: %.preheader3*/
/*   store i32 %73, i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_24))
begin
memory_controller_address_a = ifwht_35_scevgep_2_reg;
end
/* ifwht: %.preheader3*/
/*   store i32 %77, i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_25))
begin
memory_controller_address_a = ifwht_35_scevgep_4_reg;
end
/* ifwht: %.preheader3*/
/*   store i32 %81, i32* %scevgep.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_26))
begin
memory_controller_address_a = ifwht_35_scevgep_6_reg;
end
/* ifwht: %.preheader*/
/*   store i32 %68, i32* %out.17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_28))
begin
memory_controller_address_a = ifwht_35_out_17_reg;
end
/* ifwht: %.preheader*/
/*   store i32 %85, i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_29))
begin
memory_controller_address_a = ifwht_35_scevgep_2_reg;
end
/* ifwht: %.preheader*/
/*   store i32 %87, i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_30))
begin
memory_controller_address_a = ifwht_35_scevgep_4_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ifwht: %1*/
/*   %2 = load i32* %tmp.010, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ifwht: %1*/
/*   %6 = load i32* %scevgep47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ifwht: %1*/
/*   %10 = load i32* %scevgep49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ifwht: %1*/
/*   %14 = load i32* %scevgep51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_5))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ifwht: %1*/
/*   store i32 %26, i32* %out.011, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ifwht: %1*/
/*   store i32 %28, i32* %scevgep34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_8))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ifwht: %1*/
/*   store i32 %30, i32* %scevgep38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_9))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ifwht: %1*/
/*   store i32 %32, i32* %scevgep42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_10))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ifwht: %35*/
/*   %36 = load i32* %out.17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_12))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ifwht: %35*/
/*   %37 = load i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_13))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ifwht: %35*/
/*   %44 = load i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_14))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ifwht: %35*/
/*   %45 = load i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_15))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ifwht: %35*/
/*   store i32 %60, i32* %out.17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ifwht: %35*/
/*   store i32 %62, i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_19))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ifwht: %35*/
/*   store i32 %64, i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_20))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ifwht: %35*/
/*   store i32 %66, i32* %scevgep.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_21))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ifwht: %.preheader3*/
/*   store i32 %69, i32* %out.17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ifwht: %.preheader3*/
/*   store i32 %73, i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_24))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ifwht: %.preheader3*/
/*   store i32 %77, i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_25))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ifwht: %.preheader3*/
/*   store i32 %81, i32* %scevgep.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_26))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ifwht: %.preheader*/
/*   store i32 %68, i32* %out.17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_28))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ifwht: %.preheader*/
/*   store i32 %85, i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_29))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ifwht: %.preheader*/
/*   store i32 %87, i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_30))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* ifwht: %1*/
/*   store i32 %26, i32* %out.011, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
memory_controller_in_a = ifwht_1_26;
end
/* ifwht: %1*/
/*   store i32 %28, i32* %scevgep34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_8))
begin
memory_controller_in_a = ifwht_1_28_reg;
end
/* ifwht: %1*/
/*   store i32 %30, i32* %scevgep38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_9))
begin
memory_controller_in_a = ifwht_1_30_reg;
end
/* ifwht: %1*/
/*   store i32 %32, i32* %scevgep42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_10))
begin
memory_controller_in_a = ifwht_1_32_reg;
end
/* ifwht: %35*/
/*   store i32 %60, i32* %out.17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
memory_controller_in_a = ifwht_35_60;
end
/* ifwht: %35*/
/*   store i32 %62, i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_19))
begin
memory_controller_in_a = ifwht_35_62_reg;
end
/* ifwht: %35*/
/*   store i32 %64, i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_20))
begin
memory_controller_in_a = ifwht_35_64_reg;
end
/* ifwht: %35*/
/*   store i32 %66, i32* %scevgep.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_21))
begin
memory_controller_in_a = ifwht_35_66_reg;
end
/* ifwht: %.preheader3*/
/*   store i32 %69, i32* %out.17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
memory_controller_in_a = ifwht__preheader3_69;
end
/* ifwht: %.preheader3*/
/*   store i32 %73, i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_24))
begin
memory_controller_in_a = ifwht__preheader3_73_reg;
end
/* ifwht: %.preheader3*/
/*   store i32 %77, i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_25))
begin
memory_controller_in_a = ifwht__preheader3_77_reg;
end
/* ifwht: %.preheader3*/
/*   store i32 %81, i32* %scevgep.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_26))
begin
memory_controller_in_a = ifwht__preheader3_81_reg;
end
/* ifwht: %.preheader*/
/*   store i32 %68, i32* %out.17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_28))
begin
memory_controller_in_a = ifwht_35_68_reg;
end
/* ifwht: %.preheader*/
/*   store i32 %85, i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_29))
begin
memory_controller_in_a = ifwht__preheader_85_reg;
end
/* ifwht: %.preheader*/
/*   store i32 %87, i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_30))
begin
memory_controller_in_a = ifwht__preheader_87_reg;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* ifwht: %1*/
/*   %2 = load i32* %tmp.010, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
memory_controller_size_a = 2'd2;
end
/* ifwht: %1*/
/*   %6 = load i32* %scevgep47, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_3))
begin
memory_controller_size_a = 2'd2;
end
/* ifwht: %1*/
/*   %10 = load i32* %scevgep49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_4))
begin
memory_controller_size_a = 2'd2;
end
/* ifwht: %1*/
/*   %14 = load i32* %scevgep51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_5))
begin
memory_controller_size_a = 2'd2;
end
/* ifwht: %1*/
/*   store i32 %26, i32* %out.011, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
memory_controller_size_a = 2'd2;
end
/* ifwht: %1*/
/*   store i32 %28, i32* %scevgep34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_8))
begin
memory_controller_size_a = 2'd2;
end
/* ifwht: %1*/
/*   store i32 %30, i32* %scevgep38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_9))
begin
memory_controller_size_a = 2'd2;
end
/* ifwht: %1*/
/*   store i32 %32, i32* %scevgep42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_10))
begin
memory_controller_size_a = 2'd2;
end
/* ifwht: %35*/
/*   %36 = load i32* %out.17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_12))
begin
memory_controller_size_a = 2'd2;
end
/* ifwht: %35*/
/*   %37 = load i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_13))
begin
memory_controller_size_a = 2'd2;
end
/* ifwht: %35*/
/*   %44 = load i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_14))
begin
memory_controller_size_a = 2'd2;
end
/* ifwht: %35*/
/*   %45 = load i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_15))
begin
memory_controller_size_a = 2'd2;
end
/* ifwht: %35*/
/*   store i32 %60, i32* %out.17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
memory_controller_size_a = 2'd2;
end
/* ifwht: %35*/
/*   store i32 %62, i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_19))
begin
memory_controller_size_a = 2'd2;
end
/* ifwht: %35*/
/*   store i32 %64, i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_20))
begin
memory_controller_size_a = 2'd2;
end
/* ifwht: %35*/
/*   store i32 %66, i32* %scevgep.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_21))
begin
memory_controller_size_a = 2'd2;
end
/* ifwht: %.preheader3*/
/*   store i32 %69, i32* %out.17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
memory_controller_size_a = 2'd2;
end
/* ifwht: %.preheader3*/
/*   store i32 %73, i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_24))
begin
memory_controller_size_a = 2'd2;
end
/* ifwht: %.preheader3*/
/*   store i32 %77, i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_25))
begin
memory_controller_size_a = 2'd2;
end
/* ifwht: %.preheader3*/
/*   store i32 %81, i32* %scevgep.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_26))
begin
memory_controller_size_a = 2'd2;
end
/* ifwht: %.preheader*/
/*   store i32 %68, i32* %out.17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_28))
begin
memory_controller_size_a = 2'd2;
end
/* ifwht: %.preheader*/
/*   store i32 %85, i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_29))
begin
memory_controller_size_a = 2'd2;
end
/* ifwht: %.preheader*/
/*   store i32 %87, i32* %scevgep.4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_30))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* ifwht: %1*/
/*   %3 = load i32* %scevgep46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
memory_controller_enable_b = 1'd1;
end
/* ifwht: %1*/
/*   %7 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_3))
begin
memory_controller_enable_b = 1'd1;
end
/* ifwht: %1*/
/*   %11 = load i32* %scevgep50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_4))
begin
memory_controller_enable_b = 1'd1;
end
/* ifwht: %1*/
/*   %15 = load i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_5))
begin
memory_controller_enable_b = 1'd1;
end
/* ifwht: %1*/
/*   store i32 %27, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
memory_controller_enable_b = 1'd1;
end
/* ifwht: %1*/
/*   store i32 %29, i32* %scevgep36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_8))
begin
memory_controller_enable_b = 1'd1;
end
/* ifwht: %1*/
/*   store i32 %31, i32* %scevgep40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_9))
begin
memory_controller_enable_b = 1'd1;
end
/* ifwht: %1*/
/*   store i32 %33, i32* %scevgep44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_10))
begin
memory_controller_enable_b = 1'd1;
end
/* ifwht: %35*/
/*   %40 = load i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_13))
begin
memory_controller_enable_b = 1'd1;
end
/* ifwht: %35*/
/*   %41 = load i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_14))
begin
memory_controller_enable_b = 1'd1;
end
/* ifwht: %35*/
/*   %48 = load i32* %scevgep.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_15))
begin
memory_controller_enable_b = 1'd1;
end
/* ifwht: %35*/
/*   %49 = load i32* %scevgep.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_16))
begin
memory_controller_enable_b = 1'd1;
end
/* ifwht: %35*/
/*   store i32 %61, i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
memory_controller_enable_b = 1'd1;
end
/* ifwht: %35*/
/*   store i32 %63, i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_19))
begin
memory_controller_enable_b = 1'd1;
end
/* ifwht: %35*/
/*   store i32 %65, i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_20))
begin
memory_controller_enable_b = 1'd1;
end
/* ifwht: %35*/
/*   store i32 %67, i32* %scevgep.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_21))
begin
memory_controller_enable_b = 1'd1;
end
/* ifwht: %.preheader3*/
/*   store i32 %71, i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
memory_controller_enable_b = 1'd1;
end
/* ifwht: %.preheader3*/
/*   store i32 %75, i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_24))
begin
memory_controller_enable_b = 1'd1;
end
/* ifwht: %.preheader3*/
/*   store i32 %79, i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_25))
begin
memory_controller_enable_b = 1'd1;
end
/* ifwht: %.preheader*/
/*   store i32 %84, i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_28))
begin
memory_controller_enable_b = 1'd1;
end
/* ifwht: %.preheader*/
/*   store i32 %86, i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_29))
begin
memory_controller_enable_b = 1'd1;
end
/* ifwht: %.preheader*/
/*   store i32 %88, i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_30))
begin
memory_controller_enable_b = 1'd1;
end
/* ifwht: %.preheader*/
/*   store i32 %89, i32* %scevgep.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_31))
begin
memory_controller_enable_b = 1'd1;
end
/* ifwht: %91*/
/*   store i32 %storemerge, i32* %scevgep.7, align 4*/
if ((cur_state == LEGUP_F_ifwht_BB_91_33))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* ifwht: %1*/
/*   %3 = load i32* %scevgep46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
memory_controller_address_b = ifwht_1_scevgep46;
end
/* ifwht: %1*/
/*   %7 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_3))
begin
memory_controller_address_b = ifwht_1_scevgep48_reg;
end
/* ifwht: %1*/
/*   %11 = load i32* %scevgep50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_4))
begin
memory_controller_address_b = ifwht_1_scevgep50_reg;
end
/* ifwht: %1*/
/*   %15 = load i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_5))
begin
memory_controller_address_b = ifwht_1_scevgep52_reg;
end
/* ifwht: %1*/
/*   store i32 %27, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
memory_controller_address_b = ifwht_1_scevgep_reg;
end
/* ifwht: %1*/
/*   store i32 %29, i32* %scevgep36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_8))
begin
memory_controller_address_b = ifwht_1_scevgep36_reg;
end
/* ifwht: %1*/
/*   store i32 %31, i32* %scevgep40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_9))
begin
memory_controller_address_b = ifwht_1_scevgep40_reg;
end
/* ifwht: %1*/
/*   store i32 %33, i32* %scevgep44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_10))
begin
memory_controller_address_b = ifwht_1_scevgep44_reg;
end
/* ifwht: %35*/
/*   %40 = load i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_13))
begin
memory_controller_address_b = ifwht_35_scevgep_2;
end
/* ifwht: %35*/
/*   %41 = load i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_14))
begin
memory_controller_address_b = ifwht_35_scevgep_3_reg;
end
/* ifwht: %35*/
/*   %48 = load i32* %scevgep.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_15))
begin
memory_controller_address_b = ifwht_35_scevgep_6_reg;
end
/* ifwht: %35*/
/*   %49 = load i32* %scevgep.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_16))
begin
memory_controller_address_b = ifwht_35_scevgep_7_reg;
end
/* ifwht: %35*/
/*   store i32 %61, i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
memory_controller_address_b = ifwht_35_scevgep_1_reg;
end
/* ifwht: %35*/
/*   store i32 %63, i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_19))
begin
memory_controller_address_b = ifwht_35_scevgep_3_reg;
end
/* ifwht: %35*/
/*   store i32 %65, i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_20))
begin
memory_controller_address_b = ifwht_35_scevgep_5_reg;
end
/* ifwht: %35*/
/*   store i32 %67, i32* %scevgep.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_21))
begin
memory_controller_address_b = ifwht_35_scevgep_7_reg;
end
/* ifwht: %.preheader3*/
/*   store i32 %71, i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
memory_controller_address_b = ifwht_35_scevgep_1_reg;
end
/* ifwht: %.preheader3*/
/*   store i32 %75, i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_24))
begin
memory_controller_address_b = ifwht_35_scevgep_3_reg;
end
/* ifwht: %.preheader3*/
/*   store i32 %79, i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_25))
begin
memory_controller_address_b = ifwht_35_scevgep_5_reg;
end
/* ifwht: %.preheader*/
/*   store i32 %84, i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_28))
begin
memory_controller_address_b = ifwht_35_scevgep_1_reg;
end
/* ifwht: %.preheader*/
/*   store i32 %86, i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_29))
begin
memory_controller_address_b = ifwht_35_scevgep_3_reg;
end
/* ifwht: %.preheader*/
/*   store i32 %88, i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_30))
begin
memory_controller_address_b = ifwht_35_scevgep_5_reg;
end
/* ifwht: %.preheader*/
/*   store i32 %89, i32* %scevgep.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_31))
begin
memory_controller_address_b = ifwht_35_scevgep_6_reg;
end
/* ifwht: %91*/
/*   store i32 %storemerge, i32* %scevgep.7, align 4*/
if ((cur_state == LEGUP_F_ifwht_BB_91_33))
begin
memory_controller_address_b = ifwht_35_scevgep_7_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ifwht: %1*/
/*   %3 = load i32* %scevgep46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ifwht: %1*/
/*   %7 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_3))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ifwht: %1*/
/*   %11 = load i32* %scevgep50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_4))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ifwht: %1*/
/*   %15 = load i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_5))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ifwht: %1*/
/*   store i32 %27, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ifwht: %1*/
/*   store i32 %29, i32* %scevgep36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_8))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ifwht: %1*/
/*   store i32 %31, i32* %scevgep40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_9))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ifwht: %1*/
/*   store i32 %33, i32* %scevgep44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_10))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ifwht: %35*/
/*   %40 = load i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_13))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ifwht: %35*/
/*   %41 = load i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_14))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ifwht: %35*/
/*   %48 = load i32* %scevgep.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_15))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ifwht: %35*/
/*   %49 = load i32* %scevgep.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_16))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ifwht: %35*/
/*   store i32 %61, i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ifwht: %35*/
/*   store i32 %63, i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_19))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ifwht: %35*/
/*   store i32 %65, i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_20))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ifwht: %35*/
/*   store i32 %67, i32* %scevgep.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_21))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ifwht: %.preheader3*/
/*   store i32 %71, i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ifwht: %.preheader3*/
/*   store i32 %75, i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_24))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ifwht: %.preheader3*/
/*   store i32 %79, i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_25))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ifwht: %.preheader*/
/*   store i32 %84, i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_28))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ifwht: %.preheader*/
/*   store i32 %86, i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_29))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ifwht: %.preheader*/
/*   store i32 %88, i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_30))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ifwht: %.preheader*/
/*   store i32 %89, i32* %scevgep.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_31))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ifwht: %91*/
/*   store i32 %storemerge, i32* %scevgep.7, align 4*/
if ((cur_state == LEGUP_F_ifwht_BB_91_33))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* ifwht: %1*/
/*   store i32 %27, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
memory_controller_in_b = ifwht_1_27;
end
/* ifwht: %1*/
/*   store i32 %29, i32* %scevgep36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_8))
begin
memory_controller_in_b = ifwht_1_29_reg;
end
/* ifwht: %1*/
/*   store i32 %31, i32* %scevgep40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_9))
begin
memory_controller_in_b = ifwht_1_31_reg;
end
/* ifwht: %1*/
/*   store i32 %33, i32* %scevgep44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_10))
begin
memory_controller_in_b = ifwht_1_33_reg;
end
/* ifwht: %35*/
/*   store i32 %61, i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
memory_controller_in_b = ifwht_35_61;
end
/* ifwht: %35*/
/*   store i32 %63, i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_19))
begin
memory_controller_in_b = ifwht_35_63_reg;
end
/* ifwht: %35*/
/*   store i32 %65, i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_20))
begin
memory_controller_in_b = ifwht_35_65_reg;
end
/* ifwht: %35*/
/*   store i32 %67, i32* %scevgep.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_21))
begin
memory_controller_in_b = ifwht_35_67_reg;
end
/* ifwht: %.preheader3*/
/*   store i32 %71, i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
memory_controller_in_b = ifwht__preheader3_71;
end
/* ifwht: %.preheader3*/
/*   store i32 %75, i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_24))
begin
memory_controller_in_b = ifwht__preheader3_75_reg;
end
/* ifwht: %.preheader3*/
/*   store i32 %79, i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_25))
begin
memory_controller_in_b = ifwht__preheader3_79_reg;
end
/* ifwht: %.preheader*/
/*   store i32 %84, i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_28))
begin
memory_controller_in_b = ifwht__preheader_84;
end
/* ifwht: %.preheader*/
/*   store i32 %86, i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_29))
begin
memory_controller_in_b = ifwht__preheader_86_reg;
end
/* ifwht: %.preheader*/
/*   store i32 %88, i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_30))
begin
memory_controller_in_b = ifwht__preheader_88_reg;
end
/* ifwht: %.preheader*/
/*   store i32 %89, i32* %scevgep.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_31))
begin
memory_controller_in_b = ifwht__preheader_89_reg;
end
/* ifwht: %91*/
/*   store i32 %storemerge, i32* %scevgep.7, align 4*/
if ((cur_state == LEGUP_F_ifwht_BB_91_33))
begin
memory_controller_in_b = ifwht_91_storemerge_reg;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* ifwht: %1*/
/*   %3 = load i32* %scevgep46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_2))
begin
memory_controller_size_b = 2'd2;
end
/* ifwht: %1*/
/*   %7 = load i32* %scevgep48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_3))
begin
memory_controller_size_b = 2'd2;
end
/* ifwht: %1*/
/*   %11 = load i32* %scevgep50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_4))
begin
memory_controller_size_b = 2'd2;
end
/* ifwht: %1*/
/*   %15 = load i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_5))
begin
memory_controller_size_b = 2'd2;
end
/* ifwht: %1*/
/*   store i32 %27, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_7))
begin
memory_controller_size_b = 2'd2;
end
/* ifwht: %1*/
/*   store i32 %29, i32* %scevgep36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_8))
begin
memory_controller_size_b = 2'd2;
end
/* ifwht: %1*/
/*   store i32 %31, i32* %scevgep40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_9))
begin
memory_controller_size_b = 2'd2;
end
/* ifwht: %1*/
/*   store i32 %33, i32* %scevgep44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_1_10))
begin
memory_controller_size_b = 2'd2;
end
/* ifwht: %35*/
/*   %40 = load i32* %scevgep.2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_13))
begin
memory_controller_size_b = 2'd2;
end
/* ifwht: %35*/
/*   %41 = load i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_14))
begin
memory_controller_size_b = 2'd2;
end
/* ifwht: %35*/
/*   %48 = load i32* %scevgep.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_15))
begin
memory_controller_size_b = 2'd2;
end
/* ifwht: %35*/
/*   %49 = load i32* %scevgep.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_16))
begin
memory_controller_size_b = 2'd2;
end
/* ifwht: %35*/
/*   store i32 %61, i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_18))
begin
memory_controller_size_b = 2'd2;
end
/* ifwht: %35*/
/*   store i32 %63, i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_19))
begin
memory_controller_size_b = 2'd2;
end
/* ifwht: %35*/
/*   store i32 %65, i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_20))
begin
memory_controller_size_b = 2'd2;
end
/* ifwht: %35*/
/*   store i32 %67, i32* %scevgep.7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB_35_21))
begin
memory_controller_size_b = 2'd2;
end
/* ifwht: %.preheader3*/
/*   store i32 %71, i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_23))
begin
memory_controller_size_b = 2'd2;
end
/* ifwht: %.preheader3*/
/*   store i32 %75, i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_24))
begin
memory_controller_size_b = 2'd2;
end
/* ifwht: %.preheader3*/
/*   store i32 %79, i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader3_25))
begin
memory_controller_size_b = 2'd2;
end
/* ifwht: %.preheader*/
/*   store i32 %84, i32* %scevgep.1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_28))
begin
memory_controller_size_b = 2'd2;
end
/* ifwht: %.preheader*/
/*   store i32 %86, i32* %scevgep.3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_29))
begin
memory_controller_size_b = 2'd2;
end
/* ifwht: %.preheader*/
/*   store i32 %88, i32* %scevgep.5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_30))
begin
memory_controller_size_b = 2'd2;
end
/* ifwht: %.preheader*/
/*   store i32 %89, i32* %scevgep.6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ifwht_BB__preheader_31))
begin
memory_controller_size_b = 2'd2;
end
/* ifwht: %91*/
/*   store i32 %storemerge, i32* %scevgep.7, align 4*/
if ((cur_state == LEGUP_F_ifwht_BB_91_33))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg  ifwht_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_arg_block;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_arg_output_block;
reg [31:0] ifwht_arg_intra;
wire  ifwht_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_memory_controller_address_a;
wire  ifwht_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] ifwht_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] ifwht_memory_controller_out_a;
wire [1:0] ifwht_memory_controller_size_a;
wire  ifwht_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ifwht_memory_controller_address_b;
wire  ifwht_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] ifwht_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] ifwht_memory_controller_out_b;
wire [1:0] ifwht_memory_controller_size_b;
reg  ifwht_memory_controller_waitrequest;
wire  ifwht_finish;
reg  ifwht_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


ifwht ifwht_inst (
	.memory_controller_enable_a (ifwht_memory_controller_enable_a),
	.memory_controller_address_a (ifwht_memory_controller_address_a),
	.memory_controller_write_enable_a (ifwht_memory_controller_write_enable_a),
	.memory_controller_in_a (ifwht_memory_controller_in_a),
	.memory_controller_size_a (ifwht_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (ifwht_memory_controller_enable_b),
	.memory_controller_address_b (ifwht_memory_controller_address_b),
	.memory_controller_write_enable_b (ifwht_memory_controller_write_enable_b),
	.memory_controller_in_b (ifwht_memory_controller_in_b),
	.memory_controller_size_b (ifwht_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (ifwht_start),
	.finish (ifwht_finish),
	.arg_block (ifwht_arg_block),
	.arg_output_block (ifwht_arg_output_block),
	.arg_intra (ifwht_arg_intra)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (ifwht_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (ifwht_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
ifwht_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_start"); $finish; end
end
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
ifwht_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
ifwht_arg_block <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_arg_block"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
ifwht_arg_output_block <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_arg_output_block"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
ifwht_arg_intra <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ifwht_arg_intra"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
begin
ifwht_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
begin
ifwht_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
ifwht_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
ifwht_finish_final = ifwht_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = ifwht_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = ifwht_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ifwht_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ifwht_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = ifwht_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = ifwht_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ifwht_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ifwht_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = ifwht_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = ifwht_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = ifwht_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = ifwht_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ifwht_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ifwht_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = ifwht_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = ifwht_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ifwht_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ifwht_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = ifwht_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @ifwht(i32* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = ifwht_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
