// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module coloringFB (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        counter,
        size_pixels,
        pixels_x_address0,
        pixels_x_ce0,
        pixels_x_q0,
        pixels_y_address0,
        pixels_y_ce0,
        pixels_y_q0,
        pixels_color_address0,
        pixels_color_ce0,
        pixels_color_q0,
        frame_buffer_address0,
        frame_buffer_ce0,
        frame_buffer_we0,
        frame_buffer_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [11:0] counter;
input  [31:0] size_pixels;
output  [8:0] pixels_x_address0;
output   pixels_x_ce0;
input  [7:0] pixels_x_q0;
output  [8:0] pixels_y_address0;
output   pixels_y_ce0;
input  [7:0] pixels_y_q0;
output  [8:0] pixels_color_address0;
output   pixels_color_ce0;
input  [7:0] pixels_color_q0;
output  [15:0] frame_buffer_address0;
output   frame_buffer_ce0;
output   frame_buffer_we0;
output  [7:0] frame_buffer_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg pixels_x_ce0;
reg pixels_y_ce0;
reg pixels_color_ce0;
reg[15:0] frame_buffer_address0;
reg frame_buffer_ce0;
reg frame_buffer_we0;
reg[7:0] frame_buffer_d0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln239_fu_159_p2;
reg   [0:0] icmp_ln239_reg_255;
wire   [8:0] i_fu_171_p2;
reg   [8:0] i_reg_262;
wire    ap_CS_fsm_state2;
wire   [17:0] zext_ln244_fu_185_p1;
reg   [17:0] zext_ln244_reg_267;
wire   [0:0] icmp_ln242_fu_165_p2;
wire   [8:0] j_fu_195_p2;
wire    ap_CS_fsm_state3;
wire   [30:0] i_2_fu_224_p2;
reg   [30:0] i_2_reg_283;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln250_fu_219_p2;
reg   [8:0] i_0_reg_126;
wire   [0:0] icmp_ln244_fu_189_p2;
reg   [8:0] j_0_reg_137;
reg   [30:0] i1_0_reg_148;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln245_1_fu_210_p1;
wire   [63:0] zext_ln251_fu_230_p1;
wire   [63:0] zext_ln251_1_fu_245_p1;
wire   [16:0] tmp_3_fu_177_p3;
wire   [17:0] zext_ln245_fu_201_p1;
wire   [17:0] add_ln245_fu_205_p2;
wire   [31:0] zext_ln250_fu_215_p1;
wire   [15:0] tmp_4_fu_237_p3;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i1_0_reg_148 <= i_2_reg_283;
    end else if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln242_fu_165_p2 == 1'd1) | (icmp_ln239_reg_255 == 1'd0)))) begin
        i1_0_reg_148 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln239_fu_159_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_126 <= 9'd0;
    end else if (((icmp_ln244_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_126 <= i_reg_262;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln244_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_reg_137 <= j_fu_195_p2;
    end else if (((icmp_ln242_fu_165_p2 == 1'd0) & (icmp_ln239_reg_255 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_137 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_2_reg_283 <= i_2_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln239_reg_255 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_262 <= i_fu_171_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        icmp_ln239_reg_255 <= icmp_ln239_fu_159_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln242_fu_165_p2 == 1'd0) & (icmp_ln239_reg_255 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln244_reg_267[16 : 8] <= zext_ln244_fu_185_p1[16 : 8];
    end
end

always @ (*) begin
    if ((((icmp_ln250_fu_219_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln250_fu_219_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        frame_buffer_address0 = zext_ln251_1_fu_245_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        frame_buffer_address0 = zext_ln245_1_fu_210_p1;
    end else begin
        frame_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        frame_buffer_ce0 = 1'b1;
    end else begin
        frame_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        frame_buffer_d0 = pixels_color_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        frame_buffer_d0 = 8'd0;
    end else begin
        frame_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((icmp_ln244_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        frame_buffer_we0 = 1'b1;
    end else begin
        frame_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pixels_color_ce0 = 1'b1;
    end else begin
        pixels_color_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pixels_x_ce0 = 1'b1;
    end else begin
        pixels_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pixels_y_ce0 = 1'b1;
    end else begin
        pixels_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln242_fu_165_p2 == 1'd1) | (icmp_ln239_reg_255 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln244_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln250_fu_219_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln245_fu_205_p2 = (zext_ln244_reg_267 + zext_ln245_fu_201_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign i_2_fu_224_p2 = (i1_0_reg_148 + 31'd1);

assign i_fu_171_p2 = (i_0_reg_126 + 9'd1);

assign icmp_ln239_fu_159_p2 = ((counter == 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln242_fu_165_p2 = ((i_0_reg_126 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln244_fu_189_p2 = ((j_0_reg_137 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln250_fu_219_p2 = (($signed(zext_ln250_fu_215_p1) < $signed(size_pixels)) ? 1'b1 : 1'b0);

assign j_fu_195_p2 = (j_0_reg_137 + 9'd1);

assign pixels_color_address0 = zext_ln251_fu_230_p1;

assign pixels_x_address0 = zext_ln251_fu_230_p1;

assign pixels_y_address0 = zext_ln251_fu_230_p1;

assign tmp_3_fu_177_p3 = {{i_0_reg_126}, {8'd0}};

assign tmp_4_fu_237_p3 = {{pixels_x_q0}, {pixels_y_q0}};

assign zext_ln244_fu_185_p1 = tmp_3_fu_177_p3;

assign zext_ln245_1_fu_210_p1 = add_ln245_fu_205_p2;

assign zext_ln245_fu_201_p1 = j_0_reg_137;

assign zext_ln250_fu_215_p1 = i1_0_reg_148;

assign zext_ln251_1_fu_245_p1 = tmp_4_fu_237_p3;

assign zext_ln251_fu_230_p1 = i1_0_reg_148;

always @ (posedge ap_clk) begin
    zext_ln244_reg_267[7:0] <= 8'b00000000;
    zext_ln244_reg_267[17] <= 1'b0;
end

endmodule //coloringFB
