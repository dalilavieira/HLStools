// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module zculling (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        counter,
        fragments_x_address0,
        fragments_x_ce0,
        fragments_x_q0,
        fragments_y_address0,
        fragments_y_ce0,
        fragments_y_q0,
        fragments_z_address0,
        fragments_z_ce0,
        fragments_z_q0,
        fragments_color_address0,
        fragments_color_ce0,
        fragments_color_q0,
        size,
        pixels_x_address0,
        pixels_x_ce0,
        pixels_x_we0,
        pixels_x_d0,
        pixels_y_address0,
        pixels_y_ce0,
        pixels_y_we0,
        pixels_y_d0,
        pixels_color_address0,
        pixels_color_ce0,
        pixels_color_we0,
        pixels_color_d0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [11:0] counter;
output  [8:0] fragments_x_address0;
output   fragments_x_ce0;
input  [7:0] fragments_x_q0;
output  [8:0] fragments_y_address0;
output   fragments_y_ce0;
input  [7:0] fragments_y_q0;
output  [8:0] fragments_z_address0;
output   fragments_z_ce0;
input  [7:0] fragments_z_q0;
output  [8:0] fragments_color_address0;
output   fragments_color_ce0;
input  [7:0] fragments_color_q0;
input  [31:0] size;
output  [8:0] pixels_x_address0;
output   pixels_x_ce0;
output   pixels_x_we0;
output  [7:0] pixels_x_d0;
output  [8:0] pixels_y_address0;
output   pixels_y_ce0;
output   pixels_y_we0;
output  [7:0] pixels_y_d0;
output  [8:0] pixels_color_address0;
output   pixels_color_ce0;
output   pixels_color_we0;
output  [7:0] pixels_color_d0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fragments_x_ce0;
reg fragments_y_ce0;
reg fragments_z_ce0;
reg fragments_color_ce0;
reg pixels_x_ce0;
reg pixels_x_we0;
reg pixels_y_ce0;
reg pixels_y_we0;
reg pixels_color_ce0;
reg pixels_color_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] z_buffer_address0;
reg    z_buffer_ce0;
reg    z_buffer_we0;
reg   [7:0] z_buffer_d0;
wire   [7:0] z_buffer_q0;
wire   [0:0] icmp_ln205_fu_233_p2;
reg   [0:0] icmp_ln205_reg_357;
wire   [8:0] i_fu_245_p2;
reg   [8:0] i_reg_364;
wire    ap_CS_fsm_state2;
wire   [17:0] zext_ln209_fu_259_p1;
reg   [17:0] zext_ln209_reg_369;
wire   [0:0] icmp_ln207_fu_239_p2;
wire   [8:0] j_fu_274_p2;
wire    ap_CS_fsm_state3;
wire   [30:0] n_fu_303_p2;
reg   [30:0] n_reg_392;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln222_fu_309_p1;
reg   [63:0] zext_ln222_reg_397;
wire   [0:0] icmp_ln220_fu_298_p2;
wire    ap_CS_fsm_state5;
reg   [7:0] fragments_x_load_reg_418;
reg   [7:0] fragments_y_load_reg_423;
reg   [15:0] z_buffer_addr_1_reg_428;
wire   [0:0] icmp_ln222_fu_328_p2;
reg   [0:0] icmp_ln222_reg_433;
wire    ap_CS_fsm_state6;
reg   [8:0] i_0_reg_197;
wire   [0:0] icmp_ln209_fu_268_p2;
reg   [8:0] j_0_reg_208;
reg   [30:0] n_0_reg_219;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln211_1_fu_289_p1;
wire   [63:0] zext_ln222_1_fu_323_p1;
wire  signed [63:0] sext_ln224_fu_334_p1;
reg   [31:0] pixel_cntr_1_fu_66;
wire   [31:0] pixel_cntr_fu_341_p2;
wire   [16:0] tmp_1_fu_251_p3;
wire   [17:0] zext_ln211_fu_280_p1;
wire   [17:0] add_ln211_fu_284_p2;
wire   [31:0] zext_ln220_fu_294_p1;
wire   [15:0] tmp_2_fu_315_p3;
wire  signed [31:0] sext_ln224_fu_334_p0;
wire  signed [31:0] pixel_cntr_fu_341_p0;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

zculling_z_buffer #(
    .DataWidth( 8 ),
    .AddressRange( 65536 ),
    .AddressWidth( 16 ))
z_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(z_buffer_address0),
    .ce0(z_buffer_ce0),
    .we0(z_buffer_we0),
    .d0(z_buffer_d0),
    .q0(z_buffer_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln205_fu_233_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_197 <= 9'd0;
    end else if (((icmp_ln209_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_197 <= i_reg_364;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln209_fu_268_p2 == 1'd0))) begin
        j_0_reg_208 <= j_fu_274_p2;
    end else if (((icmp_ln205_reg_357 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln207_fu_239_p2 == 1'd0))) begin
        j_0_reg_208 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        n_0_reg_219 <= n_reg_392;
    end else if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln207_fu_239_p2 == 1'd1) | (icmp_ln205_reg_357 == 1'd0)))) begin
        n_0_reg_219 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln222_reg_433 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        pixel_cntr_1_fu_66 <= pixel_cntr_fu_341_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln207_fu_239_p2 == 1'd1) | (icmp_ln205_reg_357 == 1'd0)))) begin
        pixel_cntr_1_fu_66 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        fragments_x_load_reg_418 <= fragments_x_q0;
        fragments_y_load_reg_423 <= fragments_y_q0;
        z_buffer_addr_1_reg_428 <= zext_ln222_1_fu_323_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln205_reg_357 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_364 <= i_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        icmp_ln205_reg_357 <= icmp_ln205_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln222_reg_433 <= icmp_ln222_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        n_reg_392 <= n_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln205_reg_357 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln207_fu_239_p2 == 1'd0))) begin
        zext_ln209_reg_369[16 : 8] <= zext_ln209_fu_259_p1[16 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln220_fu_298_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln222_reg_397[30 : 0] <= zext_ln222_fu_309_p1[30 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln220_fu_298_p2 == 1'd0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln220_fu_298_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        fragments_color_ce0 = 1'b1;
    end else begin
        fragments_color_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        fragments_x_ce0 = 1'b1;
    end else begin
        fragments_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        fragments_y_ce0 = 1'b1;
    end else begin
        fragments_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        fragments_z_ce0 = 1'b1;
    end else begin
        fragments_z_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        pixels_color_ce0 = 1'b1;
    end else begin
        pixels_color_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln222_reg_433 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        pixels_color_we0 = 1'b1;
    end else begin
        pixels_color_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        pixels_x_ce0 = 1'b1;
    end else begin
        pixels_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln222_reg_433 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        pixels_x_we0 = 1'b1;
    end else begin
        pixels_x_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        pixels_y_ce0 = 1'b1;
    end else begin
        pixels_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln222_reg_433 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        pixels_y_we0 = 1'b1;
    end else begin
        pixels_y_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        z_buffer_address0 = z_buffer_addr_1_reg_428;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        z_buffer_address0 = zext_ln222_1_fu_323_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        z_buffer_address0 = zext_ln211_1_fu_289_p1;
    end else begin
        z_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        z_buffer_ce0 = 1'b1;
    end else begin
        z_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        z_buffer_d0 = fragments_z_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        z_buffer_d0 = 8'd255;
    end else begin
        z_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln222_fu_328_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln209_fu_268_p2 == 1'd0)))) begin
        z_buffer_we0 = 1'b1;
    end else begin
        z_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln207_fu_239_p2 == 1'd1) | (icmp_ln205_reg_357 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln209_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln220_fu_298_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln211_fu_284_p2 = (zext_ln209_reg_369 + zext_ln211_fu_280_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_return = pixel_cntr_1_fu_66;

assign fragments_color_address0 = zext_ln222_reg_397;

assign fragments_x_address0 = zext_ln222_fu_309_p1;

assign fragments_y_address0 = zext_ln222_fu_309_p1;

assign fragments_z_address0 = zext_ln222_reg_397;

assign i_fu_245_p2 = (i_0_reg_197 + 9'd1);

assign icmp_ln205_fu_233_p2 = ((counter == 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln207_fu_239_p2 = ((i_0_reg_197 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln209_fu_268_p2 = ((j_0_reg_208 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln220_fu_298_p2 = (($signed(zext_ln220_fu_294_p1) < $signed(size)) ? 1'b1 : 1'b0);

assign icmp_ln222_fu_328_p2 = ((fragments_z_q0 < z_buffer_q0) ? 1'b1 : 1'b0);

assign j_fu_274_p2 = (j_0_reg_208 + 9'd1);

assign n_fu_303_p2 = (n_0_reg_219 + 31'd1);

assign pixel_cntr_fu_341_p0 = pixel_cntr_1_fu_66;

assign pixel_cntr_fu_341_p2 = ($signed(pixel_cntr_fu_341_p0) + $signed(32'd1));

assign pixels_color_address0 = sext_ln224_fu_334_p1;

assign pixels_color_d0 = fragments_color_q0;

assign pixels_x_address0 = sext_ln224_fu_334_p1;

assign pixels_x_d0 = fragments_x_load_reg_418;

assign pixels_y_address0 = sext_ln224_fu_334_p1;

assign pixels_y_d0 = fragments_y_load_reg_423;

assign sext_ln224_fu_334_p0 = pixel_cntr_1_fu_66;

assign sext_ln224_fu_334_p1 = sext_ln224_fu_334_p0;

assign tmp_1_fu_251_p3 = {{i_0_reg_197}, {8'd0}};

assign tmp_2_fu_315_p3 = {{fragments_y_q0}, {fragments_x_q0}};

assign zext_ln209_fu_259_p1 = tmp_1_fu_251_p3;

assign zext_ln211_1_fu_289_p1 = add_ln211_fu_284_p2;

assign zext_ln211_fu_280_p1 = j_0_reg_208;

assign zext_ln220_fu_294_p1 = n_0_reg_219;

assign zext_ln222_1_fu_323_p1 = tmp_2_fu_315_p3;

assign zext_ln222_fu_309_p1 = n_0_reg_219;

always @ (posedge ap_clk) begin
    zext_ln209_reg_369[7:0] <= 8'b00000000;
    zext_ln209_reg_369[17] <= 1'b0;
    zext_ln222_reg_397[63:31] <= 33'b000000000000000000000000000000000;
end

endmodule //zculling
