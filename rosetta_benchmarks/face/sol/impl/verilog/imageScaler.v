// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module imageScaler (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Data_address0,
        Data_ce0,
        Data_q0,
        dest_height,
        dest_width,
        IMG1_data_address0,
        IMG1_data_ce0,
        IMG1_data_we0,
        IMG1_data_d0
);

parameter    ap_ST_fsm_state1 = 34'd1;
parameter    ap_ST_fsm_state2 = 34'd2;
parameter    ap_ST_fsm_state3 = 34'd4;
parameter    ap_ST_fsm_state4 = 34'd8;
parameter    ap_ST_fsm_state5 = 34'd16;
parameter    ap_ST_fsm_state6 = 34'd32;
parameter    ap_ST_fsm_state7 = 34'd64;
parameter    ap_ST_fsm_state8 = 34'd128;
parameter    ap_ST_fsm_state9 = 34'd256;
parameter    ap_ST_fsm_state10 = 34'd512;
parameter    ap_ST_fsm_state11 = 34'd1024;
parameter    ap_ST_fsm_state12 = 34'd2048;
parameter    ap_ST_fsm_state13 = 34'd4096;
parameter    ap_ST_fsm_state14 = 34'd8192;
parameter    ap_ST_fsm_state15 = 34'd16384;
parameter    ap_ST_fsm_state16 = 34'd32768;
parameter    ap_ST_fsm_state17 = 34'd65536;
parameter    ap_ST_fsm_state18 = 34'd131072;
parameter    ap_ST_fsm_state19 = 34'd262144;
parameter    ap_ST_fsm_state20 = 34'd524288;
parameter    ap_ST_fsm_state21 = 34'd1048576;
parameter    ap_ST_fsm_state22 = 34'd2097152;
parameter    ap_ST_fsm_state23 = 34'd4194304;
parameter    ap_ST_fsm_state24 = 34'd8388608;
parameter    ap_ST_fsm_state25 = 34'd16777216;
parameter    ap_ST_fsm_state26 = 34'd33554432;
parameter    ap_ST_fsm_state27 = 34'd67108864;
parameter    ap_ST_fsm_state28 = 34'd134217728;
parameter    ap_ST_fsm_state29 = 34'd268435456;
parameter    ap_ST_fsm_state30 = 34'd536870912;
parameter    ap_ST_fsm_state31 = 34'd1073741824;
parameter    ap_ST_fsm_state32 = 34'd2147483648;
parameter    ap_ST_fsm_state33 = 34'd4294967296;
parameter    ap_ST_fsm_state34 = 34'd8589934592;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [16:0] Data_address0;
output   Data_ce0;
input  [7:0] Data_q0;
input  [31:0] dest_height;
input  [31:0] dest_width;
output  [16:0] IMG1_data_address0;
output   IMG1_data_ce0;
output   IMG1_data_we0;
output  [7:0] IMG1_data_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Data_ce0;
reg IMG1_data_ce0;
reg IMG1_data_we0;

(* fsm_encoding = "none" *) reg   [33:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire   [31:0] x_ratio_fu_167_p2;
reg   [31:0] x_ratio_reg_357;
wire    ap_CS_fsm_state31;
wire   [31:0] y_ratio_fu_173_p2;
reg   [31:0] y_ratio_reg_362;
wire   [31:0] add_ln400_fu_179_p2;
reg   [31:0] add_ln400_reg_367;
wire    ap_CS_fsm_state32;
wire   [7:0] i_fu_194_p2;
reg   [7:0] i_reg_375;
wire   [0:0] icmp_ln405_fu_200_p2;
reg   [0:0] icmp_ln405_reg_380;
wire   [0:0] icmp_ln400_fu_188_p2;
wire   [17:0] add_ln407_fu_241_p2;
reg   [17:0] add_ln407_reg_385;
wire   [16:0] add_ln407_1_fu_271_p2;
reg   [16:0] add_ln407_1_reg_390;
wire   [8:0] j_fu_287_p2;
reg   [8:0] j_reg_398;
wire    ap_CS_fsm_state33;
wire   [0:0] and_ln405_fu_298_p2;
reg   [0:0] and_ln405_reg_403;
wire   [0:0] icmp_ln403_fu_281_p2;
wire   [31:0] add_ln405_fu_303_p2;
reg   [31:0] add_ln405_reg_407;
wire   [16:0] add_ln407_3_fu_336_p2;
reg   [16:0] add_ln407_3_reg_417;
reg   [7:0] i_0_reg_111;
reg   [31:0] phi_mul5_reg_122;
reg   [8:0] j_0_reg_133;
wire    ap_CS_fsm_state34;
reg   [31:0] phi_mul_reg_144;
wire  signed [63:0] sext_ln407_1_fu_327_p1;
wire   [63:0] zext_ln407_3_fu_341_p1;
wire   [26:0] grp_fu_155_p0;
wire   [25:0] grp_fu_161_p0;
wire   [31:0] grp_fu_155_p2;
wire   [31:0] grp_fu_161_p2;
wire   [31:0] zext_ln400_fu_184_p1;
wire   [9:0] tmp_13_fu_205_p4;
wire   [11:0] tmp_14_fu_223_p4;
wire   [17:0] sext_ln407_cast_fu_215_p3;
wire   [17:0] sext_ln407_2_cast_fu_233_p3;
wire   [15:0] tmp_s_fu_247_p3;
wire   [13:0] tmp_8_fu_259_p3;
wire   [16:0] zext_ln407_fu_255_p1;
wire   [16:0] zext_ln407_1_fu_267_p1;
wire   [31:0] zext_ln403_fu_277_p1;
wire   [0:0] icmp_ln405_1_fu_293_p2;
wire   [15:0] tmp_15_fu_308_p4;
wire  signed [17:0] sext_ln407_fu_318_p1;
wire   [17:0] add_ln407_2_fu_322_p2;
wire   [16:0] zext_ln407_2_fu_332_p1;
reg    grp_fu_155_ap_start;
wire    grp_fu_155_ap_done;
reg    grp_fu_161_ap_start;
wire    grp_fu_161_ap_done;
reg   [33:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 34'd1;
end

face_detect_sw_sdiv_27ns_32ns_32_31_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 27 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
face_detect_sw_sdiv_27ns_32ns_32_31_seq_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_155_ap_start),
    .done(grp_fu_155_ap_done),
    .din0(grp_fu_155_p0),
    .din1(dest_width),
    .ce(1'b1),
    .dout(grp_fu_155_p2)
);

face_detect_sw_sdiv_26ns_32ns_32_30_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
face_detect_sw_sdiv_26ns_32ns_32_30_seq_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_161_ap_start),
    .done(grp_fu_161_ap_done),
    .din0(grp_fu_161_p0),
    .din1(dest_height),
    .ce(1'b1),
    .dout(grp_fu_161_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (icmp_ln403_fu_281_p2 == 1'd1))) begin
        i_0_reg_111 <= i_reg_375;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        i_0_reg_111 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        j_0_reg_133 <= j_reg_398;
    end else if (((1'b1 == ap_CS_fsm_state32) & (icmp_ln400_fu_188_p2 == 1'd0))) begin
        j_0_reg_133 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (icmp_ln403_fu_281_p2 == 1'd1))) begin
        phi_mul5_reg_122 <= add_ln400_reg_367;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        phi_mul5_reg_122 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        phi_mul_reg_144 <= add_ln405_reg_407;
    end else if (((1'b1 == ap_CS_fsm_state32) & (icmp_ln400_fu_188_p2 == 1'd0))) begin
        phi_mul_reg_144 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        add_ln400_reg_367 <= add_ln400_fu_179_p2;
        i_reg_375 <= i_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (icmp_ln403_fu_281_p2 == 1'd0))) begin
        add_ln405_reg_407 <= add_ln405_fu_303_p2;
        and_ln405_reg_403 <= and_ln405_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) & (icmp_ln400_fu_188_p2 == 1'd0))) begin
        add_ln407_1_reg_390[16 : 6] <= add_ln407_1_fu_271_p2[16 : 6];
        add_ln407_reg_385[17 : 6] <= add_ln407_fu_241_p2[17 : 6];
        icmp_ln405_reg_380 <= icmp_ln405_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (1'd1 == and_ln405_fu_298_p2) & (icmp_ln403_fu_281_p2 == 1'd0))) begin
        add_ln407_3_reg_417 <= add_ln407_3_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        j_reg_398 <= j_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        x_ratio_reg_357 <= x_ratio_fu_167_p2;
        y_ratio_reg_362 <= y_ratio_fu_173_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        Data_ce0 = 1'b1;
    end else begin
        Data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        IMG1_data_ce0 = 1'b1;
    end else begin
        IMG1_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & (1'd1 == and_ln405_reg_403))) begin
        IMG1_data_we0 = 1'b1;
    end else begin
        IMG1_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state32) & (icmp_ln400_fu_188_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) & (icmp_ln400_fu_188_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_155_ap_start = 1'b1;
    end else begin
        grp_fu_155_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_161_ap_start = 1'b1;
    end else begin
        grp_fu_161_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (icmp_ln400_fu_188_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (icmp_ln403_fu_281_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Data_address0 = sext_ln407_1_fu_327_p1;

assign IMG1_data_address0 = zext_ln407_3_fu_341_p1;

assign IMG1_data_d0 = Data_q0;

assign add_ln400_fu_179_p2 = (phi_mul5_reg_122 + y_ratio_reg_362);

assign add_ln405_fu_303_p2 = (phi_mul_reg_144 + x_ratio_reg_357);

assign add_ln407_1_fu_271_p2 = (zext_ln407_fu_255_p1 + zext_ln407_1_fu_267_p1);

assign add_ln407_2_fu_322_p2 = ($signed(add_ln407_reg_385) + $signed(sext_ln407_fu_318_p1));

assign add_ln407_3_fu_336_p2 = (add_ln407_1_reg_390 + zext_ln407_2_fu_332_p1);

assign add_ln407_fu_241_p2 = (sext_ln407_cast_fu_215_p3 + sext_ln407_2_cast_fu_233_p3);

assign and_ln405_fu_298_p2 = (icmp_ln405_reg_380 & icmp_ln405_1_fu_293_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign grp_fu_155_p0 = 32'd20971520;

assign grp_fu_161_p0 = 32'd15728640;

assign i_fu_194_p2 = (i_0_reg_111 + 8'd1);

assign icmp_ln400_fu_188_p2 = ((i_0_reg_111 == 8'd240) ? 1'b1 : 1'b0);

assign icmp_ln403_fu_281_p2 = ((j_0_reg_133 == 9'd320) ? 1'b1 : 1'b0);

assign icmp_ln405_1_fu_293_p2 = (($signed(zext_ln403_fu_277_p1) < $signed(dest_width)) ? 1'b1 : 1'b0);

assign icmp_ln405_fu_200_p2 = (($signed(zext_ln400_fu_184_p1) < $signed(dest_height)) ? 1'b1 : 1'b0);

assign j_fu_287_p2 = (j_0_reg_133 + 9'd1);

assign sext_ln407_1_fu_327_p1 = $signed(add_ln407_2_fu_322_p2);

assign sext_ln407_2_cast_fu_233_p3 = {{tmp_14_fu_223_p4}, {6'd0}};

assign sext_ln407_cast_fu_215_p3 = {{tmp_13_fu_205_p4}, {8'd0}};

assign sext_ln407_fu_318_p1 = $signed(tmp_15_fu_308_p4);

assign tmp_13_fu_205_p4 = {{phi_mul5_reg_122[25:16]}};

assign tmp_14_fu_223_p4 = {{phi_mul5_reg_122[27:16]}};

assign tmp_15_fu_308_p4 = {{phi_mul_reg_144[31:16]}};

assign tmp_8_fu_259_p3 = {{i_0_reg_111}, {6'd0}};

assign tmp_s_fu_247_p3 = {{i_0_reg_111}, {8'd0}};

assign x_ratio_fu_167_p2 = (grp_fu_155_p2 + 32'd1);

assign y_ratio_fu_173_p2 = (grp_fu_161_p2 + 32'd1);

assign zext_ln400_fu_184_p1 = i_0_reg_111;

assign zext_ln403_fu_277_p1 = j_0_reg_133;

assign zext_ln407_1_fu_267_p1 = tmp_8_fu_259_p3;

assign zext_ln407_2_fu_332_p1 = j_0_reg_133;

assign zext_ln407_3_fu_341_p1 = add_ln407_3_reg_417;

assign zext_ln407_fu_255_p1 = tmp_s_fu_247_p3;

always @ (posedge ap_clk) begin
    add_ln407_reg_385[5:0] <= 6'b000000;
    add_ln407_1_reg_390[5:0] <= 6'b000000;
end

endmodule //imageScaler
