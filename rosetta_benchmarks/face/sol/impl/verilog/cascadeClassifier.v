// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cascadeClassifier (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        SUM1_data_address0,
        SUM1_data_ce0,
        SUM1_data_q0,
        SUM1_data_address1,
        SUM1_data_ce1,
        SUM1_data_q1,
        SQSUM1_data_address0,
        SQSUM1_data_ce0,
        SQSUM1_data_q0,
        SQSUM1_data_address1,
        SQSUM1_data_ce1,
        SQSUM1_data_q1,
        pt_x,
        pt_y,
        ap_return
);

parameter    ap_ST_fsm_state1 = 32'd1;
parameter    ap_ST_fsm_state2 = 32'd2;
parameter    ap_ST_fsm_state3 = 32'd4;
parameter    ap_ST_fsm_state4 = 32'd8;
parameter    ap_ST_fsm_state5 = 32'd16;
parameter    ap_ST_fsm_state6 = 32'd32;
parameter    ap_ST_fsm_state7 = 32'd64;
parameter    ap_ST_fsm_state8 = 32'd128;
parameter    ap_ST_fsm_state9 = 32'd256;
parameter    ap_ST_fsm_state10 = 32'd512;
parameter    ap_ST_fsm_state11 = 32'd1024;
parameter    ap_ST_fsm_state12 = 32'd2048;
parameter    ap_ST_fsm_state13 = 32'd4096;
parameter    ap_ST_fsm_state14 = 32'd8192;
parameter    ap_ST_fsm_state15 = 32'd16384;
parameter    ap_ST_fsm_state16 = 32'd32768;
parameter    ap_ST_fsm_state17 = 32'd65536;
parameter    ap_ST_fsm_state18 = 32'd131072;
parameter    ap_ST_fsm_state19 = 32'd262144;
parameter    ap_ST_fsm_state20 = 32'd524288;
parameter    ap_ST_fsm_state21 = 32'd1048576;
parameter    ap_ST_fsm_state22 = 32'd2097152;
parameter    ap_ST_fsm_state23 = 32'd4194304;
parameter    ap_ST_fsm_state24 = 32'd8388608;
parameter    ap_ST_fsm_state25 = 32'd16777216;
parameter    ap_ST_fsm_state26 = 32'd33554432;
parameter    ap_ST_fsm_state27 = 32'd67108864;
parameter    ap_ST_fsm_state28 = 32'd134217728;
parameter    ap_ST_fsm_state29 = 32'd268435456;
parameter    ap_ST_fsm_state30 = 32'd536870912;
parameter    ap_ST_fsm_state31 = 32'd1073741824;
parameter    ap_ST_fsm_state32 = 32'd2147483648;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [16:0] SUM1_data_address0;
output   SUM1_data_ce0;
input  [31:0] SUM1_data_q0;
output  [16:0] SUM1_data_address1;
output   SUM1_data_ce1;
input  [31:0] SUM1_data_q1;
output  [16:0] SQSUM1_data_address0;
output   SQSUM1_data_ce0;
input  [31:0] SQSUM1_data_q0;
output  [16:0] SQSUM1_data_address1;
output   SQSUM1_data_ce1;
input  [31:0] SQSUM1_data_q1;
input  [30:0] pt_x;
input  [30:0] pt_y;
output  [5:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[16:0] SUM1_data_address0;
reg SUM1_data_ce0;
reg[16:0] SUM1_data_address1;
reg SUM1_data_ce1;
reg[16:0] SQSUM1_data_address0;
reg SQSUM1_data_ce0;
reg[16:0] SQSUM1_data_address1;
reg SQSUM1_data_ce1;
reg[5:0] ap_return;

(* fsm_encoding = "none" *) reg   [31:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] stages_array_address0;
reg    stages_array_ce0;
wire   [7:0] stages_array_q0;
wire   [11:0] rectangles_array0_address0;
reg    rectangles_array0_ce0;
wire   [4:0] rectangles_array0_q0;
wire   [11:0] rectangles_array2_address0;
reg    rectangles_array2_ce0;
wire   [4:0] rectangles_array2_q0;
wire   [11:0] rectangles_array1_address0;
reg    rectangles_array1_ce0;
wire   [4:0] rectangles_array1_q0;
wire   [11:0] rectangles_array3_address0;
reg    rectangles_array3_ce0;
wire   [4:0] rectangles_array3_q0;
wire   [11:0] rectangles_array4_address0;
reg    rectangles_array4_ce0;
wire   [4:0] rectangles_array4_q0;
wire   [11:0] rectangles_array6_address0;
reg    rectangles_array6_ce0;
wire   [4:0] rectangles_array6_q0;
wire   [11:0] rectangles_array5_address0;
reg    rectangles_array5_ce0;
wire   [4:0] rectangles_array5_q0;
wire   [11:0] rectangles_array7_address0;
reg    rectangles_array7_ce0;
wire   [4:0] rectangles_array7_q0;
wire   [11:0] rectangles_array8_address0;
reg    rectangles_array8_ce0;
wire   [4:0] rectangles_array8_q0;
wire   [11:0] rectangles_array10_address0;
reg    rectangles_array10_ce0;
wire   [3:0] rectangles_array10_q0;
wire   [11:0] rectangles_array9_address0;
reg    rectangles_array9_ce0;
wire   [4:0] rectangles_array9_q0;
wire   [11:0] rectangles_array11_address0;
reg    rectangles_array11_ce0;
wire   [3:0] rectangles_array11_q0;
reg   [31:0] coord_8;
reg   [31:0] coord_9;
reg   [31:0] coord_10;
wire   [11:0] tree_thresh_array_address0;
reg    tree_thresh_array_ce0;
wire   [12:0] tree_thresh_array_q0;
wire   [11:0] weights_array0_address0;
reg    weights_array0_ce0;
wire   [12:0] weights_array0_q0;
wire   [11:0] weights_array1_address0;
reg    weights_array1_ce0;
wire   [13:0] weights_array1_q0;
wire   [11:0] weights_array2_address0;
reg    weights_array2_ce0;
wire   [13:0] weights_array2_q0;
wire   [11:0] alpha1_array_address0;
reg    alpha1_array_ce0;
wire   [13:0] alpha1_array_q0;
wire   [11:0] alpha2_array_address0;
reg    alpha2_array_ce0;
wire   [13:0] alpha2_array_q0;
wire   [4:0] stages_thresh_array_address0;
reg    stages_thresh_array_ce0;
wire   [11:0] stages_thresh_array_q0;
wire   [63:0] grp_fu_738_p1;
reg   [63:0] reg_745;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state30;
wire   [17:0] trunc_ln210_fu_751_p1;
reg   [17:0] trunc_ln210_reg_1906;
wire   [17:0] add_ln210_6_fu_801_p2;
reg   [17:0] add_ln210_6_reg_1921;
wire   [31:0] pt_y_cast_fu_819_p1;
reg   [31:0] pt_y_cast_reg_1936;
wire    ap_CS_fsm_state2;
wire   [31:0] sub_ln205_fu_880_p2;
reg   [31:0] sub_ln205_reg_1963;
wire   [31:0] sub_ln210_fu_886_p2;
reg   [31:0] sub_ln210_reg_1968;
wire   [31:0] stddev_fu_897_p2;
reg   [31:0] stddev_reg_1973;
wire    ap_CS_fsm_state3;
wire  signed [31:0] mean_fu_908_p2;
reg  signed [31:0] mean_reg_1979;
wire   [31:0] mul_ln216_fu_914_p2;
reg   [31:0] mul_ln216_reg_1985;
wire    ap_CS_fsm_state4;
wire   [31:0] pt_x_cast_fu_918_p1;
reg   [31:0] pt_x_cast_reg_1990;
wire    ap_CS_fsm_state5;
wire   [31:0] stddev_2_fu_937_p2;
wire   [0:0] icmp_ln218_fu_942_p2;
reg   [0:0] icmp_ln218_reg_2002;
wire   [4:0] i_1_fu_954_p2;
wire    ap_CS_fsm_state6;
wire   [31:0] shl_ln429_fu_982_p2;
wire   [0:0] icmp_ln423_fu_948_p2;
wire   [31:0] c_2_fu_1012_p3;
wire   [31:0] a_fu_1030_p3;
wire   [0:0] icmp_ln232_fu_1043_p2;
reg   [0:0] icmp_ln232_reg_2036;
wire    ap_CS_fsm_state7;
wire   [4:0] i_fu_1049_p2;
reg   [4:0] i_reg_2040;
wire   [63:0] zext_ln233_fu_1055_p1;
reg   [63:0] zext_ln233_reg_2045;
wire   [12:0] haar_counter_fu_1064_p2;
reg   [12:0] haar_counter_reg_2055;
wire    ap_CS_fsm_state8;
wire   [7:0] add_ln233_fu_1074_p2;
reg   [7:0] add_ln233_reg_2060;
wire   [7:0] j_fu_1089_p2;
reg   [7:0] j_reg_2068;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln235_fu_1095_p2;
reg   [0:0] icmp_ln235_reg_2073;
wire   [0:0] icmp_ln233_fu_1084_p2;
wire   [63:0] zext_ln242_fu_1101_p1;
reg   [63:0] zext_ln242_reg_2078;
reg   [4:0] rectangles_array0_lo_reg_2113;
wire    ap_CS_fsm_state10;
reg   [4:0] rectangles_array1_lo_reg_2123;
wire    ap_CS_fsm_state11;
wire   [17:0] add_ln259_2_fu_1233_p2;
reg   [17:0] add_ln259_2_reg_2153;
wire   [17:0] add_ln260_fu_1239_p2;
reg   [17:0] add_ln260_reg_2158;
reg   [4:0] rectangles_array4_lo_reg_2163;
wire    ap_CS_fsm_state12;
reg   [4:0] rectangles_array5_lo_reg_2173;
reg   [31:0] SUM1_data_load_4_reg_2183;
reg   [31:0] SUM1_data_load_5_reg_2188;
wire    ap_CS_fsm_state13;
reg   [31:0] SUM1_data_load_6_reg_2223;
reg   [31:0] SUM1_data_load_7_reg_2228;
wire   [17:0] add_ln264_2_fu_1379_p2;
reg   [17:0] add_ln264_2_reg_2243;
wire   [17:0] add_ln265_fu_1385_p2;
reg   [17:0] add_ln265_reg_2248;
reg   [4:0] tr2_x_reg_2253;
wire    ap_CS_fsm_state14;
reg   [3:0] tr2_width_reg_2258;
reg   [4:0] tr2_y_reg_2264;
reg   [3:0] tr2_height_reg_2269;
reg   [31:0] SUM1_data_load_8_reg_2275;
reg   [31:0] SUM1_data_load_9_reg_2280;
wire   [0:0] icmp_ln267_fu_1457_p2;
reg   [0:0] icmp_ln267_reg_2295;
wire   [31:0] select_ln235_fu_1463_p3;
reg   [31:0] select_ln235_reg_2300;
wire    ap_CS_fsm_state15;
reg   [31:0] SUM1_data_load_10_reg_2305;
reg   [31:0] SUM1_data_load_11_reg_2310;
wire   [0:0] or_ln267_4_fu_1495_p2;
reg   [0:0] or_ln267_4_reg_2315;
wire   [17:0] add_ln271_2_fu_1615_p2;
reg   [17:0] add_ln271_2_reg_2329;
wire   [17:0] add_ln272_fu_1621_p2;
reg   [17:0] add_ln272_reg_2334;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire  signed [31:0] add_ln319_fu_1680_p2;
reg  signed [31:0] add_ln319_reg_2359;
wire  signed [31:0] add_ln320_fu_1694_p2;
reg  signed [31:0] add_ln320_reg_2369;
wire   [12:0] add_ln289_fu_1699_p2;
reg   [12:0] add_ln289_reg_2394;
reg   [12:0] tree_thresh_array_lo_reg_2399;
wire    ap_CS_fsm_state18;
reg   [12:0] weights_array0_load_reg_2404;
reg   [13:0] weights_array1_load_reg_2409;
wire  signed [31:0] add_ln321_fu_1729_p2;
reg  signed [31:0] add_ln321_reg_2414;
reg   [13:0] weights_array2_load_reg_2419;
reg   [13:0] return_value_reg_2424;
reg   [13:0] return_value_1_reg_2429;
wire   [31:0] t_fu_1738_p2;
reg   [31:0] t_reg_2434;
wire    ap_CS_fsm_state19;
wire   [31:0] sum0_fu_1747_p2;
reg   [31:0] sum0_reg_2439;
wire   [31:0] sum1_fu_1755_p2;
reg   [31:0] sum1_reg_2444;
wire   [31:0] sum2_fu_1763_p2;
reg   [31:0] sum2_reg_2449;
reg   [11:0] stages_thresh_array_1_reg_2454;
wire    ap_CS_fsm_state21;
wire  signed [31:0] sext_ln294_fu_1802_p1;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state27;
wire   [63:0] grp_fu_729_p2;
reg   [63:0] tmp_4_reg_2469;
wire   [0:0] icmp_ln294_fu_1841_p2;
reg   [0:0] icmp_ln294_reg_2475;
wire    ap_CS_fsm_state31;
wire   [0:0] icmp_ln294_1_fu_1847_p2;
reg   [0:0] icmp_ln294_1_reg_2480;
wire   [0:0] icmp_ln294_2_fu_1853_p2;
reg   [0:0] icmp_ln294_2_reg_2485;
wire   [0:0] icmp_ln294_3_fu_1859_p2;
reg   [0:0] icmp_ln294_3_reg_2490;
reg   [31:0] c_0_i_reg_606;
reg   [31:0] stddev_3_reg_617;
reg   [4:0] i_0_i_reg_628;
reg   [31:0] p_0_i_reg_639;
reg  signed [31:0] stddev_assign_reg_648;
reg   [12:0] haar_counter_0_reg_661;
wire    ap_CS_fsm_state32;
wire   [0:0] and_ln294_1_fu_1879_p2;
reg   [4:0] i_0_reg_673;
reg   [12:0] haar_counter_assign_reg_685;
wire    ap_CS_fsm_state20;
reg   [7:0] j_0_reg_696;
reg   [31:0] storemerge_reg_707;
wire   [5:0] sub_ln295_fu_1889_p2;
reg   [5:0] ap_phi_mux_p_0_phi_fu_722_p4;
reg   [5:0] p_0_reg_718;
wire   [63:0] zext_ln210_fu_791_p1;
wire  signed [63:0] sext_ln210_fu_813_p1;
wire  signed [63:0] sext_ln210_1_fu_863_p1;
wire  signed [63:0] sext_ln210_2_fu_874_p1;
wire   [63:0] zext_ln257_fu_1167_p1;
wire  signed [63:0] sext_ln258_fu_1192_p1;
wire  signed [63:0] sext_ln259_fu_1245_p1;
wire  signed [63:0] sext_ln260_fu_1249_p1;
wire   [63:0] zext_ln262_fu_1313_p1;
wire  signed [63:0] sext_ln263_fu_1338_p1;
wire  signed [63:0] sext_ln264_fu_1391_p1;
wire  signed [63:0] sext_ln265_fu_1395_p1;
wire   [63:0] zext_ln269_fu_1550_p1;
wire  signed [63:0] sext_ln270_fu_1574_p1;
wire  signed [63:0] sext_ln271_fu_1657_p1;
wire  signed [63:0] sext_ln272_fu_1661_p1;
reg   [31:0] stage_sum_1_fu_152;
wire   [31:0] stage_sum_fu_1792_p2;
wire    ap_CS_fsm_state26;
reg  signed [31:0] grp_fu_738_p0;
wire   [9:0] trunc_ln210_1_fu_755_p1;
wire   [11:0] trunc_ln210_2_fu_767_p1;
wire   [17:0] zext_ln210_cast_fu_759_p3;
wire   [17:0] zext_ln210_1_cast_fu_771_p3;
wire   [17:0] add_ln210_fu_779_p2;
wire   [17:0] add_ln210_1_fu_785_p2;
wire   [17:0] trunc_ln205_fu_797_p1;
wire   [17:0] add_ln210_2_fu_807_p2;
wire   [31:0] add_ln205_fu_822_p2;
wire   [9:0] trunc_ln210_3_fu_828_p1;
wire   [11:0] trunc_ln210_4_fu_840_p1;
wire   [17:0] sext_ln210_cast_fu_832_p3;
wire   [17:0] sext_ln210_1_cast_fu_844_p3;
wire   [17:0] add_ln210_3_fu_852_p2;
wire   [17:0] add_ln210_4_fu_858_p2;
wire   [17:0] add_ln210_5_fu_869_p2;
wire   [31:0] sub_ln205_1_fu_892_p2;
wire   [31:0] sub_ln210_1_fu_903_p2;
wire   [31:0] shl_ln215_1_fu_926_p2;
wire   [31:0] shl_ln215_fu_921_p2;
wire   [31:0] stddev_1_fu_931_p2;
wire   [29:0] trunc_ln425_fu_960_p1;
wire   [1:0] lshr_ln_fu_964_p4;
wire   [31:0] shl_ln431_fu_988_p2;
wire   [31:0] c_fu_974_p3;
wire   [31:0] b_fu_994_p2;
wire   [0:0] icmp_ln432_fu_1000_p2;
wire   [31:0] c_1_fu_1006_p2;
wire   [30:0] trunc_ln432_fu_1026_p1;
wire   [0:0] xor_ln432_fu_1020_p2;
wire   [12:0] zext_ln233_1_fu_1060_p1;
wire   [7:0] empty_14_fu_1070_p1;
wire   [7:0] trunc_ln233_fu_1080_p1;
wire   [31:0] zext_ln242_1_fu_1107_p1;
wire   [31:0] zext_ln244_fu_1115_p1;
wire   [31:0] tr0_x_fu_1110_p2;
wire   [31:0] tr0_y_fu_1118_p2;
wire   [9:0] trunc_ln257_1_fu_1131_p1;
wire   [11:0] trunc_ln257_2_fu_1143_p1;
wire   [17:0] zext_ln257_1_cast_fu_1135_p3;
wire   [17:0] zext_ln257_2_cast_fu_1147_p3;
wire   [17:0] trunc_ln257_fu_1127_p1;
wire   [17:0] add_ln257_fu_1155_p2;
wire   [17:0] add_ln257_1_fu_1161_p2;
wire   [17:0] trunc_ln258_fu_1176_p1;
wire   [17:0] zext_ln258_fu_1172_p1;
wire   [17:0] add_ln258_fu_1180_p2;
wire   [17:0] add_ln258_1_fu_1186_p2;
wire   [31:0] zext_ln245_fu_1123_p1;
wire   [31:0] add_ln259_fu_1197_p2;
wire   [9:0] trunc_ln259_fu_1203_p1;
wire   [11:0] trunc_ln259_1_fu_1215_p1;
wire   [17:0] sext_ln259_cast_fu_1207_p3;
wire   [17:0] sext_ln259_1_cast_fu_1219_p3;
wire   [17:0] add_ln259_1_fu_1227_p2;
wire   [31:0] zext_ln247_fu_1253_p1;
wire   [31:0] zext_ln249_fu_1261_p1;
wire   [31:0] tr1_x_fu_1256_p2;
wire   [31:0] tr1_y_fu_1264_p2;
wire   [9:0] trunc_ln262_1_fu_1277_p1;
wire   [11:0] trunc_ln262_2_fu_1289_p1;
wire   [17:0] zext_ln262_1_cast_fu_1281_p3;
wire   [17:0] zext_ln262_2_cast_fu_1293_p3;
wire   [17:0] trunc_ln262_fu_1273_p1;
wire   [17:0] add_ln262_fu_1301_p2;
wire   [17:0] add_ln262_1_fu_1307_p2;
wire   [17:0] trunc_ln263_fu_1322_p1;
wire   [17:0] zext_ln263_fu_1318_p1;
wire   [17:0] add_ln263_fu_1326_p2;
wire   [17:0] add_ln263_1_fu_1332_p2;
wire   [31:0] zext_ln250_fu_1269_p1;
wire   [31:0] add_ln264_fu_1343_p2;
wire   [9:0] trunc_ln264_fu_1349_p1;
wire   [11:0] trunc_ln264_1_fu_1361_p1;
wire   [17:0] sext_ln264_cast_fu_1353_p3;
wire   [17:0] sext_ln264_1_cast_fu_1365_p3;
wire   [17:0] add_ln264_1_fu_1373_p2;
wire   [3:0] trunc_ln267_fu_1399_p1;
wire   [0:0] tmp_22_fu_1409_p3;
wire   [3:0] or_ln267_fu_1403_p2;
wire   [3:0] trunc_ln267_1_fu_1425_p1;
wire   [0:0] tmp_23_fu_1435_p3;
wire   [3:0] or_ln267_1_fu_1429_p2;
wire   [4:0] tmp3_fu_1443_p3;
wire   [4:0] tmp2_fu_1417_p3;
wire   [4:0] or_ln267_2_fu_1451_p2;
wire   [0:0] icmp_ln267_1_fu_1479_p2;
wire   [0:0] icmp_ln267_2_fu_1484_p2;
wire   [0:0] or_ln267_3_fu_1489_p2;
wire   [31:0] zext_ln252_fu_1470_p1;
wire   [31:0] add_ln269_fu_1500_p2;
wire   [31:0] zext_ln254_fu_1473_p1;
wire   [31:0] add_ln269_1_fu_1509_p2;
wire   [9:0] trunc_ln269_1_fu_1514_p1;
wire   [11:0] trunc_ln269_2_fu_1526_p1;
wire   [17:0] zext_ln269_1_cast_fu_1518_p3;
wire   [17:0] zext_ln269_2_cast_fu_1530_p3;
wire   [17:0] trunc_ln269_fu_1505_p1;
wire   [17:0] add_ln269_2_fu_1538_p2;
wire   [17:0] add_ln269_3_fu_1544_p2;
wire   [17:0] zext_ln270_fu_1559_p1;
wire   [17:0] trunc_ln270_fu_1555_p1;
wire   [17:0] add_ln270_fu_1562_p2;
wire   [17:0] add_ln270_1_fu_1568_p2;
wire   [31:0] zext_ln255_fu_1476_p1;
wire   [31:0] add_ln271_fu_1579_p2;
wire   [9:0] trunc_ln271_fu_1585_p1;
wire   [11:0] trunc_ln271_1_fu_1597_p1;
wire   [17:0] sext_ln271_cast_fu_1589_p3;
wire   [17:0] sext_ln271_1_cast_fu_1601_p3;
wire   [17:0] add_ln271_1_fu_1609_p2;
wire   [31:0] sub_ln319_fu_1671_p2;
wire   [31:0] sub_ln319_1_fu_1675_p2;
wire   [31:0] sub_ln320_fu_1685_p2;
wire   [31:0] sub_ln320_1_fu_1689_p2;
wire   [31:0] sub_ln321_fu_1717_p2;
wire   [31:0] sub_ln321_1_fu_1723_p2;
wire  signed [12:0] t_fu_1738_p0;
wire  signed [12:0] sum0_fu_1747_p0;
wire   [13:0] sum1_fu_1755_p0;
wire   [13:0] sum2_fu_1763_p0;
wire   [31:0] add_ln322_fu_1768_p2;
wire   [31:0] final_sum_fu_1772_p2;
wire   [0:0] icmp_ln324_fu_1777_p2;
wire   [13:0] return_value_3_fu_1782_p3;
wire  signed [31:0] sext_ln324_fu_1788_p1;
wire   [63:0] bitcast_ln294_fu_1806_p1;
wire   [63:0] bitcast_ln294_1_fu_1824_p1;
wire   [10:0] tmp_3_fu_1810_p4;
wire   [51:0] trunc_ln294_fu_1820_p1;
wire   [10:0] tmp_5_fu_1827_p4;
wire   [51:0] trunc_ln294_1_fu_1837_p1;
wire   [0:0] or_ln294_fu_1865_p2;
wire   [0:0] or_ln294_1_fu_1869_p2;
wire   [0:0] and_ln294_fu_1873_p2;
wire   [0:0] grp_fu_734_p2;
wire   [5:0] zext_ln232_fu_1885_p1;
reg   [5:0] ap_return_preg;
reg   [31:0] ap_NS_fsm;
wire   [31:0] sum1_fu_1755_p00;
wire   [31:0] sum2_fu_1763_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 32'd1;
#0 coord_8 = 32'd0;
#0 coord_9 = 32'd0;
#0 coord_10 = 32'd0;
#0 ap_return_preg = 6'd0;
end

cascadeClassifier_stages_array #(
    .DataWidth( 8 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
stages_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(stages_array_address0),
    .ce0(stages_array_ce0),
    .q0(stages_array_q0)
);

cascadeClassifier_rectangles_array0 #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array0_address0),
    .ce0(rectangles_array0_ce0),
    .q0(rectangles_array0_q0)
);

cascadeClassifier_rectangles_array2 #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array2_address0),
    .ce0(rectangles_array2_ce0),
    .q0(rectangles_array2_q0)
);

cascadeClassifier_rectangles_array1 #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array1_address0),
    .ce0(rectangles_array1_ce0),
    .q0(rectangles_array1_q0)
);

cascadeClassifier_rectangles_array3 #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array3_address0),
    .ce0(rectangles_array3_ce0),
    .q0(rectangles_array3_q0)
);

cascadeClassifier_rectangles_array4 #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array4_address0),
    .ce0(rectangles_array4_ce0),
    .q0(rectangles_array4_q0)
);

cascadeClassifier_rectangles_array6 #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array6_address0),
    .ce0(rectangles_array6_ce0),
    .q0(rectangles_array6_q0)
);

cascadeClassifier_rectangles_array5 #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array5_address0),
    .ce0(rectangles_array5_ce0),
    .q0(rectangles_array5_q0)
);

cascadeClassifier_rectangles_array7 #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array7_address0),
    .ce0(rectangles_array7_ce0),
    .q0(rectangles_array7_q0)
);

cascadeClassifier_rectangles_array8 #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array8_address0),
    .ce0(rectangles_array8_ce0),
    .q0(rectangles_array8_q0)
);

cascadeClassifier_rectangles_array10 #(
    .DataWidth( 4 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array10_address0),
    .ce0(rectangles_array10_ce0),
    .q0(rectangles_array10_q0)
);

cascadeClassifier_rectangles_array9 #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array9_address0),
    .ce0(rectangles_array9_ce0),
    .q0(rectangles_array9_q0)
);

cascadeClassifier_rectangles_array11 #(
    .DataWidth( 4 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array11_address0),
    .ce0(rectangles_array11_ce0),
    .q0(rectangles_array11_q0)
);

cascadeClassifier_tree_thresh_array #(
    .DataWidth( 13 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
tree_thresh_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tree_thresh_array_address0),
    .ce0(tree_thresh_array_ce0),
    .q0(tree_thresh_array_q0)
);

cascadeClassifier_weights_array0 #(
    .DataWidth( 13 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
weights_array0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_array0_address0),
    .ce0(weights_array0_ce0),
    .q0(weights_array0_q0)
);

cascadeClassifier_weights_array1 #(
    .DataWidth( 14 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
weights_array1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_array1_address0),
    .ce0(weights_array1_ce0),
    .q0(weights_array1_q0)
);

cascadeClassifier_weights_array2 #(
    .DataWidth( 14 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
weights_array2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_array2_address0),
    .ce0(weights_array2_ce0),
    .q0(weights_array2_q0)
);

cascadeClassifier_alpha1_array #(
    .DataWidth( 14 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
alpha1_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(alpha1_array_address0),
    .ce0(alpha1_array_ce0),
    .q0(alpha1_array_q0)
);

cascadeClassifier_alpha2_array #(
    .DataWidth( 14 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
alpha2_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(alpha2_array_address0),
    .ce0(alpha2_array_ce0),
    .q0(alpha2_array_q0)
);

cascadeClassifier_stages_thresh_array #(
    .DataWidth( 12 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
stages_thresh_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(stages_thresh_array_address0),
    .ce0(stages_thresh_array_ce0),
    .q0(stages_thresh_array_q0)
);

face_detect_sw_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
face_detect_sw_dmul_64ns_64ns_64_5_max_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_745),
    .din1(64'd4600877379321698714),
    .ce(1'b1),
    .dout(grp_fu_729_p2)
);

face_detect_sw_dcmp_64ns_64ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
face_detect_sw_dcmp_64ns_64ns_1_2_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_745),
    .din1(tmp_4_reg_2469),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_734_p2)
);

face_detect_sw_sitodp_32s_64_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
face_detect_sw_sitodp_32s_64_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_738_p0),
    .ce(1'b1),
    .dout(grp_fu_738_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 6'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state32) & ((icmp_ln232_reg_2036 == 1'd0) | (1'd1 == and_ln294_1_fu_1879_p2)))) begin
            ap_return_preg <= ap_phi_mux_p_0_phi_fu_722_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln218_fu_942_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        c_0_i_reg_606 <= 32'd0;
    end else if (((icmp_ln423_fu_948_p2 == 1'd0) & (icmp_ln218_reg_2002 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        c_0_i_reg_606 <= c_2_fu_1012_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln267_4_reg_2315 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        coord_10 <= SUM1_data_q0;
    end else if (((or_ln267_4_fu_1495_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        coord_10 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        coord_8 <= SUM1_data_q0;
    end else if (((or_ln267_4_fu_1495_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        coord_8 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        coord_9 <= SUM1_data_q1;
    end else if (((or_ln267_4_fu_1495_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        coord_9 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln294_1_fu_1879_p2) & (icmp_ln232_reg_2036 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
        haar_counter_0_reg_661 <= haar_counter_reg_2055;
    end else if (((1'b1 == ap_CS_fsm_state6) & ((icmp_ln423_fu_948_p2 == 1'd1) | (icmp_ln218_reg_2002 == 1'd0)))) begin
        haar_counter_0_reg_661 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        haar_counter_assign_reg_685 <= add_ln289_reg_2394;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        haar_counter_assign_reg_685 <= haar_counter_0_reg_661;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln218_fu_942_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_i_reg_628 <= 5'd0;
    end else if (((icmp_ln423_fu_948_p2 == 1'd0) & (icmp_ln218_reg_2002 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i_0_i_reg_628 <= i_1_fu_954_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln294_1_fu_1879_p2) & (icmp_ln232_reg_2036 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
        i_0_reg_673 <= i_reg_2040;
    end else if (((1'b1 == ap_CS_fsm_state6) & ((icmp_ln423_fu_948_p2 == 1'd1) | (icmp_ln218_reg_2002 == 1'd0)))) begin
        i_0_reg_673 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        j_0_reg_696 <= j_reg_2068;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j_0_reg_696 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln218_fu_942_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        p_0_i_reg_639 <= stddev_2_fu_937_p2;
    end else if (((icmp_ln423_fu_948_p2 == 1'd0) & (icmp_ln218_reg_2002 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        p_0_i_reg_639 <= shl_ln429_fu_982_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln232_fu_1043_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        p_0_reg_718 <= 6'd1;
    end else if (((1'd1 == and_ln294_1_fu_1879_p2) & (icmp_ln232_reg_2036 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
        p_0_reg_718 <= sub_ln295_fu_1889_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        stage_sum_1_fu_152 <= stage_sum_fu_1792_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & ((icmp_ln423_fu_948_p2 == 1'd1) | (icmp_ln218_reg_2002 == 1'd0)))) begin
        stage_sum_1_fu_152 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln218_fu_942_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        stddev_3_reg_617 <= 32'd0;
    end else if (((icmp_ln423_fu_948_p2 == 1'd0) & (icmp_ln218_reg_2002 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        stddev_3_reg_617 <= a_fu_1030_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln423_fu_948_p2 == 1'd1) & (icmp_ln218_reg_2002 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        stddev_assign_reg_648 <= stddev_3_reg_617;
    end else if (((icmp_ln218_fu_942_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        stddev_assign_reg_648 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln267_4_reg_2315 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        storemerge_reg_707 <= SUM1_data_q1;
    end else if (((or_ln267_4_fu_1495_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        storemerge_reg_707 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        SUM1_data_load_10_reg_2305 <= SUM1_data_q0;
        SUM1_data_load_11_reg_2310 <= SUM1_data_q1;
        or_ln267_4_reg_2315 <= or_ln267_4_fu_1495_p2;
        select_ln235_reg_2300 <= select_ln235_fu_1463_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        SUM1_data_load_4_reg_2183 <= SUM1_data_q0;
        SUM1_data_load_5_reg_2188 <= SUM1_data_q1;
        rectangles_array4_lo_reg_2163 <= rectangles_array4_q0;
        rectangles_array5_lo_reg_2173 <= rectangles_array5_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        SUM1_data_load_6_reg_2223 <= SUM1_data_q0;
        SUM1_data_load_7_reg_2228 <= SUM1_data_q1;
        add_ln264_2_reg_2243 <= add_ln264_2_fu_1379_p2;
        add_ln265_reg_2248 <= add_ln265_fu_1385_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SUM1_data_load_8_reg_2275 <= SUM1_data_q0;
        SUM1_data_load_9_reg_2280 <= SUM1_data_q1;
        icmp_ln267_reg_2295 <= icmp_ln267_fu_1457_p2;
        tr2_height_reg_2269 <= rectangles_array11_q0;
        tr2_width_reg_2258 <= rectangles_array10_q0;
        tr2_x_reg_2253 <= rectangles_array8_q0;
        tr2_y_reg_2264 <= rectangles_array9_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln210_6_reg_1921 <= add_ln210_6_fu_801_p2;
        trunc_ln210_reg_1906 <= trunc_ln210_fu_751_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln233_reg_2060 <= add_ln233_fu_1074_p2;
        haar_counter_reg_2055 <= haar_counter_fu_1064_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add_ln259_2_reg_2153 <= add_ln259_2_fu_1233_p2;
        add_ln260_reg_2158 <= add_ln260_fu_1239_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln267_4_fu_1495_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        add_ln271_2_reg_2329 <= add_ln271_2_fu_1615_p2;
        add_ln272_reg_2334 <= add_ln272_fu_1621_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        add_ln289_reg_2394 <= add_ln289_fu_1699_p2;
        add_ln319_reg_2359 <= add_ln319_fu_1680_p2;
        add_ln320_reg_2369 <= add_ln320_fu_1694_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        add_ln321_reg_2414 <= add_ln321_fu_1729_p2;
        return_value_1_reg_2429 <= alpha2_array_q0;
        return_value_reg_2424 <= alpha1_array_q0;
        tree_thresh_array_lo_reg_2399 <= tree_thresh_array_q0;
        weights_array0_load_reg_2404 <= weights_array0_q0;
        weights_array1_load_reg_2409 <= weights_array1_q0;
        weights_array2_load_reg_2419 <= weights_array2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_2040 <= i_fu_1049_p2;
        icmp_ln232_reg_2036 <= icmp_ln232_fu_1043_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        icmp_ln218_reg_2002 <= icmp_ln218_fu_942_p2;
        pt_x_cast_reg_1990[30 : 0] <= pt_x_cast_fu_918_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln233_fu_1084_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        icmp_ln235_reg_2073 <= icmp_ln235_fu_1095_p2;
        zext_ln242_reg_2078[12 : 0] <= zext_ln242_fu_1101_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        icmp_ln294_1_reg_2480 <= icmp_ln294_1_fu_1847_p2;
        icmp_ln294_2_reg_2485 <= icmp_ln294_2_fu_1853_p2;
        icmp_ln294_3_reg_2490 <= icmp_ln294_3_fu_1859_p2;
        icmp_ln294_reg_2475 <= icmp_ln294_fu_1841_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_reg_2068 <= j_fu_1089_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mean_reg_1979 <= mean_fu_908_p2;
        stddev_reg_1973 <= stddev_fu_897_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul_ln216_reg_1985 <= mul_ln216_fu_914_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pt_y_cast_reg_1936[30 : 0] <= pt_y_cast_fu_819_p1[30 : 0];
        sub_ln205_reg_1963 <= sub_ln205_fu_880_p2;
        sub_ln210_reg_1968 <= sub_ln210_fu_886_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        rectangles_array0_lo_reg_2113 <= rectangles_array0_q0;
        rectangles_array1_lo_reg_2123 <= rectangles_array1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state25))) begin
        reg_745 <= grp_fu_738_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        stages_thresh_array_1_reg_2454 <= stages_thresh_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        sum0_reg_2439 <= sum0_fu_1747_p2;
        sum1_reg_2444 <= sum1_fu_1755_p2;
        sum2_reg_2449 <= sum2_fu_1763_p2;
        t_reg_2434 <= t_fu_1738_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        tmp_4_reg_2469 <= grp_fu_729_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln232_fu_1043_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        zext_ln233_reg_2045[4 : 0] <= zext_ln233_fu_1055_p1[4 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SQSUM1_data_address0 = sext_ln210_1_fu_863_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        SQSUM1_data_address0 = zext_ln210_fu_791_p1;
    end else begin
        SQSUM1_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SQSUM1_data_address1 = sext_ln210_2_fu_874_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        SQSUM1_data_address1 = sext_ln210_fu_813_p1;
    end else begin
        SQSUM1_data_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        SQSUM1_data_ce0 = 1'b1;
    end else begin
        SQSUM1_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        SQSUM1_data_ce1 = 1'b1;
    end else begin
        SQSUM1_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        SUM1_data_address0 = sext_ln271_fu_1657_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        SUM1_data_address0 = zext_ln269_fu_1550_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        SUM1_data_address0 = sext_ln264_fu_1391_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        SUM1_data_address0 = zext_ln262_fu_1313_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        SUM1_data_address0 = sext_ln259_fu_1245_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        SUM1_data_address0 = zext_ln257_fu_1167_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        SUM1_data_address0 = sext_ln210_1_fu_863_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        SUM1_data_address0 = zext_ln210_fu_791_p1;
    end else begin
        SUM1_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        SUM1_data_address1 = sext_ln272_fu_1661_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        SUM1_data_address1 = sext_ln270_fu_1574_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        SUM1_data_address1 = sext_ln265_fu_1395_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        SUM1_data_address1 = sext_ln263_fu_1338_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        SUM1_data_address1 = sext_ln260_fu_1249_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        SUM1_data_address1 = sext_ln258_fu_1192_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        SUM1_data_address1 = sext_ln210_2_fu_874_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        SUM1_data_address1 = sext_ln210_fu_813_p1;
    end else begin
        SUM1_data_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        SUM1_data_ce0 = 1'b1;
    end else begin
        SUM1_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        SUM1_data_ce1 = 1'b1;
    end else begin
        SUM1_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        alpha1_array_ce0 = 1'b1;
    end else begin
        alpha1_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        alpha2_array_ce0 = 1'b1;
    end else begin
        alpha2_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state32) & ((icmp_ln232_reg_2036 == 1'd0) | (1'd1 == and_ln294_1_fu_1879_p2))) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln294_1_fu_1879_p2) & (icmp_ln232_reg_2036 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
        ap_phi_mux_p_0_phi_fu_722_p4 = sub_ln295_fu_1889_p2;
    end else begin
        ap_phi_mux_p_0_phi_fu_722_p4 = p_0_reg_718;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) & ((icmp_ln232_reg_2036 == 1'd0) | (1'd1 == and_ln294_1_fu_1879_p2)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) & ((icmp_ln232_reg_2036 == 1'd0) | (1'd1 == and_ln294_1_fu_1879_p2)))) begin
        ap_return = ap_phi_mux_p_0_phi_fu_722_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_738_p0 = stage_sum_1_fu_152;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_738_p0 = sext_ln294_fu_1802_p1;
    end else begin
        grp_fu_738_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        rectangles_array0_ce0 = 1'b1;
    end else begin
        rectangles_array0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        rectangles_array10_ce0 = 1'b1;
    end else begin
        rectangles_array10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        rectangles_array11_ce0 = 1'b1;
    end else begin
        rectangles_array11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        rectangles_array1_ce0 = 1'b1;
    end else begin
        rectangles_array1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        rectangles_array2_ce0 = 1'b1;
    end else begin
        rectangles_array2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        rectangles_array3_ce0 = 1'b1;
    end else begin
        rectangles_array3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        rectangles_array4_ce0 = 1'b1;
    end else begin
        rectangles_array4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        rectangles_array5_ce0 = 1'b1;
    end else begin
        rectangles_array5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        rectangles_array6_ce0 = 1'b1;
    end else begin
        rectangles_array6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        rectangles_array7_ce0 = 1'b1;
    end else begin
        rectangles_array7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        rectangles_array8_ce0 = 1'b1;
    end else begin
        rectangles_array8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        rectangles_array9_ce0 = 1'b1;
    end else begin
        rectangles_array9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        stages_array_ce0 = 1'b1;
    end else begin
        stages_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        stages_thresh_array_ce0 = 1'b1;
    end else begin
        stages_thresh_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tree_thresh_array_ce0 = 1'b1;
    end else begin
        tree_thresh_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        weights_array0_ce0 = 1'b1;
    end else begin
        weights_array0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        weights_array1_ce0 = 1'b1;
    end else begin
        weights_array1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        weights_array2_ce0 = 1'b1;
    end else begin
        weights_array2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & ((icmp_ln423_fu_948_p2 == 1'd1) | (icmp_ln218_reg_2002 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln232_fu_1043_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln233_fu_1084_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((or_ln267_4_fu_1495_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & ((icmp_ln232_reg_2036 == 1'd0) | (1'd1 == and_ln294_1_fu_1879_p2)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_fu_1030_p3 = {{trunc_ln432_fu_1026_p1}, {xor_ln432_fu_1020_p2}};

assign add_ln205_fu_822_p2 = (32'd24 + pt_y_cast_fu_819_p1);

assign add_ln210_1_fu_785_p2 = (trunc_ln210_fu_751_p1 + add_ln210_fu_779_p2);

assign add_ln210_2_fu_807_p2 = (add_ln210_6_fu_801_p2 + add_ln210_fu_779_p2);

assign add_ln210_3_fu_852_p2 = (sext_ln210_cast_fu_832_p3 + sext_ln210_1_cast_fu_844_p3);

assign add_ln210_4_fu_858_p2 = (trunc_ln210_reg_1906 + add_ln210_3_fu_852_p2);

assign add_ln210_5_fu_869_p2 = (add_ln210_6_reg_1921 + add_ln210_3_fu_852_p2);

assign add_ln210_6_fu_801_p2 = (18'd24 + trunc_ln205_fu_797_p1);

assign add_ln210_fu_779_p2 = (zext_ln210_cast_fu_759_p3 + zext_ln210_1_cast_fu_771_p3);

assign add_ln233_fu_1074_p2 = (empty_14_fu_1070_p1 + stages_array_q0);

assign add_ln257_1_fu_1161_p2 = (trunc_ln257_fu_1127_p1 + add_ln257_fu_1155_p2);

assign add_ln257_fu_1155_p2 = (zext_ln257_1_cast_fu_1135_p3 + zext_ln257_2_cast_fu_1147_p3);

assign add_ln258_1_fu_1186_p2 = (add_ln258_fu_1180_p2 + add_ln257_fu_1155_p2);

assign add_ln258_fu_1180_p2 = (trunc_ln258_fu_1176_p1 + zext_ln258_fu_1172_p1);

assign add_ln259_1_fu_1227_p2 = (sext_ln259_cast_fu_1207_p3 + sext_ln259_1_cast_fu_1219_p3);

assign add_ln259_2_fu_1233_p2 = (trunc_ln257_fu_1127_p1 + add_ln259_1_fu_1227_p2);

assign add_ln259_fu_1197_p2 = (tr0_y_fu_1118_p2 + zext_ln245_fu_1123_p1);

assign add_ln260_fu_1239_p2 = (add_ln258_fu_1180_p2 + add_ln259_1_fu_1227_p2);

assign add_ln262_1_fu_1307_p2 = (trunc_ln262_fu_1273_p1 + add_ln262_fu_1301_p2);

assign add_ln262_fu_1301_p2 = (zext_ln262_1_cast_fu_1281_p3 + zext_ln262_2_cast_fu_1293_p3);

assign add_ln263_1_fu_1332_p2 = (add_ln263_fu_1326_p2 + add_ln262_fu_1301_p2);

assign add_ln263_fu_1326_p2 = (trunc_ln263_fu_1322_p1 + zext_ln263_fu_1318_p1);

assign add_ln264_1_fu_1373_p2 = (sext_ln264_cast_fu_1353_p3 + sext_ln264_1_cast_fu_1365_p3);

assign add_ln264_2_fu_1379_p2 = (trunc_ln262_fu_1273_p1 + add_ln264_1_fu_1373_p2);

assign add_ln264_fu_1343_p2 = (tr1_y_fu_1264_p2 + zext_ln250_fu_1269_p1);

assign add_ln265_fu_1385_p2 = (add_ln263_fu_1326_p2 + add_ln264_1_fu_1373_p2);

assign add_ln269_1_fu_1509_p2 = (zext_ln254_fu_1473_p1 + pt_y_cast_reg_1936);

assign add_ln269_2_fu_1538_p2 = (zext_ln269_1_cast_fu_1518_p3 + zext_ln269_2_cast_fu_1530_p3);

assign add_ln269_3_fu_1544_p2 = (trunc_ln269_fu_1505_p1 + add_ln269_2_fu_1538_p2);

assign add_ln269_fu_1500_p2 = (zext_ln252_fu_1470_p1 + pt_x_cast_reg_1990);

assign add_ln270_1_fu_1568_p2 = (add_ln270_fu_1562_p2 + add_ln269_2_fu_1538_p2);

assign add_ln270_fu_1562_p2 = (zext_ln270_fu_1559_p1 + trunc_ln270_fu_1555_p1);

assign add_ln271_1_fu_1609_p2 = (sext_ln271_cast_fu_1589_p3 + sext_ln271_1_cast_fu_1601_p3);

assign add_ln271_2_fu_1615_p2 = (trunc_ln269_fu_1505_p1 + add_ln271_1_fu_1609_p2);

assign add_ln271_fu_1579_p2 = (zext_ln255_fu_1476_p1 + add_ln269_1_fu_1509_p2);

assign add_ln272_fu_1621_p2 = (add_ln270_fu_1562_p2 + add_ln271_1_fu_1609_p2);

assign add_ln289_fu_1699_p2 = (haar_counter_assign_reg_685 + 13'd1);

assign add_ln319_fu_1680_p2 = (SUM1_data_load_7_reg_2228 + sub_ln319_1_fu_1675_p2);

assign add_ln320_fu_1694_p2 = (SUM1_data_load_11_reg_2310 + sub_ln320_1_fu_1689_p2);

assign add_ln321_fu_1729_p2 = (storemerge_reg_707 + sub_ln321_1_fu_1723_p2);

assign add_ln322_fu_1768_p2 = (sum1_reg_2444 + sum2_reg_2449);

assign alpha1_array_address0 = zext_ln242_reg_2078;

assign alpha2_array_address0 = zext_ln242_reg_2078;

assign and_ln294_1_fu_1879_p2 = (grp_fu_734_p2 & and_ln294_fu_1873_p2);

assign and_ln294_fu_1873_p2 = (or_ln294_fu_1865_p2 & or_ln294_1_fu_1869_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign b_fu_994_p2 = (shl_ln431_fu_988_p2 | 32'd1);

assign bitcast_ln294_1_fu_1824_p1 = tmp_4_reg_2469;

assign bitcast_ln294_fu_1806_p1 = reg_745;

assign c_1_fu_1006_p2 = (c_fu_974_p3 - b_fu_994_p2);

assign c_2_fu_1012_p3 = ((icmp_ln432_fu_1000_p2[0:0] === 1'b1) ? c_fu_974_p3 : c_1_fu_1006_p2);

assign c_fu_974_p3 = {{trunc_ln425_fu_960_p1}, {lshr_ln_fu_964_p4}};

assign empty_14_fu_1070_p1 = haar_counter_0_reg_661[7:0];

assign final_sum_fu_1772_p2 = (add_ln322_fu_1768_p2 + sum0_reg_2439);

assign haar_counter_fu_1064_p2 = (zext_ln233_1_fu_1060_p1 + haar_counter_0_reg_661);

assign i_1_fu_954_p2 = (i_0_i_reg_628 + 5'd1);

assign i_fu_1049_p2 = (i_0_reg_673 + 5'd1);

assign icmp_ln218_fu_942_p2 = (($signed(stddev_2_fu_937_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln232_fu_1043_p2 = ((i_0_reg_673 < 5'd25) ? 1'b1 : 1'b0);

assign icmp_ln233_fu_1084_p2 = ((trunc_ln233_fu_1080_p1 == add_ln233_reg_2060) ? 1'b1 : 1'b0);

assign icmp_ln235_fu_1095_p2 = ((j_0_reg_696 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln267_1_fu_1479_p2 = ((tr2_width_reg_2258 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln267_2_fu_1484_p2 = ((tr2_height_reg_2269 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln267_fu_1457_p2 = ((or_ln267_2_fu_1451_p2 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln294_1_fu_1847_p2 = ((trunc_ln294_fu_1820_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln294_2_fu_1853_p2 = ((tmp_5_fu_1827_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln294_3_fu_1859_p2 = ((trunc_ln294_1_fu_1837_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln294_fu_1841_p2 = ((tmp_3_fu_1810_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln324_fu_1777_p2 = (($signed(final_sum_fu_1772_p2) < $signed(t_reg_2434)) ? 1'b1 : 1'b0);

assign icmp_ln423_fu_948_p2 = ((i_0_i_reg_628 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln432_fu_1000_p2 = ((c_fu_974_p3 < b_fu_994_p2) ? 1'b1 : 1'b0);

assign j_fu_1089_p2 = (8'd1 + j_0_reg_696);

assign lshr_ln_fu_964_p4 = {{p_0_i_reg_639[31:30]}};

assign mean_fu_908_p2 = (SUM1_data_q1 + sub_ln210_1_fu_903_p2);

assign mul_ln216_fu_914_p2 = ($signed(mean_reg_1979) * $signed(mean_reg_1979));

assign or_ln267_1_fu_1429_p2 = (trunc_ln267_1_fu_1425_p1 | rectangles_array11_q0);

assign or_ln267_2_fu_1451_p2 = (tmp3_fu_1443_p3 | tmp2_fu_1417_p3);

assign or_ln267_3_fu_1489_p2 = (icmp_ln267_2_fu_1484_p2 | icmp_ln267_1_fu_1479_p2);

assign or_ln267_4_fu_1495_p2 = (or_ln267_3_fu_1489_p2 | icmp_ln267_reg_2295);

assign or_ln267_fu_1403_p2 = (trunc_ln267_fu_1399_p1 | rectangles_array10_q0);

assign or_ln294_1_fu_1869_p2 = (icmp_ln294_3_reg_2490 | icmp_ln294_2_reg_2485);

assign or_ln294_fu_1865_p2 = (icmp_ln294_reg_2475 | icmp_ln294_1_reg_2480);

assign pt_x_cast_fu_918_p1 = pt_x;

assign pt_y_cast_fu_819_p1 = pt_y;

assign rectangles_array0_address0 = zext_ln242_fu_1101_p1;

assign rectangles_array10_address0 = zext_ln242_reg_2078;

assign rectangles_array11_address0 = zext_ln242_reg_2078;

assign rectangles_array1_address0 = zext_ln242_fu_1101_p1;

assign rectangles_array2_address0 = zext_ln242_reg_2078;

assign rectangles_array3_address0 = zext_ln242_reg_2078;

assign rectangles_array4_address0 = zext_ln242_reg_2078;

assign rectangles_array5_address0 = zext_ln242_reg_2078;

assign rectangles_array6_address0 = zext_ln242_reg_2078;

assign rectangles_array7_address0 = zext_ln242_reg_2078;

assign rectangles_array8_address0 = zext_ln242_reg_2078;

assign rectangles_array9_address0 = zext_ln242_reg_2078;

assign return_value_3_fu_1782_p3 = ((icmp_ln324_fu_1777_p2[0:0] === 1'b1) ? return_value_reg_2424 : return_value_1_reg_2429);

assign select_ln235_fu_1463_p3 = ((icmp_ln235_reg_2073[0:0] === 1'b1) ? 32'd0 : stage_sum_1_fu_152);

assign sext_ln210_1_cast_fu_844_p3 = {{trunc_ln210_4_fu_840_p1}, {6'd0}};

assign sext_ln210_1_fu_863_p1 = $signed(add_ln210_4_fu_858_p2);

assign sext_ln210_2_fu_874_p1 = $signed(add_ln210_5_fu_869_p2);

assign sext_ln210_cast_fu_832_p3 = {{trunc_ln210_3_fu_828_p1}, {8'd0}};

assign sext_ln210_fu_813_p1 = $signed(add_ln210_2_fu_807_p2);

assign sext_ln258_fu_1192_p1 = $signed(add_ln258_1_fu_1186_p2);

assign sext_ln259_1_cast_fu_1219_p3 = {{trunc_ln259_1_fu_1215_p1}, {6'd0}};

assign sext_ln259_cast_fu_1207_p3 = {{trunc_ln259_fu_1203_p1}, {8'd0}};

assign sext_ln259_fu_1245_p1 = $signed(add_ln259_2_reg_2153);

assign sext_ln260_fu_1249_p1 = $signed(add_ln260_reg_2158);

assign sext_ln263_fu_1338_p1 = $signed(add_ln263_1_fu_1332_p2);

assign sext_ln264_1_cast_fu_1365_p3 = {{trunc_ln264_1_fu_1361_p1}, {6'd0}};

assign sext_ln264_cast_fu_1353_p3 = {{trunc_ln264_fu_1349_p1}, {8'd0}};

assign sext_ln264_fu_1391_p1 = $signed(add_ln264_2_reg_2243);

assign sext_ln265_fu_1395_p1 = $signed(add_ln265_reg_2248);

assign sext_ln270_fu_1574_p1 = $signed(add_ln270_1_fu_1568_p2);

assign sext_ln271_1_cast_fu_1601_p3 = {{trunc_ln271_1_fu_1597_p1}, {6'd0}};

assign sext_ln271_cast_fu_1589_p3 = {{trunc_ln271_fu_1585_p1}, {8'd0}};

assign sext_ln271_fu_1657_p1 = $signed(add_ln271_2_reg_2329);

assign sext_ln272_fu_1661_p1 = $signed(add_ln272_reg_2334);

assign sext_ln294_fu_1802_p1 = $signed(stages_thresh_array_1_reg_2454);

assign sext_ln324_fu_1788_p1 = $signed(return_value_3_fu_1782_p3);

assign shl_ln215_1_fu_926_p2 = stddev_reg_1973 << 32'd6;

assign shl_ln215_fu_921_p2 = stddev_reg_1973 << 32'd9;

assign shl_ln429_fu_982_p2 = p_0_i_reg_639 << 32'd2;

assign shl_ln431_fu_988_p2 = stddev_3_reg_617 << 32'd2;

assign stage_sum_fu_1792_p2 = ($signed(sext_ln324_fu_1788_p1) + $signed(select_ln235_reg_2300));

assign stages_array_address0 = zext_ln233_fu_1055_p1;

assign stages_thresh_array_address0 = zext_ln233_reg_2045;

assign stddev_1_fu_931_p2 = (shl_ln215_1_fu_926_p2 + shl_ln215_fu_921_p2);

assign stddev_2_fu_937_p2 = (stddev_1_fu_931_p2 - mul_ln216_reg_1985);

assign stddev_fu_897_p2 = (SQSUM1_data_q1 + sub_ln205_1_fu_892_p2);

assign sub_ln205_1_fu_892_p2 = (sub_ln205_reg_1963 - SQSUM1_data_q0);

assign sub_ln205_fu_880_p2 = (SQSUM1_data_q0 - SQSUM1_data_q1);

assign sub_ln210_1_fu_903_p2 = (sub_ln210_reg_1968 - SUM1_data_q0);

assign sub_ln210_fu_886_p2 = (SUM1_data_q0 - SUM1_data_q1);

assign sub_ln295_fu_1889_p2 = (6'd0 - zext_ln232_fu_1885_p1);

assign sub_ln319_1_fu_1675_p2 = (sub_ln319_fu_1671_p2 - SUM1_data_load_6_reg_2223);

assign sub_ln319_fu_1671_p2 = (SUM1_data_load_4_reg_2183 - SUM1_data_load_5_reg_2188);

assign sub_ln320_1_fu_1689_p2 = (sub_ln320_fu_1685_p2 - SUM1_data_load_10_reg_2305);

assign sub_ln320_fu_1685_p2 = (SUM1_data_load_8_reg_2275 - SUM1_data_load_9_reg_2280);

assign sub_ln321_1_fu_1723_p2 = (sub_ln321_fu_1717_p2 - coord_10);

assign sub_ln321_fu_1717_p2 = (coord_8 - coord_9);

assign sum0_fu_1747_p0 = weights_array0_load_reg_2404;

assign sum0_fu_1747_p2 = ($signed(sum0_fu_1747_p0) * $signed(add_ln319_reg_2359));

assign sum1_fu_1755_p0 = sum1_fu_1755_p00;

assign sum1_fu_1755_p00 = weights_array1_load_reg_2409;

assign sum1_fu_1755_p2 = ($signed({{1'b0}, {sum1_fu_1755_p0}}) * $signed(add_ln320_reg_2369));

assign sum2_fu_1763_p0 = sum2_fu_1763_p00;

assign sum2_fu_1763_p00 = weights_array2_load_reg_2419;

assign sum2_fu_1763_p2 = ($signed({{1'b0}, {sum2_fu_1763_p0}}) * $signed(add_ln321_reg_2414));

assign t_fu_1738_p0 = tree_thresh_array_lo_reg_2399;

assign t_fu_1738_p2 = ($signed(t_fu_1738_p0) * $signed(stddev_assign_reg_648));

assign tmp2_fu_1417_p3 = {{tmp_22_fu_1409_p3}, {or_ln267_fu_1403_p2}};

assign tmp3_fu_1443_p3 = {{tmp_23_fu_1435_p3}, {or_ln267_1_fu_1429_p2}};

assign tmp_22_fu_1409_p3 = rectangles_array8_q0[32'd4];

assign tmp_23_fu_1435_p3 = rectangles_array9_q0[32'd4];

assign tmp_3_fu_1810_p4 = {{bitcast_ln294_fu_1806_p1[62:52]}};

assign tmp_5_fu_1827_p4 = {{bitcast_ln294_1_fu_1824_p1[62:52]}};

assign tr0_x_fu_1110_p2 = (pt_x_cast_reg_1990 + zext_ln242_1_fu_1107_p1);

assign tr0_y_fu_1118_p2 = (pt_y_cast_reg_1936 + zext_ln244_fu_1115_p1);

assign tr1_x_fu_1256_p2 = (pt_x_cast_reg_1990 + zext_ln247_fu_1253_p1);

assign tr1_y_fu_1264_p2 = (pt_y_cast_reg_1936 + zext_ln249_fu_1261_p1);

assign tree_thresh_array_address0 = zext_ln242_reg_2078;

assign trunc_ln205_fu_797_p1 = pt_x[17:0];

assign trunc_ln210_1_fu_755_p1 = pt_y[9:0];

assign trunc_ln210_2_fu_767_p1 = pt_y[11:0];

assign trunc_ln210_3_fu_828_p1 = add_ln205_fu_822_p2[9:0];

assign trunc_ln210_4_fu_840_p1 = add_ln205_fu_822_p2[11:0];

assign trunc_ln210_fu_751_p1 = pt_x[17:0];

assign trunc_ln233_fu_1080_p1 = haar_counter_assign_reg_685[7:0];

assign trunc_ln257_1_fu_1131_p1 = tr0_y_fu_1118_p2[9:0];

assign trunc_ln257_2_fu_1143_p1 = tr0_y_fu_1118_p2[11:0];

assign trunc_ln257_fu_1127_p1 = tr0_x_fu_1110_p2[17:0];

assign trunc_ln258_fu_1176_p1 = tr0_x_fu_1110_p2[17:0];

assign trunc_ln259_1_fu_1215_p1 = add_ln259_fu_1197_p2[11:0];

assign trunc_ln259_fu_1203_p1 = add_ln259_fu_1197_p2[9:0];

assign trunc_ln262_1_fu_1277_p1 = tr1_y_fu_1264_p2[9:0];

assign trunc_ln262_2_fu_1289_p1 = tr1_y_fu_1264_p2[11:0];

assign trunc_ln262_fu_1273_p1 = tr1_x_fu_1256_p2[17:0];

assign trunc_ln263_fu_1322_p1 = tr1_x_fu_1256_p2[17:0];

assign trunc_ln264_1_fu_1361_p1 = add_ln264_fu_1343_p2[11:0];

assign trunc_ln264_fu_1349_p1 = add_ln264_fu_1343_p2[9:0];

assign trunc_ln267_1_fu_1425_p1 = rectangles_array9_q0[3:0];

assign trunc_ln267_fu_1399_p1 = rectangles_array8_q0[3:0];

assign trunc_ln269_1_fu_1514_p1 = add_ln269_1_fu_1509_p2[9:0];

assign trunc_ln269_2_fu_1526_p1 = add_ln269_1_fu_1509_p2[11:0];

assign trunc_ln269_fu_1505_p1 = add_ln269_fu_1500_p2[17:0];

assign trunc_ln270_fu_1555_p1 = add_ln269_fu_1500_p2[17:0];

assign trunc_ln271_1_fu_1597_p1 = add_ln271_fu_1579_p2[11:0];

assign trunc_ln271_fu_1585_p1 = add_ln271_fu_1579_p2[9:0];

assign trunc_ln294_1_fu_1837_p1 = bitcast_ln294_1_fu_1824_p1[51:0];

assign trunc_ln294_fu_1820_p1 = bitcast_ln294_fu_1806_p1[51:0];

assign trunc_ln425_fu_960_p1 = c_0_i_reg_606[29:0];

assign trunc_ln432_fu_1026_p1 = stddev_3_reg_617[30:0];

assign weights_array0_address0 = zext_ln242_reg_2078;

assign weights_array1_address0 = zext_ln242_reg_2078;

assign weights_array2_address0 = zext_ln242_reg_2078;

assign xor_ln432_fu_1020_p2 = (icmp_ln432_fu_1000_p2 ^ 1'd1);

assign zext_ln210_1_cast_fu_771_p3 = {{trunc_ln210_2_fu_767_p1}, {6'd0}};

assign zext_ln210_cast_fu_759_p3 = {{trunc_ln210_1_fu_755_p1}, {8'd0}};

assign zext_ln210_fu_791_p1 = add_ln210_1_fu_785_p2;

assign zext_ln232_fu_1885_p1 = i_0_reg_673;

assign zext_ln233_1_fu_1060_p1 = stages_array_q0;

assign zext_ln233_fu_1055_p1 = i_0_reg_673;

assign zext_ln242_1_fu_1107_p1 = rectangles_array0_lo_reg_2113;

assign zext_ln242_fu_1101_p1 = haar_counter_assign_reg_685;

assign zext_ln244_fu_1115_p1 = rectangles_array1_lo_reg_2123;

assign zext_ln245_fu_1123_p1 = rectangles_array3_q0;

assign zext_ln247_fu_1253_p1 = rectangles_array4_lo_reg_2163;

assign zext_ln249_fu_1261_p1 = rectangles_array5_lo_reg_2173;

assign zext_ln250_fu_1269_p1 = rectangles_array7_q0;

assign zext_ln252_fu_1470_p1 = tr2_x_reg_2253;

assign zext_ln254_fu_1473_p1 = tr2_y_reg_2264;

assign zext_ln255_fu_1476_p1 = tr2_height_reg_2269;

assign zext_ln257_1_cast_fu_1135_p3 = {{trunc_ln257_1_fu_1131_p1}, {8'd0}};

assign zext_ln257_2_cast_fu_1147_p3 = {{trunc_ln257_2_fu_1143_p1}, {6'd0}};

assign zext_ln257_fu_1167_p1 = add_ln257_1_fu_1161_p2;

assign zext_ln258_fu_1172_p1 = rectangles_array2_q0;

assign zext_ln262_1_cast_fu_1281_p3 = {{trunc_ln262_1_fu_1277_p1}, {8'd0}};

assign zext_ln262_2_cast_fu_1293_p3 = {{trunc_ln262_2_fu_1289_p1}, {6'd0}};

assign zext_ln262_fu_1313_p1 = add_ln262_1_fu_1307_p2;

assign zext_ln263_fu_1318_p1 = rectangles_array6_q0;

assign zext_ln269_1_cast_fu_1518_p3 = {{trunc_ln269_1_fu_1514_p1}, {8'd0}};

assign zext_ln269_2_cast_fu_1530_p3 = {{trunc_ln269_2_fu_1526_p1}, {6'd0}};

assign zext_ln269_fu_1550_p1 = add_ln269_3_fu_1544_p2;

assign zext_ln270_fu_1559_p1 = tr2_width_reg_2258;

always @ (posedge ap_clk) begin
    pt_y_cast_reg_1936[31] <= 1'b0;
    pt_x_cast_reg_1990[31] <= 1'b0;
    zext_ln233_reg_2045[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln242_reg_2078[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
end

endmodule //cascadeClassifier
