-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity processImage is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    factor : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_row : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_col : IN STD_LOGIC_VECTOR (31 downto 0);
    AllCandidates_x_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    AllCandidates_x_ce0 : OUT STD_LOGIC;
    AllCandidates_x_we0 : OUT STD_LOGIC;
    AllCandidates_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AllCandidates_y_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    AllCandidates_y_ce0 : OUT STD_LOGIC;
    AllCandidates_y_we0 : OUT STD_LOGIC;
    AllCandidates_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AllCandidates_w_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    AllCandidates_w_ce0 : OUT STD_LOGIC;
    AllCandidates_w_we0 : OUT STD_LOGIC;
    AllCandidates_w_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AllCandidates_h_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    AllCandidates_h_ce0 : OUT STD_LOGIC;
    AllCandidates_h_we0 : OUT STD_LOGIC;
    AllCandidates_h_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AllCandidates_size_r : IN STD_LOGIC_VECTOR (31 downto 0);
    IMG1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    IMG1_data_ce0 : OUT STD_LOGIC;
    IMG1_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    winSize_width : IN STD_LOGIC_VECTOR (31 downto 0);
    winSize_height : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of processImage is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (35 downto 0) := "000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (35 downto 0) := "000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (35 downto 0) := "000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (35 downto 0) := "000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (35 downto 0) := "000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (35 downto 0) := "000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (35 downto 0) := "000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (35 downto 0) := "000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (35 downto 0) := "000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (35 downto 0) := "001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (35 downto 0) := "010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (35 downto 0) := "100000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_BFE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_455 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_466 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal y_1_fu_480_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal y_1_reg_1127 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln349_fu_510_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln349_reg_1132 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln342_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_reg_1137 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln358_1_fu_552_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln358_1_reg_1143 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln154_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln154_reg_1155 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln155_fu_563_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln155_reg_1160 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_fu_581_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal x_1_reg_1168 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln349_fu_596_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_1173 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln347_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln358_2_fu_601_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln358_2_reg_1184 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal s_fu_619_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_reg_1199 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1084_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sq_reg_1206 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln154_fu_649_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal y_fu_659_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal y_reg_1221 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln57_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_reg_1226 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln57_1_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_1_reg_1231 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1236 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln57_fu_704_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal p_Val2_5_fu_713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_5_reg_1246 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal p_Result_1_reg_1252 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln155_fu_725_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln155_reg_1257 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal x_fu_734_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal x_reg_1265 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln165_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1270 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_cascadeClassifier_fu_377_ap_ready : STD_LOGIC;
    signal grp_cascadeClassifier_fu_377_ap_done : STD_LOGIC;
    signal p_Val2_13_fu_868_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_13_reg_1274 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln167_fu_875_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln167_reg_1279 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal icmp_ln57_2_fu_911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_2_reg_1284 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal icmp_ln57_3_fu_917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_3_reg_1289 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1294 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln57_1_fu_932_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_448_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_1304 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal p_Val2_11_fu_1076_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_11_reg_1309 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal SUM1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal SUM1_data_ce0 : STD_LOGIC;
    signal SUM1_data_we0 : STD_LOGIC;
    signal SUM1_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_ce1 : STD_LOGIC;
    signal SUM1_data_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal SQSUM1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal SQSUM1_data_ce0 : STD_LOGIC;
    signal SQSUM1_data_we0 : STD_LOGIC;
    signal SQSUM1_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal SQSUM1_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal SQSUM1_data_ce1 : STD_LOGIC;
    signal SQSUM1_data_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cascadeClassifier_fu_377_ap_start : STD_LOGIC;
    signal grp_cascadeClassifier_fu_377_ap_idle : STD_LOGIC;
    signal grp_cascadeClassifier_fu_377_SUM1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_377_SUM1_data_ce0 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_377_SUM1_data_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_377_SUM1_data_ce1 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_377_SQSUM1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_377_SQSUM1_data_ce0 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_377_SQSUM1_data_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_377_SQSUM1_data_ce1 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_377_ap_return : STD_LOGIC_VECTOR (5 downto 0);
    signal y_0_i_reg_307 : STD_LOGIC_VECTOR (30 downto 0);
    signal x_0_i_reg_318 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal s_0_i_reg_329 : STD_LOGIC_VECTOR (31 downto 0);
    signal sq_0_i_reg_341 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_y_reg_353 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln155_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_x_reg_365 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal grp_cascadeClassifier_fu_377_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln358_fu_606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal AllCandidates_size_0_fu_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln171_fu_882_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln154_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_437_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln342_fu_471_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln349_fu_486_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln349_1_fu_498_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln349_cast_fu_490_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln349_2_cast_fu_502_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln358_fu_522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln358_fu_528_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln358_1_fu_540_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln358_cast_fu_532_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln358_1_cast_fu_544_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln347_fu_572_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln349_2_fu_587_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln349_1_fu_591_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln351_fu_611_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_1_fu_625_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tq_1_fu_630_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tq_1_fu_630_p2 : signal is "no";
    signal bitcast_ln57_fu_665_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_669_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln57_fu_679_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln57_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln57_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_3_fu_755_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_V_1_fu_758_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_2_fu_746_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln502_1_fu_772_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln502_1_fu_776_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_1_fu_790_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_1_fu_782_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_2_fu_796_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_1_fu_800_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1311_3_fu_808_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1285_1_fu_816_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln682_1_fu_768_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln1287_1_fu_812_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_2_fu_820_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_12_fu_832_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_826_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln662_1_fu_840_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_844_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_12_fu_854_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_3_fu_862_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln167_fu_875_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln171_fu_882_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln57_1_fu_893_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_897_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln57_1_fu_907_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln57_1_fu_923_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln57_1_fu_927_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_941_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_1_fu_962_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_V_fu_966_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_fu_952_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln502_fu_980_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln502_fu_984_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_998_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_990_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_1004_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_1008_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1311_1_fu_1016_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1285_fu_1024_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln682_fu_976_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln1287_fu_1020_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_1028_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_10_fu_1040_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_1034_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln662_fu_1048_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1052_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_10_fu_1062_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_944_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_1_fu_1070_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1084_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln351_1_fu_615_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1084_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_437_ce : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (35 downto 0);

    component cascadeClassifier IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        SUM1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce0 : OUT STD_LOGIC;
        SUM1_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        SUM1_data_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce1 : OUT STD_LOGIC;
        SUM1_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        SQSUM1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SQSUM1_data_ce0 : OUT STD_LOGIC;
        SQSUM1_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        SQSUM1_data_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SQSUM1_data_ce1 : OUT STD_LOGIC;
        SQSUM1_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        pt_x : IN STD_LOGIC_VECTOR (30 downto 0);
        pt_y : IN STD_LOGIC_VECTOR (30 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component face_detect_sw_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_detect_sw_sitofp_32ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_detect_sw_fpext_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component face_detect_sw_fcmp_32ns_32ns_1_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component face_detect_sw_dadd_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component face_detect_sw_mac_muladd_8ns_8ns_32ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component processImage_SUM1_data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    SUM1_data_U : component processImage_SUM1_data
    generic map (
        DataWidth => 32,
        AddressRange => 76800,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SUM1_data_address0,
        ce0 => SUM1_data_ce0,
        we0 => SUM1_data_we0,
        d0 => SUM1_data_d0,
        q0 => SUM1_data_q0,
        address1 => grp_cascadeClassifier_fu_377_SUM1_data_address1,
        ce1 => SUM1_data_ce1,
        q1 => SUM1_data_q1);

    SQSUM1_data_U : component processImage_SUM1_data
    generic map (
        DataWidth => 32,
        AddressRange => 76800,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SQSUM1_data_address0,
        ce0 => SQSUM1_data_ce0,
        we0 => SQSUM1_data_we0,
        d0 => SQSUM1_data_d0,
        q0 => SQSUM1_data_q0,
        address1 => grp_cascadeClassifier_fu_377_SQSUM1_data_address1,
        ce1 => SQSUM1_data_ce1,
        q1 => SQSUM1_data_q1);

    grp_cascadeClassifier_fu_377 : component cascadeClassifier
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cascadeClassifier_fu_377_ap_start,
        ap_done => grp_cascadeClassifier_fu_377_ap_done,
        ap_idle => grp_cascadeClassifier_fu_377_ap_idle,
        ap_ready => grp_cascadeClassifier_fu_377_ap_ready,
        SUM1_data_address0 => grp_cascadeClassifier_fu_377_SUM1_data_address0,
        SUM1_data_ce0 => grp_cascadeClassifier_fu_377_SUM1_data_ce0,
        SUM1_data_q0 => SUM1_data_q0,
        SUM1_data_address1 => grp_cascadeClassifier_fu_377_SUM1_data_address1,
        SUM1_data_ce1 => grp_cascadeClassifier_fu_377_SUM1_data_ce1,
        SUM1_data_q1 => SUM1_data_q1,
        SQSUM1_data_address0 => grp_cascadeClassifier_fu_377_SQSUM1_data_address0,
        SQSUM1_data_ce0 => grp_cascadeClassifier_fu_377_SQSUM1_data_ce0,
        SQSUM1_data_q0 => SQSUM1_data_q0,
        SQSUM1_data_address1 => grp_cascadeClassifier_fu_377_SQSUM1_data_address1,
        SQSUM1_data_ce1 => grp_cascadeClassifier_fu_377_SQSUM1_data_ce1,
        SQSUM1_data_q1 => SQSUM1_data_q1,
        pt_x => p_x_reg_365,
        pt_y => p_y_reg_353,
        ap_return => grp_cascadeClassifier_fu_377_ap_return);

    face_detect_sw_fmul_32ns_32ns_32_3_max_dsp_1_U39 : component face_detect_sw_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_455,
        din1 => factor,
        ce => ap_const_logic_1,
        dout => grp_fu_433_p2);

    face_detect_sw_sitofp_32ns_32_4_1_U40 : component face_detect_sw_sitofp_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_437_p0,
        ce => grp_fu_437_ce,
        dout => grp_fu_437_p1);

    face_detect_sw_fpext_32ns_64_2_1_U41 : component face_detect_sw_fpext_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_460,
        ce => ap_const_logic_1,
        dout => grp_fu_440_p1);

    face_detect_sw_fcmp_32ns_32ns_1_2_1_U42 : component face_detect_sw_fcmp_32ns_32ns_1_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_460,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_3,
        dout => grp_fu_443_p2);

    face_detect_sw_dadd_64ns_64ns_64_5_full_dsp_1_U43 : component face_detect_sw_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_466,
        din1 => grp_fu_448_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_448_p2);

    face_detect_sw_mac_muladd_8ns_8ns_32ns_32_1_1_U44 : component face_detect_sw_mac_muladd_8ns_8ns_32ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1084_p0,
        din1 => grp_fu_1084_p1,
        din2 => sq_0_i_reg_341,
        dout => grp_fu_1084_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_cascadeClassifier_fu_377_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cascadeClassifier_fu_377_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln155_fu_729_p2 = ap_const_lv1_1))) then 
                    grp_cascadeClassifier_fu_377_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cascadeClassifier_fu_377_ap_ready = ap_const_logic_1)) then 
                    grp_cascadeClassifier_fu_377_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    AllCandidates_size_0_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                AllCandidates_size_0_fu_164 <= add_ln171_fu_882_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln342_fu_475_p2 = ap_const_lv1_0))) then 
                AllCandidates_size_0_fu_164 <= AllCandidates_size_r;
            end if; 
        end if;
    end process;

    p_x_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                p_x_reg_365 <= x_reg_1265;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                p_x_reg_365 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    p_y_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln155_fu_729_p2 = ap_const_lv1_0))) then 
                p_y_reg_353 <= y_reg_1221;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln342_fu_475_p2 = ap_const_lv1_0))) then 
                p_y_reg_353 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    s_0_i_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln342_fu_475_p2 = ap_const_lv1_1))) then 
                s_0_i_reg_329 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_0_i_reg_329 <= s_reg_1199;
            end if; 
        end if;
    end process;

    sq_0_i_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln342_fu_475_p2 = ap_const_lv1_1))) then 
                sq_0_i_reg_341 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                sq_0_i_reg_341 <= sq_reg_1206;
            end if; 
        end if;
    end process;

    x_0_i_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln342_fu_475_p2 = ap_const_lv1_1))) then 
                x_0_i_reg_318 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                x_0_i_reg_318 <= x_1_reg_1168;
            end if; 
        end if;
    end process;

    y_0_i_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln347_fu_576_p2 = ap_const_lv1_0))) then 
                y_0_i_reg_307 <= y_1_reg_1127;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_0_i_reg_307 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln342_fu_475_p2 = ap_const_lv1_0))) then
                add_ln154_reg_1155 <= add_ln154_fu_558_p2;
                add_ln155_reg_1160 <= add_ln155_fu_563_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln342_fu_475_p2 = ap_const_lv1_1))) then
                    add_ln349_reg_1132(17 downto 6) <= add_ln349_fu_510_p2(17 downto 6);
                    add_ln358_1_reg_1143(17 downto 6) <= add_ln358_1_fu_552_p2(17 downto 6);
                icmp_ln356_reg_1137 <= icmp_ln356_fu_516_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln347_fu_576_p2 = ap_const_lv1_1))) then
                add_ln358_2_reg_1184 <= add_ln358_2_fu_601_p2;
                    zext_ln349_reg_1173(17 downto 0) <= zext_ln349_fu_596_p1(17 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_cascadeClassifier_fu_377_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                icmp_ln165_reg_1270 <= icmp_ln165_fu_740_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                icmp_ln57_1_reg_1231 <= icmp_ln57_1_fu_689_p2;
                icmp_ln57_reg_1226 <= icmp_ln57_fu_683_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                icmp_ln57_2_reg_1284 <= icmp_ln57_2_fu_911_p2;
                icmp_ln57_3_reg_1289 <= icmp_ln57_3_fu_917_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                p_Result_1_reg_1252 <= p_Val2_5_fu_713_p1(63 downto 63);
                p_Val2_5_reg_1246 <= p_Val2_5_fu_713_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                p_Val2_11_reg_1309 <= p_Val2_11_fu_1076_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_cascadeClassifier_fu_377_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln165_fu_740_p2 = ap_const_lv1_1))) then
                p_Val2_13_reg_1274 <= p_Val2_13_fu_868_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_455 <= grp_fu_437_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_460 <= grp_fu_433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_466 <= grp_fu_440_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                s_reg_1199 <= s_fu_619_p2;
                sq_reg_1206 <= grp_fu_1084_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                sext_ln167_reg_1279 <= sext_ln167_fu_875_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_3_reg_1236 <= grp_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                tmp_6_reg_1294 <= grp_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                x_1_reg_1168 <= x_1_fu_581_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                x_assign_reg_1304 <= grp_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                x_reg_1265 <= x_fu_734_p2;
                    zext_ln155_reg_1257(30 downto 0) <= zext_ln155_fu_725_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                y_1_reg_1127 <= y_1_fu_480_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                y_reg_1221 <= y_fu_659_p2;
            end if;
        end if;
    end process;
    add_ln349_reg_1132(5 downto 0) <= "000000";
    add_ln358_1_reg_1143(5 downto 0) <= "000000";
    zext_ln349_reg_1173(63 downto 18) <= "0000000000000000000000000000000000000000000000";
    zext_ln155_reg_1257(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln342_fu_475_p2, ap_CS_fsm_state3, icmp_ln347_fu_576_p2, ap_CS_fsm_state6, ap_CS_fsm_state20, icmp_ln165_fu_740_p2, ap_CS_fsm_state21, grp_cascadeClassifier_fu_377_ap_done, icmp_ln155_fu_729_p2, icmp_ln154_fu_654_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln342_fu_475_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln347_fu_576_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln154_fu_654_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln155_fu_729_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                if (((grp_cascadeClassifier_fu_377_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln165_fu_740_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                elsif (((grp_cascadeClassifier_fu_377_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln165_fu_740_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    AllCandidates_h_address0 <= sext_ln167_fu_875_p1(7 - 1 downto 0);

    AllCandidates_h_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            AllCandidates_h_ce0 <= ap_const_logic_1;
        else 
            AllCandidates_h_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    AllCandidates_h_d0 <= winSize_height;

    AllCandidates_h_we0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            AllCandidates_h_we0 <= ap_const_logic_1;
        else 
            AllCandidates_h_we0 <= ap_const_logic_0;
        end if; 
    end process;

    AllCandidates_w_address0 <= sext_ln167_fu_875_p1(7 - 1 downto 0);

    AllCandidates_w_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            AllCandidates_w_ce0 <= ap_const_logic_1;
        else 
            AllCandidates_w_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    AllCandidates_w_d0 <= winSize_width;

    AllCandidates_w_we0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            AllCandidates_w_we0 <= ap_const_logic_1;
        else 
            AllCandidates_w_we0 <= ap_const_logic_0;
        end if; 
    end process;

    AllCandidates_x_address0 <= sext_ln167_reg_1279(7 - 1 downto 0);

    AllCandidates_x_ce0_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            AllCandidates_x_ce0 <= ap_const_logic_1;
        else 
            AllCandidates_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    AllCandidates_x_d0 <= p_Val2_11_reg_1309;

    AllCandidates_x_we0_assign_proc : process(icmp_ln165_reg_1270, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) and (icmp_ln165_reg_1270 = ap_const_lv1_1))) then 
            AllCandidates_x_we0 <= ap_const_logic_1;
        else 
            AllCandidates_x_we0 <= ap_const_logic_0;
        end if; 
    end process;

    AllCandidates_y_address0 <= sext_ln167_fu_875_p1(7 - 1 downto 0);

    AllCandidates_y_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            AllCandidates_y_ce0 <= ap_const_logic_1;
        else 
            AllCandidates_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    AllCandidates_y_d0 <= p_Val2_13_reg_1274;

    AllCandidates_y_we0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            AllCandidates_y_we0 <= ap_const_logic_1;
        else 
            AllCandidates_y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG1_data_address0 <= zext_ln349_fu_596_p1(17 - 1 downto 0);

    IMG1_data_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            IMG1_data_ce0 <= ap_const_logic_1;
        else 
            IMG1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SQSUM1_data_address0_assign_proc : process(zext_ln349_reg_1173, ap_CS_fsm_state4, ap_CS_fsm_state21, grp_cascadeClassifier_fu_377_SQSUM1_data_address0, ap_CS_fsm_state5, sext_ln358_fu_606_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            SQSUM1_data_address0 <= zext_ln349_reg_1173(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            SQSUM1_data_address0 <= sext_ln358_fu_606_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            SQSUM1_data_address0 <= grp_cascadeClassifier_fu_377_SQSUM1_data_address0;
        else 
            SQSUM1_data_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    SQSUM1_data_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state21, grp_cascadeClassifier_fu_377_SQSUM1_data_ce0, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            SQSUM1_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            SQSUM1_data_ce0 <= grp_cascadeClassifier_fu_377_SQSUM1_data_ce0;
        else 
            SQSUM1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SQSUM1_data_ce1_assign_proc : process(ap_CS_fsm_state21, grp_cascadeClassifier_fu_377_SQSUM1_data_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            SQSUM1_data_ce1 <= grp_cascadeClassifier_fu_377_SQSUM1_data_ce1;
        else 
            SQSUM1_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    SQSUM1_data_d0 <= 
        sq_reg_1206 when (icmp_ln356_reg_1137(0) = '1') else 
        tq_1_fu_630_p2;

    SQSUM1_data_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            SQSUM1_data_we0 <= ap_const_logic_1;
        else 
            SQSUM1_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_address0_assign_proc : process(zext_ln349_reg_1173, ap_CS_fsm_state4, ap_CS_fsm_state21, grp_cascadeClassifier_fu_377_SUM1_data_address0, ap_CS_fsm_state5, sext_ln358_fu_606_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            SUM1_data_address0 <= zext_ln349_reg_1173(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            SUM1_data_address0 <= sext_ln358_fu_606_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            SUM1_data_address0 <= grp_cascadeClassifier_fu_377_SUM1_data_address0;
        else 
            SUM1_data_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    SUM1_data_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state21, grp_cascadeClassifier_fu_377_SUM1_data_ce0, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            SUM1_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            SUM1_data_ce0 <= grp_cascadeClassifier_fu_377_SUM1_data_ce0;
        else 
            SUM1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce1_assign_proc : process(ap_CS_fsm_state21, grp_cascadeClassifier_fu_377_SUM1_data_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            SUM1_data_ce1 <= grp_cascadeClassifier_fu_377_SUM1_data_ce1;
        else 
            SUM1_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    SUM1_data_d0 <= 
        s_reg_1199 when (icmp_ln356_reg_1137(0) = '1') else 
        t_1_fu_625_p2;

    SUM1_data_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            SUM1_data_we0 <= ap_const_logic_1;
        else 
            SUM1_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln154_fu_558_p2 <= std_logic_vector(unsigned(sum_row) + unsigned(ap_const_lv32_FFFFFFE8));
    add_ln155_fu_563_p2 <= std_logic_vector(unsigned(sum_col) + unsigned(ap_const_lv32_FFFFFFE8));
    add_ln171_fu_882_p1 <= AllCandidates_size_0_fu_164;
    add_ln171_fu_882_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(add_ln171_fu_882_p1));
    add_ln349_1_fu_591_p2 <= std_logic_vector(unsigned(add_ln349_reg_1132) + unsigned(trunc_ln349_2_fu_587_p1));
    add_ln349_fu_510_p2 <= std_logic_vector(unsigned(zext_ln349_cast_fu_490_p3) + unsigned(zext_ln349_2_cast_fu_502_p3));
    add_ln358_1_fu_552_p2 <= std_logic_vector(unsigned(sext_ln358_cast_fu_532_p3) + unsigned(sext_ln358_1_cast_fu_544_p3));
    add_ln358_2_fu_601_p2 <= std_logic_vector(unsigned(add_ln358_1_reg_1143) + unsigned(trunc_ln349_2_fu_587_p1));
    add_ln358_fu_522_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(zext_ln342_fu_471_p1));
    add_ln502_1_fu_776_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(zext_ln502_1_fu_772_p1));
    add_ln502_fu_984_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(zext_ln502_fu_980_p1));
    and_ln57_1_fu_927_p2 <= (tmp_6_reg_1294 and or_ln57_1_fu_923_p2);
    and_ln57_fu_699_p2 <= (tmp_3_reg_1236 and or_ln57_fu_695_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln154_fu_654_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln154_fu_654_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln154_fu_654_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln154_fu_654_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= AllCandidates_size_0_fu_164;
    bitcast_ln57_1_fu_893_p1 <= reg_460;
    bitcast_ln57_fu_665_p1 <= reg_460;
    grp_cascadeClassifier_fu_377_ap_start <= grp_cascadeClassifier_fu_377_ap_start_reg;
    grp_fu_1084_p0 <= zext_ln351_1_fu_615_p1(8 - 1 downto 0);
    grp_fu_1084_p1 <= zext_ln351_1_fu_615_p1(8 - 1 downto 0);

    grp_fu_437_ce_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state24, ap_CS_fsm_state6, ap_CS_fsm_state21, grp_cascadeClassifier_fu_377_ap_done, ap_CS_fsm_state22, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((grp_cascadeClassifier_fu_377_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            grp_fu_437_ce <= ap_const_logic_1;
        else 
            grp_fu_437_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_437_p0_assign_proc : process(zext_ln154_fu_649_p1, ap_CS_fsm_state6, zext_ln155_reg_1257, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_437_p0 <= zext_ln155_reg_1257;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_437_p0 <= zext_ln154_fu_649_p1;
        else 
            grp_fu_437_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_448_p1_assign_proc : process(select_ln57_fu_704_p3, ap_CS_fsm_state15, select_ln57_1_fu_932_p3, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_448_p1 <= select_ln57_1_fu_932_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_448_p1 <= select_ln57_fu_704_p3;
        else 
            grp_fu_448_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln154_fu_654_p2 <= "1" when (signed(zext_ln154_fu_649_p1) < signed(add_ln154_reg_1155)) else "0";
    icmp_ln155_fu_729_p2 <= "1" when (signed(zext_ln155_fu_725_p1) < signed(add_ln155_reg_1160)) else "0";
    icmp_ln165_fu_740_p2 <= "1" when (signed(grp_cascadeClassifier_fu_377_ap_return) > signed(ap_const_lv6_0)) else "0";
    icmp_ln342_fu_475_p2 <= "1" when (signed(zext_ln342_fu_471_p1) < signed(sum_row)) else "0";
    icmp_ln347_fu_576_p2 <= "1" when (signed(zext_ln347_fu_572_p1) < signed(sum_col)) else "0";
    icmp_ln356_fu_516_p2 <= "1" when (y_0_i_reg_307 = ap_const_lv31_0) else "0";
    icmp_ln57_1_fu_689_p2 <= "1" when (trunc_ln57_fu_679_p1 = ap_const_lv23_0) else "0";
    icmp_ln57_2_fu_911_p2 <= "0" when (tmp_5_fu_897_p4 = ap_const_lv8_FF) else "1";
    icmp_ln57_3_fu_917_p2 <= "1" when (trunc_ln57_1_fu_907_p1 = ap_const_lv23_0) else "0";
    icmp_ln57_fu_683_p2 <= "0" when (tmp_1_fu_669_p4 = ap_const_lv8_FF) else "1";
    isNeg_1_fu_782_p3 <= add_ln502_1_fu_776_p2(11 downto 11);
    isNeg_fu_990_p3 <= add_ln502_fu_984_p2(11 downto 11);
    mantissa_V_1_fu_758_p4 <= ((ap_const_lv1_1 & tmp_V_3_fu_755_p1) & ap_const_lv1_0);
    mantissa_V_fu_966_p4 <= ((ap_const_lv1_1 & tmp_V_1_fu_962_p1) & ap_const_lv1_0);
    or_ln57_1_fu_923_p2 <= (icmp_ln57_3_reg_1289 or icmp_ln57_2_reg_1284);
    or_ln57_fu_695_p2 <= (icmp_ln57_reg_1226 or icmp_ln57_1_reg_1231);
    p_Result_s_fu_944_p3 <= p_Val2_s_fu_941_p1(63 downto 63);
    p_Val2_10_fu_1062_p3 <= 
        zext_ln662_fu_1048_p1 when (isNeg_fu_990_p3(0) = '1') else 
        tmp_s_fu_1052_p4;
    p_Val2_11_fu_1076_p3 <= 
        result_V_1_fu_1070_p2 when (p_Result_s_fu_944_p3(0) = '1') else 
        p_Val2_10_fu_1062_p3;
    p_Val2_12_fu_854_p3 <= 
        zext_ln662_1_fu_840_p1 when (isNeg_1_fu_782_p3(0) = '1') else 
        tmp_7_fu_844_p4;
    p_Val2_13_fu_868_p3 <= 
        result_V_3_fu_862_p2 when (p_Result_1_reg_1252(0) = '1') else 
        p_Val2_12_fu_854_p3;
    p_Val2_5_fu_713_p1 <= grp_fu_448_p2;
    p_Val2_s_fu_941_p1 <= x_assign_reg_1304;
    r_V_1_fu_1034_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_976_p1),to_integer(unsigned('0' & zext_ln1287_fu_1020_p1(31-1 downto 0)))));
    r_V_2_fu_820_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_1_fu_758_p4),to_integer(unsigned('0' & zext_ln1285_1_fu_816_p1(31-1 downto 0)))));
    r_V_3_fu_826_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_1_fu_768_p1),to_integer(unsigned('0' & zext_ln1287_1_fu_812_p1(31-1 downto 0)))));
    r_V_fu_1028_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_966_p4),to_integer(unsigned('0' & zext_ln1285_fu_1024_p1(31-1 downto 0)))));
    result_V_1_fu_1070_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_10_fu_1062_p3));
    result_V_3_fu_862_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_12_fu_854_p3));
    s_fu_619_p2 <= std_logic_vector(unsigned(s_0_i_reg_329) + unsigned(zext_ln351_fu_611_p1));
    select_ln57_1_fu_932_p3 <= 
        ap_const_lv64_3FE0000000000000 when (and_ln57_1_fu_927_p2(0) = '1') else 
        ap_const_lv64_BFE0000000000000;
    select_ln57_fu_704_p3 <= 
        ap_const_lv64_3FE0000000000000 when (and_ln57_fu_699_p2(0) = '1') else 
        ap_const_lv64_BFE0000000000000;
        sext_ln1311_1_fu_1016_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_1008_p3),32));

        sext_ln1311_2_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_1_fu_790_p2),12));

        sext_ln1311_3_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_800_p3),32));

        sext_ln1311_fu_1004_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_998_p2),12));

    sext_ln167_fu_875_p0 <= AllCandidates_size_0_fu_164;
        sext_ln167_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln167_fu_875_p0),64));

    sext_ln358_1_cast_fu_544_p3 <= (trunc_ln358_1_fu_540_p1 & ap_const_lv6_0);
    sext_ln358_cast_fu_532_p3 <= (trunc_ln358_fu_528_p1 & ap_const_lv8_0);
        sext_ln358_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln358_2_reg_1184),64));

    sub_ln1311_1_fu_790_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_2_fu_746_p4));
    sub_ln1311_fu_998_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_fu_952_p4));
    t_1_fu_625_p2 <= std_logic_vector(unsigned(s_reg_1199) + unsigned(SUM1_data_q0));
    tmp_10_fu_1040_p3 <= r_V_fu_1028_p2(53 downto 53);
    tmp_12_fu_832_p3 <= r_V_2_fu_820_p2(53 downto 53);
    tmp_1_fu_669_p4 <= bitcast_ln57_fu_665_p1(30 downto 23);
    tmp_5_fu_897_p4 <= bitcast_ln57_1_fu_893_p1(30 downto 23);
    tmp_7_fu_844_p4 <= r_V_3_fu_826_p2(84 downto 53);
    tmp_V_1_fu_962_p1 <= p_Val2_s_fu_941_p1(52 - 1 downto 0);
    tmp_V_2_fu_746_p4 <= p_Val2_5_reg_1246(62 downto 52);
    tmp_V_3_fu_755_p1 <= p_Val2_5_reg_1246(52 - 1 downto 0);
    tmp_V_fu_952_p4 <= p_Val2_s_fu_941_p1(62 downto 52);
    tmp_s_fu_1052_p4 <= r_V_1_fu_1034_p2(84 downto 53);
    tq_1_fu_630_p2 <= std_logic_vector(unsigned(sq_reg_1206) + unsigned(SQSUM1_data_q0));
    trunc_ln349_1_fu_498_p1 <= y_0_i_reg_307(12 - 1 downto 0);
    trunc_ln349_2_fu_587_p1 <= x_0_i_reg_318(18 - 1 downto 0);
    trunc_ln349_fu_486_p1 <= y_0_i_reg_307(10 - 1 downto 0);
    trunc_ln358_1_fu_540_p1 <= add_ln358_fu_522_p2(12 - 1 downto 0);
    trunc_ln358_fu_528_p1 <= add_ln358_fu_522_p2(10 - 1 downto 0);
    trunc_ln57_1_fu_907_p1 <= bitcast_ln57_1_fu_893_p1(23 - 1 downto 0);
    trunc_ln57_fu_679_p1 <= bitcast_ln57_fu_665_p1(23 - 1 downto 0);
    ush_1_fu_800_p3 <= 
        sext_ln1311_2_fu_796_p1 when (isNeg_1_fu_782_p3(0) = '1') else 
        add_ln502_1_fu_776_p2;
    ush_fu_1008_p3 <= 
        sext_ln1311_fu_1004_p1 when (isNeg_fu_990_p3(0) = '1') else 
        add_ln502_fu_984_p2;
    x_1_fu_581_p2 <= std_logic_vector(unsigned(x_0_i_reg_318) + unsigned(ap_const_lv31_1));
    x_fu_734_p2 <= std_logic_vector(unsigned(p_x_reg_365) + unsigned(ap_const_lv31_1));
    y_1_fu_480_p2 <= std_logic_vector(unsigned(y_0_i_reg_307) + unsigned(ap_const_lv31_1));
    y_fu_659_p2 <= std_logic_vector(unsigned(p_y_reg_353) + unsigned(ap_const_lv31_1));
    zext_ln1285_1_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_3_fu_808_p1),54));
    zext_ln1285_fu_1024_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_1016_p1),54));
    zext_ln1287_1_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_3_fu_808_p1),137));
    zext_ln1287_fu_1020_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_1016_p1),137));
    zext_ln154_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_y_reg_353),32));
    zext_ln155_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_x_reg_365),32));
    zext_ln342_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_i_reg_307),32));
    zext_ln347_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_i_reg_318),32));
    zext_ln349_2_cast_fu_502_p3 <= (trunc_ln349_1_fu_498_p1 & ap_const_lv6_0);
    zext_ln349_cast_fu_490_p3 <= (trunc_ln349_fu_486_p1 & ap_const_lv8_0);
    zext_ln349_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln349_1_fu_591_p2),64));
    zext_ln351_1_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(IMG1_data_q0),16));
    zext_ln351_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(IMG1_data_q0),32));
    zext_ln502_1_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_2_fu_746_p4),12));
    zext_ln502_fu_980_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_952_p4),12));
    zext_ln662_1_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_832_p3),32));
    zext_ln662_fu_1048_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_1040_p3),32));
    zext_ln682_1_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_1_fu_758_p4),137));
    zext_ln682_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_966_p4),137));
end behav;
