-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cascadeClassifier is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    SUM1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce0 : OUT STD_LOGIC;
    SUM1_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    SUM1_data_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce1 : OUT STD_LOGIC;
    SUM1_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    SQSUM1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SQSUM1_data_ce0 : OUT STD_LOGIC;
    SQSUM1_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    SQSUM1_data_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SQSUM1_data_ce1 : OUT STD_LOGIC;
    SQSUM1_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pt_x : IN STD_LOGIC_VECTOR (30 downto 0);
    pt_y : IN STD_LOGIC_VECTOR (30 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of cascadeClassifier is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv64_3FD999999999999A : STD_LOGIC_VECTOR (63 downto 0) := "0011111111011001100110011001100110011001100110011001100110011010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv18_18 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000011000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal stages_array_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal stages_array_ce0 : STD_LOGIC;
    signal stages_array_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rectangles_array0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array0_ce0 : STD_LOGIC;
    signal rectangles_array0_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array2_ce0 : STD_LOGIC;
    signal rectangles_array2_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array1_ce0 : STD_LOGIC;
    signal rectangles_array1_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array3_ce0 : STD_LOGIC;
    signal rectangles_array3_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array4_ce0 : STD_LOGIC;
    signal rectangles_array4_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array6_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array6_ce0 : STD_LOGIC;
    signal rectangles_array6_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array5_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array5_ce0 : STD_LOGIC;
    signal rectangles_array5_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array7_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array7_ce0 : STD_LOGIC;
    signal rectangles_array7_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array8_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array8_ce0 : STD_LOGIC;
    signal rectangles_array8_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array10_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array10_ce0 : STD_LOGIC;
    signal rectangles_array10_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal rectangles_array9_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array9_ce0 : STD_LOGIC;
    signal rectangles_array9_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array11_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array11_ce0 : STD_LOGIC;
    signal rectangles_array11_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal coord_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal coord_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal coord_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal tree_thresh_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal tree_thresh_array_ce0 : STD_LOGIC;
    signal tree_thresh_array_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal weights_array0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_array0_ce0 : STD_LOGIC;
    signal weights_array0_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal weights_array1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_array1_ce0 : STD_LOGIC;
    signal weights_array1_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal weights_array2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_array2_ce0 : STD_LOGIC;
    signal weights_array2_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal alpha1_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal alpha1_array_ce0 : STD_LOGIC;
    signal alpha1_array_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal alpha2_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal alpha2_array_ce0 : STD_LOGIC;
    signal alpha2_array_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal stages_thresh_array_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal stages_thresh_array_ce0 : STD_LOGIC;
    signal stages_thresh_array_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_738_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_745 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal trunc_ln210_fu_751_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln210_reg_1906 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln210_6_fu_801_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln210_6_reg_1921 : STD_LOGIC_VECTOR (17 downto 0);
    signal pt_y_cast_fu_819_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pt_y_cast_reg_1936 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln205_fu_880_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln205_reg_1963 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln210_fu_886_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln210_reg_1968 : STD_LOGIC_VECTOR (31 downto 0);
    signal stddev_fu_897_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal stddev_reg_1973 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal mean_fu_908_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mean_reg_1979 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln216_fu_914_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln216_reg_1985 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal pt_x_cast_fu_918_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pt_x_cast_reg_1990 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal stddev_2_fu_937_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln218_fu_942_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln218_reg_2002 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_954_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal shl_ln429_fu_982_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln423_fu_948_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_2_fu_1012_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_fu_1030_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln232_fu_1043_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln232_reg_2036 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_fu_1049_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_2040 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln233_fu_1055_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln233_reg_2045 : STD_LOGIC_VECTOR (63 downto 0);
    signal haar_counter_fu_1064_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal haar_counter_reg_2055 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln233_fu_1074_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln233_reg_2060 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_fu_1089_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_2068 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln235_fu_1095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln235_reg_2073 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln233_fu_1084_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln242_fu_1101_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln242_reg_2078 : STD_LOGIC_VECTOR (63 downto 0);
    signal rectangles_array0_lo_reg_2113 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal rectangles_array1_lo_reg_2123 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln259_2_fu_1233_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln259_2_reg_2153 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln260_fu_1239_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln260_reg_2158 : STD_LOGIC_VECTOR (17 downto 0);
    signal rectangles_array4_lo_reg_2163 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal rectangles_array5_lo_reg_2173 : STD_LOGIC_VECTOR (4 downto 0);
    signal SUM1_data_load_4_reg_2183 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_load_5_reg_2188 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal SUM1_data_load_6_reg_2223 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_load_7_reg_2228 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln264_2_fu_1379_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln264_2_reg_2243 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln265_fu_1385_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln265_reg_2248 : STD_LOGIC_VECTOR (17 downto 0);
    signal tr2_x_reg_2253 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tr2_width_reg_2258 : STD_LOGIC_VECTOR (3 downto 0);
    signal tr2_y_reg_2264 : STD_LOGIC_VECTOR (4 downto 0);
    signal tr2_height_reg_2269 : STD_LOGIC_VECTOR (3 downto 0);
    signal SUM1_data_load_8_reg_2275 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_load_9_reg_2280 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln267_fu_1457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln267_reg_2295 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln235_fu_1463_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln235_reg_2300 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal SUM1_data_load_10_reg_2305 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_load_11_reg_2310 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln267_4_fu_1495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln267_4_reg_2315 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln271_2_fu_1615_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln271_2_reg_2329 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln272_fu_1621_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln272_reg_2334 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln319_fu_1680_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln319_reg_2359 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln320_fu_1694_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln320_reg_2369 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln289_fu_1699_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln289_reg_2394 : STD_LOGIC_VECTOR (12 downto 0);
    signal tree_thresh_array_lo_reg_2399 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal weights_array0_load_reg_2404 : STD_LOGIC_VECTOR (12 downto 0);
    signal weights_array1_load_reg_2409 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln321_fu_1729_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln321_reg_2414 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_array2_load_reg_2419 : STD_LOGIC_VECTOR (13 downto 0);
    signal return_value_reg_2424 : STD_LOGIC_VECTOR (13 downto 0);
    signal return_value_1_reg_2429 : STD_LOGIC_VECTOR (13 downto 0);
    signal t_fu_1738_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_reg_2434 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal sum0_fu_1747_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum0_reg_2439 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_fu_1755_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_reg_2444 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum2_fu_1763_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum2_reg_2449 : STD_LOGIC_VECTOR (31 downto 0);
    signal stages_thresh_array_1_reg_2454 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal sext_ln294_fu_1802_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_729_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_2469 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln294_fu_1841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln294_reg_2475 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal icmp_ln294_1_fu_1847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln294_1_reg_2480 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln294_2_fu_1853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln294_2_reg_2485 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln294_3_fu_1859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln294_3_reg_2490 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_0_i_reg_606 : STD_LOGIC_VECTOR (31 downto 0);
    signal stddev_3_reg_617 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_628 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_0_i_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal stddev_assign_reg_648 : STD_LOGIC_VECTOR (31 downto 0);
    signal haar_counter_0_reg_661 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal and_ln294_1_fu_1879_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_673 : STD_LOGIC_VECTOR (4 downto 0);
    signal haar_counter_assign_reg_685 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal j_0_reg_696 : STD_LOGIC_VECTOR (7 downto 0);
    signal storemerge_reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln295_fu_1889_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_p_0_phi_fu_722_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_0_reg_718 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln210_fu_791_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln210_fu_813_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln210_1_fu_863_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln210_2_fu_874_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln257_fu_1167_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln258_fu_1192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln259_fu_1245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln260_fu_1249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln262_fu_1313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln263_fu_1338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln264_fu_1391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln265_fu_1395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln269_fu_1550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln270_fu_1574_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln271_fu_1657_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln272_fu_1661_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal stage_sum_1_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal stage_sum_fu_1792_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_738_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln210_1_fu_755_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln210_2_fu_767_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln210_cast_fu_759_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln210_1_cast_fu_771_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln210_fu_779_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln210_1_fu_785_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln205_fu_797_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln210_2_fu_807_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln205_fu_822_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln210_3_fu_828_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln210_4_fu_840_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln210_cast_fu_832_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln210_1_cast_fu_844_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln210_3_fu_852_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln210_4_fu_858_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln210_5_fu_869_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln205_1_fu_892_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln210_1_fu_903_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln215_1_fu_926_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln215_fu_921_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal stddev_1_fu_931_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln425_fu_960_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal lshr_ln_fu_964_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln431_fu_988_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_fu_974_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_fu_994_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln432_fu_1000_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_1_fu_1006_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln432_fu_1026_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal xor_ln432_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln233_1_fu_1060_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_14_fu_1070_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln233_fu_1080_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln242_1_fu_1107_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln244_fu_1115_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tr0_x_fu_1110_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tr0_y_fu_1118_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln257_1_fu_1131_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln257_2_fu_1143_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln257_1_cast_fu_1135_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln257_2_cast_fu_1147_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln257_fu_1127_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln257_fu_1155_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln257_1_fu_1161_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln258_fu_1176_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln258_fu_1172_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln258_fu_1180_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln258_1_fu_1186_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln245_fu_1123_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln259_fu_1197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln259_fu_1203_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln259_1_fu_1215_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln259_cast_fu_1207_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln259_1_cast_fu_1219_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln259_1_fu_1227_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln247_fu_1253_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln249_fu_1261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tr1_x_fu_1256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tr1_y_fu_1264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln262_1_fu_1277_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln262_2_fu_1289_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln262_1_cast_fu_1281_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln262_2_cast_fu_1293_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln262_fu_1273_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln262_fu_1301_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln262_1_fu_1307_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln263_fu_1322_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln263_fu_1318_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln263_fu_1326_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln263_1_fu_1332_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln250_fu_1269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln264_fu_1343_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln264_fu_1349_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln264_1_fu_1361_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln264_cast_fu_1353_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln264_1_cast_fu_1365_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln264_1_fu_1373_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln267_fu_1399_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_22_fu_1409_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln267_fu_1403_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln267_1_fu_1425_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_23_fu_1435_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln267_1_fu_1429_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp3_fu_1443_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp2_fu_1417_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln267_2_fu_1451_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln267_1_fu_1479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln267_2_fu_1484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln267_3_fu_1489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln252_fu_1470_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln269_fu_1500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln254_fu_1473_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln269_1_fu_1509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln269_1_fu_1514_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln269_2_fu_1526_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln269_1_cast_fu_1518_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln269_2_cast_fu_1530_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln269_fu_1505_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln269_2_fu_1538_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln269_3_fu_1544_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln270_fu_1559_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln270_fu_1555_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln270_fu_1562_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln270_1_fu_1568_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln255_fu_1476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln271_fu_1579_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln271_fu_1585_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln271_1_fu_1597_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln271_cast_fu_1589_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln271_1_cast_fu_1601_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln271_1_fu_1609_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln319_fu_1671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln319_1_fu_1675_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln320_fu_1685_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln320_1_fu_1689_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln321_fu_1717_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln321_1_fu_1723_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_fu_1738_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum0_fu_1747_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum1_fu_1755_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum2_fu_1763_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln322_fu_1768_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal final_sum_fu_1772_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln324_fu_1777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal return_value_3_fu_1782_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln324_fu_1788_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln294_fu_1806_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln294_1_fu_1824_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_1810_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln294_fu_1820_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_5_fu_1827_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln294_1_fu_1837_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln294_fu_1865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln294_1_fu_1869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln294_fu_1873_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln232_fu_1885_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_fu_1755_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum2_fu_1763_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component face_detect_sw_dmul_64ns_64ns_64_5_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component face_detect_sw_dcmp_64ns_64ns_1_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component face_detect_sw_sitodp_32s_64_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component cascadeClassifier_stages_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cascadeClassifier_rectangles_array0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascadeClassifier_rectangles_array2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascadeClassifier_rectangles_array1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascadeClassifier_rectangles_array3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascadeClassifier_rectangles_array4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascadeClassifier_rectangles_array6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascadeClassifier_rectangles_array5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascadeClassifier_rectangles_array7 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascadeClassifier_rectangles_array8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascadeClassifier_rectangles_array10 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component cascadeClassifier_rectangles_array9 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascadeClassifier_rectangles_array11 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component cascadeClassifier_tree_thresh_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component cascadeClassifier_weights_array0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component cascadeClassifier_weights_array1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cascadeClassifier_weights_array2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cascadeClassifier_alpha1_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cascadeClassifier_alpha2_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cascadeClassifier_stages_thresh_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    stages_array_U : component cascadeClassifier_stages_array
    generic map (
        DataWidth => 8,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stages_array_address0,
        ce0 => stages_array_ce0,
        q0 => stages_array_q0);

    rectangles_array0_U : component cascadeClassifier_rectangles_array0
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array0_address0,
        ce0 => rectangles_array0_ce0,
        q0 => rectangles_array0_q0);

    rectangles_array2_U : component cascadeClassifier_rectangles_array2
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array2_address0,
        ce0 => rectangles_array2_ce0,
        q0 => rectangles_array2_q0);

    rectangles_array1_U : component cascadeClassifier_rectangles_array1
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array1_address0,
        ce0 => rectangles_array1_ce0,
        q0 => rectangles_array1_q0);

    rectangles_array3_U : component cascadeClassifier_rectangles_array3
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array3_address0,
        ce0 => rectangles_array3_ce0,
        q0 => rectangles_array3_q0);

    rectangles_array4_U : component cascadeClassifier_rectangles_array4
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array4_address0,
        ce0 => rectangles_array4_ce0,
        q0 => rectangles_array4_q0);

    rectangles_array6_U : component cascadeClassifier_rectangles_array6
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array6_address0,
        ce0 => rectangles_array6_ce0,
        q0 => rectangles_array6_q0);

    rectangles_array5_U : component cascadeClassifier_rectangles_array5
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array5_address0,
        ce0 => rectangles_array5_ce0,
        q0 => rectangles_array5_q0);

    rectangles_array7_U : component cascadeClassifier_rectangles_array7
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array7_address0,
        ce0 => rectangles_array7_ce0,
        q0 => rectangles_array7_q0);

    rectangles_array8_U : component cascadeClassifier_rectangles_array8
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array8_address0,
        ce0 => rectangles_array8_ce0,
        q0 => rectangles_array8_q0);

    rectangles_array10_U : component cascadeClassifier_rectangles_array10
    generic map (
        DataWidth => 4,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array10_address0,
        ce0 => rectangles_array10_ce0,
        q0 => rectangles_array10_q0);

    rectangles_array9_U : component cascadeClassifier_rectangles_array9
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array9_address0,
        ce0 => rectangles_array9_ce0,
        q0 => rectangles_array9_q0);

    rectangles_array11_U : component cascadeClassifier_rectangles_array11
    generic map (
        DataWidth => 4,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array11_address0,
        ce0 => rectangles_array11_ce0,
        q0 => rectangles_array11_q0);

    tree_thresh_array_U : component cascadeClassifier_tree_thresh_array
    generic map (
        DataWidth => 13,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tree_thresh_array_address0,
        ce0 => tree_thresh_array_ce0,
        q0 => tree_thresh_array_q0);

    weights_array0_U : component cascadeClassifier_weights_array0
    generic map (
        DataWidth => 13,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_array0_address0,
        ce0 => weights_array0_ce0,
        q0 => weights_array0_q0);

    weights_array1_U : component cascadeClassifier_weights_array1
    generic map (
        DataWidth => 14,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_array1_address0,
        ce0 => weights_array1_ce0,
        q0 => weights_array1_q0);

    weights_array2_U : component cascadeClassifier_weights_array2
    generic map (
        DataWidth => 14,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_array2_address0,
        ce0 => weights_array2_ce0,
        q0 => weights_array2_q0);

    alpha1_array_U : component cascadeClassifier_alpha1_array
    generic map (
        DataWidth => 14,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => alpha1_array_address0,
        ce0 => alpha1_array_ce0,
        q0 => alpha1_array_q0);

    alpha2_array_U : component cascadeClassifier_alpha2_array
    generic map (
        DataWidth => 14,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => alpha2_array_address0,
        ce0 => alpha2_array_ce0,
        q0 => alpha2_array_q0);

    stages_thresh_array_U : component cascadeClassifier_stages_thresh_array
    generic map (
        DataWidth => 12,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stages_thresh_array_address0,
        ce0 => stages_thresh_array_ce0,
        q0 => stages_thresh_array_q0);

    face_detect_sw_dmul_64ns_64ns_64_5_max_dsp_1_U9 : component face_detect_sw_dmul_64ns_64ns_64_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_745,
        din1 => ap_const_lv64_3FD999999999999A,
        ce => ap_const_logic_1,
        dout => grp_fu_729_p2);

    face_detect_sw_dcmp_64ns_64ns_1_2_1_U10 : component face_detect_sw_dcmp_64ns_64ns_1_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_745,
        din1 => tmp_4_reg_2469,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_734_p2);

    face_detect_sw_sitodp_32s_64_4_1_U11 : component face_detect_sw_sitodp_32s_64_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_738_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_738_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv6_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and ((icmp_ln232_reg_2036 = ap_const_lv1_0) or (ap_const_lv1_1 = and_ln294_1_fu_1879_p2)))) then 
                    ap_return_preg <= ap_phi_mux_p_0_phi_fu_722_p4;
                end if; 
            end if;
        end if;
    end process;


    c_0_i_reg_606_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln218_fu_942_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                c_0_i_reg_606 <= ap_const_lv32_0;
            elsif (((icmp_ln423_fu_948_p2 = ap_const_lv1_0) and (icmp_ln218_reg_2002 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                c_0_i_reg_606 <= c_2_fu_1012_p3;
            end if; 
        end if;
    end process;

    coord_10_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln267_4_reg_2315 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                coord_10 <= SUM1_data_q0;
            elsif (((or_ln267_4_fu_1495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                coord_10 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    coord_8_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                coord_8 <= SUM1_data_q0;
            elsif (((or_ln267_4_fu_1495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                coord_8 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    coord_9_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                coord_9 <= SUM1_data_q1;
            elsif (((or_ln267_4_fu_1495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                coord_9 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    haar_counter_0_reg_661_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln294_1_fu_1879_p2) and (icmp_ln232_reg_2036 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                haar_counter_0_reg_661 <= haar_counter_reg_2055;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and ((icmp_ln423_fu_948_p2 = ap_const_lv1_1) or (icmp_ln218_reg_2002 = ap_const_lv1_0)))) then 
                haar_counter_0_reg_661 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    haar_counter_assign_reg_685_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                haar_counter_assign_reg_685 <= add_ln289_reg_2394;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                haar_counter_assign_reg_685 <= haar_counter_0_reg_661;
            end if; 
        end if;
    end process;

    i_0_i_reg_628_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln218_fu_942_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_i_reg_628 <= ap_const_lv5_0;
            elsif (((icmp_ln423_fu_948_p2 = ap_const_lv1_0) and (icmp_ln218_reg_2002 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_0_i_reg_628 <= i_1_fu_954_p2;
            end if; 
        end if;
    end process;

    i_0_reg_673_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln294_1_fu_1879_p2) and (icmp_ln232_reg_2036 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                i_0_reg_673 <= i_reg_2040;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and ((icmp_ln423_fu_948_p2 = ap_const_lv1_1) or (icmp_ln218_reg_2002 = ap_const_lv1_0)))) then 
                i_0_reg_673 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_reg_696_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                j_0_reg_696 <= j_reg_2068;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_0_reg_696 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    p_0_i_reg_639_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln218_fu_942_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_0_i_reg_639 <= stddev_2_fu_937_p2;
            elsif (((icmp_ln423_fu_948_p2 = ap_const_lv1_0) and (icmp_ln218_reg_2002 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_0_i_reg_639 <= shl_ln429_fu_982_p2;
            end if; 
        end if;
    end process;

    p_0_reg_718_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln232_fu_1043_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_0_reg_718 <= ap_const_lv6_1;
            elsif (((ap_const_lv1_1 = and_ln294_1_fu_1879_p2) and (icmp_ln232_reg_2036 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                p_0_reg_718 <= sub_ln295_fu_1889_p2;
            end if; 
        end if;
    end process;

    stage_sum_1_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                stage_sum_1_fu_152 <= stage_sum_fu_1792_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and ((icmp_ln423_fu_948_p2 = ap_const_lv1_1) or (icmp_ln218_reg_2002 = ap_const_lv1_0)))) then 
                stage_sum_1_fu_152 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    stddev_3_reg_617_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln218_fu_942_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                stddev_3_reg_617 <= ap_const_lv32_0;
            elsif (((icmp_ln423_fu_948_p2 = ap_const_lv1_0) and (icmp_ln218_reg_2002 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                stddev_3_reg_617 <= a_fu_1030_p3;
            end if; 
        end if;
    end process;

    stddev_assign_reg_648_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln423_fu_948_p2 = ap_const_lv1_1) and (icmp_ln218_reg_2002 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                stddev_assign_reg_648 <= stddev_3_reg_617;
            elsif (((icmp_ln218_fu_942_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                stddev_assign_reg_648 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    storemerge_reg_707_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln267_4_reg_2315 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                storemerge_reg_707 <= SUM1_data_q1;
            elsif (((or_ln267_4_fu_1495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                storemerge_reg_707 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                SUM1_data_load_10_reg_2305 <= SUM1_data_q0;
                SUM1_data_load_11_reg_2310 <= SUM1_data_q1;
                or_ln267_4_reg_2315 <= or_ln267_4_fu_1495_p2;
                select_ln235_reg_2300 <= select_ln235_fu_1463_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                SUM1_data_load_4_reg_2183 <= SUM1_data_q0;
                SUM1_data_load_5_reg_2188 <= SUM1_data_q1;
                rectangles_array4_lo_reg_2163 <= rectangles_array4_q0;
                rectangles_array5_lo_reg_2173 <= rectangles_array5_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                SUM1_data_load_6_reg_2223 <= SUM1_data_q0;
                SUM1_data_load_7_reg_2228 <= SUM1_data_q1;
                add_ln264_2_reg_2243 <= add_ln264_2_fu_1379_p2;
                add_ln265_reg_2248 <= add_ln265_fu_1385_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                SUM1_data_load_8_reg_2275 <= SUM1_data_q0;
                SUM1_data_load_9_reg_2280 <= SUM1_data_q1;
                icmp_ln267_reg_2295 <= icmp_ln267_fu_1457_p2;
                tr2_height_reg_2269 <= rectangles_array11_q0;
                tr2_width_reg_2258 <= rectangles_array10_q0;
                tr2_x_reg_2253 <= rectangles_array8_q0;
                tr2_y_reg_2264 <= rectangles_array9_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln210_6_reg_1921 <= add_ln210_6_fu_801_p2;
                trunc_ln210_reg_1906 <= trunc_ln210_fu_751_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln233_reg_2060 <= add_ln233_fu_1074_p2;
                haar_counter_reg_2055 <= haar_counter_fu_1064_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln259_2_reg_2153 <= add_ln259_2_fu_1233_p2;
                add_ln260_reg_2158 <= add_ln260_fu_1239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln267_4_fu_1495_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                add_ln271_2_reg_2329 <= add_ln271_2_fu_1615_p2;
                add_ln272_reg_2334 <= add_ln272_fu_1621_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln289_reg_2394 <= add_ln289_fu_1699_p2;
                add_ln319_reg_2359 <= add_ln319_fu_1680_p2;
                add_ln320_reg_2369 <= add_ln320_fu_1694_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln321_reg_2414 <= add_ln321_fu_1729_p2;
                return_value_1_reg_2429 <= alpha2_array_q0;
                return_value_reg_2424 <= alpha1_array_q0;
                tree_thresh_array_lo_reg_2399 <= tree_thresh_array_q0;
                weights_array0_load_reg_2404 <= weights_array0_q0;
                weights_array1_load_reg_2409 <= weights_array1_q0;
                weights_array2_load_reg_2419 <= weights_array2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_reg_2040 <= i_fu_1049_p2;
                icmp_ln232_reg_2036 <= icmp_ln232_fu_1043_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                icmp_ln218_reg_2002 <= icmp_ln218_fu_942_p2;
                    pt_x_cast_reg_1990(30 downto 0) <= pt_x_cast_fu_918_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln233_fu_1084_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                icmp_ln235_reg_2073 <= icmp_ln235_fu_1095_p2;
                    zext_ln242_reg_2078(12 downto 0) <= zext_ln242_fu_1101_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                icmp_ln294_1_reg_2480 <= icmp_ln294_1_fu_1847_p2;
                icmp_ln294_2_reg_2485 <= icmp_ln294_2_fu_1853_p2;
                icmp_ln294_3_reg_2490 <= icmp_ln294_3_fu_1859_p2;
                icmp_ln294_reg_2475 <= icmp_ln294_fu_1841_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                j_reg_2068 <= j_fu_1089_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mean_reg_1979 <= mean_fu_908_p2;
                stddev_reg_1973 <= stddev_fu_897_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                mul_ln216_reg_1985 <= mul_ln216_fu_914_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    pt_y_cast_reg_1936(30 downto 0) <= pt_y_cast_fu_819_p1(30 downto 0);
                sub_ln205_reg_1963 <= sub_ln205_fu_880_p2;
                sub_ln210_reg_1968 <= sub_ln210_fu_886_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                rectangles_array0_lo_reg_2113 <= rectangles_array0_q0;
                rectangles_array1_lo_reg_2123 <= rectangles_array1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25))) then
                reg_745 <= grp_fu_738_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                stages_thresh_array_1_reg_2454 <= stages_thresh_array_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                sum0_reg_2439 <= sum0_fu_1747_p2;
                sum1_reg_2444 <= sum1_fu_1755_p2;
                sum2_reg_2449 <= sum2_fu_1763_p2;
                t_reg_2434 <= t_fu_1738_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                tmp_4_reg_2469 <= grp_fu_729_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln232_fu_1043_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    zext_ln233_reg_2045(4 downto 0) <= zext_ln233_fu_1055_p1(4 downto 0);
            end if;
        end if;
    end process;
    pt_y_cast_reg_1936(31) <= '0';
    pt_x_cast_reg_1990(31) <= '0';
    zext_ln233_reg_2045(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln242_reg_2078(63 downto 13) <= "000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln218_reg_2002, ap_CS_fsm_state6, icmp_ln423_fu_948_p2, icmp_ln232_fu_1043_p2, icmp_ln232_reg_2036, ap_CS_fsm_state7, ap_CS_fsm_state9, icmp_ln233_fu_1084_p2, ap_CS_fsm_state15, or_ln267_4_fu_1495_p2, ap_CS_fsm_state32, and_ln294_1_fu_1879_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((icmp_ln423_fu_948_p2 = ap_const_lv1_1) or (icmp_ln218_reg_2002 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln232_fu_1043_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln233_fu_1084_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((or_ln267_4_fu_1495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and ((icmp_ln232_reg_2036 = ap_const_lv1_0) or (ap_const_lv1_1 = and_ln294_1_fu_1879_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    SQSUM1_data_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln210_fu_791_p1, sext_ln210_1_fu_863_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SQSUM1_data_address0 <= sext_ln210_1_fu_863_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            SQSUM1_data_address0 <= zext_ln210_fu_791_p1(17 - 1 downto 0);
        else 
            SQSUM1_data_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    SQSUM1_data_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, sext_ln210_fu_813_p1, sext_ln210_2_fu_874_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SQSUM1_data_address1 <= sext_ln210_2_fu_874_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            SQSUM1_data_address1 <= sext_ln210_fu_813_p1(17 - 1 downto 0);
        else 
            SQSUM1_data_address1 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    SQSUM1_data_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            SQSUM1_data_ce0 <= ap_const_logic_1;
        else 
            SQSUM1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SQSUM1_data_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            SQSUM1_data_ce1 <= ap_const_logic_1;
        else 
            SQSUM1_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, zext_ln210_fu_791_p1, sext_ln210_1_fu_863_p1, zext_ln257_fu_1167_p1, sext_ln259_fu_1245_p1, zext_ln262_fu_1313_p1, sext_ln264_fu_1391_p1, zext_ln269_fu_1550_p1, sext_ln271_fu_1657_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            SUM1_data_address0 <= sext_ln271_fu_1657_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            SUM1_data_address0 <= zext_ln269_fu_1550_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            SUM1_data_address0 <= sext_ln264_fu_1391_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            SUM1_data_address0 <= zext_ln262_fu_1313_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            SUM1_data_address0 <= sext_ln259_fu_1245_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            SUM1_data_address0 <= zext_ln257_fu_1167_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SUM1_data_address0 <= sext_ln210_1_fu_863_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            SUM1_data_address0 <= zext_ln210_fu_791_p1(17 - 1 downto 0);
        else 
            SUM1_data_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    SUM1_data_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, sext_ln210_fu_813_p1, sext_ln210_2_fu_874_p1, sext_ln258_fu_1192_p1, sext_ln260_fu_1249_p1, sext_ln263_fu_1338_p1, sext_ln265_fu_1395_p1, sext_ln270_fu_1574_p1, sext_ln272_fu_1661_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            SUM1_data_address1 <= sext_ln272_fu_1661_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            SUM1_data_address1 <= sext_ln270_fu_1574_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            SUM1_data_address1 <= sext_ln265_fu_1395_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            SUM1_data_address1 <= sext_ln263_fu_1338_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            SUM1_data_address1 <= sext_ln260_fu_1249_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            SUM1_data_address1 <= sext_ln258_fu_1192_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SUM1_data_address1 <= sext_ln210_2_fu_874_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            SUM1_data_address1 <= sext_ln210_fu_813_p1(17 - 1 downto 0);
        else 
            SUM1_data_address1 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    SUM1_data_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            SUM1_data_ce0 <= ap_const_logic_1;
        else 
            SUM1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            SUM1_data_ce1 <= ap_const_logic_1;
        else 
            SUM1_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    a_fu_1030_p3 <= (trunc_ln432_fu_1026_p1 & xor_ln432_fu_1020_p2);
    add_ln205_fu_822_p2 <= std_logic_vector(unsigned(ap_const_lv32_18) + unsigned(pt_y_cast_fu_819_p1));
    add_ln210_1_fu_785_p2 <= std_logic_vector(unsigned(trunc_ln210_fu_751_p1) + unsigned(add_ln210_fu_779_p2));
    add_ln210_2_fu_807_p2 <= std_logic_vector(unsigned(add_ln210_6_fu_801_p2) + unsigned(add_ln210_fu_779_p2));
    add_ln210_3_fu_852_p2 <= std_logic_vector(unsigned(sext_ln210_cast_fu_832_p3) + unsigned(sext_ln210_1_cast_fu_844_p3));
    add_ln210_4_fu_858_p2 <= std_logic_vector(unsigned(trunc_ln210_reg_1906) + unsigned(add_ln210_3_fu_852_p2));
    add_ln210_5_fu_869_p2 <= std_logic_vector(unsigned(add_ln210_6_reg_1921) + unsigned(add_ln210_3_fu_852_p2));
    add_ln210_6_fu_801_p2 <= std_logic_vector(unsigned(ap_const_lv18_18) + unsigned(trunc_ln205_fu_797_p1));
    add_ln210_fu_779_p2 <= std_logic_vector(unsigned(zext_ln210_cast_fu_759_p3) + unsigned(zext_ln210_1_cast_fu_771_p3));
    add_ln233_fu_1074_p2 <= std_logic_vector(unsigned(empty_14_fu_1070_p1) + unsigned(stages_array_q0));
    add_ln257_1_fu_1161_p2 <= std_logic_vector(unsigned(trunc_ln257_fu_1127_p1) + unsigned(add_ln257_fu_1155_p2));
    add_ln257_fu_1155_p2 <= std_logic_vector(unsigned(zext_ln257_1_cast_fu_1135_p3) + unsigned(zext_ln257_2_cast_fu_1147_p3));
    add_ln258_1_fu_1186_p2 <= std_logic_vector(unsigned(add_ln258_fu_1180_p2) + unsigned(add_ln257_fu_1155_p2));
    add_ln258_fu_1180_p2 <= std_logic_vector(unsigned(trunc_ln258_fu_1176_p1) + unsigned(zext_ln258_fu_1172_p1));
    add_ln259_1_fu_1227_p2 <= std_logic_vector(unsigned(sext_ln259_cast_fu_1207_p3) + unsigned(sext_ln259_1_cast_fu_1219_p3));
    add_ln259_2_fu_1233_p2 <= std_logic_vector(unsigned(trunc_ln257_fu_1127_p1) + unsigned(add_ln259_1_fu_1227_p2));
    add_ln259_fu_1197_p2 <= std_logic_vector(unsigned(tr0_y_fu_1118_p2) + unsigned(zext_ln245_fu_1123_p1));
    add_ln260_fu_1239_p2 <= std_logic_vector(unsigned(add_ln258_fu_1180_p2) + unsigned(add_ln259_1_fu_1227_p2));
    add_ln262_1_fu_1307_p2 <= std_logic_vector(unsigned(trunc_ln262_fu_1273_p1) + unsigned(add_ln262_fu_1301_p2));
    add_ln262_fu_1301_p2 <= std_logic_vector(unsigned(zext_ln262_1_cast_fu_1281_p3) + unsigned(zext_ln262_2_cast_fu_1293_p3));
    add_ln263_1_fu_1332_p2 <= std_logic_vector(unsigned(add_ln263_fu_1326_p2) + unsigned(add_ln262_fu_1301_p2));
    add_ln263_fu_1326_p2 <= std_logic_vector(unsigned(trunc_ln263_fu_1322_p1) + unsigned(zext_ln263_fu_1318_p1));
    add_ln264_1_fu_1373_p2 <= std_logic_vector(unsigned(sext_ln264_cast_fu_1353_p3) + unsigned(sext_ln264_1_cast_fu_1365_p3));
    add_ln264_2_fu_1379_p2 <= std_logic_vector(unsigned(trunc_ln262_fu_1273_p1) + unsigned(add_ln264_1_fu_1373_p2));
    add_ln264_fu_1343_p2 <= std_logic_vector(unsigned(tr1_y_fu_1264_p2) + unsigned(zext_ln250_fu_1269_p1));
    add_ln265_fu_1385_p2 <= std_logic_vector(unsigned(add_ln263_fu_1326_p2) + unsigned(add_ln264_1_fu_1373_p2));
    add_ln269_1_fu_1509_p2 <= std_logic_vector(unsigned(zext_ln254_fu_1473_p1) + unsigned(pt_y_cast_reg_1936));
    add_ln269_2_fu_1538_p2 <= std_logic_vector(unsigned(zext_ln269_1_cast_fu_1518_p3) + unsigned(zext_ln269_2_cast_fu_1530_p3));
    add_ln269_3_fu_1544_p2 <= std_logic_vector(unsigned(trunc_ln269_fu_1505_p1) + unsigned(add_ln269_2_fu_1538_p2));
    add_ln269_fu_1500_p2 <= std_logic_vector(unsigned(zext_ln252_fu_1470_p1) + unsigned(pt_x_cast_reg_1990));
    add_ln270_1_fu_1568_p2 <= std_logic_vector(unsigned(add_ln270_fu_1562_p2) + unsigned(add_ln269_2_fu_1538_p2));
    add_ln270_fu_1562_p2 <= std_logic_vector(unsigned(zext_ln270_fu_1559_p1) + unsigned(trunc_ln270_fu_1555_p1));
    add_ln271_1_fu_1609_p2 <= std_logic_vector(unsigned(sext_ln271_cast_fu_1589_p3) + unsigned(sext_ln271_1_cast_fu_1601_p3));
    add_ln271_2_fu_1615_p2 <= std_logic_vector(unsigned(trunc_ln269_fu_1505_p1) + unsigned(add_ln271_1_fu_1609_p2));
    add_ln271_fu_1579_p2 <= std_logic_vector(unsigned(zext_ln255_fu_1476_p1) + unsigned(add_ln269_1_fu_1509_p2));
    add_ln272_fu_1621_p2 <= std_logic_vector(unsigned(add_ln270_fu_1562_p2) + unsigned(add_ln271_1_fu_1609_p2));
    add_ln289_fu_1699_p2 <= std_logic_vector(unsigned(haar_counter_assign_reg_685) + unsigned(ap_const_lv13_1));
    add_ln319_fu_1680_p2 <= std_logic_vector(unsigned(SUM1_data_load_7_reg_2228) + unsigned(sub_ln319_1_fu_1675_p2));
    add_ln320_fu_1694_p2 <= std_logic_vector(unsigned(SUM1_data_load_11_reg_2310) + unsigned(sub_ln320_1_fu_1689_p2));
    add_ln321_fu_1729_p2 <= std_logic_vector(unsigned(storemerge_reg_707) + unsigned(sub_ln321_1_fu_1723_p2));
    add_ln322_fu_1768_p2 <= std_logic_vector(unsigned(sum1_reg_2444) + unsigned(sum2_reg_2449));
    alpha1_array_address0 <= zext_ln242_reg_2078(12 - 1 downto 0);

    alpha1_array_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            alpha1_array_ce0 <= ap_const_logic_1;
        else 
            alpha1_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    alpha2_array_address0 <= zext_ln242_reg_2078(12 - 1 downto 0);

    alpha2_array_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            alpha2_array_ce0 <= ap_const_logic_1;
        else 
            alpha2_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    and_ln294_1_fu_1879_p2 <= (grp_fu_734_p2 and and_ln294_fu_1873_p2);
    and_ln294_fu_1873_p2 <= (or_ln294_fu_1865_p2 and or_ln294_1_fu_1869_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln232_reg_2036, ap_CS_fsm_state32, and_ln294_1_fu_1879_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and ((icmp_ln232_reg_2036 = ap_const_lv1_0) or (ap_const_lv1_1 = and_ln294_1_fu_1879_p2))) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0_phi_fu_722_p4_assign_proc : process(icmp_ln232_reg_2036, ap_CS_fsm_state32, and_ln294_1_fu_1879_p2, sub_ln295_fu_1889_p2, p_0_reg_718)
    begin
        if (((ap_const_lv1_1 = and_ln294_1_fu_1879_p2) and (icmp_ln232_reg_2036 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            ap_phi_mux_p_0_phi_fu_722_p4 <= sub_ln295_fu_1889_p2;
        else 
            ap_phi_mux_p_0_phi_fu_722_p4 <= p_0_reg_718;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln232_reg_2036, ap_CS_fsm_state32, and_ln294_1_fu_1879_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) and ((icmp_ln232_reg_2036 = ap_const_lv1_0) or (ap_const_lv1_1 = and_ln294_1_fu_1879_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(icmp_ln232_reg_2036, ap_CS_fsm_state32, and_ln294_1_fu_1879_p2, ap_phi_mux_p_0_phi_fu_722_p4, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) and ((icmp_ln232_reg_2036 = ap_const_lv1_0) or (ap_const_lv1_1 = and_ln294_1_fu_1879_p2)))) then 
            ap_return <= ap_phi_mux_p_0_phi_fu_722_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    b_fu_994_p2 <= (shl_ln431_fu_988_p2 or ap_const_lv32_1);
    bitcast_ln294_1_fu_1824_p1 <= tmp_4_reg_2469;
    bitcast_ln294_fu_1806_p1 <= reg_745;
    c_1_fu_1006_p2 <= std_logic_vector(unsigned(c_fu_974_p3) - unsigned(b_fu_994_p2));
    c_2_fu_1012_p3 <= 
        c_fu_974_p3 when (icmp_ln432_fu_1000_p2(0) = '1') else 
        c_1_fu_1006_p2;
    c_fu_974_p3 <= (trunc_ln425_fu_960_p1 & lshr_ln_fu_964_p4);
    empty_14_fu_1070_p1 <= haar_counter_0_reg_661(8 - 1 downto 0);
    final_sum_fu_1772_p2 <= std_logic_vector(unsigned(add_ln322_fu_1768_p2) + unsigned(sum0_reg_2439));

    grp_fu_738_p0_assign_proc : process(sext_ln294_fu_1802_p1, ap_CS_fsm_state22, ap_CS_fsm_state27, stage_sum_1_fu_152)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_738_p0 <= stage_sum_1_fu_152;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_738_p0 <= sext_ln294_fu_1802_p1;
        else 
            grp_fu_738_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    haar_counter_fu_1064_p2 <= std_logic_vector(unsigned(zext_ln233_1_fu_1060_p1) + unsigned(haar_counter_0_reg_661));
    i_1_fu_954_p2 <= std_logic_vector(unsigned(i_0_i_reg_628) + unsigned(ap_const_lv5_1));
    i_fu_1049_p2 <= std_logic_vector(unsigned(i_0_reg_673) + unsigned(ap_const_lv5_1));
    icmp_ln218_fu_942_p2 <= "1" when (signed(stddev_2_fu_937_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln232_fu_1043_p2 <= "1" when (unsigned(i_0_reg_673) < unsigned(ap_const_lv5_19)) else "0";
    icmp_ln233_fu_1084_p2 <= "1" when (trunc_ln233_fu_1080_p1 = add_ln233_reg_2060) else "0";
    icmp_ln235_fu_1095_p2 <= "1" when (j_0_reg_696 = ap_const_lv8_0) else "0";
    icmp_ln267_1_fu_1479_p2 <= "1" when (tr2_width_reg_2258 = ap_const_lv4_0) else "0";
    icmp_ln267_2_fu_1484_p2 <= "1" when (tr2_height_reg_2269 = ap_const_lv4_0) else "0";
    icmp_ln267_fu_1457_p2 <= "1" when (or_ln267_2_fu_1451_p2 = ap_const_lv5_0) else "0";
    icmp_ln294_1_fu_1847_p2 <= "1" when (trunc_ln294_fu_1820_p1 = ap_const_lv52_0) else "0";
    icmp_ln294_2_fu_1853_p2 <= "0" when (tmp_5_fu_1827_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln294_3_fu_1859_p2 <= "1" when (trunc_ln294_1_fu_1837_p1 = ap_const_lv52_0) else "0";
    icmp_ln294_fu_1841_p2 <= "0" when (tmp_3_fu_1810_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln324_fu_1777_p2 <= "1" when (signed(final_sum_fu_1772_p2) < signed(t_reg_2434)) else "0";
    icmp_ln423_fu_948_p2 <= "1" when (i_0_i_reg_628 = ap_const_lv5_10) else "0";
    icmp_ln432_fu_1000_p2 <= "1" when (unsigned(c_fu_974_p3) < unsigned(b_fu_994_p2)) else "0";
    j_fu_1089_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(j_0_reg_696));
    lshr_ln_fu_964_p4 <= p_0_i_reg_639(31 downto 30);
    mean_fu_908_p2 <= std_logic_vector(unsigned(SUM1_data_q1) + unsigned(sub_ln210_1_fu_903_p2));
    mul_ln216_fu_914_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mean_reg_1979) * signed(mean_reg_1979))), 32));
    or_ln267_1_fu_1429_p2 <= (trunc_ln267_1_fu_1425_p1 or rectangles_array11_q0);
    or_ln267_2_fu_1451_p2 <= (tmp3_fu_1443_p3 or tmp2_fu_1417_p3);
    or_ln267_3_fu_1489_p2 <= (icmp_ln267_2_fu_1484_p2 or icmp_ln267_1_fu_1479_p2);
    or_ln267_4_fu_1495_p2 <= (or_ln267_3_fu_1489_p2 or icmp_ln267_reg_2295);
    or_ln267_fu_1403_p2 <= (trunc_ln267_fu_1399_p1 or rectangles_array10_q0);
    or_ln294_1_fu_1869_p2 <= (icmp_ln294_3_reg_2490 or icmp_ln294_2_reg_2485);
    or_ln294_fu_1865_p2 <= (icmp_ln294_reg_2475 or icmp_ln294_1_reg_2480);
    pt_x_cast_fu_918_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pt_x),32));
    pt_y_cast_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pt_y),32));
    rectangles_array0_address0 <= zext_ln242_fu_1101_p1(12 - 1 downto 0);

    rectangles_array0_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            rectangles_array0_ce0 <= ap_const_logic_1;
        else 
            rectangles_array0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array10_address0 <= zext_ln242_reg_2078(12 - 1 downto 0);

    rectangles_array10_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            rectangles_array10_ce0 <= ap_const_logic_1;
        else 
            rectangles_array10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array11_address0 <= zext_ln242_reg_2078(12 - 1 downto 0);

    rectangles_array11_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            rectangles_array11_ce0 <= ap_const_logic_1;
        else 
            rectangles_array11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array1_address0 <= zext_ln242_fu_1101_p1(12 - 1 downto 0);

    rectangles_array1_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            rectangles_array1_ce0 <= ap_const_logic_1;
        else 
            rectangles_array1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array2_address0 <= zext_ln242_reg_2078(12 - 1 downto 0);

    rectangles_array2_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            rectangles_array2_ce0 <= ap_const_logic_1;
        else 
            rectangles_array2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array3_address0 <= zext_ln242_reg_2078(12 - 1 downto 0);

    rectangles_array3_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            rectangles_array3_ce0 <= ap_const_logic_1;
        else 
            rectangles_array3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array4_address0 <= zext_ln242_reg_2078(12 - 1 downto 0);

    rectangles_array4_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            rectangles_array4_ce0 <= ap_const_logic_1;
        else 
            rectangles_array4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array5_address0 <= zext_ln242_reg_2078(12 - 1 downto 0);

    rectangles_array5_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            rectangles_array5_ce0 <= ap_const_logic_1;
        else 
            rectangles_array5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array6_address0 <= zext_ln242_reg_2078(12 - 1 downto 0);

    rectangles_array6_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            rectangles_array6_ce0 <= ap_const_logic_1;
        else 
            rectangles_array6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array7_address0 <= zext_ln242_reg_2078(12 - 1 downto 0);

    rectangles_array7_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            rectangles_array7_ce0 <= ap_const_logic_1;
        else 
            rectangles_array7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array8_address0 <= zext_ln242_reg_2078(12 - 1 downto 0);

    rectangles_array8_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            rectangles_array8_ce0 <= ap_const_logic_1;
        else 
            rectangles_array8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array9_address0 <= zext_ln242_reg_2078(12 - 1 downto 0);

    rectangles_array9_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            rectangles_array9_ce0 <= ap_const_logic_1;
        else 
            rectangles_array9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    return_value_3_fu_1782_p3 <= 
        return_value_reg_2424 when (icmp_ln324_fu_1777_p2(0) = '1') else 
        return_value_1_reg_2429;
    select_ln235_fu_1463_p3 <= 
        ap_const_lv32_0 when (icmp_ln235_reg_2073(0) = '1') else 
        stage_sum_1_fu_152;
    sext_ln210_1_cast_fu_844_p3 <= (trunc_ln210_4_fu_840_p1 & ap_const_lv6_0);
        sext_ln210_1_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln210_4_fu_858_p2),64));

        sext_ln210_2_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln210_5_fu_869_p2),64));

    sext_ln210_cast_fu_832_p3 <= (trunc_ln210_3_fu_828_p1 & ap_const_lv8_0);
        sext_ln210_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln210_2_fu_807_p2),64));

        sext_ln258_fu_1192_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln258_1_fu_1186_p2),64));

    sext_ln259_1_cast_fu_1219_p3 <= (trunc_ln259_1_fu_1215_p1 & ap_const_lv6_0);
    sext_ln259_cast_fu_1207_p3 <= (trunc_ln259_fu_1203_p1 & ap_const_lv8_0);
        sext_ln259_fu_1245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln259_2_reg_2153),64));

        sext_ln260_fu_1249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln260_reg_2158),64));

        sext_ln263_fu_1338_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln263_1_fu_1332_p2),64));

    sext_ln264_1_cast_fu_1365_p3 <= (trunc_ln264_1_fu_1361_p1 & ap_const_lv6_0);
    sext_ln264_cast_fu_1353_p3 <= (trunc_ln264_fu_1349_p1 & ap_const_lv8_0);
        sext_ln264_fu_1391_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln264_2_reg_2243),64));

        sext_ln265_fu_1395_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln265_reg_2248),64));

        sext_ln270_fu_1574_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln270_1_fu_1568_p2),64));

    sext_ln271_1_cast_fu_1601_p3 <= (trunc_ln271_1_fu_1597_p1 & ap_const_lv6_0);
    sext_ln271_cast_fu_1589_p3 <= (trunc_ln271_fu_1585_p1 & ap_const_lv8_0);
        sext_ln271_fu_1657_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln271_2_reg_2329),64));

        sext_ln272_fu_1661_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln272_reg_2334),64));

        sext_ln294_fu_1802_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(stages_thresh_array_1_reg_2454),32));

        sext_ln324_fu_1788_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(return_value_3_fu_1782_p3),32));

    shl_ln215_1_fu_926_p2 <= std_logic_vector(shift_left(unsigned(stddev_reg_1973),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    shl_ln215_fu_921_p2 <= std_logic_vector(shift_left(unsigned(stddev_reg_1973),to_integer(unsigned('0' & ap_const_lv32_9(31-1 downto 0)))));
    shl_ln429_fu_982_p2 <= std_logic_vector(shift_left(unsigned(p_0_i_reg_639),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln431_fu_988_p2 <= std_logic_vector(shift_left(unsigned(stddev_3_reg_617),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    stage_sum_fu_1792_p2 <= std_logic_vector(signed(sext_ln324_fu_1788_p1) + signed(select_ln235_reg_2300));
    stages_array_address0 <= zext_ln233_fu_1055_p1(5 - 1 downto 0);

    stages_array_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            stages_array_ce0 <= ap_const_logic_1;
        else 
            stages_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stages_thresh_array_address0 <= zext_ln233_reg_2045(5 - 1 downto 0);

    stages_thresh_array_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            stages_thresh_array_ce0 <= ap_const_logic_1;
        else 
            stages_thresh_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stddev_1_fu_931_p2 <= std_logic_vector(unsigned(shl_ln215_1_fu_926_p2) + unsigned(shl_ln215_fu_921_p2));
    stddev_2_fu_937_p2 <= std_logic_vector(unsigned(stddev_1_fu_931_p2) - unsigned(mul_ln216_reg_1985));
    stddev_fu_897_p2 <= std_logic_vector(unsigned(SQSUM1_data_q1) + unsigned(sub_ln205_1_fu_892_p2));
    sub_ln205_1_fu_892_p2 <= std_logic_vector(unsigned(sub_ln205_reg_1963) - unsigned(SQSUM1_data_q0));
    sub_ln205_fu_880_p2 <= std_logic_vector(unsigned(SQSUM1_data_q0) - unsigned(SQSUM1_data_q1));
    sub_ln210_1_fu_903_p2 <= std_logic_vector(unsigned(sub_ln210_reg_1968) - unsigned(SUM1_data_q0));
    sub_ln210_fu_886_p2 <= std_logic_vector(unsigned(SUM1_data_q0) - unsigned(SUM1_data_q1));
    sub_ln295_fu_1889_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(zext_ln232_fu_1885_p1));
    sub_ln319_1_fu_1675_p2 <= std_logic_vector(unsigned(sub_ln319_fu_1671_p2) - unsigned(SUM1_data_load_6_reg_2223));
    sub_ln319_fu_1671_p2 <= std_logic_vector(unsigned(SUM1_data_load_4_reg_2183) - unsigned(SUM1_data_load_5_reg_2188));
    sub_ln320_1_fu_1689_p2 <= std_logic_vector(unsigned(sub_ln320_fu_1685_p2) - unsigned(SUM1_data_load_10_reg_2305));
    sub_ln320_fu_1685_p2 <= std_logic_vector(unsigned(SUM1_data_load_8_reg_2275) - unsigned(SUM1_data_load_9_reg_2280));
    sub_ln321_1_fu_1723_p2 <= std_logic_vector(unsigned(sub_ln321_fu_1717_p2) - unsigned(coord_10));
    sub_ln321_fu_1717_p2 <= std_logic_vector(unsigned(coord_8) - unsigned(coord_9));
    sum0_fu_1747_p0 <= weights_array0_load_reg_2404;
    sum0_fu_1747_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(sum0_fu_1747_p0) * signed(add_ln319_reg_2359))), 32));
    sum1_fu_1755_p0 <= sum1_fu_1755_p00(14 - 1 downto 0);
    sum1_fu_1755_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_array1_load_reg_2409),32));
    sum1_fu_1755_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &sum1_fu_1755_p0) * signed(add_ln320_reg_2369))), 32));
    sum2_fu_1763_p0 <= sum2_fu_1763_p00(14 - 1 downto 0);
    sum2_fu_1763_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_array2_load_reg_2419),32));
    sum2_fu_1763_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &sum2_fu_1763_p0) * signed(add_ln321_reg_2414))), 32));
    t_fu_1738_p0 <= tree_thresh_array_lo_reg_2399;
    t_fu_1738_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(t_fu_1738_p0) * signed(stddev_assign_reg_648))), 32));
    tmp2_fu_1417_p3 <= (tmp_22_fu_1409_p3 & or_ln267_fu_1403_p2);
    tmp3_fu_1443_p3 <= (tmp_23_fu_1435_p3 & or_ln267_1_fu_1429_p2);
    tmp_22_fu_1409_p3 <= rectangles_array8_q0(4 downto 4);
    tmp_23_fu_1435_p3 <= rectangles_array9_q0(4 downto 4);
    tmp_3_fu_1810_p4 <= bitcast_ln294_fu_1806_p1(62 downto 52);
    tmp_5_fu_1827_p4 <= bitcast_ln294_1_fu_1824_p1(62 downto 52);
    tr0_x_fu_1110_p2 <= std_logic_vector(unsigned(pt_x_cast_reg_1990) + unsigned(zext_ln242_1_fu_1107_p1));
    tr0_y_fu_1118_p2 <= std_logic_vector(unsigned(pt_y_cast_reg_1936) + unsigned(zext_ln244_fu_1115_p1));
    tr1_x_fu_1256_p2 <= std_logic_vector(unsigned(pt_x_cast_reg_1990) + unsigned(zext_ln247_fu_1253_p1));
    tr1_y_fu_1264_p2 <= std_logic_vector(unsigned(pt_y_cast_reg_1936) + unsigned(zext_ln249_fu_1261_p1));
    tree_thresh_array_address0 <= zext_ln242_reg_2078(12 - 1 downto 0);

    tree_thresh_array_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            tree_thresh_array_ce0 <= ap_const_logic_1;
        else 
            tree_thresh_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln205_fu_797_p1 <= pt_x(18 - 1 downto 0);
    trunc_ln210_1_fu_755_p1 <= pt_y(10 - 1 downto 0);
    trunc_ln210_2_fu_767_p1 <= pt_y(12 - 1 downto 0);
    trunc_ln210_3_fu_828_p1 <= add_ln205_fu_822_p2(10 - 1 downto 0);
    trunc_ln210_4_fu_840_p1 <= add_ln205_fu_822_p2(12 - 1 downto 0);
    trunc_ln210_fu_751_p1 <= pt_x(18 - 1 downto 0);
    trunc_ln233_fu_1080_p1 <= haar_counter_assign_reg_685(8 - 1 downto 0);
    trunc_ln257_1_fu_1131_p1 <= tr0_y_fu_1118_p2(10 - 1 downto 0);
    trunc_ln257_2_fu_1143_p1 <= tr0_y_fu_1118_p2(12 - 1 downto 0);
    trunc_ln257_fu_1127_p1 <= tr0_x_fu_1110_p2(18 - 1 downto 0);
    trunc_ln258_fu_1176_p1 <= tr0_x_fu_1110_p2(18 - 1 downto 0);
    trunc_ln259_1_fu_1215_p1 <= add_ln259_fu_1197_p2(12 - 1 downto 0);
    trunc_ln259_fu_1203_p1 <= add_ln259_fu_1197_p2(10 - 1 downto 0);
    trunc_ln262_1_fu_1277_p1 <= tr1_y_fu_1264_p2(10 - 1 downto 0);
    trunc_ln262_2_fu_1289_p1 <= tr1_y_fu_1264_p2(12 - 1 downto 0);
    trunc_ln262_fu_1273_p1 <= tr1_x_fu_1256_p2(18 - 1 downto 0);
    trunc_ln263_fu_1322_p1 <= tr1_x_fu_1256_p2(18 - 1 downto 0);
    trunc_ln264_1_fu_1361_p1 <= add_ln264_fu_1343_p2(12 - 1 downto 0);
    trunc_ln264_fu_1349_p1 <= add_ln264_fu_1343_p2(10 - 1 downto 0);
    trunc_ln267_1_fu_1425_p1 <= rectangles_array9_q0(4 - 1 downto 0);
    trunc_ln267_fu_1399_p1 <= rectangles_array8_q0(4 - 1 downto 0);
    trunc_ln269_1_fu_1514_p1 <= add_ln269_1_fu_1509_p2(10 - 1 downto 0);
    trunc_ln269_2_fu_1526_p1 <= add_ln269_1_fu_1509_p2(12 - 1 downto 0);
    trunc_ln269_fu_1505_p1 <= add_ln269_fu_1500_p2(18 - 1 downto 0);
    trunc_ln270_fu_1555_p1 <= add_ln269_fu_1500_p2(18 - 1 downto 0);
    trunc_ln271_1_fu_1597_p1 <= add_ln271_fu_1579_p2(12 - 1 downto 0);
    trunc_ln271_fu_1585_p1 <= add_ln271_fu_1579_p2(10 - 1 downto 0);
    trunc_ln294_1_fu_1837_p1 <= bitcast_ln294_1_fu_1824_p1(52 - 1 downto 0);
    trunc_ln294_fu_1820_p1 <= bitcast_ln294_fu_1806_p1(52 - 1 downto 0);
    trunc_ln425_fu_960_p1 <= c_0_i_reg_606(30 - 1 downto 0);
    trunc_ln432_fu_1026_p1 <= stddev_3_reg_617(31 - 1 downto 0);
    weights_array0_address0 <= zext_ln242_reg_2078(12 - 1 downto 0);

    weights_array0_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            weights_array0_ce0 <= ap_const_logic_1;
        else 
            weights_array0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_array1_address0 <= zext_ln242_reg_2078(12 - 1 downto 0);

    weights_array1_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            weights_array1_ce0 <= ap_const_logic_1;
        else 
            weights_array1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_array2_address0 <= zext_ln242_reg_2078(12 - 1 downto 0);

    weights_array2_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            weights_array2_ce0 <= ap_const_logic_1;
        else 
            weights_array2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln432_fu_1020_p2 <= (icmp_ln432_fu_1000_p2 xor ap_const_lv1_1);
    zext_ln210_1_cast_fu_771_p3 <= (trunc_ln210_2_fu_767_p1 & ap_const_lv6_0);
    zext_ln210_cast_fu_759_p3 <= (trunc_ln210_1_fu_755_p1 & ap_const_lv8_0);
    zext_ln210_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln210_1_fu_785_p2),64));
    zext_ln232_fu_1885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_673),6));
    zext_ln233_1_fu_1060_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stages_array_q0),13));
    zext_ln233_fu_1055_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_673),64));
    zext_ln242_1_fu_1107_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array0_lo_reg_2113),32));
    zext_ln242_fu_1101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(haar_counter_assign_reg_685),64));
    zext_ln244_fu_1115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array1_lo_reg_2123),32));
    zext_ln245_fu_1123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array3_q0),32));
    zext_ln247_fu_1253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array4_lo_reg_2163),32));
    zext_ln249_fu_1261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array5_lo_reg_2173),32));
    zext_ln250_fu_1269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array7_q0),32));
    zext_ln252_fu_1470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr2_x_reg_2253),32));
    zext_ln254_fu_1473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr2_y_reg_2264),32));
    zext_ln255_fu_1476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr2_height_reg_2269),32));
    zext_ln257_1_cast_fu_1135_p3 <= (trunc_ln257_1_fu_1131_p1 & ap_const_lv8_0);
    zext_ln257_2_cast_fu_1147_p3 <= (trunc_ln257_2_fu_1143_p1 & ap_const_lv6_0);
    zext_ln257_fu_1167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln257_1_fu_1161_p2),64));
    zext_ln258_fu_1172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array2_q0),18));
    zext_ln262_1_cast_fu_1281_p3 <= (trunc_ln262_1_fu_1277_p1 & ap_const_lv8_0);
    zext_ln262_2_cast_fu_1293_p3 <= (trunc_ln262_2_fu_1289_p1 & ap_const_lv6_0);
    zext_ln262_fu_1313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln262_1_fu_1307_p2),64));
    zext_ln263_fu_1318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array6_q0),18));
    zext_ln269_1_cast_fu_1518_p3 <= (trunc_ln269_1_fu_1514_p1 & ap_const_lv8_0);
    zext_ln269_2_cast_fu_1530_p3 <= (trunc_ln269_2_fu_1526_p1 & ap_const_lv6_0);
    zext_ln269_fu_1550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln269_3_fu_1544_p2),64));
    zext_ln270_fu_1559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr2_width_reg_2258),18));
end behav;
