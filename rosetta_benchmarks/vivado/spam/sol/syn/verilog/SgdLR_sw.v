// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="SgdLR_sw,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.286000,HLS_SYN_LAT=668790011,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=12,HLS_SYN_FF=1731,HLS_SYN_LUT=3087,HLS_VERSION=2019_1}" *)

module SgdLR_sw (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_address0,
        data_ce0,
        data_q0,
        label_r_address0,
        label_r_ce0,
        label_r_q0,
        theta_address0,
        theta_ce0,
        theta_we0,
        theta_d0,
        theta_q0
);

parameter    ap_ST_fsm_state1 = 56'd1;
parameter    ap_ST_fsm_state2 = 56'd2;
parameter    ap_ST_fsm_state3 = 56'd4;
parameter    ap_ST_fsm_state4 = 56'd8;
parameter    ap_ST_fsm_state5 = 56'd16;
parameter    ap_ST_fsm_state6 = 56'd32;
parameter    ap_ST_fsm_state7 = 56'd64;
parameter    ap_ST_fsm_state8 = 56'd128;
parameter    ap_ST_fsm_state9 = 56'd256;
parameter    ap_ST_fsm_state10 = 56'd512;
parameter    ap_ST_fsm_state11 = 56'd1024;
parameter    ap_ST_fsm_state12 = 56'd2048;
parameter    ap_ST_fsm_state13 = 56'd4096;
parameter    ap_ST_fsm_state14 = 56'd8192;
parameter    ap_ST_fsm_state15 = 56'd16384;
parameter    ap_ST_fsm_state16 = 56'd32768;
parameter    ap_ST_fsm_state17 = 56'd65536;
parameter    ap_ST_fsm_state18 = 56'd131072;
parameter    ap_ST_fsm_state19 = 56'd262144;
parameter    ap_ST_fsm_state20 = 56'd524288;
parameter    ap_ST_fsm_state21 = 56'd1048576;
parameter    ap_ST_fsm_state22 = 56'd2097152;
parameter    ap_ST_fsm_state23 = 56'd4194304;
parameter    ap_ST_fsm_state24 = 56'd8388608;
parameter    ap_ST_fsm_state25 = 56'd16777216;
parameter    ap_ST_fsm_state26 = 56'd33554432;
parameter    ap_ST_fsm_state27 = 56'd67108864;
parameter    ap_ST_fsm_state28 = 56'd134217728;
parameter    ap_ST_fsm_state29 = 56'd268435456;
parameter    ap_ST_fsm_state30 = 56'd536870912;
parameter    ap_ST_fsm_state31 = 56'd1073741824;
parameter    ap_ST_fsm_state32 = 56'd2147483648;
parameter    ap_ST_fsm_state33 = 56'd4294967296;
parameter    ap_ST_fsm_state34 = 56'd8589934592;
parameter    ap_ST_fsm_state35 = 56'd17179869184;
parameter    ap_ST_fsm_state36 = 56'd34359738368;
parameter    ap_ST_fsm_state37 = 56'd68719476736;
parameter    ap_ST_fsm_state38 = 56'd137438953472;
parameter    ap_ST_fsm_state39 = 56'd274877906944;
parameter    ap_ST_fsm_state40 = 56'd549755813888;
parameter    ap_ST_fsm_state41 = 56'd1099511627776;
parameter    ap_ST_fsm_state42 = 56'd2199023255552;
parameter    ap_ST_fsm_state43 = 56'd4398046511104;
parameter    ap_ST_fsm_state44 = 56'd8796093022208;
parameter    ap_ST_fsm_state45 = 56'd17592186044416;
parameter    ap_ST_fsm_state46 = 56'd35184372088832;
parameter    ap_ST_fsm_state47 = 56'd70368744177664;
parameter    ap_ST_fsm_state48 = 56'd140737488355328;
parameter    ap_ST_fsm_state49 = 56'd281474976710656;
parameter    ap_ST_fsm_state50 = 56'd562949953421312;
parameter    ap_ST_fsm_state51 = 56'd1125899906842624;
parameter    ap_ST_fsm_state52 = 56'd2251799813685248;
parameter    ap_ST_fsm_state53 = 56'd4503599627370496;
parameter    ap_ST_fsm_state54 = 56'd9007199254740992;
parameter    ap_ST_fsm_state55 = 56'd18014398509481984;
parameter    ap_ST_fsm_state56 = 56'd36028797018963968;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [22:0] data_address0;
output   data_ce0;
input  [31:0] data_q0;
output  [12:0] label_r_address0;
output   label_r_ce0;
input  [7:0] label_r_q0;
output  [9:0] theta_address0;
output   theta_ce0;
output   theta_we0;
output  [31:0] theta_d0;
input  [31:0] theta_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[22:0] data_address0;
reg data_ce0;
reg label_r_ce0;
reg[9:0] theta_address0;
reg theta_ce0;
reg theta_we0;

(* fsm_encoding = "none" *) reg   [55:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_243;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state51;
reg   [31:0] reg_249;
wire    ap_CS_fsm_state42;
wire   [31:0] grp_fu_225_p2;
reg   [31:0] reg_255;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state45;
wire   [31:0] grp_fu_219_p2;
reg   [31:0] reg_261;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state55;
wire   [2:0] epoch_fu_274_p2;
reg   [2:0] epoch_reg_407;
wire    ap_CS_fsm_state2;
wire   [12:0] training_id_fu_286_p2;
reg   [12:0] training_id_reg_415;
wire    ap_CS_fsm_state3;
wire   [22:0] shl_ln_fu_292_p3;
reg   [22:0] shl_ln_reg_420;
wire   [0:0] icmp_ln60_fu_280_p2;
wire   [10:0] i_fu_306_p2;
reg   [10:0] i_reg_429;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln17_fu_300_p2;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state14;
reg   [7:0] label_load_reg_459;
wire    ap_CS_fsm_state15;
wire   [31:0] grp_fu_238_p2;
reg   [31:0] tmp_3_i_reg_464;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state31;
wire   [31:0] grp_fu_230_p2;
reg   [31:0] prob_reg_474;
wire    ap_CS_fsm_state34;
wire   [31:0] grp_fu_235_p1;
reg   [31:0] tmp_reg_479;
wire   [10:0] i_1_fu_361_p2;
reg   [10:0] i_1_reg_487;
wire    ap_CS_fsm_state39;
wire   [0:0] icmp_ln33_fu_355_p2;
wire   [10:0] i_2_fu_392_p2;
reg   [10:0] i_2_reg_500;
wire    ap_CS_fsm_state47;
wire   [0:0] icmp_ln43_fu_386_p2;
reg   [9:0] theta_addr_1_reg_510;
wire   [31:0] gradient_q0;
reg   [31:0] gradient_load_reg_515;
wire    ap_CS_fsm_state48;
reg   [9:0] gradient_address0;
reg    gradient_ce0;
reg    gradient_we0;
reg   [2:0] epoch_0_reg_149;
reg   [12:0] training_id_0_reg_160;
wire   [0:0] icmp_ln57_fu_268_p2;
reg   [31:0] dot_reg_172;
reg   [10:0] i_0_i_reg_184;
reg   [10:0] i_0_i6_reg_196;
wire    ap_CS_fsm_state46;
reg   [10:0] i_0_i11_reg_208;
wire    ap_CS_fsm_state56;
wire   [63:0] zext_ln18_2_fu_321_p1;
wire   [63:0] zext_ln67_1_fu_341_p1;
wire   [63:0] zext_ln18_fu_346_p1;
wire   [63:0] zext_ln34_2_fu_376_p1;
wire   [63:0] zext_ln34_fu_381_p1;
wire   [63:0] zext_ln44_fu_398_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state50;
reg   [31:0] grp_fu_219_p0;
reg   [31:0] grp_fu_219_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state52;
reg   [31:0] grp_fu_225_p0;
reg   [31:0] grp_fu_225_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state26;
wire   [31:0] grp_fu_235_p0;
wire   [31:0] grp_fu_238_p1;
wire   [22:0] zext_ln18_1_fu_312_p1;
wire   [22:0] add_ln18_fu_316_p2;
wire   [31:0] bitcast_ln24_fu_326_p1;
wire   [31:0] xor_ln24_fu_330_p2;
wire   [22:0] zext_ln34_1_fu_367_p1;
wire   [22:0] add_ln34_fu_371_p2;
reg   [1:0] grp_fu_219_opcode;
reg   [55:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 56'd1;
end

SgdLR_sw_gradient #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
gradient_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(gradient_address0),
    .ce0(gradient_ce0),
    .we0(gradient_we0),
    .d0(reg_255),
    .q0(gradient_q0)
);

SgdLR_sw_faddfsub_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
SgdLR_sw_faddfsub_32ns_32ns_32_4_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_219_p0),
    .din1(grp_fu_219_p1),
    .opcode(grp_fu_219_opcode),
    .ce(1'b1),
    .dout(grp_fu_219_p2)
);

SgdLR_sw_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
SgdLR_sw_fmul_32ns_32ns_32_3_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_225_p0),
    .din1(grp_fu_225_p1),
    .ce(1'b1),
    .dout(grp_fu_225_p2)
);

SgdLR_sw_fdiv_32ns_32ns_32_9_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
SgdLR_sw_fdiv_32ns_32ns_32_9_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd1065353216),
    .din1(reg_261),
    .ce(1'b1),
    .dout(grp_fu_230_p2)
);

SgdLR_sw_sitofp_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
SgdLR_sw_sitofp_32ns_32_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_235_p0),
    .ce(1'b1),
    .dout(grp_fu_235_p1)
);

SgdLR_sw_fexp_32ns_32ns_32_8_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
SgdLR_sw_fexp_32ns_32ns_32_8_full_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(grp_fu_238_p1),
    .ce(1'b1),
    .dout(grp_fu_238_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        dot_reg_172 <= grp_fu_219_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln60_fu_280_p2 == 1'd0))) begin
        dot_reg_172 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln60_fu_280_p2 == 1'd1))) begin
        epoch_0_reg_149 <= epoch_reg_407;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        epoch_0_reg_149 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state39) & (icmp_ln33_fu_355_p2 == 1'd1))) begin
        i_0_i11_reg_208 <= 11'd0;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        i_0_i11_reg_208 <= i_2_reg_500;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        i_0_i6_reg_196 <= i_1_reg_487;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        i_0_i6_reg_196 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_0_i_reg_184 <= i_reg_429;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln60_fu_280_p2 == 1'd0))) begin
        i_0_i_reg_184 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) & (icmp_ln43_fu_386_p2 == 1'd1))) begin
        training_id_0_reg_160 <= training_id_reg_415;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln57_fu_268_p2 == 1'd0))) begin
        training_id_0_reg_160 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        epoch_reg_407 <= epoch_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        gradient_load_reg_515 <= gradient_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        i_1_reg_487 <= i_1_fu_361_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        i_2_reg_500 <= i_2_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_429 <= i_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        label_load_reg_459 <= label_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        prob_reg_474 <= grp_fu_230_p2;
        tmp_reg_479 <= grp_fu_235_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_243 <= theta_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_249 <= data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state51))) begin
        reg_255 <= grp_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state25))) begin
        reg_261 <= grp_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln60_fu_280_p2 == 1'd0))) begin
        shl_ln_reg_420[22 : 10] <= shl_ln_fu_292_p3[22 : 10];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) & (icmp_ln43_fu_386_p2 == 1'd0))) begin
        theta_addr_1_reg_510 <= zext_ln44_fu_398_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_3_i_reg_464 <= grp_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        training_id_reg_415 <= training_id_fu_286_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln57_fu_268_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln57_fu_268_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        data_address0 = zext_ln34_2_fu_376_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        data_address0 = zext_ln18_2_fu_321_p1;
    end else begin
        data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state7))) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        gradient_address0 = zext_ln44_fu_398_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        gradient_address0 = zext_ln34_fu_381_p1;
    end else begin
        gradient_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state47))) begin
        gradient_ce0 = 1'b1;
    end else begin
        gradient_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        gradient_we0 = 1'b1;
    end else begin
        gradient_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_219_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_219_opcode = 2'd0;
    end else begin
        grp_fu_219_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_219_p0 = reg_243;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_219_p0 = prob_reg_474;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_219_p0 = tmp_3_i_reg_464;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_219_p0 = dot_reg_172;
    end else begin
        grp_fu_219_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_219_p1 = tmp_reg_479;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_219_p1 = 32'd1065353216;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_219_p1 = reg_255;
    end else begin
        grp_fu_219_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_225_p0 = gradient_load_reg_515;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_225_p0 = reg_249;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_225_p0 = reg_243;
    end else begin
        grp_fu_225_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_225_p1 = 32'd3345637376;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_225_p1 = reg_261;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_225_p1 = reg_249;
    end else begin
        grp_fu_225_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        label_r_ce0 = 1'b1;
    end else begin
        label_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state56))) begin
        theta_address0 = theta_addr_1_reg_510;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        theta_address0 = zext_ln18_fu_346_p1;
    end else begin
        theta_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state6))) begin
        theta_ce0 = 1'b1;
    end else begin
        theta_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        theta_we0 = 1'b1;
    end else begin
        theta_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln57_fu_268_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln60_fu_280_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln17_fu_300_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((1'b1 == ap_CS_fsm_state39) & (icmp_ln33_fu_355_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state47 : begin
            if (((1'b1 == ap_CS_fsm_state47) & (icmp_ln43_fu_386_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_fu_316_p2 = (zext_ln18_1_fu_312_p1 + shl_ln_reg_420);

assign add_ln34_fu_371_p2 = (zext_ln34_1_fu_367_p1 + shl_ln_reg_420);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bitcast_ln24_fu_326_p1 = dot_reg_172;

assign epoch_fu_274_p2 = (epoch_0_reg_149 + 3'd1);

assign grp_fu_235_p0 = label_load_reg_459;

assign grp_fu_238_p1 = xor_ln24_fu_330_p2;

assign i_1_fu_361_p2 = (i_0_i6_reg_196 + 11'd1);

assign i_2_fu_392_p2 = (i_0_i11_reg_208 + 11'd1);

assign i_fu_306_p2 = (i_0_i_reg_184 + 11'd1);

assign icmp_ln17_fu_300_p2 = ((i_0_i_reg_184 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_355_p2 = ((i_0_i6_reg_196 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_386_p2 = ((i_0_i11_reg_208 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_268_p2 = ((epoch_0_reg_149 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_280_p2 = ((training_id_0_reg_160 == 13'd4500) ? 1'b1 : 1'b0);

assign label_r_address0 = zext_ln67_1_fu_341_p1;

assign shl_ln_fu_292_p3 = {{training_id_0_reg_160}, {10'd0}};

assign theta_d0 = reg_261;

assign training_id_fu_286_p2 = (training_id_0_reg_160 + 13'd1);

assign xor_ln24_fu_330_p2 = (bitcast_ln24_fu_326_p1 ^ 32'd2147483648);

assign zext_ln18_1_fu_312_p1 = i_0_i_reg_184;

assign zext_ln18_2_fu_321_p1 = add_ln18_fu_316_p2;

assign zext_ln18_fu_346_p1 = i_0_i_reg_184;

assign zext_ln34_1_fu_367_p1 = i_0_i6_reg_196;

assign zext_ln34_2_fu_376_p1 = add_ln34_fu_371_p2;

assign zext_ln34_fu_381_p1 = i_0_i6_reg_196;

assign zext_ln44_fu_398_p1 = i_0_i11_reg_208;

assign zext_ln67_1_fu_341_p1 = training_id_0_reg_160;

always @ (posedge ap_clk) begin
    shl_ln_reg_420[9:0] <= 10'b0000000000;
end

endmodule //SgdLR_sw
