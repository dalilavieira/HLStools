// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "SgdLR_sw.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic SgdLR_sw::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic SgdLR_sw::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state1 = "1";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state2 = "10";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state3 = "100";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state4 = "1000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state5 = "10000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state6 = "100000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state7 = "1000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state8 = "10000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state9 = "100000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state10 = "1000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state11 = "10000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state12 = "100000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state52 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state53 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state54 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state55 = "1000000000000000000000000000000000000000000000000000000";
const sc_lv<56> SgdLR_sw::ap_ST_fsm_state56 = "10000000000000000000000000000000000000000000000000000000";
const sc_lv<32> SgdLR_sw::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> SgdLR_sw::ap_const_lv32_6 = "110";
const sc_lv<32> SgdLR_sw::ap_const_lv32_32 = "110010";
const sc_lv<32> SgdLR_sw::ap_const_lv32_29 = "101001";
const sc_lv<32> SgdLR_sw::ap_const_lv32_9 = "1001";
const sc_lv<32> SgdLR_sw::ap_const_lv32_2C = "101100";
const sc_lv<32> SgdLR_sw::ap_const_lv32_18 = "11000";
const sc_lv<32> SgdLR_sw::ap_const_lv32_25 = "100101";
const sc_lv<32> SgdLR_sw::ap_const_lv32_36 = "110110";
const sc_lv<32> SgdLR_sw::ap_const_lv32_1 = "1";
const sc_lv<32> SgdLR_sw::ap_const_lv32_2 = "10";
const sc_lv<1> SgdLR_sw::ap_const_lv1_0 = "0";
const sc_lv<32> SgdLR_sw::ap_const_lv32_3 = "11";
const sc_lv<1> SgdLR_sw::ap_const_lv1_1 = "1";
const sc_lv<32> SgdLR_sw::ap_const_lv32_5 = "101";
const sc_lv<32> SgdLR_sw::ap_const_lv32_D = "1101";
const sc_lv<32> SgdLR_sw::ap_const_lv32_E = "1110";
const sc_lv<32> SgdLR_sw::ap_const_lv32_14 = "10100";
const sc_lv<32> SgdLR_sw::ap_const_lv32_1E = "11110";
const sc_lv<32> SgdLR_sw::ap_const_lv32_21 = "100001";
const sc_lv<32> SgdLR_sw::ap_const_lv32_26 = "100110";
const sc_lv<32> SgdLR_sw::ap_const_lv32_2E = "101110";
const sc_lv<32> SgdLR_sw::ap_const_lv32_2F = "101111";
const sc_lv<3> SgdLR_sw::ap_const_lv3_0 = "000";
const sc_lv<13> SgdLR_sw::ap_const_lv13_0 = "0000000000000";
const sc_lv<11> SgdLR_sw::ap_const_lv11_0 = "00000000000";
const sc_lv<32> SgdLR_sw::ap_const_lv32_2D = "101101";
const sc_lv<32> SgdLR_sw::ap_const_lv32_37 = "110111";
const sc_lv<32> SgdLR_sw::ap_const_lv32_4 = "100";
const sc_lv<32> SgdLR_sw::ap_const_lv32_27 = "100111";
const sc_lv<32> SgdLR_sw::ap_const_lv32_28 = "101000";
const sc_lv<32> SgdLR_sw::ap_const_lv32_31 = "110001";
const sc_lv<32> SgdLR_sw::ap_const_lv32_3F800000 = "111111100000000000000000000000";
const sc_lv<32> SgdLR_sw::ap_const_lv32_A = "1010";
const sc_lv<32> SgdLR_sw::ap_const_lv32_15 = "10101";
const sc_lv<32> SgdLR_sw::ap_const_lv32_22 = "100010";
const sc_lv<32> SgdLR_sw::ap_const_lv32_33 = "110011";
const sc_lv<32> SgdLR_sw::ap_const_lv32_C76A6000 = "11000111011010100110000000000000";
const sc_lv<32> SgdLR_sw::ap_const_lv32_7 = "111";
const sc_lv<32> SgdLR_sw::ap_const_lv32_2A = "101010";
const sc_lv<32> SgdLR_sw::ap_const_lv32_30 = "110000";
const sc_lv<32> SgdLR_sw::ap_const_lv32_19 = "11001";
const sc_lv<3> SgdLR_sw::ap_const_lv3_5 = "101";
const sc_lv<3> SgdLR_sw::ap_const_lv3_1 = "1";
const sc_lv<13> SgdLR_sw::ap_const_lv13_1194 = "1000110010100";
const sc_lv<13> SgdLR_sw::ap_const_lv13_1 = "1";
const sc_lv<10> SgdLR_sw::ap_const_lv10_0 = "0000000000";
const sc_lv<11> SgdLR_sw::ap_const_lv11_400 = "10000000000";
const sc_lv<11> SgdLR_sw::ap_const_lv11_1 = "1";
const sc_lv<32> SgdLR_sw::ap_const_lv32_80000000 = "10000000000000000000000000000000";
const sc_lv<2> SgdLR_sw::ap_const_lv2_0 = "00";
const sc_lv<2> SgdLR_sw::ap_const_lv2_1 = "1";
const bool SgdLR_sw::ap_const_boolean_1 = true;

SgdLR_sw::SgdLR_sw(sc_module_name name) : sc_module(name), mVcdFile(0) {
    gradient_U = new SgdLR_sw_gradient("gradient_U");
    gradient_U->clk(ap_clk);
    gradient_U->reset(ap_rst);
    gradient_U->address0(gradient_address0);
    gradient_U->ce0(gradient_ce0);
    gradient_U->we0(gradient_we0);
    gradient_U->d0(reg_255);
    gradient_U->q0(gradient_q0);
    SgdLR_sw_faddfsub_32ns_32ns_32_4_full_dsp_1_U1 = new SgdLR_sw_faddfsub_32ns_32ns_32_4_full_dsp_1<1,4,32,32,32>("SgdLR_sw_faddfsub_32ns_32ns_32_4_full_dsp_1_U1");
    SgdLR_sw_faddfsub_32ns_32ns_32_4_full_dsp_1_U1->clk(ap_clk);
    SgdLR_sw_faddfsub_32ns_32ns_32_4_full_dsp_1_U1->reset(ap_rst);
    SgdLR_sw_faddfsub_32ns_32ns_32_4_full_dsp_1_U1->din0(grp_fu_219_p0);
    SgdLR_sw_faddfsub_32ns_32ns_32_4_full_dsp_1_U1->din1(grp_fu_219_p1);
    SgdLR_sw_faddfsub_32ns_32ns_32_4_full_dsp_1_U1->opcode(grp_fu_219_opcode);
    SgdLR_sw_faddfsub_32ns_32ns_32_4_full_dsp_1_U1->ce(ap_var_for_const0);
    SgdLR_sw_faddfsub_32ns_32ns_32_4_full_dsp_1_U1->dout(grp_fu_219_p2);
    SgdLR_sw_fmul_32ns_32ns_32_3_max_dsp_1_U2 = new SgdLR_sw_fmul_32ns_32ns_32_3_max_dsp_1<1,3,32,32,32>("SgdLR_sw_fmul_32ns_32ns_32_3_max_dsp_1_U2");
    SgdLR_sw_fmul_32ns_32ns_32_3_max_dsp_1_U2->clk(ap_clk);
    SgdLR_sw_fmul_32ns_32ns_32_3_max_dsp_1_U2->reset(ap_rst);
    SgdLR_sw_fmul_32ns_32ns_32_3_max_dsp_1_U2->din0(grp_fu_225_p0);
    SgdLR_sw_fmul_32ns_32ns_32_3_max_dsp_1_U2->din1(grp_fu_225_p1);
    SgdLR_sw_fmul_32ns_32ns_32_3_max_dsp_1_U2->ce(ap_var_for_const0);
    SgdLR_sw_fmul_32ns_32ns_32_3_max_dsp_1_U2->dout(grp_fu_225_p2);
    SgdLR_sw_fdiv_32ns_32ns_32_9_1_U3 = new SgdLR_sw_fdiv_32ns_32ns_32_9_1<1,9,32,32,32>("SgdLR_sw_fdiv_32ns_32ns_32_9_1_U3");
    SgdLR_sw_fdiv_32ns_32ns_32_9_1_U3->clk(ap_clk);
    SgdLR_sw_fdiv_32ns_32ns_32_9_1_U3->reset(ap_rst);
    SgdLR_sw_fdiv_32ns_32ns_32_9_1_U3->din0(ap_var_for_const1);
    SgdLR_sw_fdiv_32ns_32ns_32_9_1_U3->din1(reg_261);
    SgdLR_sw_fdiv_32ns_32ns_32_9_1_U3->ce(ap_var_for_const0);
    SgdLR_sw_fdiv_32ns_32ns_32_9_1_U3->dout(grp_fu_230_p2);
    SgdLR_sw_sitofp_32ns_32_4_1_U4 = new SgdLR_sw_sitofp_32ns_32_4_1<1,4,32,32>("SgdLR_sw_sitofp_32ns_32_4_1_U4");
    SgdLR_sw_sitofp_32ns_32_4_1_U4->clk(ap_clk);
    SgdLR_sw_sitofp_32ns_32_4_1_U4->reset(ap_rst);
    SgdLR_sw_sitofp_32ns_32_4_1_U4->din0(grp_fu_235_p0);
    SgdLR_sw_sitofp_32ns_32_4_1_U4->ce(ap_var_for_const0);
    SgdLR_sw_sitofp_32ns_32_4_1_U4->dout(grp_fu_235_p1);
    SgdLR_sw_fexp_32ns_32ns_32_8_full_dsp_1_U5 = new SgdLR_sw_fexp_32ns_32ns_32_8_full_dsp_1<1,8,32,32,32>("SgdLR_sw_fexp_32ns_32ns_32_8_full_dsp_1_U5");
    SgdLR_sw_fexp_32ns_32ns_32_8_full_dsp_1_U5->clk(ap_clk);
    SgdLR_sw_fexp_32ns_32ns_32_8_full_dsp_1_U5->reset(ap_rst);
    SgdLR_sw_fexp_32ns_32ns_32_8_full_dsp_1_U5->din0(ap_var_for_const2);
    SgdLR_sw_fexp_32ns_32ns_32_8_full_dsp_1_U5->din1(grp_fu_238_p1);
    SgdLR_sw_fexp_32ns_32ns_32_8_full_dsp_1_U5->ce(ap_var_for_const0);
    SgdLR_sw_fexp_32ns_32ns_32_8_full_dsp_1_U5->dout(grp_fu_238_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln18_fu_316_p2);
    sensitive << ( shl_ln_reg_420 );
    sensitive << ( zext_ln18_1_fu_312_p1 );

    SC_METHOD(thread_add_ln34_fu_371_p2);
    sensitive << ( shl_ln_reg_420 );
    sensitive << ( zext_ln34_1_fu_367_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state40);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state42);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state43);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state45);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state46);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state47);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state48);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state49);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state50);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state51);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state52);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state55);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state56);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln57_fu_268_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln57_fu_268_p2 );

    SC_METHOD(thread_bitcast_ln24_fu_326_p1);
    sensitive << ( dot_reg_172 );

    SC_METHOD(thread_data_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( zext_ln18_2_fu_321_p1 );
    sensitive << ( zext_ln34_2_fu_376_p1 );

    SC_METHOD(thread_data_ce0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state41 );

    SC_METHOD(thread_epoch_fu_274_p2);
    sensitive << ( epoch_0_reg_149 );

    SC_METHOD(thread_gradient_address0);
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( zext_ln34_fu_381_p1 );
    sensitive << ( zext_ln44_fu_398_p1 );

    SC_METHOD(thread_gradient_ce0);
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state46 );

    SC_METHOD(thread_gradient_we0);
    sensitive << ( ap_CS_fsm_state46 );

    SC_METHOD(thread_grp_fu_219_opcode);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state52 );

    SC_METHOD(thread_grp_fu_219_p0);
    sensitive << ( reg_243 );
    sensitive << ( tmp_3_i_reg_464 );
    sensitive << ( prob_reg_474 );
    sensitive << ( dot_reg_172 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state52 );

    SC_METHOD(thread_grp_fu_219_p1);
    sensitive << ( reg_255 );
    sensitive << ( tmp_reg_479 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state52 );

    SC_METHOD(thread_grp_fu_225_p0);
    sensitive << ( reg_243 );
    sensitive << ( reg_249 );
    sensitive << ( gradient_load_reg_515 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state49 );

    SC_METHOD(thread_grp_fu_225_p1);
    sensitive << ( reg_249 );
    sensitive << ( reg_261 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state49 );

    SC_METHOD(thread_grp_fu_235_p0);
    sensitive << ( label_load_reg_459 );
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_grp_fu_238_p1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( xor_ln24_fu_330_p2 );

    SC_METHOD(thread_i_1_fu_361_p2);
    sensitive << ( i_0_i6_reg_196 );

    SC_METHOD(thread_i_2_fu_392_p2);
    sensitive << ( i_0_i11_reg_208 );

    SC_METHOD(thread_i_fu_306_p2);
    sensitive << ( i_0_i_reg_184 );

    SC_METHOD(thread_icmp_ln17_fu_300_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i_0_i_reg_184 );

    SC_METHOD(thread_icmp_ln33_fu_355_p2);
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( i_0_i6_reg_196 );

    SC_METHOD(thread_icmp_ln43_fu_386_p2);
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( i_0_i11_reg_208 );

    SC_METHOD(thread_icmp_ln57_fu_268_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( epoch_0_reg_149 );

    SC_METHOD(thread_icmp_ln60_fu_280_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( training_id_0_reg_160 );

    SC_METHOD(thread_label_r_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln67_1_fu_341_p1 );

    SC_METHOD(thread_label_r_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_shl_ln_fu_292_p3);
    sensitive << ( training_id_0_reg_160 );

    SC_METHOD(thread_theta_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( theta_addr_1_reg_510 );
    sensitive << ( ap_CS_fsm_state56 );
    sensitive << ( zext_ln18_fu_346_p1 );
    sensitive << ( ap_CS_fsm_state50 );

    SC_METHOD(thread_theta_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state56 );
    sensitive << ( ap_CS_fsm_state50 );

    SC_METHOD(thread_theta_d0);
    sensitive << ( reg_261 );
    sensitive << ( ap_CS_fsm_state56 );

    SC_METHOD(thread_theta_we0);
    sensitive << ( ap_CS_fsm_state56 );

    SC_METHOD(thread_training_id_fu_286_p2);
    sensitive << ( training_id_0_reg_160 );

    SC_METHOD(thread_xor_ln24_fu_330_p2);
    sensitive << ( bitcast_ln24_fu_326_p1 );

    SC_METHOD(thread_zext_ln18_1_fu_312_p1);
    sensitive << ( i_0_i_reg_184 );

    SC_METHOD(thread_zext_ln18_2_fu_321_p1);
    sensitive << ( add_ln18_fu_316_p2 );

    SC_METHOD(thread_zext_ln18_fu_346_p1);
    sensitive << ( i_0_i_reg_184 );

    SC_METHOD(thread_zext_ln34_1_fu_367_p1);
    sensitive << ( i_0_i6_reg_196 );

    SC_METHOD(thread_zext_ln34_2_fu_376_p1);
    sensitive << ( add_ln34_fu_371_p2 );

    SC_METHOD(thread_zext_ln34_fu_381_p1);
    sensitive << ( i_0_i6_reg_196 );

    SC_METHOD(thread_zext_ln44_fu_398_p1);
    sensitive << ( i_0_i11_reg_208 );

    SC_METHOD(thread_zext_ln67_1_fu_341_p1);
    sensitive << ( training_id_0_reg_160 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln60_fu_280_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln17_fu_300_p2 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( icmp_ln33_fu_355_p2 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( icmp_ln43_fu_386_p2 );
    sensitive << ( icmp_ln57_fu_268_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "00000000000000000000000000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "SgdLR_sw_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, data_address0, "(port)data_address0");
    sc_trace(mVcdFile, data_ce0, "(port)data_ce0");
    sc_trace(mVcdFile, data_q0, "(port)data_q0");
    sc_trace(mVcdFile, label_r_address0, "(port)label_r_address0");
    sc_trace(mVcdFile, label_r_ce0, "(port)label_r_ce0");
    sc_trace(mVcdFile, label_r_q0, "(port)label_r_q0");
    sc_trace(mVcdFile, theta_address0, "(port)theta_address0");
    sc_trace(mVcdFile, theta_ce0, "(port)theta_ce0");
    sc_trace(mVcdFile, theta_we0, "(port)theta_we0");
    sc_trace(mVcdFile, theta_d0, "(port)theta_d0");
    sc_trace(mVcdFile, theta_q0, "(port)theta_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_243, "reg_243");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state51, "ap_CS_fsm_state51");
    sc_trace(mVcdFile, reg_249, "reg_249");
    sc_trace(mVcdFile, ap_CS_fsm_state42, "ap_CS_fsm_state42");
    sc_trace(mVcdFile, grp_fu_225_p2, "grp_fu_225_p2");
    sc_trace(mVcdFile, reg_255, "reg_255");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state45, "ap_CS_fsm_state45");
    sc_trace(mVcdFile, grp_fu_219_p2, "grp_fu_219_p2");
    sc_trace(mVcdFile, reg_261, "reg_261");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, ap_CS_fsm_state55, "ap_CS_fsm_state55");
    sc_trace(mVcdFile, epoch_fu_274_p2, "epoch_fu_274_p2");
    sc_trace(mVcdFile, epoch_reg_407, "epoch_reg_407");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, training_id_fu_286_p2, "training_id_fu_286_p2");
    sc_trace(mVcdFile, training_id_reg_415, "training_id_reg_415");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, shl_ln_fu_292_p3, "shl_ln_fu_292_p3");
    sc_trace(mVcdFile, shl_ln_reg_420, "shl_ln_reg_420");
    sc_trace(mVcdFile, icmp_ln60_fu_280_p2, "icmp_ln60_fu_280_p2");
    sc_trace(mVcdFile, i_fu_306_p2, "i_fu_306_p2");
    sc_trace(mVcdFile, i_reg_429, "i_reg_429");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln17_fu_300_p2, "icmp_ln17_fu_300_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, label_load_reg_459, "label_load_reg_459");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, grp_fu_238_p2, "grp_fu_238_p2");
    sc_trace(mVcdFile, tmp_3_i_reg_464, "tmp_3_i_reg_464");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, grp_fu_230_p2, "grp_fu_230_p2");
    sc_trace(mVcdFile, prob_reg_474, "prob_reg_474");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, grp_fu_235_p1, "grp_fu_235_p1");
    sc_trace(mVcdFile, tmp_reg_479, "tmp_reg_479");
    sc_trace(mVcdFile, i_1_fu_361_p2, "i_1_fu_361_p2");
    sc_trace(mVcdFile, i_1_reg_487, "i_1_reg_487");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, icmp_ln33_fu_355_p2, "icmp_ln33_fu_355_p2");
    sc_trace(mVcdFile, i_2_fu_392_p2, "i_2_fu_392_p2");
    sc_trace(mVcdFile, i_2_reg_500, "i_2_reg_500");
    sc_trace(mVcdFile, ap_CS_fsm_state47, "ap_CS_fsm_state47");
    sc_trace(mVcdFile, icmp_ln43_fu_386_p2, "icmp_ln43_fu_386_p2");
    sc_trace(mVcdFile, theta_addr_1_reg_510, "theta_addr_1_reg_510");
    sc_trace(mVcdFile, gradient_q0, "gradient_q0");
    sc_trace(mVcdFile, gradient_load_reg_515, "gradient_load_reg_515");
    sc_trace(mVcdFile, ap_CS_fsm_state48, "ap_CS_fsm_state48");
    sc_trace(mVcdFile, gradient_address0, "gradient_address0");
    sc_trace(mVcdFile, gradient_ce0, "gradient_ce0");
    sc_trace(mVcdFile, gradient_we0, "gradient_we0");
    sc_trace(mVcdFile, epoch_0_reg_149, "epoch_0_reg_149");
    sc_trace(mVcdFile, training_id_0_reg_160, "training_id_0_reg_160");
    sc_trace(mVcdFile, icmp_ln57_fu_268_p2, "icmp_ln57_fu_268_p2");
    sc_trace(mVcdFile, dot_reg_172, "dot_reg_172");
    sc_trace(mVcdFile, i_0_i_reg_184, "i_0_i_reg_184");
    sc_trace(mVcdFile, i_0_i6_reg_196, "i_0_i6_reg_196");
    sc_trace(mVcdFile, ap_CS_fsm_state46, "ap_CS_fsm_state46");
    sc_trace(mVcdFile, i_0_i11_reg_208, "i_0_i11_reg_208");
    sc_trace(mVcdFile, ap_CS_fsm_state56, "ap_CS_fsm_state56");
    sc_trace(mVcdFile, zext_ln18_2_fu_321_p1, "zext_ln18_2_fu_321_p1");
    sc_trace(mVcdFile, zext_ln67_1_fu_341_p1, "zext_ln67_1_fu_341_p1");
    sc_trace(mVcdFile, zext_ln18_fu_346_p1, "zext_ln18_fu_346_p1");
    sc_trace(mVcdFile, zext_ln34_2_fu_376_p1, "zext_ln34_2_fu_376_p1");
    sc_trace(mVcdFile, zext_ln34_fu_381_p1, "zext_ln34_fu_381_p1");
    sc_trace(mVcdFile, zext_ln44_fu_398_p1, "zext_ln44_fu_398_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state40, "ap_CS_fsm_state40");
    sc_trace(mVcdFile, ap_CS_fsm_state41, "ap_CS_fsm_state41");
    sc_trace(mVcdFile, ap_CS_fsm_state50, "ap_CS_fsm_state50");
    sc_trace(mVcdFile, grp_fu_219_p0, "grp_fu_219_p0");
    sc_trace(mVcdFile, grp_fu_219_p1, "grp_fu_219_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, ap_CS_fsm_state52, "ap_CS_fsm_state52");
    sc_trace(mVcdFile, grp_fu_225_p0, "grp_fu_225_p0");
    sc_trace(mVcdFile, grp_fu_225_p1, "grp_fu_225_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state43, "ap_CS_fsm_state43");
    sc_trace(mVcdFile, ap_CS_fsm_state49, "ap_CS_fsm_state49");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, grp_fu_235_p0, "grp_fu_235_p0");
    sc_trace(mVcdFile, grp_fu_238_p1, "grp_fu_238_p1");
    sc_trace(mVcdFile, zext_ln18_1_fu_312_p1, "zext_ln18_1_fu_312_p1");
    sc_trace(mVcdFile, add_ln18_fu_316_p2, "add_ln18_fu_316_p2");
    sc_trace(mVcdFile, bitcast_ln24_fu_326_p1, "bitcast_ln24_fu_326_p1");
    sc_trace(mVcdFile, xor_ln24_fu_330_p2, "xor_ln24_fu_330_p2");
    sc_trace(mVcdFile, zext_ln34_1_fu_367_p1, "zext_ln34_1_fu_367_p1");
    sc_trace(mVcdFile, add_ln34_fu_371_p2, "add_ln34_fu_371_p2");
    sc_trace(mVcdFile, grp_fu_219_opcode, "grp_fu_219_opcode");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("SgdLR_sw.hdltvin.dat");
    mHdltvoutHandle.open("SgdLR_sw.hdltvout.dat");
}

SgdLR_sw::~SgdLR_sw() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete gradient_U;
    delete SgdLR_sw_faddfsub_32ns_32ns_32_4_full_dsp_1_U1;
    delete SgdLR_sw_fmul_32ns_32ns_32_3_max_dsp_1_U2;
    delete SgdLR_sw_fdiv_32ns_32ns_32_9_1_U3;
    delete SgdLR_sw_sitofp_32ns_32_4_1_U4;
    delete SgdLR_sw_fexp_32ns_32ns_32_8_full_dsp_1_U5;
}

void SgdLR_sw::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void SgdLR_sw::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_0;
}

void SgdLR_sw::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_3F800000;
}

void SgdLR_sw::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        dot_reg_172 = grp_fu_219_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(icmp_ln60_fu_280_p2.read(), ap_const_lv1_0))) {
        dot_reg_172 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln60_fu_280_p2.read(), ap_const_lv1_1))) {
        epoch_0_reg_149 = epoch_reg_407.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        epoch_0_reg_149 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_355_p2.read()))) {
        i_0_i11_reg_208 = ap_const_lv11_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read())) {
        i_0_i11_reg_208 = i_2_reg_500.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read())) {
        i_0_i6_reg_196 = i_1_reg_487.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        i_0_i6_reg_196 = ap_const_lv11_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        i_0_i_reg_184 = i_reg_429.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(icmp_ln60_fu_280_p2.read(), ap_const_lv1_0))) {
        i_0_i_reg_184 = ap_const_lv11_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln43_fu_386_p2.read()))) {
        training_id_0_reg_160 = training_id_reg_415.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln57_fu_268_p2.read()))) {
        training_id_0_reg_160 = ap_const_lv13_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        epoch_reg_407 = epoch_fu_274_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read())) {
        gradient_load_reg_515 = gradient_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        i_1_reg_487 = i_1_fu_361_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read())) {
        i_2_reg_500 = i_2_fu_392_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_reg_429 = i_fu_306_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        label_load_reg_459 = label_r_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        prob_reg_474 = grp_fu_230_p2.read();
        tmp_reg_479 = grp_fu_235_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()))) {
        reg_243 = theta_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
        reg_249 = data_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()))) {
        reg_255 = grp_fu_225_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read()))) {
        reg_261 = grp_fu_219_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln60_fu_280_p2.read(), ap_const_lv1_0))) {
        shl_ln_reg_420 = shl_ln_fu_292_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln43_fu_386_p2.read()))) {
        theta_addr_1_reg_510 =  (sc_lv<10>) (zext_ln44_fu_398_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        tmp_3_i_reg_464 = grp_fu_238_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        training_id_reg_415 = training_id_fu_286_p2.read();
    }
}

void SgdLR_sw::thread_add_ln18_fu_316_p2() {
    add_ln18_fu_316_p2 = (!zext_ln18_1_fu_312_p1.read().is_01() || !shl_ln_reg_420.read().is_01())? sc_lv<23>(): (sc_biguint<23>(zext_ln18_1_fu_312_p1.read()) + sc_biguint<23>(shl_ln_reg_420.read()));
}

void SgdLR_sw::thread_add_ln34_fu_371_p2() {
    add_ln34_fu_371_p2 = (!zext_ln34_1_fu_367_p1.read().is_01() || !shl_ln_reg_420.read().is_01())? sc_lv<23>(): (sc_biguint<23>(zext_ln34_1_fu_367_p1.read()) + sc_biguint<23>(shl_ln_reg_420.read()));
}

void SgdLR_sw::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void SgdLR_sw::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void SgdLR_sw::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void SgdLR_sw::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void SgdLR_sw::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void SgdLR_sw::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void SgdLR_sw::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void SgdLR_sw::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void SgdLR_sw::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void SgdLR_sw::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void SgdLR_sw::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void SgdLR_sw::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void SgdLR_sw::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void SgdLR_sw::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void SgdLR_sw::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void SgdLR_sw::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read()[38];
}

void SgdLR_sw::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void SgdLR_sw::thread_ap_CS_fsm_state40() {
    ap_CS_fsm_state40 = ap_CS_fsm.read()[39];
}

void SgdLR_sw::thread_ap_CS_fsm_state41() {
    ap_CS_fsm_state41 = ap_CS_fsm.read()[40];
}

void SgdLR_sw::thread_ap_CS_fsm_state42() {
    ap_CS_fsm_state42 = ap_CS_fsm.read()[41];
}

void SgdLR_sw::thread_ap_CS_fsm_state43() {
    ap_CS_fsm_state43 = ap_CS_fsm.read()[42];
}

void SgdLR_sw::thread_ap_CS_fsm_state45() {
    ap_CS_fsm_state45 = ap_CS_fsm.read()[44];
}

void SgdLR_sw::thread_ap_CS_fsm_state46() {
    ap_CS_fsm_state46 = ap_CS_fsm.read()[45];
}

void SgdLR_sw::thread_ap_CS_fsm_state47() {
    ap_CS_fsm_state47 = ap_CS_fsm.read()[46];
}

void SgdLR_sw::thread_ap_CS_fsm_state48() {
    ap_CS_fsm_state48 = ap_CS_fsm.read()[47];
}

void SgdLR_sw::thread_ap_CS_fsm_state49() {
    ap_CS_fsm_state49 = ap_CS_fsm.read()[48];
}

void SgdLR_sw::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void SgdLR_sw::thread_ap_CS_fsm_state50() {
    ap_CS_fsm_state50 = ap_CS_fsm.read()[49];
}

void SgdLR_sw::thread_ap_CS_fsm_state51() {
    ap_CS_fsm_state51 = ap_CS_fsm.read()[50];
}

void SgdLR_sw::thread_ap_CS_fsm_state52() {
    ap_CS_fsm_state52 = ap_CS_fsm.read()[51];
}

void SgdLR_sw::thread_ap_CS_fsm_state55() {
    ap_CS_fsm_state55 = ap_CS_fsm.read()[54];
}

void SgdLR_sw::thread_ap_CS_fsm_state56() {
    ap_CS_fsm_state56 = ap_CS_fsm.read()[55];
}

void SgdLR_sw::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void SgdLR_sw::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void SgdLR_sw::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void SgdLR_sw::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln57_fu_268_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void SgdLR_sw::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void SgdLR_sw::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln57_fu_268_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void SgdLR_sw::thread_bitcast_ln24_fu_326_p1() {
    bitcast_ln24_fu_326_p1 = dot_reg_172.read();
}

void SgdLR_sw::thread_data_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        data_address0 =  (sc_lv<23>) (zext_ln34_2_fu_376_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        data_address0 =  (sc_lv<23>) (zext_ln18_2_fu_321_p1.read());
    } else {
        data_address0 = "XXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void SgdLR_sw::thread_data_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()))) {
        data_ce0 = ap_const_logic_1;
    } else {
        data_ce0 = ap_const_logic_0;
    }
}

void SgdLR_sw::thread_epoch_fu_274_p2() {
    epoch_fu_274_p2 = (!epoch_0_reg_149.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(epoch_0_reg_149.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void SgdLR_sw::thread_gradient_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read())) {
        gradient_address0 =  (sc_lv<10>) (zext_ln44_fu_398_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read())) {
        gradient_address0 =  (sc_lv<10>) (zext_ln34_fu_381_p1.read());
    } else {
        gradient_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void SgdLR_sw::thread_gradient_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()))) {
        gradient_ce0 = ap_const_logic_1;
    } else {
        gradient_ce0 = ap_const_logic_0;
    }
}

void SgdLR_sw::thread_gradient_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read())) {
        gradient_we0 = ap_const_logic_1;
    } else {
        gradient_we0 = ap_const_logic_0;
    }
}

void SgdLR_sw::thread_grp_fu_219_opcode() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        grp_fu_219_opcode = ap_const_lv2_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state52.read()))) {
        grp_fu_219_opcode = ap_const_lv2_0;
    } else {
        grp_fu_219_opcode =  (sc_lv<2>) ("XX");
    }
}

void SgdLR_sw::thread_grp_fu_219_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state52.read())) {
        grp_fu_219_p0 = reg_243.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        grp_fu_219_p0 = prob_reg_474.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        grp_fu_219_p0 = tmp_3_i_reg_464.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        grp_fu_219_p0 = dot_reg_172.read();
    } else {
        grp_fu_219_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void SgdLR_sw::thread_grp_fu_219_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        grp_fu_219_p1 = tmp_reg_479.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        grp_fu_219_p1 = ap_const_lv32_3F800000;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state52.read()))) {
        grp_fu_219_p1 = reg_255.read();
    } else {
        grp_fu_219_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void SgdLR_sw::thread_grp_fu_225_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())) {
        grp_fu_225_p0 = gradient_load_reg_515.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) {
        grp_fu_225_p0 = reg_249.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_225_p0 = reg_243.read();
    } else {
        grp_fu_225_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void SgdLR_sw::thread_grp_fu_225_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())) {
        grp_fu_225_p1 = ap_const_lv32_C76A6000;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) {
        grp_fu_225_p1 = reg_261.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_225_p1 = reg_249.read();
    } else {
        grp_fu_225_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void SgdLR_sw::thread_grp_fu_235_p0() {
    grp_fu_235_p0 = esl_zext<32,8>(label_load_reg_459.read());
}

void SgdLR_sw::thread_grp_fu_238_p1() {
    grp_fu_238_p1 = xor_ln24_fu_330_p2.read();
}

void SgdLR_sw::thread_i_1_fu_361_p2() {
    i_1_fu_361_p2 = (!i_0_i6_reg_196.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(i_0_i6_reg_196.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void SgdLR_sw::thread_i_2_fu_392_p2() {
    i_2_fu_392_p2 = (!i_0_i11_reg_208.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(i_0_i11_reg_208.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void SgdLR_sw::thread_i_fu_306_p2() {
    i_fu_306_p2 = (!i_0_i_reg_184.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(i_0_i_reg_184.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void SgdLR_sw::thread_icmp_ln17_fu_300_p2() {
    icmp_ln17_fu_300_p2 = (!i_0_i_reg_184.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_reg_184.read() == ap_const_lv11_400);
}

void SgdLR_sw::thread_icmp_ln33_fu_355_p2() {
    icmp_ln33_fu_355_p2 = (!i_0_i6_reg_196.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i6_reg_196.read() == ap_const_lv11_400);
}

void SgdLR_sw::thread_icmp_ln43_fu_386_p2() {
    icmp_ln43_fu_386_p2 = (!i_0_i11_reg_208.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i11_reg_208.read() == ap_const_lv11_400);
}

void SgdLR_sw::thread_icmp_ln57_fu_268_p2() {
    icmp_ln57_fu_268_p2 = (!epoch_0_reg_149.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(epoch_0_reg_149.read() == ap_const_lv3_5);
}

void SgdLR_sw::thread_icmp_ln60_fu_280_p2() {
    icmp_ln60_fu_280_p2 = (!training_id_0_reg_160.read().is_01() || !ap_const_lv13_1194.is_01())? sc_lv<1>(): sc_lv<1>(training_id_0_reg_160.read() == ap_const_lv13_1194);
}

void SgdLR_sw::thread_label_r_address0() {
    label_r_address0 =  (sc_lv<13>) (zext_ln67_1_fu_341_p1.read());
}

void SgdLR_sw::thread_label_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        label_r_ce0 = ap_const_logic_1;
    } else {
        label_r_ce0 = ap_const_logic_0;
    }
}

void SgdLR_sw::thread_shl_ln_fu_292_p3() {
    shl_ln_fu_292_p3 = esl_concat<13,10>(training_id_0_reg_160.read(), ap_const_lv10_0);
}

void SgdLR_sw::thread_theta_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
        theta_address0 = theta_addr_1_reg_510.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        theta_address0 =  (sc_lv<10>) (zext_ln18_fu_346_p1.read());
    } else {
        theta_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void SgdLR_sw::thread_theta_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
        theta_ce0 = ap_const_logic_1;
    } else {
        theta_ce0 = ap_const_logic_0;
    }
}

void SgdLR_sw::thread_theta_d0() {
    theta_d0 = reg_261.read();
}

void SgdLR_sw::thread_theta_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read())) {
        theta_we0 = ap_const_logic_1;
    } else {
        theta_we0 = ap_const_logic_0;
    }
}

void SgdLR_sw::thread_training_id_fu_286_p2() {
    training_id_fu_286_p2 = (!training_id_0_reg_160.read().is_01() || !ap_const_lv13_1.is_01())? sc_lv<13>(): (sc_biguint<13>(training_id_0_reg_160.read()) + sc_biguint<13>(ap_const_lv13_1));
}

void SgdLR_sw::thread_xor_ln24_fu_330_p2() {
    xor_ln24_fu_330_p2 = (bitcast_ln24_fu_326_p1.read() ^ ap_const_lv32_80000000);
}

void SgdLR_sw::thread_zext_ln18_1_fu_312_p1() {
    zext_ln18_1_fu_312_p1 = esl_zext<23,11>(i_0_i_reg_184.read());
}

void SgdLR_sw::thread_zext_ln18_2_fu_321_p1() {
    zext_ln18_2_fu_321_p1 = esl_zext<64,23>(add_ln18_fu_316_p2.read());
}

void SgdLR_sw::thread_zext_ln18_fu_346_p1() {
    zext_ln18_fu_346_p1 = esl_zext<64,11>(i_0_i_reg_184.read());
}

void SgdLR_sw::thread_zext_ln34_1_fu_367_p1() {
    zext_ln34_1_fu_367_p1 = esl_zext<23,11>(i_0_i6_reg_196.read());
}

void SgdLR_sw::thread_zext_ln34_2_fu_376_p1() {
    zext_ln34_2_fu_376_p1 = esl_zext<64,23>(add_ln34_fu_371_p2.read());
}

void SgdLR_sw::thread_zext_ln34_fu_381_p1() {
    zext_ln34_fu_381_p1 = esl_zext<64,11>(i_0_i6_reg_196.read());
}

void SgdLR_sw::thread_zext_ln44_fu_398_p1() {
    zext_ln44_fu_398_p1 = esl_zext<64,11>(i_0_i11_reg_208.read());
}

void SgdLR_sw::thread_zext_ln67_1_fu_341_p1() {
    zext_ln67_1_fu_341_p1 = esl_zext<64,13>(training_id_0_reg_160.read());
}

void SgdLR_sw::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln57_fu_268_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln60_fu_280_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln17_fu_300_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_355_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state47;
            } else {
                ap_NS_fsm = ap_ST_fsm_state40;
            }
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state45;
            break;
        case 17592186044416 : 
            ap_NS_fsm = ap_ST_fsm_state46;
            break;
        case 35184372088832 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 70368744177664 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln43_fu_386_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state48;
            }
            break;
        case 140737488355328 : 
            ap_NS_fsm = ap_ST_fsm_state49;
            break;
        case 281474976710656 : 
            ap_NS_fsm = ap_ST_fsm_state50;
            break;
        case 562949953421312 : 
            ap_NS_fsm = ap_ST_fsm_state51;
            break;
        case 1125899906842624 : 
            ap_NS_fsm = ap_ST_fsm_state52;
            break;
        case 2251799813685248 : 
            ap_NS_fsm = ap_ST_fsm_state53;
            break;
        case 4503599627370496 : 
            ap_NS_fsm = ap_ST_fsm_state54;
            break;
        case 9007199254740992 : 
            ap_NS_fsm = ap_ST_fsm_state55;
            break;
        case 18014398509481984 : 
            ap_NS_fsm = ap_ST_fsm_state56;
            break;
        case 36028797018963968 : 
            ap_NS_fsm = ap_ST_fsm_state47;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<56>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void SgdLR_sw::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_address0\" :  \"" << data_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_ce0\" :  \"" << data_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_q0\" :  \"" << data_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"label_r_address0\" :  \"" << label_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"label_r_ce0\" :  \"" << label_r_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"label_r_q0\" :  \"" << label_r_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"theta_address0\" :  \"" << theta_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"theta_ce0\" :  \"" << theta_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"theta_we0\" :  \"" << theta_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"theta_d0\" :  \"" << theta_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"theta_q0\" :  \"" << theta_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

