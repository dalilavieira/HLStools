// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gradient_weight_x (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        filt_grad_x_address0,
        filt_grad_x_ce0,
        filt_grad_x_we0,
        filt_grad_x_d0,
        filt_grad_y_address0,
        filt_grad_y_ce0,
        filt_grad_y_we0,
        filt_grad_y_d0,
        filt_grad_z_address0,
        filt_grad_z_ce0,
        filt_grad_z_we0,
        filt_grad_z_d0,
        y_filtered_x_address0,
        y_filtered_x_ce0,
        y_filtered_x_q0,
        y_filtered_y_address0,
        y_filtered_y_ce0,
        y_filtered_y_q0,
        y_filtered_z_address0,
        y_filtered_z_ce0,
        y_filtered_z_q0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [18:0] filt_grad_x_address0;
output   filt_grad_x_ce0;
output   filt_grad_x_we0;
output  [31:0] filt_grad_x_d0;
output  [18:0] filt_grad_y_address0;
output   filt_grad_y_ce0;
output   filt_grad_y_we0;
output  [31:0] filt_grad_y_d0;
output  [18:0] filt_grad_z_address0;
output   filt_grad_z_ce0;
output   filt_grad_z_we0;
output  [31:0] filt_grad_z_d0;
output  [18:0] y_filtered_x_address0;
output   y_filtered_x_ce0;
input  [31:0] y_filtered_x_q0;
output  [18:0] y_filtered_y_address0;
output   y_filtered_y_ce0;
input  [31:0] y_filtered_y_q0;
output  [18:0] y_filtered_z_address0;
output   y_filtered_z_ce0;
input  [31:0] y_filtered_z_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[18:0] filt_grad_x_address0;
reg filt_grad_x_ce0;
reg filt_grad_x_we0;
reg[31:0] filt_grad_x_d0;
reg[18:0] filt_grad_y_address0;
reg filt_grad_y_ce0;
reg filt_grad_y_we0;
reg[31:0] filt_grad_y_d0;
reg[18:0] filt_grad_z_address0;
reg filt_grad_z_ce0;
reg filt_grad_z_we0;
reg[31:0] filt_grad_z_d0;
reg y_filtered_x_ce0;
reg y_filtered_y_ce0;
reg y_filtered_z_ce0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] GRAD_FILTER_address0;
reg    GRAD_FILTER_ce0;
wire   [31:0] GRAD_FILTER_q0;
wire   [8:0] r_fu_291_p2;
reg   [8:0] r_reg_431;
wire    ap_CS_fsm_state2;
wire   [19:0] zext_ln104_fu_305_p1;
reg   [19:0] zext_ln104_reg_436;
wire   [0:0] icmp_ln102_fu_285_p2;
wire   [10:0] c_fu_315_p2;
reg   [10:0] c_reg_446;
wire    ap_CS_fsm_state3;
wire   [0:0] and_ln110_fu_341_p2;
reg   [0:0] and_ln110_reg_451;
wire   [0:0] icmp_ln104_fu_309_p2;
wire   [2:0] i_fu_379_p2;
reg   [2:0] i_reg_461;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln112_fu_373_p2;
reg   [31:0] y_filtered_x_load_reg_486;
wire    ap_CS_fsm_state5;
reg   [31:0] GRAD_FILTER_load_reg_491;
reg   [31:0] y_filtered_y_load_reg_498;
reg   [31:0] y_filtered_z_load_reg_503;
wire   [31:0] grp_fu_266_p2;
reg   [31:0] tmp_reg_508;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_270_p2;
reg   [31:0] tmp_s_reg_513;
wire   [31:0] grp_fu_274_p2;
reg   [31:0] tmp_2_reg_518;
wire   [31:0] grp_fu_251_p2;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_256_p2;
wire   [31:0] grp_fu_261_p2;
reg   [8:0] r_0_reg_178;
wire   [10:0] ap_phi_mux_c_0_phi_fu_193_p4;
reg   [10:0] c_0_reg_189;
reg   [31:0] acc_2_0_reg_201;
reg   [31:0] acc_1_0_reg_214;
reg   [31:0] acc_0_0_reg_227;
reg   [2:0] i_0_reg_240;
wire   [63:0] zext_ln122_1_fu_362_p1;
wire   [0:0] icmp_ln120_fu_347_p2;
wire   [63:0] zext_ln114_2_fu_400_p1;
wire   [63:0] zext_ln114_1_fu_407_p1;
wire   [63:0] zext_ln118_1_fu_421_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state6;
reg   [10:0] grp_fu_278_p0;
wire   [18:0] tmp_5_fu_297_p3;
wire   [0:0] tmp_18_fu_327_p3;
wire   [0:0] icmp_ln110_fu_321_p2;
wire   [0:0] xor_ln110_fu_335_p2;
wire   [10:0] grp_fu_278_p2;
wire   [19:0] zext_ln122_fu_353_p1;
wire   [19:0] add_ln122_1_fu_357_p2;
wire   [10:0] zext_ln112_fu_369_p1;
wire   [10:0] sub_ln114_fu_385_p2;
wire   [19:0] zext_ln114_fu_391_p1;
wire   [19:0] add_ln114_fu_395_p2;
wire   [19:0] zext_ln118_fu_412_p1;
wire   [19:0] add_ln118_1_fu_416_p2;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

gradient_weight_y_GRAD_FILTER #(
    .DataWidth( 32 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
GRAD_FILTER_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(GRAD_FILTER_address0),
    .ce0(GRAD_FILTER_ce0),
    .q0(GRAD_FILTER_q0)
);

optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(acc_0_0_reg_227),
    .din1(tmp_reg_508),
    .ce(1'b1),
    .dout(grp_fu_251_p2)
);

optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(acc_1_0_reg_214),
    .din1(tmp_s_reg_513),
    .ce(1'b1),
    .dout(grp_fu_256_p2)
);

optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(acc_2_0_reg_201),
    .din1(tmp_2_reg_518),
    .ce(1'b1),
    .dout(grp_fu_261_p2)
);

optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y_filtered_x_load_reg_486),
    .din1(GRAD_FILTER_load_reg_491),
    .ce(1'b1),
    .dout(grp_fu_266_p2)
);

optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y_filtered_y_load_reg_498),
    .din1(GRAD_FILTER_load_reg_491),
    .ce(1'b1),
    .dout(grp_fu_270_p2)
);

optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y_filtered_z_load_reg_503),
    .din1(GRAD_FILTER_load_reg_491),
    .ce(1'b1),
    .dout(grp_fu_274_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln110_fu_341_p2) & (icmp_ln104_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        acc_0_0_reg_227 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        acc_0_0_reg_227 <= grp_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln110_fu_341_p2) & (icmp_ln104_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        acc_1_0_reg_214 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        acc_1_0_reg_214 <= grp_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln110_fu_341_p2) & (icmp_ln104_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        acc_2_0_reg_201 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        acc_2_0_reg_201 <= grp_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln102_fu_285_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_189 <= 11'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & ((1'd0 == and_ln110_reg_451) | (icmp_ln112_fu_373_p2 == 1'd1)))) begin
        c_0_reg_189 <= c_reg_446;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln110_fu_341_p2) & (icmp_ln104_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_240 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        i_0_reg_240 <= i_reg_461;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln104_fu_309_p2 == 1'd1))) begin
        r_0_reg_178 <= r_reg_431;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_178 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        GRAD_FILTER_load_reg_491 <= GRAD_FILTER_q0;
        y_filtered_x_load_reg_486 <= y_filtered_x_q0;
        y_filtered_y_load_reg_498 <= y_filtered_y_q0;
        y_filtered_z_load_reg_503 <= y_filtered_z_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln104_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        and_ln110_reg_451 <= and_ln110_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_446 <= c_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln110_reg_451) & (1'b1 == ap_CS_fsm_state4))) begin
        i_reg_461 <= i_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_431 <= r_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_2_reg_518 <= grp_fu_274_p2;
        tmp_reg_508 <= grp_fu_266_p2;
        tmp_s_reg_513 <= grp_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln102_fu_285_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln104_reg_436[18 : 10] <= zext_ln104_fu_305_p1[18 : 10];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        GRAD_FILTER_ce0 = 1'b1;
    end else begin
        GRAD_FILTER_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln102_fu_285_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_fu_285_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        filt_grad_x_address0 = zext_ln118_1_fu_421_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        filt_grad_x_address0 = zext_ln122_1_fu_362_p1;
    end else begin
        filt_grad_x_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        filt_grad_x_ce0 = 1'b1;
    end else begin
        filt_grad_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        filt_grad_x_d0 = acc_0_0_reg_227;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        filt_grad_x_d0 = 32'd0;
    end else begin
        filt_grad_x_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd0 == and_ln110_fu_341_p2) & (icmp_ln104_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln120_fu_347_p2 == 1'd1)) | ((1'd1 == and_ln110_reg_451) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln112_fu_373_p2 == 1'd1)))) begin
        filt_grad_x_we0 = 1'b1;
    end else begin
        filt_grad_x_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        filt_grad_y_address0 = zext_ln118_1_fu_421_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        filt_grad_y_address0 = zext_ln122_1_fu_362_p1;
    end else begin
        filt_grad_y_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        filt_grad_y_ce0 = 1'b1;
    end else begin
        filt_grad_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        filt_grad_y_d0 = acc_1_0_reg_214;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        filt_grad_y_d0 = 32'd0;
    end else begin
        filt_grad_y_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd0 == and_ln110_fu_341_p2) & (icmp_ln104_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln120_fu_347_p2 == 1'd1)) | ((1'd1 == and_ln110_reg_451) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln112_fu_373_p2 == 1'd1)))) begin
        filt_grad_y_we0 = 1'b1;
    end else begin
        filt_grad_y_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        filt_grad_z_address0 = zext_ln118_1_fu_421_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        filt_grad_z_address0 = zext_ln122_1_fu_362_p1;
    end else begin
        filt_grad_z_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        filt_grad_z_ce0 = 1'b1;
    end else begin
        filt_grad_z_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        filt_grad_z_d0 = acc_2_0_reg_201;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        filt_grad_z_d0 = 32'd0;
    end else begin
        filt_grad_z_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd0 == and_ln110_fu_341_p2) & (icmp_ln104_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln120_fu_347_p2 == 1'd1)) | ((1'd1 == and_ln110_reg_451) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln112_fu_373_p2 == 1'd1)))) begin
        filt_grad_z_we0 = 1'b1;
    end else begin
        filt_grad_z_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_278_p0 = c_0_reg_189;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_278_p0 = ap_phi_mux_c_0_phi_fu_193_p4;
    end else begin
        grp_fu_278_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_filtered_x_ce0 = 1'b1;
    end else begin
        y_filtered_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_filtered_y_ce0 = 1'b1;
    end else begin
        y_filtered_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_filtered_z_ce0 = 1'b1;
    end else begin
        y_filtered_z_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln102_fu_285_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln104_fu_309_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ((1'd0 == and_ln110_reg_451) | (icmp_ln112_fu_373_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign GRAD_FILTER_address0 = zext_ln114_1_fu_407_p1;

assign add_ln114_fu_395_p2 = (zext_ln104_reg_436 + zext_ln114_fu_391_p1);

assign add_ln118_1_fu_416_p2 = (zext_ln104_reg_436 + zext_ln118_fu_412_p1);

assign add_ln122_1_fu_357_p2 = (zext_ln104_reg_436 + zext_ln122_fu_353_p1);

assign and_ln110_fu_341_p2 = (xor_ln110_fu_335_p2 & icmp_ln110_fu_321_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_phi_mux_c_0_phi_fu_193_p4 = c_0_reg_189;

assign c_fu_315_p2 = (c_0_reg_189 + 11'd1);

assign grp_fu_278_p2 = ($signed(grp_fu_278_p0) + $signed(11'd2045));

assign i_fu_379_p2 = (i_0_reg_240 + 3'd1);

assign icmp_ln102_fu_285_p2 = ((r_0_reg_178 == 9'd436) ? 1'b1 : 1'b0);

assign icmp_ln104_fu_309_p2 = ((c_0_reg_189 == 11'd1027) ? 1'b1 : 1'b0);

assign icmp_ln110_fu_321_p2 = ((c_0_reg_189 > 11'd5) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_373_p2 = ((i_0_reg_240 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln120_fu_347_p2 = ((c_0_reg_189 > 11'd2) ? 1'b1 : 1'b0);

assign r_fu_291_p2 = (r_0_reg_178 + 9'd1);

assign sub_ln114_fu_385_p2 = (c_0_reg_189 - zext_ln112_fu_369_p1);

assign tmp_18_fu_327_p3 = c_0_reg_189[32'd10];

assign tmp_5_fu_297_p3 = {{r_0_reg_178}, {10'd0}};

assign xor_ln110_fu_335_p2 = (tmp_18_fu_327_p3 ^ 1'd1);

assign y_filtered_x_address0 = zext_ln114_2_fu_400_p1;

assign y_filtered_y_address0 = zext_ln114_2_fu_400_p1;

assign y_filtered_z_address0 = zext_ln114_2_fu_400_p1;

assign zext_ln104_fu_305_p1 = tmp_5_fu_297_p3;

assign zext_ln112_fu_369_p1 = i_0_reg_240;

assign zext_ln114_1_fu_407_p1 = i_0_reg_240;

assign zext_ln114_2_fu_400_p1 = add_ln114_fu_395_p2;

assign zext_ln114_fu_391_p1 = sub_ln114_fu_385_p2;

assign zext_ln118_1_fu_421_p1 = add_ln118_1_fu_416_p2;

assign zext_ln118_fu_412_p1 = grp_fu_278_p2;

assign zext_ln122_1_fu_362_p1 = add_ln122_1_fu_357_p2;

assign zext_ln122_fu_353_p1 = grp_fu_278_p2;

always @ (posedge ap_clk) begin
    zext_ln104_reg_436[9:0] <= 10'b0000000000;
    zext_ln104_reg_436[19] <= 1'b0;
end

endmodule //gradient_weight_x
