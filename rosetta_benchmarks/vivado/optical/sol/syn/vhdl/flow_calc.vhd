-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity flow_calc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_x_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    output_x_ce0 : OUT STD_LOGIC;
    output_x_we0 : OUT STD_LOGIC;
    output_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_y_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    output_y_ce0 : OUT STD_LOGIC;
    output_y_we0 : OUT STD_LOGIC;
    output_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tensor_val_0_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    tensor_val_0_ce0 : OUT STD_LOGIC;
    tensor_val_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tensor_val_1_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    tensor_val_1_ce0 : OUT STD_LOGIC;
    tensor_val_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tensor_val_3_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    tensor_val_3_ce0 : OUT STD_LOGIC;
    tensor_val_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tensor_val_5_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    tensor_val_5_ce0 : OUT STD_LOGIC;
    tensor_val_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tensor_val_4_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    tensor_val_4_ce0 : OUT STD_LOGIC;
    tensor_val_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of flow_calc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv9_1B4 : STD_LOGIC_VECTOR (8 downto 0) := "110110100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_1B2 : STD_LOGIC_VECTOR (8 downto 0) := "110110010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal r_fu_231_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_reg_345 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln220_fu_267_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln220_reg_350 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln216_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln220_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln220_reg_355 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_283_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_reg_363 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal and_ln220_2_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln220_2_reg_368 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln218_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_x_addr_reg_397 : STD_LOGIC_VECTOR (18 downto 0);
    signal output_y_addr_reg_402 : STD_LOGIC_VECTOR (18 downto 0);
    signal tensor_val_0_load_reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tensor_val_1_load_reg_413 : STD_LOGIC_VECTOR (31 downto 0);
    signal tensor_val_3_load_reg_419 : STD_LOGIC_VECTOR (31 downto 0);
    signal tensor_val_5_load_reg_427 : STD_LOGIC_VECTOR (31 downto 0);
    signal tensor_val_4_load_reg_433 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_193_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_439 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_444 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_449 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_459 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_464 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_181_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal denom_reg_469 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_475 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_480 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_485 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_221_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_490 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_0_reg_147 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_0_reg_158 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_phi_mux_storemerge_phi_fu_173_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge_reg_169 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln223_1_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_20_fu_237_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_259_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln220_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln220_1_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_289_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln220_2_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln220_3_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln220_1_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln223_fu_322_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln223_fu_326_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);

    component optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component optical_flow_sw_fdiv_32ns_32ns_32_9_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U54 : component optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_439,
        din1 => tmp_s_reg_444,
        ce => ap_const_logic_1,
        dout => grp_fu_181_p2);

    optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U55 : component optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_3_reg_449,
        din1 => tmp_4_reg_454,
        ce => ap_const_logic_1,
        dout => grp_fu_185_p2);

    optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U56 : component optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_7_reg_459,
        din1 => tmp_8_reg_464,
        ce => ap_const_logic_1,
        dout => grp_fu_189_p2);

    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U57 : component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tensor_val_0_load_reg_407,
        din1 => tensor_val_1_load_reg_413,
        ce => ap_const_logic_1,
        dout => grp_fu_193_p2);

    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U58 : component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tensor_val_3_load_reg_419,
        din1 => tensor_val_3_load_reg_419,
        ce => ap_const_logic_1,
        dout => grp_fu_197_p2);

    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U59 : component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tensor_val_5_load_reg_427,
        din1 => tensor_val_3_load_reg_419,
        ce => ap_const_logic_1,
        dout => grp_fu_201_p2);

    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U60 : component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tensor_val_4_load_reg_433,
        din1 => tensor_val_1_load_reg_413,
        ce => ap_const_logic_1,
        dout => grp_fu_205_p2);

    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U61 : component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tensor_val_4_load_reg_433,
        din1 => tensor_val_3_load_reg_419,
        ce => ap_const_logic_1,
        dout => grp_fu_209_p2);

    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U62 : component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tensor_val_5_load_reg_427,
        din1 => tensor_val_0_load_reg_407,
        ce => ap_const_logic_1,
        dout => grp_fu_213_p2);

    optical_flow_sw_fdiv_32ns_32ns_32_9_1_U63 : component optical_flow_sw_fdiv_32ns_32ns_32_9_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_5_reg_475,
        din1 => denom_reg_469,
        ce => ap_const_logic_1,
        dout => grp_fu_217_p2);

    optical_flow_sw_fdiv_32ns_32ns_32_9_1_U64 : component optical_flow_sw_fdiv_32ns_32ns_32_9_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_9_reg_480,
        din1 => denom_reg_469,
        ce => ap_const_logic_1,
        dout => grp_fu_221_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln216_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_reg_158 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                c_0_reg_158 <= c_reg_363;
            end if; 
        end if;
    end process;

    r_0_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln218_fu_277_p2 = ap_const_lv1_1))) then 
                r_0_reg_147 <= r_reg_345;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_147 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    storemerge_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_lv1_1 = and_ln220_2_reg_368))) then 
                storemerge_reg_169 <= tmp_1_reg_490;
            elsif (((icmp_ln218_fu_277_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln220_2_fu_317_p2) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                storemerge_reg_169 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln218_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                and_ln220_2_reg_368 <= and_ln220_2_fu_317_p2;
                output_x_addr_reg_397 <= zext_ln223_1_fu_331_p1(19 - 1 downto 0);
                output_y_addr_reg_402 <= zext_ln223_1_fu_331_p1(19 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln216_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                and_ln220_reg_355 <= and_ln220_fu_271_p2;
                    zext_ln220_reg_350(18 downto 10) <= zext_ln220_fu_267_p1(18 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_363 <= c_fu_283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                denom_reg_469 <= grp_fu_181_p2;
                tmp_5_reg_475 <= grp_fu_185_p2;
                tmp_9_reg_480 <= grp_fu_189_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_reg_345 <= r_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tensor_val_0_load_reg_407 <= tensor_val_0_q0;
                tensor_val_1_load_reg_413 <= tensor_val_1_q0;
                tensor_val_3_load_reg_419 <= tensor_val_3_q0;
                tensor_val_4_load_reg_433 <= tensor_val_4_q0;
                tensor_val_5_load_reg_427 <= tensor_val_5_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_1_reg_490 <= grp_fu_221_p2;
                tmp_6_reg_485 <= grp_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_3_reg_449 <= grp_fu_201_p2;
                tmp_4_reg_454 <= grp_fu_205_p2;
                tmp_7_reg_459 <= grp_fu_209_p2;
                tmp_8_reg_464 <= grp_fu_213_p2;
                tmp_reg_439 <= grp_fu_193_p2;
                tmp_s_reg_444 <= grp_fu_197_p2;
            end if;
        end if;
    end process;
    zext_ln220_reg_350(9 downto 0) <= "0000000000";
    zext_ln220_reg_350(19) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln216_fu_225_p2, ap_CS_fsm_state3, and_ln220_2_fu_317_p2, icmp_ln218_fu_277_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln216_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln218_fu_277_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((icmp_ln218_fu_277_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln220_2_fu_317_p2) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln223_fu_326_p2 <= std_logic_vector(unsigned(zext_ln220_reg_350) + unsigned(zext_ln223_fu_322_p1));
    and_ln220_1_fu_311_p2 <= (icmp_ln220_3_fu_305_p2 and icmp_ln220_2_fu_299_p2);
    and_ln220_2_fu_317_p2 <= (and_ln220_reg_355 and and_ln220_1_fu_311_p2);
    and_ln220_fu_271_p2 <= (icmp_ln220_fu_247_p2 and icmp_ln220_1_fu_253_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln216_fu_225_p2)
    begin
        if ((((icmp_ln216_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_storemerge_phi_fu_173_p4_assign_proc : process(and_ln220_2_reg_368, tmp_1_reg_490, ap_CS_fsm_state21, storemerge_reg_169)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_lv1_1 = and_ln220_2_reg_368))) then 
            ap_phi_mux_storemerge_phi_fu_173_p4 <= tmp_1_reg_490;
        else 
            ap_phi_mux_storemerge_phi_fu_173_p4 <= storemerge_reg_169;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln216_fu_225_p2)
    begin
        if (((icmp_ln216_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_283_p2 <= std_logic_vector(unsigned(c_0_reg_158) + unsigned(ap_const_lv11_1));
    icmp_ln216_fu_225_p2 <= "1" when (r_0_reg_147 = ap_const_lv9_1B4) else "0";
    icmp_ln218_fu_277_p2 <= "1" when (c_0_reg_158 = ap_const_lv11_400) else "0";
    icmp_ln220_1_fu_253_p2 <= "1" when (unsigned(r_0_reg_147) < unsigned(ap_const_lv9_1B2)) else "0";
    icmp_ln220_2_fu_299_p2 <= "0" when (tmp_21_fu_289_p4 = ap_const_lv10_0) else "1";
    icmp_ln220_3_fu_305_p2 <= "1" when (unsigned(c_0_reg_158) < unsigned(ap_const_lv11_3FE)) else "0";
    icmp_ln220_fu_247_p2 <= "0" when (tmp_20_fu_237_p4 = ap_const_lv8_0) else "1";

    output_x_address0_assign_proc : process(ap_CS_fsm_state3, output_x_addr_reg_397, ap_CS_fsm_state21, zext_ln223_1_fu_331_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_x_address0 <= output_x_addr_reg_397;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_x_address0 <= zext_ln223_1_fu_331_p1(19 - 1 downto 0);
        else 
            output_x_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_x_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            output_x_ce0 <= ap_const_logic_1;
        else 
            output_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_x_d0_assign_proc : process(ap_CS_fsm_state3, tmp_6_reg_485, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_x_d0 <= tmp_6_reg_485;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_x_d0 <= ap_const_lv32_0;
        else 
            output_x_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_x_we0_assign_proc : process(ap_CS_fsm_state3, and_ln220_2_fu_317_p2, and_ln220_2_reg_368, icmp_ln218_fu_277_p2, ap_CS_fsm_state21)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_lv1_1 = and_ln220_2_reg_368)) or ((icmp_ln218_fu_277_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln220_2_fu_317_p2) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            output_x_we0 <= ap_const_logic_1;
        else 
            output_x_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_y_address0 <= output_y_addr_reg_402;

    output_y_ce0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_y_ce0 <= ap_const_logic_1;
        else 
            output_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_y_d0 <= ap_phi_mux_storemerge_phi_fu_173_p4;

    output_y_we0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_y_we0 <= ap_const_logic_1;
        else 
            output_y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_231_p2 <= std_logic_vector(unsigned(r_0_reg_147) + unsigned(ap_const_lv9_1));
    tensor_val_0_address0 <= zext_ln223_1_fu_331_p1(19 - 1 downto 0);

    tensor_val_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            tensor_val_0_ce0 <= ap_const_logic_1;
        else 
            tensor_val_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tensor_val_1_address0 <= zext_ln223_1_fu_331_p1(19 - 1 downto 0);

    tensor_val_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            tensor_val_1_ce0 <= ap_const_logic_1;
        else 
            tensor_val_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tensor_val_3_address0 <= zext_ln223_1_fu_331_p1(19 - 1 downto 0);

    tensor_val_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            tensor_val_3_ce0 <= ap_const_logic_1;
        else 
            tensor_val_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tensor_val_4_address0 <= zext_ln223_1_fu_331_p1(19 - 1 downto 0);

    tensor_val_4_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            tensor_val_4_ce0 <= ap_const_logic_1;
        else 
            tensor_val_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tensor_val_5_address0 <= zext_ln223_1_fu_331_p1(19 - 1 downto 0);

    tensor_val_5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            tensor_val_5_ce0 <= ap_const_logic_1;
        else 
            tensor_val_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_259_p3 <= (r_0_reg_147 & ap_const_lv10_0);
    tmp_20_fu_237_p4 <= r_0_reg_147(8 downto 1);
    tmp_21_fu_289_p4 <= c_0_reg_158(10 downto 1);
    zext_ln220_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_259_p3),20));
    zext_ln223_1_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln223_fu_326_p2),64));
    zext_ln223_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_158),20));
end behav;
