-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gradient_weight_y is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    filt_grad_x_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    filt_grad_x_ce0 : OUT STD_LOGIC;
    filt_grad_x_we0 : OUT STD_LOGIC;
    filt_grad_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    filt_grad_y_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    filt_grad_y_ce0 : OUT STD_LOGIC;
    filt_grad_y_we0 : OUT STD_LOGIC;
    filt_grad_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    filt_grad_z_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    filt_grad_z_ce0 : OUT STD_LOGIC;
    filt_grad_z_we0 : OUT STD_LOGIC;
    filt_grad_z_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    gradient_x_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    gradient_x_ce0 : OUT STD_LOGIC;
    gradient_x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    gradient_y_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    gradient_y_ce0 : OUT STD_LOGIC;
    gradient_y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    gradient_z_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    gradient_z_ce0 : OUT STD_LOGIC;
    gradient_z_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of gradient_weight_y is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv9_1B7 : STD_LOGIC_VECTOR (8 downto 0) := "110110111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv9_1B4 : STD_LOGIC_VECTOR (8 downto 0) := "110110100";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv10_3FD : STD_LOGIC_VECTOR (9 downto 0) := "1111111101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal GRAD_FILTER_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal GRAD_FILTER_ce0 : STD_LOGIC;
    signal GRAD_FILTER_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_fu_283_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_reg_425 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal and_ln80_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln80_reg_430 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_reg_434 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_319_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_3_reg_438 : STD_LOGIC_VECTOR (19 downto 0);
    signal c_fu_333_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_reg_447 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln88_fu_355_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln88_reg_452 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln74_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal filt_grad_x_addr_1_reg_457 : STD_LOGIC_VECTOR (18 downto 0);
    signal filt_grad_y_addr_1_reg_462 : STD_LOGIC_VECTOR (18 downto 0);
    signal filt_grad_z_addr_1_reg_467 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_fu_381_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_475 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln82_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gradient_x_load_reg_500 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal GRAD_FILTER_load_reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_y_load_reg_512 : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_z_load_reg_517 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_527 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_269_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_251_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_0_reg_173 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_0_reg_185 : STD_LOGIC_VECTOR (10 downto 0);
    signal acc_2_0_reg_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_0_reg_209 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_0_0_reg_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_235 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln92_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln88_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_1_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_2_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln80_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_1_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln72_fu_273_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln92_fu_313_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln92_fu_339_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln92_1_fu_343_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln88_fu_359_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln82_fu_371_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln84_fu_387_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_fu_393_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln84_fu_401_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln84_fu_405_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gradient_weight_y_GRAD_FILTER IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    GRAD_FILTER_U : component gradient_weight_y_GRAD_FILTER
    generic map (
        DataWidth => 32,
        AddressRange => 7,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => GRAD_FILTER_address0,
        ce0 => GRAD_FILTER_ce0,
        q0 => GRAD_FILTER_q0);

    optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U16 : component optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => acc_0_0_reg_222,
        din1 => tmp_reg_522,
        ce => ap_const_logic_1,
        dout => grp_fu_246_p2);

    optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U17 : component optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => acc_1_0_reg_209,
        din1 => tmp_s_reg_527,
        ce => ap_const_logic_1,
        dout => grp_fu_251_p2);

    optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U18 : component optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => acc_2_0_reg_196,
        din1 => tmp_1_reg_532,
        ce => ap_const_logic_1,
        dout => grp_fu_256_p2);

    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U19 : component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => gradient_x_load_reg_500,
        din1 => GRAD_FILTER_load_reg_505,
        ce => ap_const_logic_1,
        dout => grp_fu_261_p2);

    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U20 : component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => gradient_y_load_reg_512,
        din1 => GRAD_FILTER_load_reg_505,
        ce => ap_const_logic_1,
        dout => grp_fu_265_p2);

    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U21 : component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => gradient_z_load_reg_517,
        din1 => GRAD_FILTER_load_reg_505,
        ce => ap_const_logic_1,
        dout => grp_fu_269_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    acc_0_0_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_327_p2 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln80_reg_430) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                acc_0_0_reg_222 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                acc_0_0_reg_222 <= grp_fu_246_p2;
            end if; 
        end if;
    end process;

    acc_1_0_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_327_p2 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln80_reg_430) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                acc_1_0_reg_209 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                acc_1_0_reg_209 <= grp_fu_251_p2;
            end if; 
        end if;
    end process;

    acc_2_0_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_327_p2 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln80_reg_430) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                acc_2_0_reg_196 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                acc_2_0_reg_196 <= grp_fu_256_p2;
            end if; 
        end if;
    end process;

    c_0_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln72_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_reg_185 <= ap_const_lv11_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and ((ap_const_lv1_0 = and_ln80_reg_430) or (icmp_ln82_fu_375_p2 = ap_const_lv1_1)))) then 
                c_0_reg_185 <= c_reg_447;
            end if; 
        end if;
    end process;

    i_0_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_327_p2 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln80_reg_430) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_235 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_0_reg_235 <= i_reg_475;
            end if; 
        end if;
    end process;

    r_0_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln74_fu_327_p2 = ap_const_lv1_1))) then 
                r_0_reg_173 <= r_reg_425;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_173 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                GRAD_FILTER_load_reg_505 <= GRAD_FILTER_q0;
                gradient_x_load_reg_500 <= gradient_x_q0;
                gradient_y_load_reg_512 <= gradient_y_q0;
                gradient_z_load_reg_517 <= gradient_z_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln72_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                and_ln80_reg_430 <= and_ln80_fu_301_p2;
                icmp_ln90_reg_434 <= icmp_ln90_fu_307_p2;
                    tmp_3_reg_438(19 downto 10) <= tmp_3_fu_319_p3(19 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_447 <= c_fu_333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_327_p2 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln80_reg_430) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                filt_grad_x_addr_1_reg_457 <= sext_ln88_fu_364_p1(19 - 1 downto 0);
                filt_grad_y_addr_1_reg_462 <= sext_ln88_fu_364_p1(19 - 1 downto 0);
                filt_grad_z_addr_1_reg_467 <= sext_ln88_fu_364_p1(19 - 1 downto 0);
                    zext_ln88_reg_452(10 downto 0) <= zext_ln88_fu_355_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln80_reg_430) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                i_reg_475 <= i_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_reg_425 <= r_fu_283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_1_reg_532 <= grp_fu_269_p2;
                tmp_reg_522 <= grp_fu_261_p2;
                tmp_s_reg_527 <= grp_fu_265_p2;
            end if;
        end if;
    end process;
    tmp_3_reg_438(9 downto 0) <= "0000000000";
    zext_ln88_reg_452(19 downto 11) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, and_ln80_reg_430, icmp_ln72_fu_277_p2, ap_CS_fsm_state3, icmp_ln74_fu_327_p2, ap_CS_fsm_state4, icmp_ln82_fu_375_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln72_fu_277_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln74_fu_327_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((ap_const_lv1_0 = and_ln80_reg_430) or (icmp_ln82_fu_375_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    GRAD_FILTER_address0 <= zext_ln84_2_fu_417_p1(3 - 1 downto 0);

    GRAD_FILTER_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            GRAD_FILTER_ce0 <= ap_const_logic_1;
        else 
            GRAD_FILTER_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln84_fu_405_p2 <= std_logic_vector(unsigned(zext_ln88_reg_452) + unsigned(zext_ln84_fu_401_p1));
    add_ln88_fu_359_p2 <= std_logic_vector(unsigned(tmp_3_reg_438) + unsigned(zext_ln88_fu_355_p1));
    add_ln92_1_fu_343_p2 <= std_logic_vector(unsigned(tmp_3_reg_438) + unsigned(zext_ln92_fu_339_p1));
    add_ln92_fu_313_p2 <= std_logic_vector(unsigned(zext_ln72_fu_273_p1) + unsigned(ap_const_lv10_3FD));
    and_ln80_fu_301_p2 <= (icmp_ln80_fu_289_p2 and icmp_ln80_1_fu_295_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln72_fu_277_p2)
    begin
        if ((((icmp_ln72_fu_277_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln72_fu_277_p2)
    begin
        if (((icmp_ln72_fu_277_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_333_p2 <= std_logic_vector(unsigned(c_0_reg_185) + unsigned(ap_const_lv11_1));

    filt_grad_x_address0_assign_proc : process(ap_CS_fsm_state3, filt_grad_x_addr_1_reg_457, ap_CS_fsm_state4, sext_ln92_fu_348_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            filt_grad_x_address0 <= filt_grad_x_addr_1_reg_457;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            filt_grad_x_address0 <= sext_ln92_fu_348_p1(19 - 1 downto 0);
        else 
            filt_grad_x_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    filt_grad_x_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            filt_grad_x_ce0 <= ap_const_logic_1;
        else 
            filt_grad_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    filt_grad_x_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, acc_0_0_reg_222)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            filt_grad_x_d0 <= acc_0_0_reg_222;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            filt_grad_x_d0 <= ap_const_lv32_0;
        else 
            filt_grad_x_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    filt_grad_x_we0_assign_proc : process(and_ln80_reg_430, icmp_ln90_reg_434, ap_CS_fsm_state3, icmp_ln74_fu_327_p2, ap_CS_fsm_state4, icmp_ln82_fu_375_p2)
    begin
        if ((((ap_const_lv1_1 = and_ln80_reg_430) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln82_fu_375_p2 = ap_const_lv1_1)) or ((icmp_ln90_reg_434 = ap_const_lv1_1) and (icmp_ln74_fu_327_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln80_reg_430) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            filt_grad_x_we0 <= ap_const_logic_1;
        else 
            filt_grad_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    filt_grad_y_address0_assign_proc : process(ap_CS_fsm_state3, filt_grad_y_addr_1_reg_462, ap_CS_fsm_state4, sext_ln92_fu_348_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            filt_grad_y_address0 <= filt_grad_y_addr_1_reg_462;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            filt_grad_y_address0 <= sext_ln92_fu_348_p1(19 - 1 downto 0);
        else 
            filt_grad_y_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    filt_grad_y_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            filt_grad_y_ce0 <= ap_const_logic_1;
        else 
            filt_grad_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    filt_grad_y_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, acc_1_0_reg_209)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            filt_grad_y_d0 <= acc_1_0_reg_209;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            filt_grad_y_d0 <= ap_const_lv32_0;
        else 
            filt_grad_y_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    filt_grad_y_we0_assign_proc : process(and_ln80_reg_430, icmp_ln90_reg_434, ap_CS_fsm_state3, icmp_ln74_fu_327_p2, ap_CS_fsm_state4, icmp_ln82_fu_375_p2)
    begin
        if ((((ap_const_lv1_1 = and_ln80_reg_430) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln82_fu_375_p2 = ap_const_lv1_1)) or ((icmp_ln90_reg_434 = ap_const_lv1_1) and (icmp_ln74_fu_327_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln80_reg_430) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            filt_grad_y_we0 <= ap_const_logic_1;
        else 
            filt_grad_y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    filt_grad_z_address0_assign_proc : process(ap_CS_fsm_state3, filt_grad_z_addr_1_reg_467, ap_CS_fsm_state4, sext_ln92_fu_348_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            filt_grad_z_address0 <= filt_grad_z_addr_1_reg_467;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            filt_grad_z_address0 <= sext_ln92_fu_348_p1(19 - 1 downto 0);
        else 
            filt_grad_z_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    filt_grad_z_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            filt_grad_z_ce0 <= ap_const_logic_1;
        else 
            filt_grad_z_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    filt_grad_z_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, acc_2_0_reg_196)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            filt_grad_z_d0 <= acc_2_0_reg_196;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            filt_grad_z_d0 <= ap_const_lv32_0;
        else 
            filt_grad_z_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    filt_grad_z_we0_assign_proc : process(and_ln80_reg_430, icmp_ln90_reg_434, ap_CS_fsm_state3, icmp_ln74_fu_327_p2, ap_CS_fsm_state4, icmp_ln82_fu_375_p2)
    begin
        if ((((ap_const_lv1_1 = and_ln80_reg_430) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln82_fu_375_p2 = ap_const_lv1_1)) or ((icmp_ln90_reg_434 = ap_const_lv1_1) and (icmp_ln74_fu_327_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln80_reg_430) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            filt_grad_z_we0 <= ap_const_logic_1;
        else 
            filt_grad_z_we0 <= ap_const_logic_0;
        end if; 
    end process;

    gradient_x_address0 <= zext_ln84_1_fu_410_p1(19 - 1 downto 0);

    gradient_x_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            gradient_x_ce0 <= ap_const_logic_1;
        else 
            gradient_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    gradient_y_address0 <= zext_ln84_1_fu_410_p1(19 - 1 downto 0);

    gradient_y_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            gradient_y_ce0 <= ap_const_logic_1;
        else 
            gradient_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    gradient_z_address0 <= zext_ln84_1_fu_410_p1(19 - 1 downto 0);

    gradient_z_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            gradient_z_ce0 <= ap_const_logic_1;
        else 
            gradient_z_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_381_p2 <= std_logic_vector(unsigned(i_0_reg_235) + unsigned(ap_const_lv3_1));
    icmp_ln72_fu_277_p2 <= "1" when (r_0_reg_173 = ap_const_lv9_1B7) else "0";
    icmp_ln74_fu_327_p2 <= "1" when (c_0_reg_185 = ap_const_lv11_400) else "0";
    icmp_ln80_1_fu_295_p2 <= "1" when (unsigned(r_0_reg_173) < unsigned(ap_const_lv9_1B4)) else "0";
    icmp_ln80_fu_289_p2 <= "1" when (unsigned(r_0_reg_173) > unsigned(ap_const_lv9_5)) else "0";
    icmp_ln82_fu_375_p2 <= "1" when (i_0_reg_235 = ap_const_lv3_7) else "0";
    icmp_ln90_fu_307_p2 <= "1" when (unsigned(r_0_reg_173) > unsigned(ap_const_lv9_2)) else "0";
    r_fu_283_p2 <= std_logic_vector(unsigned(r_0_reg_173) + unsigned(ap_const_lv9_1));
        sext_ln88_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln88_fu_359_p2),64));

        sext_ln92_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln92_1_fu_343_p2),64));

    sub_ln84_fu_387_p2 <= std_logic_vector(unsigned(r_0_reg_173) - unsigned(zext_ln82_fu_371_p1));
    tmp_3_fu_319_p3 <= (add_ln92_fu_313_p2 & ap_const_lv10_0);
    tmp_4_fu_393_p3 <= (sub_ln84_fu_387_p2 & ap_const_lv10_0);
    zext_ln72_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_reg_173),10));
    zext_ln82_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_235),9));
    zext_ln84_1_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_fu_405_p2),64));
    zext_ln84_2_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_235),64));
    zext_ln84_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_393_p3),20));
    zext_ln88_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_185),20));
    zext_ln92_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_185),20));
end behav;
