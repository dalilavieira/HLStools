// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gradient_xy_calc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        frame_address0,
        frame_ce0,
        frame_q0,
        frame_address1,
        frame_ce1,
        frame_q1,
        gradient_x_address0,
        gradient_x_ce0,
        gradient_x_we0,
        gradient_x_d0,
        gradient_y_address0,
        gradient_y_ce0,
        gradient_y_we0,
        gradient_y_d0
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_state16 = 25'd32768;
parameter    ap_ST_fsm_state17 = 25'd65536;
parameter    ap_ST_fsm_state18 = 25'd131072;
parameter    ap_ST_fsm_state19 = 25'd262144;
parameter    ap_ST_fsm_state20 = 25'd524288;
parameter    ap_ST_fsm_state21 = 25'd1048576;
parameter    ap_ST_fsm_state22 = 25'd2097152;
parameter    ap_ST_fsm_state23 = 25'd4194304;
parameter    ap_ST_fsm_state24 = 25'd8388608;
parameter    ap_ST_fsm_state25 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [18:0] frame_address0;
output   frame_ce0;
input  [31:0] frame_q0;
output  [18:0] frame_address1;
output   frame_ce1;
input  [31:0] frame_q1;
output  [18:0] gradient_x_address0;
output   gradient_x_ce0;
output   gradient_x_we0;
output  [31:0] gradient_x_d0;
output  [18:0] gradient_y_address0;
output   gradient_y_ce0;
output   gradient_y_we0;
output  [31:0] gradient_y_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg frame_ce0;
reg frame_ce1;
reg[18:0] gradient_x_address0;
reg gradient_x_ce0;
reg gradient_x_we0;
reg[31:0] gradient_x_d0;
reg[18:0] gradient_y_address0;
reg gradient_y_ce0;
reg gradient_y_we0;
reg[31:0] gradient_y_d0;

(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] GRAD_WEIGHTS_address0;
reg    GRAD_WEIGHTS_ce0;
wire   [4:0] GRAD_WEIGHTS_q0;
wire   [8:0] r_fu_266_p2;
reg   [8:0] r_reg_518;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln34_fu_304_p2;
reg   [0:0] icmp_ln34_reg_523;
wire   [0:0] icmp_ln18_fu_260_p2;
wire   [19:0] tmp_1_fu_316_p3;
reg   [19:0] tmp_1_reg_528;
wire   [0:0] and_ln24_fu_324_p2;
reg   [0:0] and_ln24_reg_535;
wire   [10:0] c_fu_336_p2;
reg   [10:0] c_reg_543;
wire    ap_CS_fsm_state3;
wire   [0:0] and_ln24_2_fu_378_p2;
reg   [0:0] and_ln24_2_reg_548;
wire   [0:0] icmp_ln20_fu_330_p2;
wire   [19:0] zext_ln31_fu_419_p1;
reg   [19:0] zext_ln31_reg_555;
reg   [18:0] gradient_x_addr_1_reg_560;
reg   [18:0] gradient_y_addr_1_reg_565;
wire   [2:0] i_fu_448_p2;
reg   [2:0] i_reg_573;
wire    ap_CS_fsm_state4;
wire   [19:0] add_ln28_fu_464_p2;
reg   [19:0] add_ln28_reg_578;
wire   [0:0] icmp_ln26_fu_442_p2;
wire   [19:0] add_ln29_1_fu_498_p2;
reg   [19:0] add_ln29_1_reg_588;
reg   [4:0] GRAD_WEIGHTS_load_reg_593;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
reg   [31:0] frame_load_reg_613;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_247_p1;
reg   [31:0] tmp_7_reg_618;
reg   [31:0] frame_load_1_reg_624;
wire   [31:0] grp_fu_227_p2;
reg   [31:0] tmp_8_reg_629;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_231_p2;
reg   [31:0] tmp_9_reg_634;
wire   [31:0] grp_fu_217_p2;
wire    ap_CS_fsm_state16;
wire   [31:0] grp_fu_222_p2;
wire   [31:0] grp_fu_235_p2;
reg   [31:0] tmp_reg_649;
wire    ap_CS_fsm_state24;
wire   [31:0] grp_fu_241_p2;
reg   [31:0] tmp_s_reg_654;
reg   [8:0] r_0_reg_158;
reg   [10:0] c_0_reg_170;
wire    ap_CS_fsm_state25;
reg   [31:0] y_grad_0_reg_182;
reg   [31:0] x_grad_0_reg_194;
reg   [2:0] i_0_reg_206;
wire  signed [63:0] sext_ln36_fu_413_p1;
wire   [0:0] and_ln34_fu_399_p2;
wire  signed [63:0] sext_ln31_fu_428_p1;
wire   [63:0] zext_ln28_1_fu_475_p1;
wire  signed [63:0] sext_ln28_fu_507_p1;
wire   [63:0] zext_ln29_1_fu_511_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state10;
wire  signed [31:0] grp_fu_247_p0;
wire   [6:0] tmp_12_fu_272_p4;
wire   [7:0] tmp_13_fu_294_p4;
wire   [9:0] zext_ln18_fu_256_p1;
wire   [9:0] add_ln36_fu_310_p2;
wire   [0:0] icmp_ln24_fu_282_p2;
wire   [0:0] icmp_ln24_1_fu_288_p2;
wire   [8:0] tmp_14_fu_342_p4;
wire   [0:0] tmp_16_fu_358_p3;
wire   [0:0] icmp_ln24_2_fu_352_p2;
wire   [0:0] xor_ln24_fu_366_p2;
wire   [0:0] and_ln24_1_fu_372_p2;
wire   [9:0] tmp_17_fu_383_p4;
wire   [0:0] icmp_ln34_1_fu_393_p2;
wire   [10:0] grp_fu_250_p2;
wire   [19:0] zext_ln36_fu_404_p1;
wire   [19:0] add_ln36_2_fu_408_p2;
wire   [19:0] add_ln31_fu_423_p2;
wire   [10:0] zext_ln26_1_fu_438_p1;
wire   [10:0] sub_ln28_fu_454_p2;
wire   [19:0] zext_ln28_fu_460_p1;
wire   [2:0] sub_ln28_1_fu_469_p2;
wire   [8:0] zext_ln26_fu_434_p1;
wire   [8:0] sub_ln29_fu_480_p2;
wire   [18:0] tmp_2_fu_486_p3;
wire   [19:0] zext_ln29_fu_494_p1;
reg   [24:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
end

gradient_xy_calc_GRAD_WEIGHTS #(
    .DataWidth( 5 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
GRAD_WEIGHTS_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(GRAD_WEIGHTS_address0),
    .ce0(GRAD_WEIGHTS_ce0),
    .q0(GRAD_WEIGHTS_q0)
);

optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_grad_0_reg_194),
    .din1(tmp_8_reg_629),
    .ce(1'b1),
    .dout(grp_fu_217_p2)
);

optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y_grad_0_reg_182),
    .din1(tmp_9_reg_634),
    .ce(1'b1),
    .dout(grp_fu_222_p2)
);

optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(frame_load_reg_613),
    .din1(tmp_7_reg_618),
    .ce(1'b1),
    .dout(grp_fu_227_p2)
);

optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(frame_load_1_reg_624),
    .din1(tmp_7_reg_618),
    .ce(1'b1),
    .dout(grp_fu_231_p2)
);

optical_flow_sw_fdiv_32ns_32ns_32_9_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fdiv_32ns_32ns_32_9_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_grad_0_reg_194),
    .din1(32'd1094713344),
    .ce(1'b1),
    .dout(grp_fu_235_p2)
);

optical_flow_sw_fdiv_32ns_32ns_32_9_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fdiv_32ns_32ns_32_9_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y_grad_0_reg_182),
    .din1(32'd1094713344),
    .ce(1'b1),
    .dout(grp_fu_241_p2)
);

optical_flow_sw_sitofp_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_sitofp_32s_32_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_247_p0),
    .ce(1'b1),
    .dout(grp_fu_247_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_260_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_170 <= 11'd0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        c_0_reg_170 <= c_reg_543;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln24_2_fu_378_p2) & (icmp_ln20_fu_330_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_206 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        i_0_reg_206 <= i_reg_573;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln20_fu_330_p2 == 1'd1))) begin
        r_0_reg_158 <= r_reg_518;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_158 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln24_2_fu_378_p2) & (icmp_ln20_fu_330_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        x_grad_0_reg_194 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        x_grad_0_reg_194 <= grp_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln24_2_fu_378_p2) & (icmp_ln20_fu_330_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        y_grad_0_reg_182 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        y_grad_0_reg_182 <= grp_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        GRAD_WEIGHTS_load_reg_593 <= GRAD_WEIGHTS_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_442_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln28_reg_578 <= add_ln28_fu_464_p2;
        add_ln29_1_reg_588 <= add_ln29_1_fu_498_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_330_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        and_ln24_2_reg_548 <= and_ln24_2_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_260_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        and_ln24_reg_535 <= and_ln24_fu_324_p2;
        icmp_ln34_reg_523 <= icmp_ln34_fu_304_p2;
        tmp_1_reg_528[19 : 10] <= tmp_1_fu_316_p3[19 : 10];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_543 <= c_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        frame_load_1_reg_624 <= frame_q1;
        frame_load_reg_613 <= frame_q0;
        tmp_7_reg_618 <= grp_fu_247_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln24_2_fu_378_p2) & (icmp_ln20_fu_330_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        gradient_x_addr_1_reg_560 <= sext_ln31_fu_428_p1;
        gradient_y_addr_1_reg_565 <= sext_ln31_fu_428_p1;
        zext_ln31_reg_555[10 : 0] <= zext_ln31_fu_419_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_573 <= i_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_518 <= r_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_8_reg_629 <= grp_fu_227_p2;
        tmp_9_reg_634 <= grp_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tmp_reg_649 <= grp_fu_235_p2;
        tmp_s_reg_654 <= grp_fu_241_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        GRAD_WEIGHTS_ce0 = 1'b1;
    end else begin
        GRAD_WEIGHTS_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln18_fu_260_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_fu_260_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        frame_ce0 = 1'b1;
    end else begin
        frame_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        frame_ce1 = 1'b1;
    end else begin
        frame_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        gradient_x_address0 = gradient_x_addr_1_reg_560;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        gradient_x_address0 = sext_ln36_fu_413_p1;
    end else begin
        gradient_x_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state25))) begin
        gradient_x_ce0 = 1'b1;
    end else begin
        gradient_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        gradient_x_d0 = tmp_reg_649;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        gradient_x_d0 = 32'd0;
    end else begin
        gradient_x_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd0 == and_ln24_2_fu_378_p2) & (icmp_ln20_fu_330_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln34_fu_399_p2)) | ((1'b1 == ap_CS_fsm_state25) & (1'd1 == and_ln24_2_reg_548)))) begin
        gradient_x_we0 = 1'b1;
    end else begin
        gradient_x_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        gradient_y_address0 = gradient_y_addr_1_reg_565;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        gradient_y_address0 = sext_ln36_fu_413_p1;
    end else begin
        gradient_y_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state25))) begin
        gradient_y_ce0 = 1'b1;
    end else begin
        gradient_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        gradient_y_d0 = tmp_s_reg_654;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        gradient_y_d0 = 32'd0;
    end else begin
        gradient_y_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd0 == and_ln24_2_fu_378_p2) & (icmp_ln20_fu_330_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln34_fu_399_p2)) | ((1'b1 == ap_CS_fsm_state25) & (1'd1 == and_ln24_2_reg_548)))) begin
        gradient_y_we0 = 1'b1;
    end else begin
        gradient_y_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln18_fu_260_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln20_fu_330_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'd1 == and_ln24_2_fu_378_p2) & (icmp_ln20_fu_330_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln26_fu_442_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign GRAD_WEIGHTS_address0 = zext_ln28_1_fu_475_p1;

assign add_ln28_fu_464_p2 = (zext_ln28_fu_460_p1 + tmp_1_reg_528);

assign add_ln29_1_fu_498_p2 = (zext_ln31_reg_555 + zext_ln29_fu_494_p1);

assign add_ln31_fu_423_p2 = (tmp_1_reg_528 + zext_ln31_fu_419_p1);

assign add_ln36_2_fu_408_p2 = (tmp_1_reg_528 + zext_ln36_fu_404_p1);

assign add_ln36_fu_310_p2 = ($signed(zext_ln18_fu_256_p1) + $signed(10'd1022));

assign and_ln24_1_fu_372_p2 = (xor_ln24_fu_366_p2 & icmp_ln24_2_fu_352_p2);

assign and_ln24_2_fu_378_p2 = (and_ln24_reg_535 & and_ln24_1_fu_372_p2);

assign and_ln24_fu_324_p2 = (icmp_ln24_fu_282_p2 & icmp_ln24_1_fu_288_p2);

assign and_ln34_fu_399_p2 = (icmp_ln34_reg_523 & icmp_ln34_1_fu_393_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_fu_336_p2 = (c_0_reg_170 + 11'd1);

assign frame_address0 = sext_ln28_fu_507_p1;

assign frame_address1 = zext_ln29_1_fu_511_p1;

assign grp_fu_247_p0 = $signed(GRAD_WEIGHTS_load_reg_593);

assign grp_fu_250_p2 = ($signed(c_0_reg_170) + $signed(11'd2046));

assign i_fu_448_p2 = (i_0_reg_206 + 3'd1);

assign icmp_ln18_fu_260_p2 = ((r_0_reg_158 == 9'd438) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_330_p2 = ((c_0_reg_170 == 11'd1026) ? 1'b1 : 1'b0);

assign icmp_ln24_1_fu_288_p2 = ((r_0_reg_158 < 9'd436) ? 1'b1 : 1'b0);

assign icmp_ln24_2_fu_352_p2 = ((tmp_14_fu_342_p4 != 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_282_p2 = ((tmp_12_fu_272_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_442_p2 = ((i_0_reg_206 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_393_p2 = ((tmp_17_fu_383_p4 != 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_304_p2 = ((tmp_13_fu_294_p4 != 8'd0) ? 1'b1 : 1'b0);

assign r_fu_266_p2 = (r_0_reg_158 + 9'd1);

assign sext_ln28_fu_507_p1 = $signed(add_ln28_reg_578);

assign sext_ln31_fu_428_p1 = $signed(add_ln31_fu_423_p2);

assign sext_ln36_fu_413_p1 = $signed(add_ln36_2_fu_408_p2);

assign sub_ln28_1_fu_469_p2 = ($signed(3'd4) - $signed(i_0_reg_206));

assign sub_ln28_fu_454_p2 = (c_0_reg_170 - zext_ln26_1_fu_438_p1);

assign sub_ln29_fu_480_p2 = (r_0_reg_158 - zext_ln26_fu_434_p1);

assign tmp_12_fu_272_p4 = {{r_0_reg_158[8:2]}};

assign tmp_13_fu_294_p4 = {{r_0_reg_158[8:1]}};

assign tmp_14_fu_342_p4 = {{c_0_reg_170[10:2]}};

assign tmp_16_fu_358_p3 = c_0_reg_170[32'd10];

assign tmp_17_fu_383_p4 = {{c_0_reg_170[10:1]}};

assign tmp_1_fu_316_p3 = {{add_ln36_fu_310_p2}, {10'd0}};

assign tmp_2_fu_486_p3 = {{sub_ln29_fu_480_p2}, {10'd0}};

assign xor_ln24_fu_366_p2 = (tmp_16_fu_358_p3 ^ 1'd1);

assign zext_ln18_fu_256_p1 = r_0_reg_158;

assign zext_ln26_1_fu_438_p1 = i_0_reg_206;

assign zext_ln26_fu_434_p1 = i_0_reg_206;

assign zext_ln28_1_fu_475_p1 = sub_ln28_1_fu_469_p2;

assign zext_ln28_fu_460_p1 = sub_ln28_fu_454_p2;

assign zext_ln29_1_fu_511_p1 = add_ln29_1_reg_588;

assign zext_ln29_fu_494_p1 = tmp_2_fu_486_p3;

assign zext_ln31_fu_419_p1 = grp_fu_250_p2;

assign zext_ln36_fu_404_p1 = grp_fu_250_p2;

always @ (posedge ap_clk) begin
    tmp_1_reg_528[9:0] <= 10'b0000000000;
    zext_ln31_reg_555[19:11] <= 9'b000000000;
end

endmodule //gradient_xy_calc
