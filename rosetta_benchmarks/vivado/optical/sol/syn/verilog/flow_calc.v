// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module flow_calc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_x_address0,
        output_x_ce0,
        output_x_we0,
        output_x_d0,
        output_y_address0,
        output_y_ce0,
        output_y_we0,
        output_y_d0,
        tensor_val_0_address0,
        tensor_val_0_ce0,
        tensor_val_0_q0,
        tensor_val_1_address0,
        tensor_val_1_ce0,
        tensor_val_1_q0,
        tensor_val_3_address0,
        tensor_val_3_ce0,
        tensor_val_3_q0,
        tensor_val_5_address0,
        tensor_val_5_ce0,
        tensor_val_5_q0,
        tensor_val_4_address0,
        tensor_val_4_ce0,
        tensor_val_4_q0
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_state16 = 21'd32768;
parameter    ap_ST_fsm_state17 = 21'd65536;
parameter    ap_ST_fsm_state18 = 21'd131072;
parameter    ap_ST_fsm_state19 = 21'd262144;
parameter    ap_ST_fsm_state20 = 21'd524288;
parameter    ap_ST_fsm_state21 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [18:0] output_x_address0;
output   output_x_ce0;
output   output_x_we0;
output  [31:0] output_x_d0;
output  [18:0] output_y_address0;
output   output_y_ce0;
output   output_y_we0;
output  [31:0] output_y_d0;
output  [18:0] tensor_val_0_address0;
output   tensor_val_0_ce0;
input  [31:0] tensor_val_0_q0;
output  [18:0] tensor_val_1_address0;
output   tensor_val_1_ce0;
input  [31:0] tensor_val_1_q0;
output  [18:0] tensor_val_3_address0;
output   tensor_val_3_ce0;
input  [31:0] tensor_val_3_q0;
output  [18:0] tensor_val_5_address0;
output   tensor_val_5_ce0;
input  [31:0] tensor_val_5_q0;
output  [18:0] tensor_val_4_address0;
output   tensor_val_4_ce0;
input  [31:0] tensor_val_4_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[18:0] output_x_address0;
reg output_x_ce0;
reg output_x_we0;
reg[31:0] output_x_d0;
reg output_y_ce0;
reg output_y_we0;
reg tensor_val_0_ce0;
reg tensor_val_1_ce0;
reg tensor_val_3_ce0;
reg tensor_val_5_ce0;
reg tensor_val_4_ce0;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] r_fu_231_p2;
reg   [8:0] r_reg_345;
wire    ap_CS_fsm_state2;
wire   [19:0] zext_ln220_fu_267_p1;
reg   [19:0] zext_ln220_reg_350;
wire   [0:0] icmp_ln216_fu_225_p2;
wire   [0:0] and_ln220_fu_271_p2;
reg   [0:0] and_ln220_reg_355;
wire   [10:0] c_fu_283_p2;
reg   [10:0] c_reg_363;
wire    ap_CS_fsm_state3;
wire   [0:0] and_ln220_2_fu_317_p2;
reg   [0:0] and_ln220_2_reg_368;
wire   [0:0] icmp_ln218_fu_277_p2;
reg   [18:0] output_x_addr_reg_397;
reg   [18:0] output_y_addr_reg_402;
reg   [31:0] tensor_val_0_load_reg_407;
wire    ap_CS_fsm_state4;
reg   [31:0] tensor_val_1_load_reg_413;
reg   [31:0] tensor_val_3_load_reg_419;
reg   [31:0] tensor_val_5_load_reg_427;
reg   [31:0] tensor_val_4_load_reg_433;
wire   [31:0] grp_fu_193_p2;
reg   [31:0] tmp_reg_439;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_197_p2;
reg   [31:0] tmp_s_reg_444;
wire   [31:0] grp_fu_201_p2;
reg   [31:0] tmp_3_reg_449;
wire   [31:0] grp_fu_205_p2;
reg   [31:0] tmp_4_reg_454;
wire   [31:0] grp_fu_209_p2;
reg   [31:0] tmp_7_reg_459;
wire   [31:0] grp_fu_213_p2;
reg   [31:0] tmp_8_reg_464;
wire   [31:0] grp_fu_181_p2;
reg   [31:0] denom_reg_469;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_185_p2;
reg   [31:0] tmp_5_reg_475;
wire   [31:0] grp_fu_189_p2;
reg   [31:0] tmp_9_reg_480;
wire   [31:0] grp_fu_217_p2;
reg   [31:0] tmp_6_reg_485;
wire    ap_CS_fsm_state20;
wire   [31:0] grp_fu_221_p2;
reg   [31:0] tmp_1_reg_490;
reg   [8:0] r_0_reg_147;
reg   [10:0] c_0_reg_158;
wire    ap_CS_fsm_state21;
reg   [31:0] ap_phi_mux_storemerge_phi_fu_173_p4;
reg   [31:0] storemerge_reg_169;
wire   [63:0] zext_ln223_1_fu_331_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state12;
wire   [7:0] tmp_20_fu_237_p4;
wire   [18:0] tmp_10_fu_259_p3;
wire   [0:0] icmp_ln220_fu_247_p2;
wire   [0:0] icmp_ln220_1_fu_253_p2;
wire   [9:0] tmp_21_fu_289_p4;
wire   [0:0] icmp_ln220_2_fu_299_p2;
wire   [0:0] icmp_ln220_3_fu_305_p2;
wire   [0:0] and_ln220_1_fu_311_p2;
wire   [19:0] zext_ln223_fu_322_p1;
wire   [19:0] add_ln223_fu_326_p2;
reg   [20:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
end

optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_439),
    .din1(tmp_s_reg_444),
    .ce(1'b1),
    .dout(grp_fu_181_p2)
);

optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_3_reg_449),
    .din1(tmp_4_reg_454),
    .ce(1'b1),
    .dout(grp_fu_185_p2)
);

optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_7_reg_459),
    .din1(tmp_8_reg_464),
    .ce(1'b1),
    .dout(grp_fu_189_p2)
);

optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U57(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tensor_val_0_load_reg_407),
    .din1(tensor_val_1_load_reg_413),
    .ce(1'b1),
    .dout(grp_fu_193_p2)
);

optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U58(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tensor_val_3_load_reg_419),
    .din1(tensor_val_3_load_reg_419),
    .ce(1'b1),
    .dout(grp_fu_197_p2)
);

optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tensor_val_5_load_reg_427),
    .din1(tensor_val_3_load_reg_419),
    .ce(1'b1),
    .dout(grp_fu_201_p2)
);

optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U60(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tensor_val_4_load_reg_433),
    .din1(tensor_val_1_load_reg_413),
    .ce(1'b1),
    .dout(grp_fu_205_p2)
);

optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U61(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tensor_val_4_load_reg_433),
    .din1(tensor_val_3_load_reg_419),
    .ce(1'b1),
    .dout(grp_fu_209_p2)
);

optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U62(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tensor_val_5_load_reg_427),
    .din1(tensor_val_0_load_reg_407),
    .ce(1'b1),
    .dout(grp_fu_213_p2)
);

optical_flow_sw_fdiv_32ns_32ns_32_9_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fdiv_32ns_32ns_32_9_1_U63(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_reg_475),
    .din1(denom_reg_469),
    .ce(1'b1),
    .dout(grp_fu_217_p2)
);

optical_flow_sw_fdiv_32ns_32ns_32_9_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fdiv_32ns_32ns_32_9_1_U64(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_9_reg_480),
    .din1(denom_reg_469),
    .ce(1'b1),
    .dout(grp_fu_221_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln216_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_158 <= 11'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        c_0_reg_158 <= c_reg_363;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln218_fu_277_p2 == 1'd1))) begin
        r_0_reg_147 <= r_reg_345;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_147 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (1'd1 == and_ln220_2_reg_368))) begin
        storemerge_reg_169 <= tmp_1_reg_490;
    end else if (((icmp_ln218_fu_277_p2 == 1'd0) & (1'd0 == and_ln220_2_fu_317_p2) & (1'b1 == ap_CS_fsm_state3))) begin
        storemerge_reg_169 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln218_fu_277_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        and_ln220_2_reg_368 <= and_ln220_2_fu_317_p2;
        output_x_addr_reg_397 <= zext_ln223_1_fu_331_p1;
        output_y_addr_reg_402 <= zext_ln223_1_fu_331_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln216_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        and_ln220_reg_355 <= and_ln220_fu_271_p2;
        zext_ln220_reg_350[18 : 10] <= zext_ln220_fu_267_p1[18 : 10];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_363 <= c_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        denom_reg_469 <= grp_fu_181_p2;
        tmp_5_reg_475 <= grp_fu_185_p2;
        tmp_9_reg_480 <= grp_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_345 <= r_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tensor_val_0_load_reg_407 <= tensor_val_0_q0;
        tensor_val_1_load_reg_413 <= tensor_val_1_q0;
        tensor_val_3_load_reg_419 <= tensor_val_3_q0;
        tensor_val_4_load_reg_433 <= tensor_val_4_q0;
        tensor_val_5_load_reg_427 <= tensor_val_5_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_1_reg_490 <= grp_fu_221_p2;
        tmp_6_reg_485 <= grp_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_3_reg_449 <= grp_fu_201_p2;
        tmp_4_reg_454 <= grp_fu_205_p2;
        tmp_7_reg_459 <= grp_fu_209_p2;
        tmp_8_reg_464 <= grp_fu_213_p2;
        tmp_reg_439 <= grp_fu_193_p2;
        tmp_s_reg_444 <= grp_fu_197_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln216_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) & (1'd1 == and_ln220_2_reg_368))) begin
        ap_phi_mux_storemerge_phi_fu_173_p4 = tmp_1_reg_490;
    end else begin
        ap_phi_mux_storemerge_phi_fu_173_p4 = storemerge_reg_169;
    end
end

always @ (*) begin
    if (((icmp_ln216_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        output_x_address0 = output_x_addr_reg_397;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_x_address0 = zext_ln223_1_fu_331_p1;
    end else begin
        output_x_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state3))) begin
        output_x_ce0 = 1'b1;
    end else begin
        output_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        output_x_d0 = tmp_6_reg_485;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_x_d0 = 32'd0;
    end else begin
        output_x_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state21) & (1'd1 == and_ln220_2_reg_368)) | ((icmp_ln218_fu_277_p2 == 1'd0) & (1'd0 == and_ln220_2_fu_317_p2) & (1'b1 == ap_CS_fsm_state3)))) begin
        output_x_we0 = 1'b1;
    end else begin
        output_x_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        output_y_ce0 = 1'b1;
    end else begin
        output_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        output_y_we0 = 1'b1;
    end else begin
        output_y_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tensor_val_0_ce0 = 1'b1;
    end else begin
        tensor_val_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tensor_val_1_ce0 = 1'b1;
    end else begin
        tensor_val_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tensor_val_3_ce0 = 1'b1;
    end else begin
        tensor_val_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tensor_val_4_ce0 = 1'b1;
    end else begin
        tensor_val_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tensor_val_5_ce0 = 1'b1;
    end else begin
        tensor_val_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln216_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln218_fu_277_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((icmp_ln218_fu_277_p2 == 1'd0) & (1'd0 == and_ln220_2_fu_317_p2) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln223_fu_326_p2 = (zext_ln220_reg_350 + zext_ln223_fu_322_p1);

assign and_ln220_1_fu_311_p2 = (icmp_ln220_3_fu_305_p2 & icmp_ln220_2_fu_299_p2);

assign and_ln220_2_fu_317_p2 = (and_ln220_reg_355 & and_ln220_1_fu_311_p2);

assign and_ln220_fu_271_p2 = (icmp_ln220_fu_247_p2 & icmp_ln220_1_fu_253_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign c_fu_283_p2 = (c_0_reg_158 + 11'd1);

assign icmp_ln216_fu_225_p2 = ((r_0_reg_147 == 9'd436) ? 1'b1 : 1'b0);

assign icmp_ln218_fu_277_p2 = ((c_0_reg_158 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln220_1_fu_253_p2 = ((r_0_reg_147 < 9'd434) ? 1'b1 : 1'b0);

assign icmp_ln220_2_fu_299_p2 = ((tmp_21_fu_289_p4 != 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln220_3_fu_305_p2 = ((c_0_reg_158 < 11'd1022) ? 1'b1 : 1'b0);

assign icmp_ln220_fu_247_p2 = ((tmp_20_fu_237_p4 != 8'd0) ? 1'b1 : 1'b0);

assign output_y_address0 = output_y_addr_reg_402;

assign output_y_d0 = ap_phi_mux_storemerge_phi_fu_173_p4;

assign r_fu_231_p2 = (r_0_reg_147 + 9'd1);

assign tensor_val_0_address0 = zext_ln223_1_fu_331_p1;

assign tensor_val_1_address0 = zext_ln223_1_fu_331_p1;

assign tensor_val_3_address0 = zext_ln223_1_fu_331_p1;

assign tensor_val_4_address0 = zext_ln223_1_fu_331_p1;

assign tensor_val_5_address0 = zext_ln223_1_fu_331_p1;

assign tmp_10_fu_259_p3 = {{r_0_reg_147}, {10'd0}};

assign tmp_20_fu_237_p4 = {{r_0_reg_147[8:1]}};

assign tmp_21_fu_289_p4 = {{c_0_reg_158[10:1]}};

assign zext_ln220_fu_267_p1 = tmp_10_fu_259_p3;

assign zext_ln223_1_fu_331_p1 = add_ln223_fu_326_p2;

assign zext_ln223_fu_322_p1 = c_0_reg_158;

always @ (posedge ap_clk) begin
    zext_ln220_reg_350[9:0] <= 10'b0000000000;
    zext_ln220_reg_350[19] <= 1'b0;
end

endmodule //flow_calc
