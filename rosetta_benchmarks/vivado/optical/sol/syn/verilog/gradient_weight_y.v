// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gradient_weight_y (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        filt_grad_x_address0,
        filt_grad_x_ce0,
        filt_grad_x_we0,
        filt_grad_x_d0,
        filt_grad_y_address0,
        filt_grad_y_ce0,
        filt_grad_y_we0,
        filt_grad_y_d0,
        filt_grad_z_address0,
        filt_grad_z_ce0,
        filt_grad_z_we0,
        filt_grad_z_d0,
        gradient_x_address0,
        gradient_x_ce0,
        gradient_x_q0,
        gradient_y_address0,
        gradient_y_ce0,
        gradient_y_q0,
        gradient_z_address0,
        gradient_z_ce0,
        gradient_z_q0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [18:0] filt_grad_x_address0;
output   filt_grad_x_ce0;
output   filt_grad_x_we0;
output  [31:0] filt_grad_x_d0;
output  [18:0] filt_grad_y_address0;
output   filt_grad_y_ce0;
output   filt_grad_y_we0;
output  [31:0] filt_grad_y_d0;
output  [18:0] filt_grad_z_address0;
output   filt_grad_z_ce0;
output   filt_grad_z_we0;
output  [31:0] filt_grad_z_d0;
output  [18:0] gradient_x_address0;
output   gradient_x_ce0;
input  [31:0] gradient_x_q0;
output  [18:0] gradient_y_address0;
output   gradient_y_ce0;
input  [31:0] gradient_y_q0;
output  [18:0] gradient_z_address0;
output   gradient_z_ce0;
input  [31:0] gradient_z_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[18:0] filt_grad_x_address0;
reg filt_grad_x_ce0;
reg filt_grad_x_we0;
reg[31:0] filt_grad_x_d0;
reg[18:0] filt_grad_y_address0;
reg filt_grad_y_ce0;
reg filt_grad_y_we0;
reg[31:0] filt_grad_y_d0;
reg[18:0] filt_grad_z_address0;
reg filt_grad_z_ce0;
reg filt_grad_z_we0;
reg[31:0] filt_grad_z_d0;
reg gradient_x_ce0;
reg gradient_y_ce0;
reg gradient_z_ce0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] GRAD_FILTER_address0;
reg    GRAD_FILTER_ce0;
wire   [31:0] GRAD_FILTER_q0;
wire   [8:0] r_fu_283_p2;
reg   [8:0] r_reg_425;
wire    ap_CS_fsm_state2;
wire   [0:0] and_ln80_fu_301_p2;
reg   [0:0] and_ln80_reg_430;
wire   [0:0] icmp_ln72_fu_277_p2;
wire   [0:0] icmp_ln90_fu_307_p2;
reg   [0:0] icmp_ln90_reg_434;
wire   [19:0] tmp_3_fu_319_p3;
reg   [19:0] tmp_3_reg_438;
wire   [10:0] c_fu_333_p2;
reg   [10:0] c_reg_447;
wire    ap_CS_fsm_state3;
wire   [19:0] zext_ln88_fu_355_p1;
reg   [19:0] zext_ln88_reg_452;
wire   [0:0] icmp_ln74_fu_327_p2;
reg   [18:0] filt_grad_x_addr_1_reg_457;
reg   [18:0] filt_grad_y_addr_1_reg_462;
reg   [18:0] filt_grad_z_addr_1_reg_467;
wire   [2:0] i_fu_381_p2;
reg   [2:0] i_reg_475;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln82_fu_375_p2;
reg   [31:0] gradient_x_load_reg_500;
wire    ap_CS_fsm_state5;
reg   [31:0] GRAD_FILTER_load_reg_505;
reg   [31:0] gradient_y_load_reg_512;
reg   [31:0] gradient_z_load_reg_517;
wire   [31:0] grp_fu_261_p2;
reg   [31:0] tmp_reg_522;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_265_p2;
reg   [31:0] tmp_s_reg_527;
wire   [31:0] grp_fu_269_p2;
reg   [31:0] tmp_1_reg_532;
wire   [31:0] grp_fu_246_p2;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_251_p2;
wire   [31:0] grp_fu_256_p2;
reg   [8:0] r_0_reg_173;
reg   [10:0] c_0_reg_185;
reg   [31:0] acc_2_0_reg_196;
reg   [31:0] acc_1_0_reg_209;
reg   [31:0] acc_0_0_reg_222;
reg   [2:0] i_0_reg_235;
wire  signed [63:0] sext_ln92_fu_348_p1;
wire  signed [63:0] sext_ln88_fu_364_p1;
wire   [63:0] zext_ln84_1_fu_410_p1;
wire   [63:0] zext_ln84_2_fu_417_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln80_fu_289_p2;
wire   [0:0] icmp_ln80_1_fu_295_p2;
wire   [9:0] zext_ln72_fu_273_p1;
wire   [9:0] add_ln92_fu_313_p2;
wire   [19:0] zext_ln92_fu_339_p1;
wire   [19:0] add_ln92_1_fu_343_p2;
wire   [19:0] add_ln88_fu_359_p2;
wire   [8:0] zext_ln82_fu_371_p1;
wire   [8:0] sub_ln84_fu_387_p2;
wire   [18:0] tmp_4_fu_393_p3;
wire   [19:0] zext_ln84_fu_401_p1;
wire   [19:0] add_ln84_fu_405_p2;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

gradient_weight_y_GRAD_FILTER #(
    .DataWidth( 32 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
GRAD_FILTER_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(GRAD_FILTER_address0),
    .ce0(GRAD_FILTER_ce0),
    .q0(GRAD_FILTER_q0)
);

optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(acc_0_0_reg_222),
    .din1(tmp_reg_522),
    .ce(1'b1),
    .dout(grp_fu_246_p2)
);

optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(acc_1_0_reg_209),
    .din1(tmp_s_reg_527),
    .ce(1'b1),
    .dout(grp_fu_251_p2)
);

optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(acc_2_0_reg_196),
    .din1(tmp_1_reg_532),
    .ce(1'b1),
    .dout(grp_fu_256_p2)
);

optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(gradient_x_load_reg_500),
    .din1(GRAD_FILTER_load_reg_505),
    .ce(1'b1),
    .dout(grp_fu_261_p2)
);

optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(gradient_y_load_reg_512),
    .din1(GRAD_FILTER_load_reg_505),
    .ce(1'b1),
    .dout(grp_fu_265_p2)
);

optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(gradient_z_load_reg_517),
    .din1(GRAD_FILTER_load_reg_505),
    .ce(1'b1),
    .dout(grp_fu_269_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_327_p2 == 1'd0) & (1'd1 == and_ln80_reg_430) & (1'b1 == ap_CS_fsm_state3))) begin
        acc_0_0_reg_222 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        acc_0_0_reg_222 <= grp_fu_246_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_327_p2 == 1'd0) & (1'd1 == and_ln80_reg_430) & (1'b1 == ap_CS_fsm_state3))) begin
        acc_1_0_reg_209 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        acc_1_0_reg_209 <= grp_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_327_p2 == 1'd0) & (1'd1 == and_ln80_reg_430) & (1'b1 == ap_CS_fsm_state3))) begin
        acc_2_0_reg_196 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        acc_2_0_reg_196 <= grp_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_fu_277_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_185 <= 11'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & ((1'd0 == and_ln80_reg_430) | (icmp_ln82_fu_375_p2 == 1'd1)))) begin
        c_0_reg_185 <= c_reg_447;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_327_p2 == 1'd0) & (1'd1 == and_ln80_reg_430) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_235 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        i_0_reg_235 <= i_reg_475;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln74_fu_327_p2 == 1'd1))) begin
        r_0_reg_173 <= r_reg_425;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_173 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        GRAD_FILTER_load_reg_505 <= GRAD_FILTER_q0;
        gradient_x_load_reg_500 <= gradient_x_q0;
        gradient_y_load_reg_512 <= gradient_y_q0;
        gradient_z_load_reg_517 <= gradient_z_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_fu_277_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        and_ln80_reg_430 <= and_ln80_fu_301_p2;
        icmp_ln90_reg_434 <= icmp_ln90_fu_307_p2;
        tmp_3_reg_438[19 : 10] <= tmp_3_fu_319_p3[19 : 10];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_447 <= c_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_327_p2 == 1'd0) & (1'd1 == and_ln80_reg_430) & (1'b1 == ap_CS_fsm_state3))) begin
        filt_grad_x_addr_1_reg_457 <= sext_ln88_fu_364_p1;
        filt_grad_y_addr_1_reg_462 <= sext_ln88_fu_364_p1;
        filt_grad_z_addr_1_reg_467 <= sext_ln88_fu_364_p1;
        zext_ln88_reg_452[10 : 0] <= zext_ln88_fu_355_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln80_reg_430) & (1'b1 == ap_CS_fsm_state4))) begin
        i_reg_475 <= i_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_425 <= r_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_1_reg_532 <= grp_fu_269_p2;
        tmp_reg_522 <= grp_fu_261_p2;
        tmp_s_reg_527 <= grp_fu_265_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        GRAD_FILTER_ce0 = 1'b1;
    end else begin
        GRAD_FILTER_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln72_fu_277_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln72_fu_277_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        filt_grad_x_address0 = filt_grad_x_addr_1_reg_457;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        filt_grad_x_address0 = sext_ln92_fu_348_p1;
    end else begin
        filt_grad_x_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        filt_grad_x_ce0 = 1'b1;
    end else begin
        filt_grad_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        filt_grad_x_d0 = acc_0_0_reg_222;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        filt_grad_x_d0 = 32'd0;
    end else begin
        filt_grad_x_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln80_reg_430) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln82_fu_375_p2 == 1'd1)) | ((icmp_ln90_reg_434 == 1'd1) & (icmp_ln74_fu_327_p2 == 1'd0) & (1'd0 == and_ln80_reg_430) & (1'b1 == ap_CS_fsm_state3)))) begin
        filt_grad_x_we0 = 1'b1;
    end else begin
        filt_grad_x_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        filt_grad_y_address0 = filt_grad_y_addr_1_reg_462;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        filt_grad_y_address0 = sext_ln92_fu_348_p1;
    end else begin
        filt_grad_y_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        filt_grad_y_ce0 = 1'b1;
    end else begin
        filt_grad_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        filt_grad_y_d0 = acc_1_0_reg_209;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        filt_grad_y_d0 = 32'd0;
    end else begin
        filt_grad_y_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln80_reg_430) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln82_fu_375_p2 == 1'd1)) | ((icmp_ln90_reg_434 == 1'd1) & (icmp_ln74_fu_327_p2 == 1'd0) & (1'd0 == and_ln80_reg_430) & (1'b1 == ap_CS_fsm_state3)))) begin
        filt_grad_y_we0 = 1'b1;
    end else begin
        filt_grad_y_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        filt_grad_z_address0 = filt_grad_z_addr_1_reg_467;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        filt_grad_z_address0 = sext_ln92_fu_348_p1;
    end else begin
        filt_grad_z_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        filt_grad_z_ce0 = 1'b1;
    end else begin
        filt_grad_z_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        filt_grad_z_d0 = acc_2_0_reg_196;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        filt_grad_z_d0 = 32'd0;
    end else begin
        filt_grad_z_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln80_reg_430) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln82_fu_375_p2 == 1'd1)) | ((icmp_ln90_reg_434 == 1'd1) & (icmp_ln74_fu_327_p2 == 1'd0) & (1'd0 == and_ln80_reg_430) & (1'b1 == ap_CS_fsm_state3)))) begin
        filt_grad_z_we0 = 1'b1;
    end else begin
        filt_grad_z_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        gradient_x_ce0 = 1'b1;
    end else begin
        gradient_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        gradient_y_ce0 = 1'b1;
    end else begin
        gradient_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        gradient_z_ce0 = 1'b1;
    end else begin
        gradient_z_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln72_fu_277_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln74_fu_327_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ((1'd0 == and_ln80_reg_430) | (icmp_ln82_fu_375_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign GRAD_FILTER_address0 = zext_ln84_2_fu_417_p1;

assign add_ln84_fu_405_p2 = (zext_ln88_reg_452 + zext_ln84_fu_401_p1);

assign add_ln88_fu_359_p2 = (tmp_3_reg_438 + zext_ln88_fu_355_p1);

assign add_ln92_1_fu_343_p2 = (tmp_3_reg_438 + zext_ln92_fu_339_p1);

assign add_ln92_fu_313_p2 = ($signed(zext_ln72_fu_273_p1) + $signed(10'd1021));

assign and_ln80_fu_301_p2 = (icmp_ln80_fu_289_p2 & icmp_ln80_1_fu_295_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_fu_333_p2 = (c_0_reg_185 + 11'd1);

assign gradient_x_address0 = zext_ln84_1_fu_410_p1;

assign gradient_y_address0 = zext_ln84_1_fu_410_p1;

assign gradient_z_address0 = zext_ln84_1_fu_410_p1;

assign i_fu_381_p2 = (i_0_reg_235 + 3'd1);

assign icmp_ln72_fu_277_p2 = ((r_0_reg_173 == 9'd439) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_327_p2 = ((c_0_reg_185 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln80_1_fu_295_p2 = ((r_0_reg_173 < 9'd436) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_289_p2 = ((r_0_reg_173 > 9'd5) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_375_p2 = ((i_0_reg_235 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_307_p2 = ((r_0_reg_173 > 9'd2) ? 1'b1 : 1'b0);

assign r_fu_283_p2 = (r_0_reg_173 + 9'd1);

assign sext_ln88_fu_364_p1 = $signed(add_ln88_fu_359_p2);

assign sext_ln92_fu_348_p1 = $signed(add_ln92_1_fu_343_p2);

assign sub_ln84_fu_387_p2 = (r_0_reg_173 - zext_ln82_fu_371_p1);

assign tmp_3_fu_319_p3 = {{add_ln92_fu_313_p2}, {10'd0}};

assign tmp_4_fu_393_p3 = {{sub_ln84_fu_387_p2}, {10'd0}};

assign zext_ln72_fu_273_p1 = r_0_reg_173;

assign zext_ln82_fu_371_p1 = i_0_reg_235;

assign zext_ln84_1_fu_410_p1 = add_ln84_fu_405_p2;

assign zext_ln84_2_fu_417_p1 = i_0_reg_235;

assign zext_ln84_fu_401_p1 = tmp_4_fu_393_p3;

assign zext_ln88_fu_355_p1 = c_0_reg_185;

assign zext_ln92_fu_339_p1 = c_0_reg_185;

always @ (posedge ap_clk) begin
    tmp_3_reg_438[9:0] <= 10'b0000000000;
    zext_ln88_reg_452[19:11] <= 9'b000000000;
end

endmodule //gradient_weight_y
