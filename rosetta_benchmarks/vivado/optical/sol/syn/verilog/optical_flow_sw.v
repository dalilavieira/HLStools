// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="optical_flow_sw,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.136900,HLS_SYN_LAT=180820561,HLS_SYN_TPT=none,HLS_SYN_MEM=30720,HLS_SYN_DSP=88,HLS_SYN_FF=11561,HLS_SYN_LUT=14811,HLS_VERSION=2019_1}" *)

module optical_flow_sw (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        frame0_address0,
        frame0_ce0,
        frame0_q0,
        frame1_address0,
        frame1_ce0,
        frame1_q0,
        frame2_address0,
        frame2_ce0,
        frame2_q0,
        frame2_address1,
        frame2_ce1,
        frame2_q1,
        frame3_address0,
        frame3_ce0,
        frame3_q0,
        frame4_address0,
        frame4_ce0,
        frame4_q0,
        outputs_x_address0,
        outputs_x_ce0,
        outputs_x_we0,
        outputs_x_d0,
        outputs_y_address0,
        outputs_y_ce0,
        outputs_y_we0,
        outputs_y_d0
);

parameter    ap_ST_fsm_state1 = 53'd1;
parameter    ap_ST_fsm_state2 = 53'd2;
parameter    ap_ST_fsm_state3 = 53'd4;
parameter    ap_ST_fsm_state4 = 53'd8;
parameter    ap_ST_fsm_state5 = 53'd16;
parameter    ap_ST_fsm_state6 = 53'd32;
parameter    ap_ST_fsm_state7 = 53'd64;
parameter    ap_ST_fsm_state8 = 53'd128;
parameter    ap_ST_fsm_state9 = 53'd256;
parameter    ap_ST_fsm_state10 = 53'd512;
parameter    ap_ST_fsm_state11 = 53'd1024;
parameter    ap_ST_fsm_state12 = 53'd2048;
parameter    ap_ST_fsm_state13 = 53'd4096;
parameter    ap_ST_fsm_state14 = 53'd8192;
parameter    ap_ST_fsm_state15 = 53'd16384;
parameter    ap_ST_fsm_state16 = 53'd32768;
parameter    ap_ST_fsm_state17 = 53'd65536;
parameter    ap_ST_fsm_state18 = 53'd131072;
parameter    ap_ST_fsm_state19 = 53'd262144;
parameter    ap_ST_fsm_state20 = 53'd524288;
parameter    ap_ST_fsm_state21 = 53'd1048576;
parameter    ap_ST_fsm_state22 = 53'd2097152;
parameter    ap_ST_fsm_state23 = 53'd4194304;
parameter    ap_ST_fsm_state24 = 53'd8388608;
parameter    ap_ST_fsm_state25 = 53'd16777216;
parameter    ap_ST_fsm_state26 = 53'd33554432;
parameter    ap_ST_fsm_state27 = 53'd67108864;
parameter    ap_ST_fsm_state28 = 53'd134217728;
parameter    ap_ST_fsm_state29 = 53'd268435456;
parameter    ap_ST_fsm_state30 = 53'd536870912;
parameter    ap_ST_fsm_state31 = 53'd1073741824;
parameter    ap_ST_fsm_state32 = 53'd2147483648;
parameter    ap_ST_fsm_state33 = 53'd4294967296;
parameter    ap_ST_fsm_state34 = 53'd8589934592;
parameter    ap_ST_fsm_state35 = 53'd17179869184;
parameter    ap_ST_fsm_state36 = 53'd34359738368;
parameter    ap_ST_fsm_state37 = 53'd68719476736;
parameter    ap_ST_fsm_state38 = 53'd137438953472;
parameter    ap_ST_fsm_state39 = 53'd274877906944;
parameter    ap_ST_fsm_state40 = 53'd549755813888;
parameter    ap_ST_fsm_state41 = 53'd1099511627776;
parameter    ap_ST_fsm_state42 = 53'd2199023255552;
parameter    ap_ST_fsm_state43 = 53'd4398046511104;
parameter    ap_ST_fsm_state44 = 53'd8796093022208;
parameter    ap_ST_fsm_state45 = 53'd17592186044416;
parameter    ap_ST_fsm_state46 = 53'd35184372088832;
parameter    ap_ST_fsm_state47 = 53'd70368744177664;
parameter    ap_ST_fsm_state48 = 53'd140737488355328;
parameter    ap_ST_fsm_state49 = 53'd281474976710656;
parameter    ap_ST_fsm_state50 = 53'd562949953421312;
parameter    ap_ST_fsm_state51 = 53'd1125899906842624;
parameter    ap_ST_fsm_state52 = 53'd2251799813685248;
parameter    ap_ST_fsm_state53 = 53'd4503599627370496;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [18:0] frame0_address0;
output   frame0_ce0;
input  [31:0] frame0_q0;
output  [18:0] frame1_address0;
output   frame1_ce0;
input  [31:0] frame1_q0;
output  [18:0] frame2_address0;
output   frame2_ce0;
input  [31:0] frame2_q0;
output  [18:0] frame2_address1;
output   frame2_ce1;
input  [31:0] frame2_q1;
output  [18:0] frame3_address0;
output   frame3_ce0;
input  [31:0] frame3_q0;
output  [18:0] frame4_address0;
output   frame4_ce0;
input  [31:0] frame4_q0;
output  [18:0] outputs_x_address0;
output   outputs_x_ce0;
output   outputs_x_we0;
output  [31:0] outputs_x_d0;
output  [18:0] outputs_y_address0;
output   outputs_y_ce0;
output   outputs_y_we0;
output  [31:0] outputs_y_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg frame0_ce0;
reg frame1_ce0;
reg[18:0] frame2_address0;
reg frame2_ce0;
reg frame2_ce1;
reg frame3_ce0;
reg frame4_ce0;

(* fsm_encoding = "none" *) reg   [52:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [18:0] gradient_x_address0;
reg    gradient_x_ce0;
reg    gradient_x_we0;
wire   [31:0] gradient_x_q0;
reg   [18:0] gradient_y_address0;
reg    gradient_y_ce0;
reg    gradient_y_we0;
wire   [31:0] gradient_y_q0;
reg   [18:0] gradient_z_address0;
reg    gradient_z_ce0;
reg    gradient_z_we0;
wire   [31:0] gradient_z_q0;
reg   [18:0] y_filtered_x_address0;
reg    y_filtered_x_ce0;
reg    y_filtered_x_we0;
wire   [31:0] y_filtered_x_q0;
reg   [18:0] y_filtered_y_address0;
reg    y_filtered_y_ce0;
reg    y_filtered_y_we0;
wire   [31:0] y_filtered_y_q0;
reg   [18:0] y_filtered_z_address0;
reg    y_filtered_z_ce0;
reg    y_filtered_z_we0;
wire   [31:0] y_filtered_z_q0;
reg   [18:0] filtered_gradient_x_address0;
reg    filtered_gradient_x_ce0;
reg    filtered_gradient_x_we0;
wire   [31:0] filtered_gradient_x_q0;
reg   [18:0] filtered_gradient_y_address0;
reg    filtered_gradient_y_ce0;
reg    filtered_gradient_y_we0;
wire   [31:0] filtered_gradient_y_q0;
reg   [18:0] filtered_gradient_z_address0;
reg    filtered_gradient_z_ce0;
reg    filtered_gradient_z_we0;
wire   [31:0] filtered_gradient_z_q0;
reg   [21:0] out_product_val_address0;
reg    out_product_val_ce0;
reg    out_product_val_we0;
reg   [31:0] out_product_val_d0;
wire   [31:0] out_product_val_q0;
reg   [21:0] out_product_val_address1;
reg    out_product_val_ce1;
reg    out_product_val_we1;
reg   [31:0] out_product_val_d1;
reg   [21:0] tensor_y_val_address0;
reg    tensor_y_val_ce0;
reg    tensor_y_val_we0;
wire   [31:0] tensor_y_val_q0;
reg    tensor_y_val_ce1;
reg    tensor_y_val_we1;
reg   [18:0] tensor_val_0_address0;
reg    tensor_val_0_ce0;
reg    tensor_val_0_we0;
wire   [31:0] tensor_val_0_q0;
reg   [18:0] tensor_val_1_address0;
reg    tensor_val_1_ce0;
reg    tensor_val_1_we0;
wire   [31:0] tensor_val_1_q0;
reg   [18:0] tensor_val_3_address0;
reg    tensor_val_3_ce0;
reg    tensor_val_3_we0;
wire   [31:0] tensor_val_3_q0;
reg   [18:0] tensor_val_4_address0;
reg    tensor_val_4_ce0;
reg    tensor_val_4_we0;
wire   [31:0] tensor_val_4_q0;
reg   [18:0] tensor_val_5_address0;
reg    tensor_val_5_ce0;
reg    tensor_val_5_we0;
wire   [31:0] tensor_val_5_q0;
wire   [31:0] grp_fu_428_p2;
reg   [31:0] reg_457;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state25;
wire   [31:0] grp_fu_433_p2;
reg   [31:0] reg_463;
wire    ap_CS_fsm_state44;
wire   [8:0] r_fu_475_p2;
reg   [8:0] r_reg_668;
wire    ap_CS_fsm_state3;
wire   [19:0] zext_ln53_fu_489_p1;
reg   [19:0] zext_ln53_reg_673;
wire   [0:0] icmp_ln51_fu_469_p2;
wire   [10:0] c_fu_499_p2;
reg   [10:0] c_reg_681;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln55_1_fu_514_p1;
reg   [63:0] zext_ln55_1_reg_686;
wire   [0:0] icmp_ln53_fu_493_p2;
wire    ap_CS_fsm_state5;
reg   [31:0] frame0_load_reg_705;
reg   [31:0] frame1_load_reg_710;
wire    ap_CS_fsm_state6;
reg   [31:0] frame2_load_reg_720;
wire    ap_CS_fsm_state10;
reg   [31:0] frame3_load_reg_730;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state20;
reg   [31:0] frame4_load_reg_740;
wire   [31:0] bitcast_ln60_1_fu_528_p1;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_fu_452_p2;
reg   [31:0] tmp_6_i_reg_750;
wire    ap_CS_fsm_state34;
wire   [8:0] r_1_fu_539_p2;
reg   [8:0] r_1_reg_758;
wire    ap_CS_fsm_state39;
wire   [19:0] zext_ln134_fu_553_p1;
reg   [19:0] zext_ln134_reg_763;
wire   [0:0] icmp_ln132_fu_533_p2;
wire   [10:0] c_1_fu_563_p2;
reg   [10:0] c_1_reg_771;
wire    ap_CS_fsm_state40;
wire   [19:0] add_ln136_fu_573_p2;
reg   [19:0] add_ln136_reg_776;
wire   [0:0] icmp_ln134_fu_557_p2;
reg   [31:0] grad_x_reg_797;
wire    ap_CS_fsm_state41;
reg   [31:0] grad_y_reg_805;
reg   [31:0] grad_z_reg_812;
wire   [31:0] grp_fu_440_p2;
reg   [31:0] tmp_3_i1_reg_820;
wire   [22:0] sub_ln144_fu_603_p2;
reg   [22:0] sub_ln144_reg_825;
wire    ap_CS_fsm_state45;
reg   [31:0] tmp_4_i_reg_843;
reg   [31:0] tmp_5_i1_reg_848;
wire   [31:0] grp_fu_444_p2;
reg   [31:0] tmp_6_i1_reg_853;
wire   [31:0] grp_fu_448_p2;
reg   [31:0] tmp_7_i_reg_858;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    grp_flow_calc_fu_338_ap_start;
wire    grp_flow_calc_fu_338_ap_done;
wire    grp_flow_calc_fu_338_ap_idle;
wire    grp_flow_calc_fu_338_ap_ready;
wire   [18:0] grp_flow_calc_fu_338_output_x_address0;
wire    grp_flow_calc_fu_338_output_x_ce0;
wire    grp_flow_calc_fu_338_output_x_we0;
wire   [31:0] grp_flow_calc_fu_338_output_x_d0;
wire   [18:0] grp_flow_calc_fu_338_output_y_address0;
wire    grp_flow_calc_fu_338_output_y_ce0;
wire    grp_flow_calc_fu_338_output_y_we0;
wire   [31:0] grp_flow_calc_fu_338_output_y_d0;
wire   [18:0] grp_flow_calc_fu_338_tensor_val_0_address0;
wire    grp_flow_calc_fu_338_tensor_val_0_ce0;
wire   [18:0] grp_flow_calc_fu_338_tensor_val_1_address0;
wire    grp_flow_calc_fu_338_tensor_val_1_ce0;
wire   [18:0] grp_flow_calc_fu_338_tensor_val_3_address0;
wire    grp_flow_calc_fu_338_tensor_val_3_ce0;
wire   [18:0] grp_flow_calc_fu_338_tensor_val_5_address0;
wire    grp_flow_calc_fu_338_tensor_val_5_ce0;
wire   [18:0] grp_flow_calc_fu_338_tensor_val_4_address0;
wire    grp_flow_calc_fu_338_tensor_val_4_ce0;
wire    grp_gradient_xy_calc_fu_356_ap_start;
wire    grp_gradient_xy_calc_fu_356_ap_done;
wire    grp_gradient_xy_calc_fu_356_ap_idle;
wire    grp_gradient_xy_calc_fu_356_ap_ready;
wire   [18:0] grp_gradient_xy_calc_fu_356_frame_address0;
wire    grp_gradient_xy_calc_fu_356_frame_ce0;
wire   [18:0] grp_gradient_xy_calc_fu_356_frame_address1;
wire    grp_gradient_xy_calc_fu_356_frame_ce1;
wire   [18:0] grp_gradient_xy_calc_fu_356_gradient_x_address0;
wire    grp_gradient_xy_calc_fu_356_gradient_x_ce0;
wire    grp_gradient_xy_calc_fu_356_gradient_x_we0;
wire   [31:0] grp_gradient_xy_calc_fu_356_gradient_x_d0;
wire   [18:0] grp_gradient_xy_calc_fu_356_gradient_y_address0;
wire    grp_gradient_xy_calc_fu_356_gradient_y_ce0;
wire    grp_gradient_xy_calc_fu_356_gradient_y_we0;
wire   [31:0] grp_gradient_xy_calc_fu_356_gradient_y_d0;
wire    grp_gradient_weight_y_fu_368_ap_start;
wire    grp_gradient_weight_y_fu_368_ap_done;
wire    grp_gradient_weight_y_fu_368_ap_idle;
wire    grp_gradient_weight_y_fu_368_ap_ready;
wire   [18:0] grp_gradient_weight_y_fu_368_filt_grad_x_address0;
wire    grp_gradient_weight_y_fu_368_filt_grad_x_ce0;
wire    grp_gradient_weight_y_fu_368_filt_grad_x_we0;
wire   [31:0] grp_gradient_weight_y_fu_368_filt_grad_x_d0;
wire   [18:0] grp_gradient_weight_y_fu_368_filt_grad_y_address0;
wire    grp_gradient_weight_y_fu_368_filt_grad_y_ce0;
wire    grp_gradient_weight_y_fu_368_filt_grad_y_we0;
wire   [31:0] grp_gradient_weight_y_fu_368_filt_grad_y_d0;
wire   [18:0] grp_gradient_weight_y_fu_368_filt_grad_z_address0;
wire    grp_gradient_weight_y_fu_368_filt_grad_z_ce0;
wire    grp_gradient_weight_y_fu_368_filt_grad_z_we0;
wire   [31:0] grp_gradient_weight_y_fu_368_filt_grad_z_d0;
wire   [18:0] grp_gradient_weight_y_fu_368_gradient_x_address0;
wire    grp_gradient_weight_y_fu_368_gradient_x_ce0;
wire   [18:0] grp_gradient_weight_y_fu_368_gradient_y_address0;
wire    grp_gradient_weight_y_fu_368_gradient_y_ce0;
wire   [18:0] grp_gradient_weight_y_fu_368_gradient_z_address0;
wire    grp_gradient_weight_y_fu_368_gradient_z_ce0;
wire    grp_gradient_weight_x_fu_386_ap_start;
wire    grp_gradient_weight_x_fu_386_ap_done;
wire    grp_gradient_weight_x_fu_386_ap_idle;
wire    grp_gradient_weight_x_fu_386_ap_ready;
wire   [18:0] grp_gradient_weight_x_fu_386_filt_grad_x_address0;
wire    grp_gradient_weight_x_fu_386_filt_grad_x_ce0;
wire    grp_gradient_weight_x_fu_386_filt_grad_x_we0;
wire   [31:0] grp_gradient_weight_x_fu_386_filt_grad_x_d0;
wire   [18:0] grp_gradient_weight_x_fu_386_filt_grad_y_address0;
wire    grp_gradient_weight_x_fu_386_filt_grad_y_ce0;
wire    grp_gradient_weight_x_fu_386_filt_grad_y_we0;
wire   [31:0] grp_gradient_weight_x_fu_386_filt_grad_y_d0;
wire   [18:0] grp_gradient_weight_x_fu_386_filt_grad_z_address0;
wire    grp_gradient_weight_x_fu_386_filt_grad_z_ce0;
wire    grp_gradient_weight_x_fu_386_filt_grad_z_we0;
wire   [31:0] grp_gradient_weight_x_fu_386_filt_grad_z_d0;
wire   [18:0] grp_gradient_weight_x_fu_386_y_filtered_x_address0;
wire    grp_gradient_weight_x_fu_386_y_filtered_x_ce0;
wire   [18:0] grp_gradient_weight_x_fu_386_y_filtered_y_address0;
wire    grp_gradient_weight_x_fu_386_y_filtered_y_ce0;
wire   [18:0] grp_gradient_weight_x_fu_386_y_filtered_z_address0;
wire    grp_gradient_weight_x_fu_386_y_filtered_z_ce0;
wire    grp_tensor_weight_y_fu_404_ap_start;
wire    grp_tensor_weight_y_fu_404_ap_done;
wire    grp_tensor_weight_y_fu_404_ap_idle;
wire    grp_tensor_weight_y_fu_404_ap_ready;
wire   [21:0] grp_tensor_weight_y_fu_404_tensor_y_val_2_address0;
wire    grp_tensor_weight_y_fu_404_tensor_y_val_2_ce0;
wire    grp_tensor_weight_y_fu_404_tensor_y_val_2_we0;
wire   [31:0] grp_tensor_weight_y_fu_404_tensor_y_val_2_d0;
wire   [21:0] grp_tensor_weight_y_fu_404_tensor_y_val_2_address1;
wire    grp_tensor_weight_y_fu_404_tensor_y_val_2_ce1;
wire    grp_tensor_weight_y_fu_404_tensor_y_val_2_we1;
wire   [31:0] grp_tensor_weight_y_fu_404_tensor_y_val_2_d1;
wire   [21:0] grp_tensor_weight_y_fu_404_out_product_val_address0;
wire    grp_tensor_weight_y_fu_404_out_product_val_ce0;
wire    grp_tensor_weight_x_fu_412_ap_start;
wire    grp_tensor_weight_x_fu_412_ap_done;
wire    grp_tensor_weight_x_fu_412_ap_idle;
wire    grp_tensor_weight_x_fu_412_ap_ready;
wire   [18:0] grp_tensor_weight_x_fu_412_tensor_0_val_address0;
wire    grp_tensor_weight_x_fu_412_tensor_0_val_ce0;
wire    grp_tensor_weight_x_fu_412_tensor_0_val_we0;
wire   [31:0] grp_tensor_weight_x_fu_412_tensor_0_val_d0;
wire   [18:0] grp_tensor_weight_x_fu_412_tensor_1_val_address0;
wire    grp_tensor_weight_x_fu_412_tensor_1_val_ce0;
wire    grp_tensor_weight_x_fu_412_tensor_1_val_we0;
wire   [31:0] grp_tensor_weight_x_fu_412_tensor_1_val_d0;
wire   [18:0] grp_tensor_weight_x_fu_412_tensor_3_val_address0;
wire    grp_tensor_weight_x_fu_412_tensor_3_val_ce0;
wire    grp_tensor_weight_x_fu_412_tensor_3_val_we0;
wire   [31:0] grp_tensor_weight_x_fu_412_tensor_3_val_d0;
wire   [18:0] grp_tensor_weight_x_fu_412_tensor_4_val_address0;
wire    grp_tensor_weight_x_fu_412_tensor_4_val_ce0;
wire    grp_tensor_weight_x_fu_412_tensor_4_val_we0;
wire   [31:0] grp_tensor_weight_x_fu_412_tensor_4_val_d0;
wire   [18:0] grp_tensor_weight_x_fu_412_tensor_5_val_address0;
wire    grp_tensor_weight_x_fu_412_tensor_5_val_ce0;
wire    grp_tensor_weight_x_fu_412_tensor_5_val_we0;
wire   [31:0] grp_tensor_weight_x_fu_412_tensor_5_val_d0;
wire   [21:0] grp_tensor_weight_x_fu_412_tensor_y_val_address0;
wire    grp_tensor_weight_x_fu_412_tensor_y_val_ce0;
reg   [8:0] r_0_i_reg_294;
wire    ap_CS_fsm_state2;
reg   [10:0] c_0_i_reg_305;
wire    ap_CS_fsm_state35;
reg   [8:0] r_0_i7_reg_316;
wire    ap_CS_fsm_state38;
reg   [10:0] c_0_i9_reg_327;
wire    ap_CS_fsm_state48;
reg    grp_flow_calc_fu_338_ap_start_reg;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
reg    grp_gradient_xy_calc_fu_356_ap_start_reg;
reg    grp_gradient_weight_y_fu_368_ap_start_reg;
wire    ap_CS_fsm_state36;
reg    grp_gradient_weight_x_fu_386_ap_start_reg;
wire    ap_CS_fsm_state37;
reg    grp_tensor_weight_y_fu_404_ap_start_reg;
wire    ap_CS_fsm_state49;
reg    grp_tensor_weight_x_fu_412_ap_start_reg;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state51;
wire   [63:0] zext_ln136_1_fu_578_p1;
wire   [63:0] zext_ln144_1_fu_609_p1;
wire   [63:0] zext_ln144_2_fu_620_p1;
wire   [63:0] zext_ln144_3_fu_630_p1;
wire   [63:0] zext_ln144_4_fu_640_p1;
wire   [63:0] zext_ln144_5_fu_650_p1;
wire   [63:0] zext_ln144_6_fu_660_p1;
reg   [31:0] grp_fu_428_p0;
reg   [31:0] grp_fu_428_p1;
wire    ap_CS_fsm_state18;
reg   [31:0] grp_fu_433_p0;
reg   [31:0] grp_fu_433_p1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
reg   [31:0] grp_fu_440_p0;
wire    ap_CS_fsm_state26;
wire   [18:0] tmp_fu_481_p3;
wire   [19:0] zext_ln55_fu_505_p1;
wire   [19:0] add_ln55_fu_509_p2;
wire   [31:0] bitcast_ln60_fu_519_p1;
wire   [31:0] xor_ln60_fu_522_p2;
wire   [18:0] tmp_s_fu_545_p3;
wire   [19:0] zext_ln136_fu_569_p1;
wire   [20:0] tmp_11_fu_592_p3;
wire   [22:0] p_shl_cast_fu_585_p3;
wire   [22:0] zext_ln144_fu_599_p1;
wire   [22:0] or_ln144_fu_614_p2;
wire   [22:0] add_ln144_fu_625_p2;
wire   [22:0] add_ln144_1_fu_635_p2;
wire   [22:0] add_ln144_2_fu_645_p2;
wire   [22:0] add_ln144_3_fu_655_p2;
reg   [52:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 53'd1;
#0 grp_flow_calc_fu_338_ap_start_reg = 1'b0;
#0 grp_gradient_xy_calc_fu_356_ap_start_reg = 1'b0;
#0 grp_gradient_weight_y_fu_368_ap_start_reg = 1'b0;
#0 grp_gradient_weight_x_fu_386_ap_start_reg = 1'b0;
#0 grp_tensor_weight_y_fu_404_ap_start_reg = 1'b0;
#0 grp_tensor_weight_x_fu_412_ap_start_reg = 1'b0;
end

optical_flow_sw_gradient_x #(
    .DataWidth( 32 ),
    .AddressRange( 446464 ),
    .AddressWidth( 19 ))
gradient_x_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(gradient_x_address0),
    .ce0(gradient_x_ce0),
    .we0(gradient_x_we0),
    .d0(grp_gradient_xy_calc_fu_356_gradient_x_d0),
    .q0(gradient_x_q0)
);

optical_flow_sw_gradient_x #(
    .DataWidth( 32 ),
    .AddressRange( 446464 ),
    .AddressWidth( 19 ))
gradient_y_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(gradient_y_address0),
    .ce0(gradient_y_ce0),
    .we0(gradient_y_we0),
    .d0(grp_gradient_xy_calc_fu_356_gradient_y_d0),
    .q0(gradient_y_q0)
);

optical_flow_sw_gradient_x #(
    .DataWidth( 32 ),
    .AddressRange( 446464 ),
    .AddressWidth( 19 ))
gradient_z_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(gradient_z_address0),
    .ce0(gradient_z_ce0),
    .we0(gradient_z_we0),
    .d0(tmp_6_i_reg_750),
    .q0(gradient_z_q0)
);

optical_flow_sw_gradient_x #(
    .DataWidth( 32 ),
    .AddressRange( 446464 ),
    .AddressWidth( 19 ))
y_filtered_x_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_filtered_x_address0),
    .ce0(y_filtered_x_ce0),
    .we0(y_filtered_x_we0),
    .d0(grp_gradient_weight_y_fu_368_filt_grad_x_d0),
    .q0(y_filtered_x_q0)
);

optical_flow_sw_gradient_x #(
    .DataWidth( 32 ),
    .AddressRange( 446464 ),
    .AddressWidth( 19 ))
y_filtered_y_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_filtered_y_address0),
    .ce0(y_filtered_y_ce0),
    .we0(y_filtered_y_we0),
    .d0(grp_gradient_weight_y_fu_368_filt_grad_y_d0),
    .q0(y_filtered_y_q0)
);

optical_flow_sw_gradient_x #(
    .DataWidth( 32 ),
    .AddressRange( 446464 ),
    .AddressWidth( 19 ))
y_filtered_z_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_filtered_z_address0),
    .ce0(y_filtered_z_ce0),
    .we0(y_filtered_z_we0),
    .d0(grp_gradient_weight_y_fu_368_filt_grad_z_d0),
    .q0(y_filtered_z_q0)
);

optical_flow_sw_gradient_x #(
    .DataWidth( 32 ),
    .AddressRange( 446464 ),
    .AddressWidth( 19 ))
filtered_gradient_x_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(filtered_gradient_x_address0),
    .ce0(filtered_gradient_x_ce0),
    .we0(filtered_gradient_x_we0),
    .d0(grp_gradient_weight_x_fu_386_filt_grad_x_d0),
    .q0(filtered_gradient_x_q0)
);

optical_flow_sw_gradient_x #(
    .DataWidth( 32 ),
    .AddressRange( 446464 ),
    .AddressWidth( 19 ))
filtered_gradient_y_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(filtered_gradient_y_address0),
    .ce0(filtered_gradient_y_ce0),
    .we0(filtered_gradient_y_we0),
    .d0(grp_gradient_weight_x_fu_386_filt_grad_y_d0),
    .q0(filtered_gradient_y_q0)
);

optical_flow_sw_gradient_x #(
    .DataWidth( 32 ),
    .AddressRange( 446464 ),
    .AddressWidth( 19 ))
filtered_gradient_z_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(filtered_gradient_z_address0),
    .ce0(filtered_gradient_z_ce0),
    .we0(filtered_gradient_z_we0),
    .d0(grp_gradient_weight_x_fu_386_filt_grad_z_d0),
    .q0(filtered_gradient_z_q0)
);

optical_flow_sw_out_product_val #(
    .DataWidth( 32 ),
    .AddressRange( 2678784 ),
    .AddressWidth( 22 ))
out_product_val_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(out_product_val_address0),
    .ce0(out_product_val_ce0),
    .we0(out_product_val_we0),
    .d0(out_product_val_d0),
    .q0(out_product_val_q0),
    .address1(out_product_val_address1),
    .ce1(out_product_val_ce1),
    .we1(out_product_val_we1),
    .d1(out_product_val_d1)
);

optical_flow_sw_out_product_val #(
    .DataWidth( 32 ),
    .AddressRange( 2678784 ),
    .AddressWidth( 22 ))
tensor_y_val_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tensor_y_val_address0),
    .ce0(tensor_y_val_ce0),
    .we0(tensor_y_val_we0),
    .d0(grp_tensor_weight_y_fu_404_tensor_y_val_2_d0),
    .q0(tensor_y_val_q0),
    .address1(grp_tensor_weight_y_fu_404_tensor_y_val_2_address1),
    .ce1(tensor_y_val_ce1),
    .we1(tensor_y_val_we1),
    .d1(grp_tensor_weight_y_fu_404_tensor_y_val_2_d1)
);

optical_flow_sw_gradient_x #(
    .DataWidth( 32 ),
    .AddressRange( 446464 ),
    .AddressWidth( 19 ))
tensor_val_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tensor_val_0_address0),
    .ce0(tensor_val_0_ce0),
    .we0(tensor_val_0_we0),
    .d0(grp_tensor_weight_x_fu_412_tensor_0_val_d0),
    .q0(tensor_val_0_q0)
);

optical_flow_sw_gradient_x #(
    .DataWidth( 32 ),
    .AddressRange( 446464 ),
    .AddressWidth( 19 ))
tensor_val_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tensor_val_1_address0),
    .ce0(tensor_val_1_ce0),
    .we0(tensor_val_1_we0),
    .d0(grp_tensor_weight_x_fu_412_tensor_1_val_d0),
    .q0(tensor_val_1_q0)
);

optical_flow_sw_gradient_x #(
    .DataWidth( 32 ),
    .AddressRange( 446464 ),
    .AddressWidth( 19 ))
tensor_val_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tensor_val_3_address0),
    .ce0(tensor_val_3_ce0),
    .we0(tensor_val_3_we0),
    .d0(grp_tensor_weight_x_fu_412_tensor_3_val_d0),
    .q0(tensor_val_3_q0)
);

optical_flow_sw_gradient_x #(
    .DataWidth( 32 ),
    .AddressRange( 446464 ),
    .AddressWidth( 19 ))
tensor_val_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tensor_val_4_address0),
    .ce0(tensor_val_4_ce0),
    .we0(tensor_val_4_we0),
    .d0(grp_tensor_weight_x_fu_412_tensor_4_val_d0),
    .q0(tensor_val_4_q0)
);

optical_flow_sw_gradient_x #(
    .DataWidth( 32 ),
    .AddressRange( 446464 ),
    .AddressWidth( 19 ))
tensor_val_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tensor_val_5_address0),
    .ce0(tensor_val_5_ce0),
    .we0(tensor_val_5_we0),
    .d0(grp_tensor_weight_x_fu_412_tensor_5_val_d0),
    .q0(tensor_val_5_q0)
);

flow_calc grp_flow_calc_fu_338(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_flow_calc_fu_338_ap_start),
    .ap_done(grp_flow_calc_fu_338_ap_done),
    .ap_idle(grp_flow_calc_fu_338_ap_idle),
    .ap_ready(grp_flow_calc_fu_338_ap_ready),
    .output_x_address0(grp_flow_calc_fu_338_output_x_address0),
    .output_x_ce0(grp_flow_calc_fu_338_output_x_ce0),
    .output_x_we0(grp_flow_calc_fu_338_output_x_we0),
    .output_x_d0(grp_flow_calc_fu_338_output_x_d0),
    .output_y_address0(grp_flow_calc_fu_338_output_y_address0),
    .output_y_ce0(grp_flow_calc_fu_338_output_y_ce0),
    .output_y_we0(grp_flow_calc_fu_338_output_y_we0),
    .output_y_d0(grp_flow_calc_fu_338_output_y_d0),
    .tensor_val_0_address0(grp_flow_calc_fu_338_tensor_val_0_address0),
    .tensor_val_0_ce0(grp_flow_calc_fu_338_tensor_val_0_ce0),
    .tensor_val_0_q0(tensor_val_0_q0),
    .tensor_val_1_address0(grp_flow_calc_fu_338_tensor_val_1_address0),
    .tensor_val_1_ce0(grp_flow_calc_fu_338_tensor_val_1_ce0),
    .tensor_val_1_q0(tensor_val_1_q0),
    .tensor_val_3_address0(grp_flow_calc_fu_338_tensor_val_3_address0),
    .tensor_val_3_ce0(grp_flow_calc_fu_338_tensor_val_3_ce0),
    .tensor_val_3_q0(tensor_val_3_q0),
    .tensor_val_5_address0(grp_flow_calc_fu_338_tensor_val_5_address0),
    .tensor_val_5_ce0(grp_flow_calc_fu_338_tensor_val_5_ce0),
    .tensor_val_5_q0(tensor_val_5_q0),
    .tensor_val_4_address0(grp_flow_calc_fu_338_tensor_val_4_address0),
    .tensor_val_4_ce0(grp_flow_calc_fu_338_tensor_val_4_ce0),
    .tensor_val_4_q0(tensor_val_4_q0)
);

gradient_xy_calc grp_gradient_xy_calc_fu_356(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_gradient_xy_calc_fu_356_ap_start),
    .ap_done(grp_gradient_xy_calc_fu_356_ap_done),
    .ap_idle(grp_gradient_xy_calc_fu_356_ap_idle),
    .ap_ready(grp_gradient_xy_calc_fu_356_ap_ready),
    .frame_address0(grp_gradient_xy_calc_fu_356_frame_address0),
    .frame_ce0(grp_gradient_xy_calc_fu_356_frame_ce0),
    .frame_q0(frame2_q0),
    .frame_address1(grp_gradient_xy_calc_fu_356_frame_address1),
    .frame_ce1(grp_gradient_xy_calc_fu_356_frame_ce1),
    .frame_q1(frame2_q1),
    .gradient_x_address0(grp_gradient_xy_calc_fu_356_gradient_x_address0),
    .gradient_x_ce0(grp_gradient_xy_calc_fu_356_gradient_x_ce0),
    .gradient_x_we0(grp_gradient_xy_calc_fu_356_gradient_x_we0),
    .gradient_x_d0(grp_gradient_xy_calc_fu_356_gradient_x_d0),
    .gradient_y_address0(grp_gradient_xy_calc_fu_356_gradient_y_address0),
    .gradient_y_ce0(grp_gradient_xy_calc_fu_356_gradient_y_ce0),
    .gradient_y_we0(grp_gradient_xy_calc_fu_356_gradient_y_we0),
    .gradient_y_d0(grp_gradient_xy_calc_fu_356_gradient_y_d0)
);

gradient_weight_y grp_gradient_weight_y_fu_368(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_gradient_weight_y_fu_368_ap_start),
    .ap_done(grp_gradient_weight_y_fu_368_ap_done),
    .ap_idle(grp_gradient_weight_y_fu_368_ap_idle),
    .ap_ready(grp_gradient_weight_y_fu_368_ap_ready),
    .filt_grad_x_address0(grp_gradient_weight_y_fu_368_filt_grad_x_address0),
    .filt_grad_x_ce0(grp_gradient_weight_y_fu_368_filt_grad_x_ce0),
    .filt_grad_x_we0(grp_gradient_weight_y_fu_368_filt_grad_x_we0),
    .filt_grad_x_d0(grp_gradient_weight_y_fu_368_filt_grad_x_d0),
    .filt_grad_y_address0(grp_gradient_weight_y_fu_368_filt_grad_y_address0),
    .filt_grad_y_ce0(grp_gradient_weight_y_fu_368_filt_grad_y_ce0),
    .filt_grad_y_we0(grp_gradient_weight_y_fu_368_filt_grad_y_we0),
    .filt_grad_y_d0(grp_gradient_weight_y_fu_368_filt_grad_y_d0),
    .filt_grad_z_address0(grp_gradient_weight_y_fu_368_filt_grad_z_address0),
    .filt_grad_z_ce0(grp_gradient_weight_y_fu_368_filt_grad_z_ce0),
    .filt_grad_z_we0(grp_gradient_weight_y_fu_368_filt_grad_z_we0),
    .filt_grad_z_d0(grp_gradient_weight_y_fu_368_filt_grad_z_d0),
    .gradient_x_address0(grp_gradient_weight_y_fu_368_gradient_x_address0),
    .gradient_x_ce0(grp_gradient_weight_y_fu_368_gradient_x_ce0),
    .gradient_x_q0(gradient_x_q0),
    .gradient_y_address0(grp_gradient_weight_y_fu_368_gradient_y_address0),
    .gradient_y_ce0(grp_gradient_weight_y_fu_368_gradient_y_ce0),
    .gradient_y_q0(gradient_y_q0),
    .gradient_z_address0(grp_gradient_weight_y_fu_368_gradient_z_address0),
    .gradient_z_ce0(grp_gradient_weight_y_fu_368_gradient_z_ce0),
    .gradient_z_q0(gradient_z_q0)
);

gradient_weight_x grp_gradient_weight_x_fu_386(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_gradient_weight_x_fu_386_ap_start),
    .ap_done(grp_gradient_weight_x_fu_386_ap_done),
    .ap_idle(grp_gradient_weight_x_fu_386_ap_idle),
    .ap_ready(grp_gradient_weight_x_fu_386_ap_ready),
    .filt_grad_x_address0(grp_gradient_weight_x_fu_386_filt_grad_x_address0),
    .filt_grad_x_ce0(grp_gradient_weight_x_fu_386_filt_grad_x_ce0),
    .filt_grad_x_we0(grp_gradient_weight_x_fu_386_filt_grad_x_we0),
    .filt_grad_x_d0(grp_gradient_weight_x_fu_386_filt_grad_x_d0),
    .filt_grad_y_address0(grp_gradient_weight_x_fu_386_filt_grad_y_address0),
    .filt_grad_y_ce0(grp_gradient_weight_x_fu_386_filt_grad_y_ce0),
    .filt_grad_y_we0(grp_gradient_weight_x_fu_386_filt_grad_y_we0),
    .filt_grad_y_d0(grp_gradient_weight_x_fu_386_filt_grad_y_d0),
    .filt_grad_z_address0(grp_gradient_weight_x_fu_386_filt_grad_z_address0),
    .filt_grad_z_ce0(grp_gradient_weight_x_fu_386_filt_grad_z_ce0),
    .filt_grad_z_we0(grp_gradient_weight_x_fu_386_filt_grad_z_we0),
    .filt_grad_z_d0(grp_gradient_weight_x_fu_386_filt_grad_z_d0),
    .y_filtered_x_address0(grp_gradient_weight_x_fu_386_y_filtered_x_address0),
    .y_filtered_x_ce0(grp_gradient_weight_x_fu_386_y_filtered_x_ce0),
    .y_filtered_x_q0(y_filtered_x_q0),
    .y_filtered_y_address0(grp_gradient_weight_x_fu_386_y_filtered_y_address0),
    .y_filtered_y_ce0(grp_gradient_weight_x_fu_386_y_filtered_y_ce0),
    .y_filtered_y_q0(y_filtered_y_q0),
    .y_filtered_z_address0(grp_gradient_weight_x_fu_386_y_filtered_z_address0),
    .y_filtered_z_ce0(grp_gradient_weight_x_fu_386_y_filtered_z_ce0),
    .y_filtered_z_q0(y_filtered_z_q0)
);

tensor_weight_y grp_tensor_weight_y_fu_404(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_tensor_weight_y_fu_404_ap_start),
    .ap_done(grp_tensor_weight_y_fu_404_ap_done),
    .ap_idle(grp_tensor_weight_y_fu_404_ap_idle),
    .ap_ready(grp_tensor_weight_y_fu_404_ap_ready),
    .tensor_y_val_2_address0(grp_tensor_weight_y_fu_404_tensor_y_val_2_address0),
    .tensor_y_val_2_ce0(grp_tensor_weight_y_fu_404_tensor_y_val_2_ce0),
    .tensor_y_val_2_we0(grp_tensor_weight_y_fu_404_tensor_y_val_2_we0),
    .tensor_y_val_2_d0(grp_tensor_weight_y_fu_404_tensor_y_val_2_d0),
    .tensor_y_val_2_address1(grp_tensor_weight_y_fu_404_tensor_y_val_2_address1),
    .tensor_y_val_2_ce1(grp_tensor_weight_y_fu_404_tensor_y_val_2_ce1),
    .tensor_y_val_2_we1(grp_tensor_weight_y_fu_404_tensor_y_val_2_we1),
    .tensor_y_val_2_d1(grp_tensor_weight_y_fu_404_tensor_y_val_2_d1),
    .out_product_val_address0(grp_tensor_weight_y_fu_404_out_product_val_address0),
    .out_product_val_ce0(grp_tensor_weight_y_fu_404_out_product_val_ce0),
    .out_product_val_q0(out_product_val_q0)
);

tensor_weight_x grp_tensor_weight_x_fu_412(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_tensor_weight_x_fu_412_ap_start),
    .ap_done(grp_tensor_weight_x_fu_412_ap_done),
    .ap_idle(grp_tensor_weight_x_fu_412_ap_idle),
    .ap_ready(grp_tensor_weight_x_fu_412_ap_ready),
    .tensor_0_val_address0(grp_tensor_weight_x_fu_412_tensor_0_val_address0),
    .tensor_0_val_ce0(grp_tensor_weight_x_fu_412_tensor_0_val_ce0),
    .tensor_0_val_we0(grp_tensor_weight_x_fu_412_tensor_0_val_we0),
    .tensor_0_val_d0(grp_tensor_weight_x_fu_412_tensor_0_val_d0),
    .tensor_1_val_address0(grp_tensor_weight_x_fu_412_tensor_1_val_address0),
    .tensor_1_val_ce0(grp_tensor_weight_x_fu_412_tensor_1_val_ce0),
    .tensor_1_val_we0(grp_tensor_weight_x_fu_412_tensor_1_val_we0),
    .tensor_1_val_d0(grp_tensor_weight_x_fu_412_tensor_1_val_d0),
    .tensor_3_val_address0(grp_tensor_weight_x_fu_412_tensor_3_val_address0),
    .tensor_3_val_ce0(grp_tensor_weight_x_fu_412_tensor_3_val_ce0),
    .tensor_3_val_we0(grp_tensor_weight_x_fu_412_tensor_3_val_we0),
    .tensor_3_val_d0(grp_tensor_weight_x_fu_412_tensor_3_val_d0),
    .tensor_4_val_address0(grp_tensor_weight_x_fu_412_tensor_4_val_address0),
    .tensor_4_val_ce0(grp_tensor_weight_x_fu_412_tensor_4_val_ce0),
    .tensor_4_val_we0(grp_tensor_weight_x_fu_412_tensor_4_val_we0),
    .tensor_4_val_d0(grp_tensor_weight_x_fu_412_tensor_4_val_d0),
    .tensor_5_val_address0(grp_tensor_weight_x_fu_412_tensor_5_val_address0),
    .tensor_5_val_ce0(grp_tensor_weight_x_fu_412_tensor_5_val_ce0),
    .tensor_5_val_we0(grp_tensor_weight_x_fu_412_tensor_5_val_we0),
    .tensor_5_val_d0(grp_tensor_weight_x_fu_412_tensor_5_val_d0),
    .tensor_y_val_address0(grp_tensor_weight_x_fu_412_tensor_y_val_address0),
    .tensor_y_val_ce0(grp_tensor_weight_x_fu_412_tensor_y_val_ce0),
    .tensor_y_val_q0(tensor_y_val_q0)
);

optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U73(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_428_p0),
    .din1(grp_fu_428_p1),
    .ce(1'b1),
    .dout(grp_fu_428_p2)
);

optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U74(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_433_p0),
    .din1(grp_fu_433_p1),
    .ce(1'b1),
    .dout(grp_fu_433_p2)
);

optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U75(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_440_p0),
    .din1(grad_y_reg_805),
    .ce(1'b1),
    .dout(grp_fu_440_p2)
);

optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U76(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grad_x_reg_797),
    .din1(grad_z_reg_812),
    .ce(1'b1),
    .dout(grp_fu_444_p2)
);

optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U77(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grad_y_reg_805),
    .din1(grad_z_reg_812),
    .ce(1'b1),
    .dout(grp_fu_448_p2)
);

optical_flow_sw_fdiv_32ns_32ns_32_9_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fdiv_32ns_32ns_32_9_1_U78(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_457),
    .din1(32'd1094713344),
    .ce(1'b1),
    .dout(grp_fu_452_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_flow_calc_fu_338_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state52)) begin
            grp_flow_calc_fu_338_ap_start_reg <= 1'b1;
        end else if ((grp_flow_calc_fu_338_ap_ready == 1'b1)) begin
            grp_flow_calc_fu_338_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_gradient_weight_x_fu_386_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state37)) begin
            grp_gradient_weight_x_fu_386_ap_start_reg <= 1'b1;
        end else if ((grp_gradient_weight_x_fu_386_ap_ready == 1'b1)) begin
            grp_gradient_weight_x_fu_386_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_gradient_weight_y_fu_368_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln51_fu_469_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_gradient_weight_y_fu_368_ap_start_reg <= 1'b1;
        end else if ((grp_gradient_weight_y_fu_368_ap_ready == 1'b1)) begin
            grp_gradient_weight_y_fu_368_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_gradient_xy_calc_fu_356_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_gradient_xy_calc_fu_356_ap_start_reg <= 1'b1;
        end else if ((grp_gradient_xy_calc_fu_356_ap_ready == 1'b1)) begin
            grp_gradient_xy_calc_fu_356_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_tensor_weight_x_fu_412_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state50)) begin
            grp_tensor_weight_x_fu_412_ap_start_reg <= 1'b1;
        end else if ((grp_tensor_weight_x_fu_412_ap_ready == 1'b1)) begin
            grp_tensor_weight_x_fu_412_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_tensor_weight_y_fu_404_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln132_fu_533_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
            grp_tensor_weight_y_fu_404_ap_start_reg <= 1'b1;
        end else if ((grp_tensor_weight_y_fu_404_ap_ready == 1'b1)) begin
            grp_tensor_weight_y_fu_404_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln132_fu_533_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state39))) begin
        c_0_i9_reg_327 <= 11'd0;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        c_0_i9_reg_327 <= c_1_reg_771;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_i_reg_305 <= 11'd0;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        c_0_i_reg_305 <= c_reg_681;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln134_fu_557_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40))) begin
        r_0_i7_reg_316 <= r_1_reg_758;
    end else if (((grp_gradient_weight_x_fu_386_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        r_0_i7_reg_316 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_493_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        r_0_i_reg_294 <= r_reg_668;
    end else if (((grp_gradient_xy_calc_fu_356_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_i_reg_294 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln134_fu_557_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state40))) begin
        add_ln136_reg_776 <= add_ln136_fu_573_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        c_1_reg_771 <= c_1_fu_563_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_681 <= c_fu_499_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        frame0_load_reg_705 <= frame0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        frame1_load_reg_710 <= frame1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        frame2_load_reg_720 <= frame2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        frame3_load_reg_730 <= frame3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        frame4_load_reg_740 <= frame4_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grad_x_reg_797 <= filtered_gradient_x_q0;
        grad_y_reg_805 <= filtered_gradient_y_q0;
        grad_z_reg_812 <= filtered_gradient_z_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        r_1_reg_758 <= r_1_fu_539_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        r_reg_668 <= r_fu_475_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_457 <= grp_fu_428_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_463 <= grp_fu_433_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        sub_ln144_reg_825[22 : 1] <= sub_ln144_fu_603_p2[22 : 1];
        tmp_4_i_reg_843 <= grp_fu_433_p2;
        tmp_5_i1_reg_848 <= grp_fu_440_p2;
        tmp_6_i1_reg_853 <= grp_fu_444_p2;
        tmp_7_i_reg_858 <= grp_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        tmp_3_i1_reg_820 <= grp_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        tmp_6_i_reg_750 <= grp_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln132_fu_533_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state39))) begin
        zext_ln134_reg_763[18 : 10] <= zext_ln134_fu_553_p1[18 : 10];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln53_reg_673[18 : 10] <= zext_ln53_fu_489_p1[18 : 10];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_493_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln55_1_reg_686[19 : 0] <= zext_ln55_1_fu_514_p1[19 : 0];
    end
end

always @ (*) begin
    if (((grp_flow_calc_fu_338_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_flow_calc_fu_338_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        filtered_gradient_x_address0 = zext_ln136_1_fu_578_p1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        filtered_gradient_x_address0 = grp_gradient_weight_x_fu_386_filt_grad_x_address0;
    end else begin
        filtered_gradient_x_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        filtered_gradient_x_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        filtered_gradient_x_ce0 = grp_gradient_weight_x_fu_386_filt_grad_x_ce0;
    end else begin
        filtered_gradient_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        filtered_gradient_x_we0 = grp_gradient_weight_x_fu_386_filt_grad_x_we0;
    end else begin
        filtered_gradient_x_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        filtered_gradient_y_address0 = zext_ln136_1_fu_578_p1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        filtered_gradient_y_address0 = grp_gradient_weight_x_fu_386_filt_grad_y_address0;
    end else begin
        filtered_gradient_y_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        filtered_gradient_y_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        filtered_gradient_y_ce0 = grp_gradient_weight_x_fu_386_filt_grad_y_ce0;
    end else begin
        filtered_gradient_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        filtered_gradient_y_we0 = grp_gradient_weight_x_fu_386_filt_grad_y_we0;
    end else begin
        filtered_gradient_y_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        filtered_gradient_z_address0 = zext_ln136_1_fu_578_p1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        filtered_gradient_z_address0 = grp_gradient_weight_x_fu_386_filt_grad_z_address0;
    end else begin
        filtered_gradient_z_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        filtered_gradient_z_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        filtered_gradient_z_ce0 = grp_gradient_weight_x_fu_386_filt_grad_z_ce0;
    end else begin
        filtered_gradient_z_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        filtered_gradient_z_we0 = grp_gradient_weight_x_fu_386_filt_grad_z_we0;
    end else begin
        filtered_gradient_z_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        frame0_ce0 = 1'b1;
    end else begin
        frame0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        frame1_ce0 = 1'b1;
    end else begin
        frame1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        frame2_address0 = zext_ln55_1_reg_686;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        frame2_address0 = grp_gradient_xy_calc_fu_356_frame_address0;
    end else begin
        frame2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        frame2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        frame2_ce0 = grp_gradient_xy_calc_fu_356_frame_ce0;
    end else begin
        frame2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        frame2_ce1 = grp_gradient_xy_calc_fu_356_frame_ce1;
    end else begin
        frame2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        frame3_ce0 = 1'b1;
    end else begin
        frame3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        frame4_ce0 = 1'b1;
    end else begin
        frame4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        gradient_x_address0 = grp_gradient_weight_y_fu_368_gradient_x_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        gradient_x_address0 = grp_gradient_xy_calc_fu_356_gradient_x_address0;
    end else begin
        gradient_x_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        gradient_x_ce0 = grp_gradient_weight_y_fu_368_gradient_x_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        gradient_x_ce0 = grp_gradient_xy_calc_fu_356_gradient_x_ce0;
    end else begin
        gradient_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gradient_x_we0 = grp_gradient_xy_calc_fu_356_gradient_x_we0;
    end else begin
        gradient_x_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        gradient_y_address0 = grp_gradient_weight_y_fu_368_gradient_y_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        gradient_y_address0 = grp_gradient_xy_calc_fu_356_gradient_y_address0;
    end else begin
        gradient_y_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        gradient_y_ce0 = grp_gradient_weight_y_fu_368_gradient_y_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        gradient_y_ce0 = grp_gradient_xy_calc_fu_356_gradient_y_ce0;
    end else begin
        gradient_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gradient_y_we0 = grp_gradient_xy_calc_fu_356_gradient_y_we0;
    end else begin
        gradient_y_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        gradient_z_address0 = zext_ln55_1_reg_686;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        gradient_z_address0 = grp_gradient_weight_y_fu_368_gradient_z_address0;
    end else begin
        gradient_z_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        gradient_z_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        gradient_z_ce0 = grp_gradient_weight_y_fu_368_gradient_z_ce0;
    end else begin
        gradient_z_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        gradient_z_we0 = 1'b1;
    end else begin
        gradient_z_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_428_p0 = reg_457;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_428_p0 = frame0_load_reg_705;
    end else begin
        grp_fu_428_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_428_p1 = bitcast_ln60_1_fu_528_p1;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_428_p1 = reg_463;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_428_p1 = 32'd0;
    end else begin
        grp_fu_428_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_433_p0 = grad_z_reg_812;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_433_p0 = grad_x_reg_797;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_433_p0 = frame3_load_reg_730;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_433_p0 = frame2_load_reg_720;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_433_p0 = frame1_load_reg_710;
    end else begin
        grp_fu_433_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_433_p1 = grad_z_reg_812;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_433_p1 = grad_x_reg_797;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_433_p1 = 32'd1090519040;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_433_p1 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_433_p1 = 32'd3238002688;
    end else begin
        grp_fu_433_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_440_p0 = grad_x_reg_797;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_440_p0 = grad_y_reg_805;
    end else begin
        grp_fu_440_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        out_product_val_address0 = zext_ln144_5_fu_650_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        out_product_val_address0 = zext_ln144_3_fu_630_p1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        out_product_val_address0 = zext_ln144_1_fu_609_p1;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        out_product_val_address0 = grp_tensor_weight_y_fu_404_out_product_val_address0;
    end else begin
        out_product_val_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        out_product_val_address1 = zext_ln144_6_fu_660_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        out_product_val_address1 = zext_ln144_4_fu_640_p1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        out_product_val_address1 = zext_ln144_2_fu_620_p1;
    end else begin
        out_product_val_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        out_product_val_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        out_product_val_ce0 = grp_tensor_weight_y_fu_404_out_product_val_ce0;
    end else begin
        out_product_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        out_product_val_ce1 = 1'b1;
    end else begin
        out_product_val_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        out_product_val_d0 = tmp_6_i1_reg_853;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        out_product_val_d0 = tmp_4_i_reg_843;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        out_product_val_d0 = reg_463;
    end else begin
        out_product_val_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        out_product_val_d1 = tmp_7_i_reg_858;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        out_product_val_d1 = tmp_5_i1_reg_848;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        out_product_val_d1 = tmp_3_i1_reg_820;
    end else begin
        out_product_val_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        out_product_val_we0 = 1'b1;
    end else begin
        out_product_val_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45))) begin
        out_product_val_we1 = 1'b1;
    end else begin
        out_product_val_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tensor_val_0_address0 = grp_tensor_weight_x_fu_412_tensor_0_val_address0;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        tensor_val_0_address0 = grp_flow_calc_fu_338_tensor_val_0_address0;
    end else begin
        tensor_val_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tensor_val_0_ce0 = grp_tensor_weight_x_fu_412_tensor_0_val_ce0;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        tensor_val_0_ce0 = grp_flow_calc_fu_338_tensor_val_0_ce0;
    end else begin
        tensor_val_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tensor_val_0_we0 = grp_tensor_weight_x_fu_412_tensor_0_val_we0;
    end else begin
        tensor_val_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tensor_val_1_address0 = grp_tensor_weight_x_fu_412_tensor_1_val_address0;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        tensor_val_1_address0 = grp_flow_calc_fu_338_tensor_val_1_address0;
    end else begin
        tensor_val_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tensor_val_1_ce0 = grp_tensor_weight_x_fu_412_tensor_1_val_ce0;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        tensor_val_1_ce0 = grp_flow_calc_fu_338_tensor_val_1_ce0;
    end else begin
        tensor_val_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tensor_val_1_we0 = grp_tensor_weight_x_fu_412_tensor_1_val_we0;
    end else begin
        tensor_val_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tensor_val_3_address0 = grp_tensor_weight_x_fu_412_tensor_3_val_address0;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        tensor_val_3_address0 = grp_flow_calc_fu_338_tensor_val_3_address0;
    end else begin
        tensor_val_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tensor_val_3_ce0 = grp_tensor_weight_x_fu_412_tensor_3_val_ce0;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        tensor_val_3_ce0 = grp_flow_calc_fu_338_tensor_val_3_ce0;
    end else begin
        tensor_val_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tensor_val_3_we0 = grp_tensor_weight_x_fu_412_tensor_3_val_we0;
    end else begin
        tensor_val_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tensor_val_4_address0 = grp_tensor_weight_x_fu_412_tensor_4_val_address0;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        tensor_val_4_address0 = grp_flow_calc_fu_338_tensor_val_4_address0;
    end else begin
        tensor_val_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tensor_val_4_ce0 = grp_tensor_weight_x_fu_412_tensor_4_val_ce0;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        tensor_val_4_ce0 = grp_flow_calc_fu_338_tensor_val_4_ce0;
    end else begin
        tensor_val_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tensor_val_4_we0 = grp_tensor_weight_x_fu_412_tensor_4_val_we0;
    end else begin
        tensor_val_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tensor_val_5_address0 = grp_tensor_weight_x_fu_412_tensor_5_val_address0;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        tensor_val_5_address0 = grp_flow_calc_fu_338_tensor_val_5_address0;
    end else begin
        tensor_val_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tensor_val_5_ce0 = grp_tensor_weight_x_fu_412_tensor_5_val_ce0;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        tensor_val_5_ce0 = grp_flow_calc_fu_338_tensor_val_5_ce0;
    end else begin
        tensor_val_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tensor_val_5_we0 = grp_tensor_weight_x_fu_412_tensor_5_val_we0;
    end else begin
        tensor_val_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tensor_y_val_address0 = grp_tensor_weight_x_fu_412_tensor_y_val_address0;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        tensor_y_val_address0 = grp_tensor_weight_y_fu_404_tensor_y_val_2_address0;
    end else begin
        tensor_y_val_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tensor_y_val_ce0 = grp_tensor_weight_x_fu_412_tensor_y_val_ce0;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        tensor_y_val_ce0 = grp_tensor_weight_y_fu_404_tensor_y_val_2_ce0;
    end else begin
        tensor_y_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        tensor_y_val_ce1 = grp_tensor_weight_y_fu_404_tensor_y_val_2_ce1;
    end else begin
        tensor_y_val_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        tensor_y_val_we0 = grp_tensor_weight_y_fu_404_tensor_y_val_2_we0;
    end else begin
        tensor_y_val_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        tensor_y_val_we1 = grp_tensor_weight_y_fu_404_tensor_y_val_2_we1;
    end else begin
        tensor_y_val_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        y_filtered_x_address0 = grp_gradient_weight_x_fu_386_y_filtered_x_address0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        y_filtered_x_address0 = grp_gradient_weight_y_fu_368_filt_grad_x_address0;
    end else begin
        y_filtered_x_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        y_filtered_x_ce0 = grp_gradient_weight_x_fu_386_y_filtered_x_ce0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        y_filtered_x_ce0 = grp_gradient_weight_y_fu_368_filt_grad_x_ce0;
    end else begin
        y_filtered_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        y_filtered_x_we0 = grp_gradient_weight_y_fu_368_filt_grad_x_we0;
    end else begin
        y_filtered_x_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        y_filtered_y_address0 = grp_gradient_weight_x_fu_386_y_filtered_y_address0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        y_filtered_y_address0 = grp_gradient_weight_y_fu_368_filt_grad_y_address0;
    end else begin
        y_filtered_y_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        y_filtered_y_ce0 = grp_gradient_weight_x_fu_386_y_filtered_y_ce0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        y_filtered_y_ce0 = grp_gradient_weight_y_fu_368_filt_grad_y_ce0;
    end else begin
        y_filtered_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        y_filtered_y_we0 = grp_gradient_weight_y_fu_368_filt_grad_y_we0;
    end else begin
        y_filtered_y_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        y_filtered_z_address0 = grp_gradient_weight_x_fu_386_y_filtered_z_address0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        y_filtered_z_address0 = grp_gradient_weight_y_fu_368_filt_grad_z_address0;
    end else begin
        y_filtered_z_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        y_filtered_z_ce0 = grp_gradient_weight_x_fu_386_y_filtered_z_ce0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        y_filtered_z_ce0 = grp_gradient_weight_y_fu_368_filt_grad_z_ce0;
    end else begin
        y_filtered_z_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        y_filtered_z_we0 = grp_gradient_weight_y_fu_368_filt_grad_z_we0;
    end else begin
        y_filtered_z_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_gradient_xy_calc_fu_356_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln51_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln53_fu_493_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state36 : begin
            if (((grp_gradient_weight_y_fu_368_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            if (((grp_gradient_weight_x_fu_386_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((icmp_ln132_fu_533_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((icmp_ln134_fu_557_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state49 : begin
            if (((grp_tensor_weight_y_fu_404_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            if (((grp_tensor_weight_x_fu_412_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            if (((grp_flow_calc_fu_338_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln136_fu_573_p2 = (zext_ln136_fu_569_p1 + zext_ln134_reg_763);

assign add_ln144_1_fu_635_p2 = (sub_ln144_reg_825 + 23'd3);

assign add_ln144_2_fu_645_p2 = (sub_ln144_reg_825 + 23'd4);

assign add_ln144_3_fu_655_p2 = (sub_ln144_reg_825 + 23'd5);

assign add_ln144_fu_625_p2 = (sub_ln144_reg_825 + 23'd2);

assign add_ln55_fu_509_p2 = (zext_ln53_reg_673 + zext_ln55_fu_505_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln60_1_fu_528_p1 = xor_ln60_fu_522_p2;

assign bitcast_ln60_fu_519_p1 = frame4_load_reg_740;

assign c_1_fu_563_p2 = (c_0_i9_reg_327 + 11'd1);

assign c_fu_499_p2 = (c_0_i_reg_305 + 11'd1);

assign frame0_address0 = zext_ln55_1_fu_514_p1;

assign frame1_address0 = zext_ln55_1_reg_686;

assign frame2_address1 = grp_gradient_xy_calc_fu_356_frame_address1;

assign frame3_address0 = zext_ln55_1_reg_686;

assign frame4_address0 = zext_ln55_1_reg_686;

assign grp_flow_calc_fu_338_ap_start = grp_flow_calc_fu_338_ap_start_reg;

assign grp_gradient_weight_x_fu_386_ap_start = grp_gradient_weight_x_fu_386_ap_start_reg;

assign grp_gradient_weight_y_fu_368_ap_start = grp_gradient_weight_y_fu_368_ap_start_reg;

assign grp_gradient_xy_calc_fu_356_ap_start = grp_gradient_xy_calc_fu_356_ap_start_reg;

assign grp_tensor_weight_x_fu_412_ap_start = grp_tensor_weight_x_fu_412_ap_start_reg;

assign grp_tensor_weight_y_fu_404_ap_start = grp_tensor_weight_y_fu_404_ap_start_reg;

assign icmp_ln132_fu_533_p2 = ((r_0_i7_reg_316 == 9'd436) ? 1'b1 : 1'b0);

assign icmp_ln134_fu_557_p2 = ((c_0_i9_reg_327 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_469_p2 = ((r_0_i_reg_294 == 9'd436) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_493_p2 = ((c_0_i_reg_305 == 11'd1024) ? 1'b1 : 1'b0);

assign or_ln144_fu_614_p2 = (sub_ln144_fu_603_p2 | 23'd1);

assign outputs_x_address0 = grp_flow_calc_fu_338_output_x_address0;

assign outputs_x_ce0 = grp_flow_calc_fu_338_output_x_ce0;

assign outputs_x_d0 = grp_flow_calc_fu_338_output_x_d0;

assign outputs_x_we0 = grp_flow_calc_fu_338_output_x_we0;

assign outputs_y_address0 = grp_flow_calc_fu_338_output_y_address0;

assign outputs_y_ce0 = grp_flow_calc_fu_338_output_y_ce0;

assign outputs_y_d0 = grp_flow_calc_fu_338_output_y_d0;

assign outputs_y_we0 = grp_flow_calc_fu_338_output_y_we0;

assign p_shl_cast_fu_585_p3 = {{add_ln136_reg_776}, {3'd0}};

assign r_1_fu_539_p2 = (r_0_i7_reg_316 + 9'd1);

assign r_fu_475_p2 = (r_0_i_reg_294 + 9'd1);

assign sub_ln144_fu_603_p2 = (p_shl_cast_fu_585_p3 - zext_ln144_fu_599_p1);

assign tmp_11_fu_592_p3 = {{add_ln136_reg_776}, {1'd0}};

assign tmp_fu_481_p3 = {{r_0_i_reg_294}, {10'd0}};

assign tmp_s_fu_545_p3 = {{r_0_i7_reg_316}, {10'd0}};

assign xor_ln60_fu_522_p2 = (bitcast_ln60_fu_519_p1 ^ 32'd2147483648);

assign zext_ln134_fu_553_p1 = tmp_s_fu_545_p3;

assign zext_ln136_1_fu_578_p1 = add_ln136_fu_573_p2;

assign zext_ln136_fu_569_p1 = c_0_i9_reg_327;

assign zext_ln144_1_fu_609_p1 = sub_ln144_fu_603_p2;

assign zext_ln144_2_fu_620_p1 = or_ln144_fu_614_p2;

assign zext_ln144_3_fu_630_p1 = add_ln144_fu_625_p2;

assign zext_ln144_4_fu_640_p1 = add_ln144_1_fu_635_p2;

assign zext_ln144_5_fu_650_p1 = add_ln144_2_fu_645_p2;

assign zext_ln144_6_fu_660_p1 = add_ln144_3_fu_655_p2;

assign zext_ln144_fu_599_p1 = tmp_11_fu_592_p3;

assign zext_ln53_fu_489_p1 = tmp_fu_481_p3;

assign zext_ln55_1_fu_514_p1 = add_ln55_fu_509_p2;

assign zext_ln55_fu_505_p1 = c_0_i_reg_305;

always @ (posedge ap_clk) begin
    zext_ln53_reg_673[9:0] <= 10'b0000000000;
    zext_ln53_reg_673[19] <= 1'b0;
    zext_ln55_1_reg_686[63:20] <= 44'b00000000000000000000000000000000000000000000;
    zext_ln134_reg_763[9:0] <= 10'b0000000000;
    zext_ln134_reg_763[19] <= 1'b0;
    sub_ln144_reg_825[0] <= 1'b0;
end

endmodule //optical_flow_sw
