// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "flow_calc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic flow_calc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic flow_calc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<21> flow_calc::ap_ST_fsm_state1 = "1";
const sc_lv<21> flow_calc::ap_ST_fsm_state2 = "10";
const sc_lv<21> flow_calc::ap_ST_fsm_state3 = "100";
const sc_lv<21> flow_calc::ap_ST_fsm_state4 = "1000";
const sc_lv<21> flow_calc::ap_ST_fsm_state5 = "10000";
const sc_lv<21> flow_calc::ap_ST_fsm_state6 = "100000";
const sc_lv<21> flow_calc::ap_ST_fsm_state7 = "1000000";
const sc_lv<21> flow_calc::ap_ST_fsm_state8 = "10000000";
const sc_lv<21> flow_calc::ap_ST_fsm_state9 = "100000000";
const sc_lv<21> flow_calc::ap_ST_fsm_state10 = "1000000000";
const sc_lv<21> flow_calc::ap_ST_fsm_state11 = "10000000000";
const sc_lv<21> flow_calc::ap_ST_fsm_state12 = "100000000000";
const sc_lv<21> flow_calc::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<21> flow_calc::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<21> flow_calc::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<21> flow_calc::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<21> flow_calc::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<21> flow_calc::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<21> flow_calc::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<21> flow_calc::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<21> flow_calc::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<32> flow_calc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> flow_calc::ap_const_lv32_1 = "1";
const sc_lv<1> flow_calc::ap_const_lv1_0 = "0";
const sc_lv<32> flow_calc::ap_const_lv32_2 = "10";
const sc_lv<32> flow_calc::ap_const_lv32_3 = "11";
const sc_lv<32> flow_calc::ap_const_lv32_6 = "110";
const sc_lv<32> flow_calc::ap_const_lv32_A = "1010";
const sc_lv<32> flow_calc::ap_const_lv32_13 = "10011";
const sc_lv<9> flow_calc::ap_const_lv9_0 = "000000000";
const sc_lv<1> flow_calc::ap_const_lv1_1 = "1";
const sc_lv<32> flow_calc::ap_const_lv32_14 = "10100";
const sc_lv<11> flow_calc::ap_const_lv11_0 = "00000000000";
const sc_lv<32> flow_calc::ap_const_lv32_7 = "111";
const sc_lv<32> flow_calc::ap_const_lv32_4 = "100";
const sc_lv<32> flow_calc::ap_const_lv32_B = "1011";
const sc_lv<9> flow_calc::ap_const_lv9_1B4 = "110110100";
const sc_lv<9> flow_calc::ap_const_lv9_1 = "1";
const sc_lv<32> flow_calc::ap_const_lv32_8 = "1000";
const sc_lv<8> flow_calc::ap_const_lv8_0 = "00000000";
const sc_lv<9> flow_calc::ap_const_lv9_1B2 = "110110010";
const sc_lv<10> flow_calc::ap_const_lv10_0 = "0000000000";
const sc_lv<11> flow_calc::ap_const_lv11_400 = "10000000000";
const sc_lv<11> flow_calc::ap_const_lv11_1 = "1";
const sc_lv<11> flow_calc::ap_const_lv11_3FE = "1111111110";
const bool flow_calc::ap_const_boolean_1 = true;

flow_calc::flow_calc(sc_module_name name) : sc_module(name), mVcdFile(0) {
    optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U54 = new optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1<1,4,32,32,32>("optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U54");
    optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U54->clk(ap_clk);
    optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U54->reset(ap_rst);
    optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U54->din0(tmp_reg_439);
    optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U54->din1(tmp_s_reg_444);
    optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U54->ce(ap_var_for_const0);
    optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U54->dout(grp_fu_181_p2);
    optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U55 = new optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1<1,4,32,32,32>("optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U55");
    optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U55->clk(ap_clk);
    optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U55->reset(ap_rst);
    optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U55->din0(tmp_3_reg_449);
    optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U55->din1(tmp_4_reg_454);
    optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U55->ce(ap_var_for_const0);
    optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U55->dout(grp_fu_185_p2);
    optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U56 = new optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1<1,4,32,32,32>("optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U56");
    optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U56->clk(ap_clk);
    optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U56->reset(ap_rst);
    optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U56->din0(tmp_7_reg_459);
    optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U56->din1(tmp_8_reg_464);
    optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U56->ce(ap_var_for_const0);
    optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U56->dout(grp_fu_189_p2);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U57 = new optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1<1,3,32,32,32>("optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U57");
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U57->clk(ap_clk);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U57->reset(ap_rst);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U57->din0(tensor_val_0_load_reg_407);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U57->din1(tensor_val_1_load_reg_413);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U57->ce(ap_var_for_const0);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U57->dout(grp_fu_193_p2);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U58 = new optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1<1,3,32,32,32>("optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U58");
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U58->clk(ap_clk);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U58->reset(ap_rst);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U58->din0(tensor_val_3_load_reg_419);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U58->din1(tensor_val_3_load_reg_419);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U58->ce(ap_var_for_const0);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U58->dout(grp_fu_197_p2);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U59 = new optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1<1,3,32,32,32>("optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U59");
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U59->clk(ap_clk);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U59->reset(ap_rst);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U59->din0(tensor_val_5_load_reg_427);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U59->din1(tensor_val_3_load_reg_419);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U59->ce(ap_var_for_const0);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U59->dout(grp_fu_201_p2);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U60 = new optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1<1,3,32,32,32>("optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U60");
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U60->clk(ap_clk);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U60->reset(ap_rst);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U60->din0(tensor_val_4_load_reg_433);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U60->din1(tensor_val_1_load_reg_413);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U60->ce(ap_var_for_const0);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U60->dout(grp_fu_205_p2);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U61 = new optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1<1,3,32,32,32>("optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U61");
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U61->clk(ap_clk);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U61->reset(ap_rst);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U61->din0(tensor_val_4_load_reg_433);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U61->din1(tensor_val_3_load_reg_419);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U61->ce(ap_var_for_const0);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U61->dout(grp_fu_209_p2);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U62 = new optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1<1,3,32,32,32>("optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U62");
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U62->clk(ap_clk);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U62->reset(ap_rst);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U62->din0(tensor_val_5_load_reg_427);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U62->din1(tensor_val_0_load_reg_407);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U62->ce(ap_var_for_const0);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U62->dout(grp_fu_213_p2);
    optical_flow_sw_fdiv_32ns_32ns_32_9_1_U63 = new optical_flow_sw_fdiv_32ns_32ns_32_9_1<1,9,32,32,32>("optical_flow_sw_fdiv_32ns_32ns_32_9_1_U63");
    optical_flow_sw_fdiv_32ns_32ns_32_9_1_U63->clk(ap_clk);
    optical_flow_sw_fdiv_32ns_32ns_32_9_1_U63->reset(ap_rst);
    optical_flow_sw_fdiv_32ns_32ns_32_9_1_U63->din0(tmp_5_reg_475);
    optical_flow_sw_fdiv_32ns_32ns_32_9_1_U63->din1(denom_reg_469);
    optical_flow_sw_fdiv_32ns_32ns_32_9_1_U63->ce(ap_var_for_const0);
    optical_flow_sw_fdiv_32ns_32ns_32_9_1_U63->dout(grp_fu_217_p2);
    optical_flow_sw_fdiv_32ns_32ns_32_9_1_U64 = new optical_flow_sw_fdiv_32ns_32ns_32_9_1<1,9,32,32,32>("optical_flow_sw_fdiv_32ns_32ns_32_9_1_U64");
    optical_flow_sw_fdiv_32ns_32ns_32_9_1_U64->clk(ap_clk);
    optical_flow_sw_fdiv_32ns_32ns_32_9_1_U64->reset(ap_rst);
    optical_flow_sw_fdiv_32ns_32ns_32_9_1_U64->din0(tmp_9_reg_480);
    optical_flow_sw_fdiv_32ns_32ns_32_9_1_U64->din1(denom_reg_469);
    optical_flow_sw_fdiv_32ns_32ns_32_9_1_U64->ce(ap_var_for_const0);
    optical_flow_sw_fdiv_32ns_32ns_32_9_1_U64->dout(grp_fu_221_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln223_fu_326_p2);
    sensitive << ( zext_ln220_reg_350 );
    sensitive << ( zext_ln223_fu_322_p1 );

    SC_METHOD(thread_and_ln220_1_fu_311_p2);
    sensitive << ( icmp_ln220_2_fu_299_p2 );
    sensitive << ( icmp_ln220_3_fu_305_p2 );

    SC_METHOD(thread_and_ln220_2_fu_317_p2);
    sensitive << ( and_ln220_reg_355 );
    sensitive << ( and_ln220_1_fu_311_p2 );

    SC_METHOD(thread_and_ln220_fu_271_p2);
    sensitive << ( icmp_ln220_fu_247_p2 );
    sensitive << ( icmp_ln220_1_fu_253_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln216_fu_225_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_storemerge_phi_fu_173_p4);
    sensitive << ( and_ln220_2_reg_368 );
    sensitive << ( tmp_1_reg_490 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( storemerge_reg_169 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln216_fu_225_p2 );

    SC_METHOD(thread_c_fu_283_p2);
    sensitive << ( c_0_reg_158 );

    SC_METHOD(thread_icmp_ln216_fu_225_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( r_0_reg_147 );

    SC_METHOD(thread_icmp_ln218_fu_277_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( c_0_reg_158 );

    SC_METHOD(thread_icmp_ln220_1_fu_253_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln216_fu_225_p2 );
    sensitive << ( r_0_reg_147 );

    SC_METHOD(thread_icmp_ln220_2_fu_299_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln218_fu_277_p2 );
    sensitive << ( tmp_21_fu_289_p4 );

    SC_METHOD(thread_icmp_ln220_3_fu_305_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln218_fu_277_p2 );
    sensitive << ( c_0_reg_158 );

    SC_METHOD(thread_icmp_ln220_fu_247_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln216_fu_225_p2 );
    sensitive << ( tmp_20_fu_237_p4 );

    SC_METHOD(thread_output_x_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( output_x_addr_reg_397 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( zext_ln223_1_fu_331_p1 );

    SC_METHOD(thread_output_x_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_output_x_d0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_6_reg_485 );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_output_x_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( and_ln220_2_fu_317_p2 );
    sensitive << ( and_ln220_2_reg_368 );
    sensitive << ( icmp_ln218_fu_277_p2 );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_output_y_address0);
    sensitive << ( output_y_addr_reg_402 );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_output_y_ce0);
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_output_y_d0);
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_phi_mux_storemerge_phi_fu_173_p4 );

    SC_METHOD(thread_output_y_we0);
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_r_fu_231_p2);
    sensitive << ( r_0_reg_147 );

    SC_METHOD(thread_tensor_val_0_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln223_1_fu_331_p1 );

    SC_METHOD(thread_tensor_val_0_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tensor_val_1_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln223_1_fu_331_p1 );

    SC_METHOD(thread_tensor_val_1_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tensor_val_3_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln223_1_fu_331_p1 );

    SC_METHOD(thread_tensor_val_3_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tensor_val_4_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln223_1_fu_331_p1 );

    SC_METHOD(thread_tensor_val_4_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tensor_val_5_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln223_1_fu_331_p1 );

    SC_METHOD(thread_tensor_val_5_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_10_fu_259_p3);
    sensitive << ( r_0_reg_147 );

    SC_METHOD(thread_tmp_20_fu_237_p4);
    sensitive << ( r_0_reg_147 );

    SC_METHOD(thread_tmp_21_fu_289_p4);
    sensitive << ( c_0_reg_158 );

    SC_METHOD(thread_zext_ln220_fu_267_p1);
    sensitive << ( tmp_10_fu_259_p3 );

    SC_METHOD(thread_zext_ln223_1_fu_331_p1);
    sensitive << ( add_ln223_fu_326_p2 );

    SC_METHOD(thread_zext_ln223_fu_322_p1);
    sensitive << ( c_0_reg_158 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln216_fu_225_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( and_ln220_2_fu_317_p2 );
    sensitive << ( icmp_ln218_fu_277_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "flow_calc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, output_x_address0, "(port)output_x_address0");
    sc_trace(mVcdFile, output_x_ce0, "(port)output_x_ce0");
    sc_trace(mVcdFile, output_x_we0, "(port)output_x_we0");
    sc_trace(mVcdFile, output_x_d0, "(port)output_x_d0");
    sc_trace(mVcdFile, output_y_address0, "(port)output_y_address0");
    sc_trace(mVcdFile, output_y_ce0, "(port)output_y_ce0");
    sc_trace(mVcdFile, output_y_we0, "(port)output_y_we0");
    sc_trace(mVcdFile, output_y_d0, "(port)output_y_d0");
    sc_trace(mVcdFile, tensor_val_0_address0, "(port)tensor_val_0_address0");
    sc_trace(mVcdFile, tensor_val_0_ce0, "(port)tensor_val_0_ce0");
    sc_trace(mVcdFile, tensor_val_0_q0, "(port)tensor_val_0_q0");
    sc_trace(mVcdFile, tensor_val_1_address0, "(port)tensor_val_1_address0");
    sc_trace(mVcdFile, tensor_val_1_ce0, "(port)tensor_val_1_ce0");
    sc_trace(mVcdFile, tensor_val_1_q0, "(port)tensor_val_1_q0");
    sc_trace(mVcdFile, tensor_val_3_address0, "(port)tensor_val_3_address0");
    sc_trace(mVcdFile, tensor_val_3_ce0, "(port)tensor_val_3_ce0");
    sc_trace(mVcdFile, tensor_val_3_q0, "(port)tensor_val_3_q0");
    sc_trace(mVcdFile, tensor_val_5_address0, "(port)tensor_val_5_address0");
    sc_trace(mVcdFile, tensor_val_5_ce0, "(port)tensor_val_5_ce0");
    sc_trace(mVcdFile, tensor_val_5_q0, "(port)tensor_val_5_q0");
    sc_trace(mVcdFile, tensor_val_4_address0, "(port)tensor_val_4_address0");
    sc_trace(mVcdFile, tensor_val_4_ce0, "(port)tensor_val_4_ce0");
    sc_trace(mVcdFile, tensor_val_4_q0, "(port)tensor_val_4_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, r_fu_231_p2, "r_fu_231_p2");
    sc_trace(mVcdFile, r_reg_345, "r_reg_345");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln220_fu_267_p1, "zext_ln220_fu_267_p1");
    sc_trace(mVcdFile, zext_ln220_reg_350, "zext_ln220_reg_350");
    sc_trace(mVcdFile, icmp_ln216_fu_225_p2, "icmp_ln216_fu_225_p2");
    sc_trace(mVcdFile, and_ln220_fu_271_p2, "and_ln220_fu_271_p2");
    sc_trace(mVcdFile, and_ln220_reg_355, "and_ln220_reg_355");
    sc_trace(mVcdFile, c_fu_283_p2, "c_fu_283_p2");
    sc_trace(mVcdFile, c_reg_363, "c_reg_363");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, and_ln220_2_fu_317_p2, "and_ln220_2_fu_317_p2");
    sc_trace(mVcdFile, and_ln220_2_reg_368, "and_ln220_2_reg_368");
    sc_trace(mVcdFile, icmp_ln218_fu_277_p2, "icmp_ln218_fu_277_p2");
    sc_trace(mVcdFile, output_x_addr_reg_397, "output_x_addr_reg_397");
    sc_trace(mVcdFile, output_y_addr_reg_402, "output_y_addr_reg_402");
    sc_trace(mVcdFile, tensor_val_0_load_reg_407, "tensor_val_0_load_reg_407");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tensor_val_1_load_reg_413, "tensor_val_1_load_reg_413");
    sc_trace(mVcdFile, tensor_val_3_load_reg_419, "tensor_val_3_load_reg_419");
    sc_trace(mVcdFile, tensor_val_5_load_reg_427, "tensor_val_5_load_reg_427");
    sc_trace(mVcdFile, tensor_val_4_load_reg_433, "tensor_val_4_load_reg_433");
    sc_trace(mVcdFile, grp_fu_193_p2, "grp_fu_193_p2");
    sc_trace(mVcdFile, tmp_reg_439, "tmp_reg_439");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, grp_fu_197_p2, "grp_fu_197_p2");
    sc_trace(mVcdFile, tmp_s_reg_444, "tmp_s_reg_444");
    sc_trace(mVcdFile, grp_fu_201_p2, "grp_fu_201_p2");
    sc_trace(mVcdFile, tmp_3_reg_449, "tmp_3_reg_449");
    sc_trace(mVcdFile, grp_fu_205_p2, "grp_fu_205_p2");
    sc_trace(mVcdFile, tmp_4_reg_454, "tmp_4_reg_454");
    sc_trace(mVcdFile, grp_fu_209_p2, "grp_fu_209_p2");
    sc_trace(mVcdFile, tmp_7_reg_459, "tmp_7_reg_459");
    sc_trace(mVcdFile, grp_fu_213_p2, "grp_fu_213_p2");
    sc_trace(mVcdFile, tmp_8_reg_464, "tmp_8_reg_464");
    sc_trace(mVcdFile, grp_fu_181_p2, "grp_fu_181_p2");
    sc_trace(mVcdFile, denom_reg_469, "denom_reg_469");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, grp_fu_185_p2, "grp_fu_185_p2");
    sc_trace(mVcdFile, tmp_5_reg_475, "tmp_5_reg_475");
    sc_trace(mVcdFile, grp_fu_189_p2, "grp_fu_189_p2");
    sc_trace(mVcdFile, tmp_9_reg_480, "tmp_9_reg_480");
    sc_trace(mVcdFile, grp_fu_217_p2, "grp_fu_217_p2");
    sc_trace(mVcdFile, tmp_6_reg_485, "tmp_6_reg_485");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, grp_fu_221_p2, "grp_fu_221_p2");
    sc_trace(mVcdFile, tmp_1_reg_490, "tmp_1_reg_490");
    sc_trace(mVcdFile, r_0_reg_147, "r_0_reg_147");
    sc_trace(mVcdFile, c_0_reg_158, "c_0_reg_158");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, ap_phi_mux_storemerge_phi_fu_173_p4, "ap_phi_mux_storemerge_phi_fu_173_p4");
    sc_trace(mVcdFile, storemerge_reg_169, "storemerge_reg_169");
    sc_trace(mVcdFile, zext_ln223_1_fu_331_p1, "zext_ln223_1_fu_331_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, tmp_20_fu_237_p4, "tmp_20_fu_237_p4");
    sc_trace(mVcdFile, tmp_10_fu_259_p3, "tmp_10_fu_259_p3");
    sc_trace(mVcdFile, icmp_ln220_fu_247_p2, "icmp_ln220_fu_247_p2");
    sc_trace(mVcdFile, icmp_ln220_1_fu_253_p2, "icmp_ln220_1_fu_253_p2");
    sc_trace(mVcdFile, tmp_21_fu_289_p4, "tmp_21_fu_289_p4");
    sc_trace(mVcdFile, icmp_ln220_2_fu_299_p2, "icmp_ln220_2_fu_299_p2");
    sc_trace(mVcdFile, icmp_ln220_3_fu_305_p2, "icmp_ln220_3_fu_305_p2");
    sc_trace(mVcdFile, and_ln220_1_fu_311_p2, "and_ln220_1_fu_311_p2");
    sc_trace(mVcdFile, zext_ln223_fu_322_p1, "zext_ln223_fu_322_p1");
    sc_trace(mVcdFile, add_ln223_fu_326_p2, "add_ln223_fu_326_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

flow_calc::~flow_calc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U54;
    delete optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U55;
    delete optical_flow_sw_fsub_32ns_32ns_32_4_full_dsp_1_U56;
    delete optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U57;
    delete optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U58;
    delete optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U59;
    delete optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U60;
    delete optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U61;
    delete optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U62;
    delete optical_flow_sw_fdiv_32ns_32ns_32_9_1_U63;
    delete optical_flow_sw_fdiv_32ns_32ns_32_9_1_U64;
}

void flow_calc::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void flow_calc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln216_fu_225_p2.read(), ap_const_lv1_0))) {
        c_0_reg_158 = ap_const_lv11_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        c_0_reg_158 = c_reg_363.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln218_fu_277_p2.read(), ap_const_lv1_1))) {
        r_0_reg_147 = r_reg_345.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        r_0_reg_147 = ap_const_lv9_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && 
         esl_seteq<1,1,1>(and_ln220_2_reg_368.read(), ap_const_lv1_1))) {
        storemerge_reg_169 = tmp_1_reg_490.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln218_fu_277_p2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, and_ln220_2_fu_317_p2.read()))) {
        storemerge_reg_169 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln218_fu_277_p2.read()))) {
        and_ln220_2_reg_368 = and_ln220_2_fu_317_p2.read();
        output_x_addr_reg_397 =  (sc_lv<19>) (zext_ln223_1_fu_331_p1.read());
        output_y_addr_reg_402 =  (sc_lv<19>) (zext_ln223_1_fu_331_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln216_fu_225_p2.read(), ap_const_lv1_0))) {
        and_ln220_reg_355 = and_ln220_fu_271_p2.read();
        zext_ln220_reg_350 = zext_ln220_fu_267_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        c_reg_363 = c_fu_283_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        denom_reg_469 = grp_fu_181_p2.read();
        tmp_5_reg_475 = grp_fu_185_p2.read();
        tmp_9_reg_480 = grp_fu_189_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        r_reg_345 = r_fu_231_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tensor_val_0_load_reg_407 = tensor_val_0_q0.read();
        tensor_val_1_load_reg_413 = tensor_val_1_q0.read();
        tensor_val_3_load_reg_419 = tensor_val_3_q0.read();
        tensor_val_4_load_reg_433 = tensor_val_4_q0.read();
        tensor_val_5_load_reg_427 = tensor_val_5_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        tmp_1_reg_490 = grp_fu_221_p2.read();
        tmp_6_reg_485 = grp_fu_217_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        tmp_3_reg_449 = grp_fu_201_p2.read();
        tmp_4_reg_454 = grp_fu_205_p2.read();
        tmp_7_reg_459 = grp_fu_209_p2.read();
        tmp_8_reg_464 = grp_fu_213_p2.read();
        tmp_reg_439 = grp_fu_193_p2.read();
        tmp_s_reg_444 = grp_fu_197_p2.read();
    }
}

void flow_calc::thread_add_ln223_fu_326_p2() {
    add_ln223_fu_326_p2 = (!zext_ln220_reg_350.read().is_01() || !zext_ln223_fu_322_p1.read().is_01())? sc_lv<20>(): (sc_biguint<20>(zext_ln220_reg_350.read()) + sc_biguint<20>(zext_ln223_fu_322_p1.read()));
}

void flow_calc::thread_and_ln220_1_fu_311_p2() {
    and_ln220_1_fu_311_p2 = (icmp_ln220_2_fu_299_p2.read() & icmp_ln220_3_fu_305_p2.read());
}

void flow_calc::thread_and_ln220_2_fu_317_p2() {
    and_ln220_2_fu_317_p2 = (and_ln220_1_fu_311_p2.read() & and_ln220_reg_355.read());
}

void flow_calc::thread_and_ln220_fu_271_p2() {
    and_ln220_fu_271_p2 = (icmp_ln220_fu_247_p2.read() & icmp_ln220_1_fu_253_p2.read());
}

void flow_calc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void flow_calc::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void flow_calc::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void flow_calc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void flow_calc::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void flow_calc::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void flow_calc::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void flow_calc::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void flow_calc::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void flow_calc::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void flow_calc::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void flow_calc::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln216_fu_225_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void flow_calc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void flow_calc::thread_ap_phi_mux_storemerge_phi_fu_173_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && 
         esl_seteq<1,1,1>(and_ln220_2_reg_368.read(), ap_const_lv1_1))) {
        ap_phi_mux_storemerge_phi_fu_173_p4 = tmp_1_reg_490.read();
    } else {
        ap_phi_mux_storemerge_phi_fu_173_p4 = storemerge_reg_169.read();
    }
}

void flow_calc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln216_fu_225_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void flow_calc::thread_c_fu_283_p2() {
    c_fu_283_p2 = (!c_0_reg_158.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(c_0_reg_158.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void flow_calc::thread_icmp_ln216_fu_225_p2() {
    icmp_ln216_fu_225_p2 = (!r_0_reg_147.read().is_01() || !ap_const_lv9_1B4.is_01())? sc_lv<1>(): sc_lv<1>(r_0_reg_147.read() == ap_const_lv9_1B4);
}

void flow_calc::thread_icmp_ln218_fu_277_p2() {
    icmp_ln218_fu_277_p2 = (!c_0_reg_158.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(c_0_reg_158.read() == ap_const_lv11_400);
}

void flow_calc::thread_icmp_ln220_1_fu_253_p2() {
    icmp_ln220_1_fu_253_p2 = (!r_0_reg_147.read().is_01() || !ap_const_lv9_1B2.is_01())? sc_lv<1>(): (sc_biguint<9>(r_0_reg_147.read()) < sc_biguint<9>(ap_const_lv9_1B2));
}

void flow_calc::thread_icmp_ln220_2_fu_299_p2() {
    icmp_ln220_2_fu_299_p2 = (!tmp_21_fu_289_p4.read().is_01() || !ap_const_lv10_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_21_fu_289_p4.read() != ap_const_lv10_0);
}

void flow_calc::thread_icmp_ln220_3_fu_305_p2() {
    icmp_ln220_3_fu_305_p2 = (!c_0_reg_158.read().is_01() || !ap_const_lv11_3FE.is_01())? sc_lv<1>(): (sc_biguint<11>(c_0_reg_158.read()) < sc_biguint<11>(ap_const_lv11_3FE));
}

void flow_calc::thread_icmp_ln220_fu_247_p2() {
    icmp_ln220_fu_247_p2 = (!tmp_20_fu_237_p4.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_20_fu_237_p4.read() != ap_const_lv8_0);
}

void flow_calc::thread_output_x_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        output_x_address0 = output_x_addr_reg_397.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        output_x_address0 =  (sc_lv<19>) (zext_ln223_1_fu_331_p1.read());
    } else {
        output_x_address0 = "XXXXXXXXXXXXXXXXXXX";
    }
}

void flow_calc::thread_output_x_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        output_x_ce0 = ap_const_logic_1;
    } else {
        output_x_ce0 = ap_const_logic_0;
    }
}

void flow_calc::thread_output_x_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        output_x_d0 = tmp_6_reg_485.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        output_x_d0 = ap_const_lv32_0;
    } else {
        output_x_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void flow_calc::thread_output_x_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln218_fu_277_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, and_ln220_2_fu_317_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && 
          esl_seteq<1,1,1>(and_ln220_2_reg_368.read(), ap_const_lv1_1)))) {
        output_x_we0 = ap_const_logic_1;
    } else {
        output_x_we0 = ap_const_logic_0;
    }
}

void flow_calc::thread_output_y_address0() {
    output_y_address0 = output_y_addr_reg_402.read();
}

void flow_calc::thread_output_y_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        output_y_ce0 = ap_const_logic_1;
    } else {
        output_y_ce0 = ap_const_logic_0;
    }
}

void flow_calc::thread_output_y_d0() {
    output_y_d0 = ap_phi_mux_storemerge_phi_fu_173_p4.read();
}

void flow_calc::thread_output_y_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        output_y_we0 = ap_const_logic_1;
    } else {
        output_y_we0 = ap_const_logic_0;
    }
}

void flow_calc::thread_r_fu_231_p2() {
    r_fu_231_p2 = (!r_0_reg_147.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(r_0_reg_147.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void flow_calc::thread_tensor_val_0_address0() {
    tensor_val_0_address0 =  (sc_lv<19>) (zext_ln223_1_fu_331_p1.read());
}

void flow_calc::thread_tensor_val_0_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tensor_val_0_ce0 = ap_const_logic_1;
    } else {
        tensor_val_0_ce0 = ap_const_logic_0;
    }
}

void flow_calc::thread_tensor_val_1_address0() {
    tensor_val_1_address0 =  (sc_lv<19>) (zext_ln223_1_fu_331_p1.read());
}

void flow_calc::thread_tensor_val_1_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tensor_val_1_ce0 = ap_const_logic_1;
    } else {
        tensor_val_1_ce0 = ap_const_logic_0;
    }
}

void flow_calc::thread_tensor_val_3_address0() {
    tensor_val_3_address0 =  (sc_lv<19>) (zext_ln223_1_fu_331_p1.read());
}

void flow_calc::thread_tensor_val_3_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tensor_val_3_ce0 = ap_const_logic_1;
    } else {
        tensor_val_3_ce0 = ap_const_logic_0;
    }
}

void flow_calc::thread_tensor_val_4_address0() {
    tensor_val_4_address0 =  (sc_lv<19>) (zext_ln223_1_fu_331_p1.read());
}

void flow_calc::thread_tensor_val_4_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tensor_val_4_ce0 = ap_const_logic_1;
    } else {
        tensor_val_4_ce0 = ap_const_logic_0;
    }
}

void flow_calc::thread_tensor_val_5_address0() {
    tensor_val_5_address0 =  (sc_lv<19>) (zext_ln223_1_fu_331_p1.read());
}

void flow_calc::thread_tensor_val_5_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tensor_val_5_ce0 = ap_const_logic_1;
    } else {
        tensor_val_5_ce0 = ap_const_logic_0;
    }
}

void flow_calc::thread_tmp_10_fu_259_p3() {
    tmp_10_fu_259_p3 = esl_concat<9,10>(r_0_reg_147.read(), ap_const_lv10_0);
}

void flow_calc::thread_tmp_20_fu_237_p4() {
    tmp_20_fu_237_p4 = r_0_reg_147.read().range(8, 1);
}

void flow_calc::thread_tmp_21_fu_289_p4() {
    tmp_21_fu_289_p4 = c_0_reg_158.read().range(10, 1);
}

void flow_calc::thread_zext_ln220_fu_267_p1() {
    zext_ln220_fu_267_p1 = esl_zext<20,19>(tmp_10_fu_259_p3.read());
}

void flow_calc::thread_zext_ln223_1_fu_331_p1() {
    zext_ln223_1_fu_331_p1 = esl_zext<64,20>(add_ln223_fu_326_p2.read());
}

void flow_calc::thread_zext_ln223_fu_322_p1() {
    zext_ln223_fu_322_p1 = esl_zext<20,11>(c_0_reg_158.read());
}

void flow_calc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln216_fu_225_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln218_fu_277_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln218_fu_277_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, and_ln220_2_fu_317_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state21;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<21>) ("XXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

