// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "tensor_weight_y.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic tensor_weight_y::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic tensor_weight_y::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<21> tensor_weight_y::ap_ST_fsm_state1 = "1";
const sc_lv<21> tensor_weight_y::ap_ST_fsm_state2 = "10";
const sc_lv<21> tensor_weight_y::ap_ST_fsm_state3 = "100";
const sc_lv<21> tensor_weight_y::ap_ST_fsm_state4 = "1000";
const sc_lv<21> tensor_weight_y::ap_ST_fsm_state5 = "10000";
const sc_lv<21> tensor_weight_y::ap_ST_fsm_state6 = "100000";
const sc_lv<21> tensor_weight_y::ap_ST_fsm_state7 = "1000000";
const sc_lv<21> tensor_weight_y::ap_ST_fsm_state8 = "10000000";
const sc_lv<21> tensor_weight_y::ap_ST_fsm_state9 = "100000000";
const sc_lv<21> tensor_weight_y::ap_ST_fsm_state10 = "1000000000";
const sc_lv<21> tensor_weight_y::ap_ST_fsm_state11 = "10000000000";
const sc_lv<21> tensor_weight_y::ap_ST_fsm_state12 = "100000000000";
const sc_lv<21> tensor_weight_y::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<21> tensor_weight_y::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<21> tensor_weight_y::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<21> tensor_weight_y::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<21> tensor_weight_y::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<21> tensor_weight_y::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<21> tensor_weight_y::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<21> tensor_weight_y::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<21> tensor_weight_y::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<32> tensor_weight_y::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> tensor_weight_y::ap_const_lv32_B = "1011";
const sc_lv<32> tensor_weight_y::ap_const_lv32_11 = "10001";
const sc_lv<32> tensor_weight_y::ap_const_lv32_12 = "10010";
const sc_lv<32> tensor_weight_y::ap_const_lv32_13 = "10011";
const sc_lv<32> tensor_weight_y::ap_const_lv32_1 = "1";
const sc_lv<1> tensor_weight_y::ap_const_lv1_0 = "0";
const sc_lv<32> tensor_weight_y::ap_const_lv32_2 = "10";
const sc_lv<32> tensor_weight_y::ap_const_lv32_3 = "11";
const sc_lv<1> tensor_weight_y::ap_const_lv1_1 = "1";
const sc_lv<32> tensor_weight_y::ap_const_lv32_4 = "100";
const sc_lv<32> tensor_weight_y::ap_const_lv32_5 = "101";
const sc_lv<32> tensor_weight_y::ap_const_lv32_8 = "1000";
const sc_lv<32> tensor_weight_y::ap_const_lv32_A = "1010";
const sc_lv<32> tensor_weight_y::ap_const_lv32_F = "1111";
const sc_lv<9> tensor_weight_y::ap_const_lv9_0 = "000000000";
const sc_lv<32> tensor_weight_y::ap_const_lv32_14 = "10100";
const sc_lv<11> tensor_weight_y::ap_const_lv11_0 = "00000000000";
const sc_lv<3> tensor_weight_y::ap_const_lv3_0 = "000";
const sc_lv<2> tensor_weight_y::ap_const_lv2_0 = "00";
const sc_lv<32> tensor_weight_y::ap_const_lv32_10 = "10000";
const sc_lv<64> tensor_weight_y::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> tensor_weight_y::ap_const_lv64_1 = "1";
const sc_lv<64> tensor_weight_y::ap_const_lv64_2 = "10";
const sc_lv<64> tensor_weight_y::ap_const_lv64_3 = "11";
const sc_lv<64> tensor_weight_y::ap_const_lv64_4 = "100";
const sc_lv<64> tensor_weight_y::ap_const_lv64_5 = "101";
const sc_lv<32> tensor_weight_y::ap_const_lv32_6 = "110";
const sc_lv<32> tensor_weight_y::ap_const_lv32_7 = "111";
const sc_lv<32> tensor_weight_y::ap_const_lv32_C = "1100";
const sc_lv<32> tensor_weight_y::ap_const_lv32_9 = "1001";
const sc_lv<9> tensor_weight_y::ap_const_lv9_1B5 = "110110101";
const sc_lv<9> tensor_weight_y::ap_const_lv9_1 = "1";
const sc_lv<8> tensor_weight_y::ap_const_lv8_0 = "00000000";
const sc_lv<9> tensor_weight_y::ap_const_lv9_1B4 = "110110100";
const sc_lv<10> tensor_weight_y::ap_const_lv10_3FF = "1111111111";
const sc_lv<10> tensor_weight_y::ap_const_lv10_0 = "0000000000";
const sc_lv<11> tensor_weight_y::ap_const_lv11_400 = "10000000000";
const sc_lv<11> tensor_weight_y::ap_const_lv11_1 = "1";
const sc_lv<3> tensor_weight_y::ap_const_lv3_6 = "110";
const sc_lv<3> tensor_weight_y::ap_const_lv3_1 = "1";
const sc_lv<2> tensor_weight_y::ap_const_lv2_3 = "11";
const sc_lv<2> tensor_weight_y::ap_const_lv2_1 = "1";
const sc_lv<32> tensor_weight_y::ap_const_lv32_3EB3DD98 = "111110101100111101110110011000";
const sc_lv<32> tensor_weight_y::ap_const_lv32_3EA60AA6 = "111110101001100000101010100110";
const sc_lv<23> tensor_weight_y::ap_const_lv23_1 = "1";
const sc_lv<23> tensor_weight_y::ap_const_lv23_2 = "10";
const sc_lv<23> tensor_weight_y::ap_const_lv23_3 = "11";
const sc_lv<23> tensor_weight_y::ap_const_lv23_4 = "100";
const sc_lv<23> tensor_weight_y::ap_const_lv23_5 = "101";
const bool tensor_weight_y::ap_const_boolean_1 = true;

tensor_weight_y::tensor_weight_y(sc_module_name name) : sc_module(name), mVcdFile(0) {
    acc_val_U = new tensor_weight_y_acc_val("acc_val_U");
    acc_val_U->clk(ap_clk);
    acc_val_U->reset(ap_rst);
    acc_val_U->address0(acc_val_address0);
    acc_val_U->ce0(acc_val_ce0);
    acc_val_U->we0(acc_val_we0);
    acc_val_U->d0(acc_val_d0);
    acc_val_U->q0(acc_val_q0);
    acc_val_U->address1(acc_val_address1);
    acc_val_U->ce1(acc_val_ce1);
    acc_val_U->q1(acc_val_q1);
    optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U41 = new optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1<1,4,32,32,32>("optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U41");
    optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U41->clk(ap_clk);
    optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U41->reset(ap_rst);
    optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U41->din0(reg_306);
    optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U41->din1(tmp_reg_748);
    optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U41->ce(ap_var_for_const0);
    optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U41->dout(grp_fu_298_p2);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U42 = new optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1<1,3,32,32,32>("optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U42");
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U42->clk(ap_clk);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U42->reset(ap_rst);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U42->din0(out_product_val_load_reg_737);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U42->din1(select_ln7_reg_709);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U42->ce(ap_var_for_const0);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U42->dout(grp_fu_302_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_acc_val_address0);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( acc_val_addr_7_reg_742 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( zext_ln160_fu_412_p1 );

    SC_METHOD(thread_acc_val_address1);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( zext_ln169_2_fu_565_p1 );

    SC_METHOD(thread_acc_val_ce0);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_acc_val_ce1);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_acc_val_d0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_1_reg_753 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_acc_val_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln158_fu_400_p2 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_add_ln169_1_fu_555_p2);
    sensitive << ( sub_ln169_1_reg_704 );
    sensitive << ( zext_ln169_3_fu_551_p1 );

    SC_METHOD(thread_add_ln169_fu_455_p2);
    sensitive << ( zext_ln165_1_reg_691 );
    sensitive << ( zext_ln169_fu_451_p1 );

    SC_METHOD(thread_add_ln175_1_fu_504_p2);
    sensitive << ( sext_ln155_reg_670 );
    sensitive << ( zext_ln175_fu_500_p1 );

    SC_METHOD(thread_add_ln175_2_fu_584_p2);
    sensitive << ( sub_ln175_reg_714 );

    SC_METHOD(thread_add_ln175_3_fu_594_p2);
    sensitive << ( sub_ln175_reg_714 );

    SC_METHOD(thread_add_ln175_4_fu_604_p2);
    sensitive << ( sub_ln175_reg_714 );

    SC_METHOD(thread_add_ln175_5_fu_614_p2);
    sensitive << ( sub_ln175_reg_714 );

    SC_METHOD(thread_add_ln175_fu_370_p2);
    sensitive << ( zext_ln153_fu_320_p1 );

    SC_METHOD(thread_and_ln163_fu_358_p2);
    sensitive << ( icmp_ln163_fu_346_p2 );
    sensitive << ( icmp_ln163_1_fu_352_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln153_fu_324_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln153_fu_324_p2 );

    SC_METHOD(thread_c_fu_394_p2);
    sensitive << ( c_0_reg_252 );

    SC_METHOD(thread_component_fu_545_p2);
    sensitive << ( component_0_reg_286 );

    SC_METHOD(thread_i_fu_431_p2);
    sensitive << ( i_0_reg_275 );

    SC_METHOD(thread_icmp_ln153_fu_324_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( r_0_reg_240 );

    SC_METHOD(thread_icmp_ln155_fu_388_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( c_0_reg_252 );

    SC_METHOD(thread_icmp_ln158_fu_400_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( k_0_reg_264 );

    SC_METHOD(thread_icmp_ln163_1_fu_352_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln153_fu_324_p2 );
    sensitive << ( r_0_reg_240 );

    SC_METHOD(thread_icmp_ln163_fu_346_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln153_fu_324_p2 );
    sensitive << ( tmp_4_fu_336_p4 );

    SC_METHOD(thread_icmp_ln165_fu_425_p2);
    sensitive << ( and_ln163_reg_662 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( i_0_reg_275 );

    SC_METHOD(thread_icmp_ln167_fu_539_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( component_0_reg_286 );

    SC_METHOD(thread_icmp_ln173_fu_364_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln153_fu_324_p2 );
    sensitive << ( r_0_reg_240 );

    SC_METHOD(thread_icmp_ln7_fu_486_p2);
    sensitive << ( and_ln163_reg_662 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln165_fu_425_p2 );
    sensitive << ( i_0_reg_275 );

    SC_METHOD(thread_k_fu_406_p2);
    sensitive << ( k_0_reg_264 );

    SC_METHOD(thread_or_ln175_fu_574_p2);
    sensitive << ( sub_ln175_reg_714 );

    SC_METHOD(thread_out_product_val_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln169_4_fu_560_p1 );

    SC_METHOD(thread_out_product_val_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_p_shl2_cast_fu_513_p3);
    sensitive << ( trunc_ln175_fu_509_p1 );

    SC_METHOD(thread_p_shl_cast_fu_460_p3);
    sensitive << ( add_ln169_fu_455_p2 );

    SC_METHOD(thread_r_fu_330_p2);
    sensitive << ( r_0_reg_240 );

    SC_METHOD(thread_select_ln7_fu_492_p3);
    sensitive << ( icmp_ln7_fu_486_p2 );

    SC_METHOD(thread_sext_ln155_fu_384_p1);
    sensitive << ( tmp_2_fu_376_p3 );

    SC_METHOD(thread_sext_ln175_fu_529_p1);
    sensitive << ( tmp_6_fu_521_p3 );

    SC_METHOD(thread_sub_ln169_1_fu_480_p2);
    sensitive << ( p_shl_cast_fu_460_p3 );
    sensitive << ( zext_ln169_1_fu_476_p1 );

    SC_METHOD(thread_sub_ln169_fu_437_p2);
    sensitive << ( r_0_reg_240 );
    sensitive << ( zext_ln165_fu_421_p1 );

    SC_METHOD(thread_sub_ln175_fu_533_p2);
    sensitive << ( p_shl2_cast_fu_513_p3 );
    sensitive << ( sext_ln175_fu_529_p1 );

    SC_METHOD(thread_tensor_y_val_2_address0);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( zext_ln175_1_fu_570_p1 );
    sensitive << ( zext_ln175_3_fu_589_p1 );
    sensitive << ( zext_ln175_5_fu_609_p1 );

    SC_METHOD(thread_tensor_y_val_2_address1);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( zext_ln175_2_fu_579_p1 );
    sensitive << ( zext_ln175_4_fu_599_p1 );
    sensitive << ( zext_ln175_6_fu_619_p1 );

    SC_METHOD(thread_tensor_y_val_2_ce0);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_tensor_y_val_2_ce1);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_tensor_y_val_2_d0);
    sensitive << ( acc_val_q1 );
    sensitive << ( acc_val_q0 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_tensor_y_val_2_d1);
    sensitive << ( acc_val_q1 );
    sensitive << ( acc_val_q0 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_tensor_y_val_2_we0);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_tensor_y_val_2_we1);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_tmp_2_fu_376_p3);
    sensitive << ( add_ln175_fu_370_p2 );

    SC_METHOD(thread_tmp_3_fu_443_p3);
    sensitive << ( sub_ln169_fu_437_p2 );

    SC_METHOD(thread_tmp_4_fu_336_p4);
    sensitive << ( r_0_reg_240 );

    SC_METHOD(thread_tmp_5_fu_468_p3);
    sensitive << ( add_ln169_fu_455_p2 );

    SC_METHOD(thread_tmp_6_fu_521_p3);
    sensitive << ( add_ln175_1_fu_504_p2 );

    SC_METHOD(thread_trunc_ln175_fu_509_p1);
    sensitive << ( add_ln175_1_fu_504_p2 );

    SC_METHOD(thread_zext_ln153_fu_320_p1);
    sensitive << ( r_0_reg_240 );

    SC_METHOD(thread_zext_ln160_fu_412_p1);
    sensitive << ( k_0_reg_264 );

    SC_METHOD(thread_zext_ln165_1_fu_417_p1);
    sensitive << ( c_0_reg_252 );

    SC_METHOD(thread_zext_ln165_fu_421_p1);
    sensitive << ( i_0_reg_275 );

    SC_METHOD(thread_zext_ln169_1_fu_476_p1);
    sensitive << ( tmp_5_fu_468_p3 );

    SC_METHOD(thread_zext_ln169_2_fu_565_p1);
    sensitive << ( component_0_reg_286 );

    SC_METHOD(thread_zext_ln169_3_fu_551_p1);
    sensitive << ( component_0_reg_286 );

    SC_METHOD(thread_zext_ln169_4_fu_560_p1);
    sensitive << ( add_ln169_1_fu_555_p2 );

    SC_METHOD(thread_zext_ln169_fu_451_p1);
    sensitive << ( tmp_3_fu_443_p3 );

    SC_METHOD(thread_zext_ln175_1_fu_570_p1);
    sensitive << ( sub_ln175_reg_714 );

    SC_METHOD(thread_zext_ln175_2_fu_579_p1);
    sensitive << ( or_ln175_fu_574_p2 );

    SC_METHOD(thread_zext_ln175_3_fu_589_p1);
    sensitive << ( add_ln175_2_fu_584_p2 );

    SC_METHOD(thread_zext_ln175_4_fu_599_p1);
    sensitive << ( add_ln175_3_fu_594_p2 );

    SC_METHOD(thread_zext_ln175_5_fu_609_p1);
    sensitive << ( add_ln175_4_fu_604_p2 );

    SC_METHOD(thread_zext_ln175_6_fu_619_p1);
    sensitive << ( add_ln175_5_fu_614_p2 );

    SC_METHOD(thread_zext_ln175_fu_500_p1);
    sensitive << ( c_0_reg_252 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( and_ln163_reg_662 );
    sensitive << ( icmp_ln153_fu_324_p2 );
    sensitive << ( icmp_ln173_reg_666 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln158_fu_400_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln165_fu_425_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln167_fu_539_p2 );
    sensitive << ( icmp_ln155_fu_388_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "tensor_weight_y_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, tensor_y_val_2_address0, "(port)tensor_y_val_2_address0");
    sc_trace(mVcdFile, tensor_y_val_2_ce0, "(port)tensor_y_val_2_ce0");
    sc_trace(mVcdFile, tensor_y_val_2_we0, "(port)tensor_y_val_2_we0");
    sc_trace(mVcdFile, tensor_y_val_2_d0, "(port)tensor_y_val_2_d0");
    sc_trace(mVcdFile, tensor_y_val_2_address1, "(port)tensor_y_val_2_address1");
    sc_trace(mVcdFile, tensor_y_val_2_ce1, "(port)tensor_y_val_2_ce1");
    sc_trace(mVcdFile, tensor_y_val_2_we1, "(port)tensor_y_val_2_we1");
    sc_trace(mVcdFile, tensor_y_val_2_d1, "(port)tensor_y_val_2_d1");
    sc_trace(mVcdFile, out_product_val_address0, "(port)out_product_val_address0");
    sc_trace(mVcdFile, out_product_val_ce0, "(port)out_product_val_ce0");
    sc_trace(mVcdFile, out_product_val_q0, "(port)out_product_val_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, acc_val_q1, "acc_val_q1");
    sc_trace(mVcdFile, reg_306, "reg_306");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, acc_val_q0, "acc_val_q0");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, r_fu_330_p2, "r_fu_330_p2");
    sc_trace(mVcdFile, r_reg_657, "r_reg_657");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, and_ln163_fu_358_p2, "and_ln163_fu_358_p2");
    sc_trace(mVcdFile, and_ln163_reg_662, "and_ln163_reg_662");
    sc_trace(mVcdFile, icmp_ln153_fu_324_p2, "icmp_ln153_fu_324_p2");
    sc_trace(mVcdFile, icmp_ln173_fu_364_p2, "icmp_ln173_fu_364_p2");
    sc_trace(mVcdFile, icmp_ln173_reg_666, "icmp_ln173_reg_666");
    sc_trace(mVcdFile, sext_ln155_fu_384_p1, "sext_ln155_fu_384_p1");
    sc_trace(mVcdFile, sext_ln155_reg_670, "sext_ln155_reg_670");
    sc_trace(mVcdFile, c_fu_394_p2, "c_fu_394_p2");
    sc_trace(mVcdFile, c_reg_678, "c_reg_678");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, k_fu_406_p2, "k_fu_406_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, zext_ln165_1_fu_417_p1, "zext_ln165_1_fu_417_p1");
    sc_trace(mVcdFile, zext_ln165_1_reg_691, "zext_ln165_1_reg_691");
    sc_trace(mVcdFile, icmp_ln158_fu_400_p2, "icmp_ln158_fu_400_p2");
    sc_trace(mVcdFile, i_fu_431_p2, "i_fu_431_p2");
    sc_trace(mVcdFile, i_reg_699, "i_reg_699");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, sub_ln169_1_fu_480_p2, "sub_ln169_1_fu_480_p2");
    sc_trace(mVcdFile, sub_ln169_1_reg_704, "sub_ln169_1_reg_704");
    sc_trace(mVcdFile, icmp_ln165_fu_425_p2, "icmp_ln165_fu_425_p2");
    sc_trace(mVcdFile, select_ln7_fu_492_p3, "select_ln7_fu_492_p3");
    sc_trace(mVcdFile, select_ln7_reg_709, "select_ln7_reg_709");
    sc_trace(mVcdFile, sub_ln175_fu_533_p2, "sub_ln175_fu_533_p2");
    sc_trace(mVcdFile, sub_ln175_reg_714, "sub_ln175_reg_714");
    sc_trace(mVcdFile, component_fu_545_p2, "component_fu_545_p2");
    sc_trace(mVcdFile, component_reg_727, "component_reg_727");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, icmp_ln167_fu_539_p2, "icmp_ln167_fu_539_p2");
    sc_trace(mVcdFile, out_product_val_load_reg_737, "out_product_val_load_reg_737");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, acc_val_addr_7_reg_742, "acc_val_addr_7_reg_742");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, grp_fu_302_p2, "grp_fu_302_p2");
    sc_trace(mVcdFile, tmp_reg_748, "tmp_reg_748");
    sc_trace(mVcdFile, grp_fu_298_p2, "grp_fu_298_p2");
    sc_trace(mVcdFile, tmp_1_reg_753, "tmp_1_reg_753");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, acc_val_address0, "acc_val_address0");
    sc_trace(mVcdFile, acc_val_ce0, "acc_val_ce0");
    sc_trace(mVcdFile, acc_val_we0, "acc_val_we0");
    sc_trace(mVcdFile, acc_val_d0, "acc_val_d0");
    sc_trace(mVcdFile, acc_val_address1, "acc_val_address1");
    sc_trace(mVcdFile, acc_val_ce1, "acc_val_ce1");
    sc_trace(mVcdFile, r_0_reg_240, "r_0_reg_240");
    sc_trace(mVcdFile, icmp_ln155_fu_388_p2, "icmp_ln155_fu_388_p2");
    sc_trace(mVcdFile, c_0_reg_252, "c_0_reg_252");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, k_0_reg_264, "k_0_reg_264");
    sc_trace(mVcdFile, i_0_reg_275, "i_0_reg_275");
    sc_trace(mVcdFile, component_0_reg_286, "component_0_reg_286");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, zext_ln160_fu_412_p1, "zext_ln160_fu_412_p1");
    sc_trace(mVcdFile, zext_ln169_4_fu_560_p1, "zext_ln169_4_fu_560_p1");
    sc_trace(mVcdFile, zext_ln169_2_fu_565_p1, "zext_ln169_2_fu_565_p1");
    sc_trace(mVcdFile, zext_ln175_1_fu_570_p1, "zext_ln175_1_fu_570_p1");
    sc_trace(mVcdFile, zext_ln175_2_fu_579_p1, "zext_ln175_2_fu_579_p1");
    sc_trace(mVcdFile, zext_ln175_3_fu_589_p1, "zext_ln175_3_fu_589_p1");
    sc_trace(mVcdFile, zext_ln175_4_fu_599_p1, "zext_ln175_4_fu_599_p1");
    sc_trace(mVcdFile, zext_ln175_5_fu_609_p1, "zext_ln175_5_fu_609_p1");
    sc_trace(mVcdFile, zext_ln175_6_fu_619_p1, "zext_ln175_6_fu_619_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, tmp_4_fu_336_p4, "tmp_4_fu_336_p4");
    sc_trace(mVcdFile, icmp_ln163_fu_346_p2, "icmp_ln163_fu_346_p2");
    sc_trace(mVcdFile, icmp_ln163_1_fu_352_p2, "icmp_ln163_1_fu_352_p2");
    sc_trace(mVcdFile, zext_ln153_fu_320_p1, "zext_ln153_fu_320_p1");
    sc_trace(mVcdFile, add_ln175_fu_370_p2, "add_ln175_fu_370_p2");
    sc_trace(mVcdFile, tmp_2_fu_376_p3, "tmp_2_fu_376_p3");
    sc_trace(mVcdFile, zext_ln165_fu_421_p1, "zext_ln165_fu_421_p1");
    sc_trace(mVcdFile, sub_ln169_fu_437_p2, "sub_ln169_fu_437_p2");
    sc_trace(mVcdFile, tmp_3_fu_443_p3, "tmp_3_fu_443_p3");
    sc_trace(mVcdFile, zext_ln169_fu_451_p1, "zext_ln169_fu_451_p1");
    sc_trace(mVcdFile, add_ln169_fu_455_p2, "add_ln169_fu_455_p2");
    sc_trace(mVcdFile, tmp_5_fu_468_p3, "tmp_5_fu_468_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_460_p3, "p_shl_cast_fu_460_p3");
    sc_trace(mVcdFile, zext_ln169_1_fu_476_p1, "zext_ln169_1_fu_476_p1");
    sc_trace(mVcdFile, icmp_ln7_fu_486_p2, "icmp_ln7_fu_486_p2");
    sc_trace(mVcdFile, zext_ln175_fu_500_p1, "zext_ln175_fu_500_p1");
    sc_trace(mVcdFile, add_ln175_1_fu_504_p2, "add_ln175_1_fu_504_p2");
    sc_trace(mVcdFile, trunc_ln175_fu_509_p1, "trunc_ln175_fu_509_p1");
    sc_trace(mVcdFile, tmp_6_fu_521_p3, "tmp_6_fu_521_p3");
    sc_trace(mVcdFile, p_shl2_cast_fu_513_p3, "p_shl2_cast_fu_513_p3");
    sc_trace(mVcdFile, sext_ln175_fu_529_p1, "sext_ln175_fu_529_p1");
    sc_trace(mVcdFile, zext_ln169_3_fu_551_p1, "zext_ln169_3_fu_551_p1");
    sc_trace(mVcdFile, add_ln169_1_fu_555_p2, "add_ln169_1_fu_555_p2");
    sc_trace(mVcdFile, or_ln175_fu_574_p2, "or_ln175_fu_574_p2");
    sc_trace(mVcdFile, add_ln175_2_fu_584_p2, "add_ln175_2_fu_584_p2");
    sc_trace(mVcdFile, add_ln175_3_fu_594_p2, "add_ln175_3_fu_594_p2");
    sc_trace(mVcdFile, add_ln175_4_fu_604_p2, "add_ln175_4_fu_604_p2");
    sc_trace(mVcdFile, add_ln175_5_fu_614_p2, "add_ln175_5_fu_614_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

tensor_weight_y::~tensor_weight_y() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete acc_val_U;
    delete optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U41;
    delete optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U42;
}

void tensor_weight_y::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void tensor_weight_y::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln153_fu_324_p2.read(), ap_const_lv1_0))) {
        c_0_reg_252 = ap_const_lv11_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        c_0_reg_252 = c_reg_678.read();
    }
    if ((esl_seteq<1,1,1>(and_ln163_reg_662.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln165_fu_425_p2.read()))) {
        component_0_reg_286 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        component_0_reg_286 = component_reg_727.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln167_fu_539_p2.read()))) {
        i_0_reg_275 = i_reg_699.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(icmp_ln158_fu_400_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(and_ln163_reg_662.read(), ap_const_lv1_1))) {
        i_0_reg_275 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln155_fu_388_p2.read()))) {
        k_0_reg_264 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln158_fu_400_p2.read()))) {
        k_0_reg_264 = k_fu_406_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln155_fu_388_p2.read()))) {
        r_0_reg_240 = r_reg_657.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        r_0_reg_240 = ap_const_lv9_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        reg_306 = acc_val_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
        reg_306 = acc_val_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        acc_val_addr_7_reg_742 =  (sc_lv<3>) (zext_ln169_2_fu_565_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln153_fu_324_p2.read(), ap_const_lv1_0))) {
        and_ln163_reg_662 = and_ln163_fu_358_p2.read();
        icmp_ln173_reg_666 = icmp_ln173_fu_364_p2.read();
        sext_ln155_reg_670 = sext_ln155_fu_384_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        c_reg_678 = c_fu_394_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        component_reg_727 = component_fu_545_p2.read();
    }
    if ((esl_seteq<1,1,1>(and_ln163_reg_662.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        i_reg_699 = i_fu_431_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        out_product_val_load_reg_737 = out_product_val_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        r_reg_657 = r_fu_330_p2.read();
    }
    if ((esl_seteq<1,1,1>(and_ln163_reg_662.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln165_fu_425_p2.read()))) {
        select_ln7_reg_709 = select_ln7_fu_492_p3.read();
        sub_ln169_1_reg_704 = sub_ln169_1_fu_480_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && ((esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln165_fu_425_p2.read()) && 
   esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln173_reg_666.read())) || 
  (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln173_reg_666.read()) && 
   esl_seteq<1,1,1>(and_ln163_reg_662.read(), ap_const_lv1_0))))) {
        sub_ln175_reg_714 = sub_ln175_fu_533_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        tmp_1_reg_753 = grp_fu_298_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        tmp_reg_748 = grp_fu_302_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln158_fu_400_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(and_ln163_reg_662.read(), ap_const_lv1_1))) {
        zext_ln165_1_reg_691 = zext_ln165_1_fu_417_p1.read();
    }
}

void tensor_weight_y::thread_acc_val_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        acc_val_address0 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        acc_val_address0 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        acc_val_address0 = acc_val_addr_7_reg_742.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        acc_val_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        acc_val_address0 =  (sc_lv<3>) (zext_ln160_fu_412_p1.read());
    } else {
        acc_val_address0 = "XXX";
    }
}

void tensor_weight_y::thread_acc_val_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        acc_val_address1 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        acc_val_address1 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        acc_val_address1 =  (sc_lv<3>) (zext_ln169_2_fu_565_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        acc_val_address1 =  (sc_lv<3>) (ap_const_lv64_1);
    } else {
        acc_val_address1 = "XXX";
    }
}

void tensor_weight_y::thread_acc_val_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        acc_val_ce0 = ap_const_logic_1;
    } else {
        acc_val_ce0 = ap_const_logic_0;
    }
}

void tensor_weight_y::thread_acc_val_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        acc_val_ce1 = ap_const_logic_1;
    } else {
        acc_val_ce1 = ap_const_logic_0;
    }
}

void tensor_weight_y::thread_acc_val_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        acc_val_d0 = tmp_1_reg_753.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        acc_val_d0 = ap_const_lv32_0;
    } else {
        acc_val_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void tensor_weight_y::thread_acc_val_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln158_fu_400_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        acc_val_we0 = ap_const_logic_1;
    } else {
        acc_val_we0 = ap_const_logic_0;
    }
}

void tensor_weight_y::thread_add_ln169_1_fu_555_p2() {
    add_ln169_1_fu_555_p2 = (!sub_ln169_1_reg_704.read().is_01() || !zext_ln169_3_fu_551_p1.read().is_01())? sc_lv<23>(): (sc_biguint<23>(sub_ln169_1_reg_704.read()) + sc_biguint<23>(zext_ln169_3_fu_551_p1.read()));
}

void tensor_weight_y::thread_add_ln169_fu_455_p2() {
    add_ln169_fu_455_p2 = (!zext_ln169_fu_451_p1.read().is_01() || !zext_ln165_1_reg_691.read().is_01())? sc_lv<20>(): (sc_biguint<20>(zext_ln169_fu_451_p1.read()) + sc_biguint<20>(zext_ln165_1_reg_691.read()));
}

void tensor_weight_y::thread_add_ln175_1_fu_504_p2() {
    add_ln175_1_fu_504_p2 = (!sext_ln155_reg_670.read().is_01() || !zext_ln175_fu_500_p1.read().is_01())? sc_lv<21>(): (sc_bigint<21>(sext_ln155_reg_670.read()) + sc_biguint<21>(zext_ln175_fu_500_p1.read()));
}

void tensor_weight_y::thread_add_ln175_2_fu_584_p2() {
    add_ln175_2_fu_584_p2 = (!ap_const_lv23_2.is_01() || !sub_ln175_reg_714.read().is_01())? sc_lv<23>(): (sc_biguint<23>(ap_const_lv23_2) + sc_biguint<23>(sub_ln175_reg_714.read()));
}

void tensor_weight_y::thread_add_ln175_3_fu_594_p2() {
    add_ln175_3_fu_594_p2 = (!ap_const_lv23_3.is_01() || !sub_ln175_reg_714.read().is_01())? sc_lv<23>(): (sc_biguint<23>(ap_const_lv23_3) + sc_biguint<23>(sub_ln175_reg_714.read()));
}

void tensor_weight_y::thread_add_ln175_4_fu_604_p2() {
    add_ln175_4_fu_604_p2 = (!ap_const_lv23_4.is_01() || !sub_ln175_reg_714.read().is_01())? sc_lv<23>(): (sc_biguint<23>(ap_const_lv23_4) + sc_biguint<23>(sub_ln175_reg_714.read()));
}

void tensor_weight_y::thread_add_ln175_5_fu_614_p2() {
    add_ln175_5_fu_614_p2 = (!ap_const_lv23_5.is_01() || !sub_ln175_reg_714.read().is_01())? sc_lv<23>(): (sc_biguint<23>(ap_const_lv23_5) + sc_biguint<23>(sub_ln175_reg_714.read()));
}

void tensor_weight_y::thread_add_ln175_fu_370_p2() {
    add_ln175_fu_370_p2 = (!zext_ln153_fu_320_p1.read().is_01() || !ap_const_lv10_3FF.is_01())? sc_lv<10>(): (sc_biguint<10>(zext_ln153_fu_320_p1.read()) + sc_bigint<10>(ap_const_lv10_3FF));
}

void tensor_weight_y::thread_and_ln163_fu_358_p2() {
    and_ln163_fu_358_p2 = (icmp_ln163_fu_346_p2.read() & icmp_ln163_1_fu_352_p2.read());
}

void tensor_weight_y::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void tensor_weight_y::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void tensor_weight_y::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void tensor_weight_y::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void tensor_weight_y::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void tensor_weight_y::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void tensor_weight_y::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void tensor_weight_y::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void tensor_weight_y::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void tensor_weight_y::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void tensor_weight_y::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void tensor_weight_y::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void tensor_weight_y::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void tensor_weight_y::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void tensor_weight_y::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void tensor_weight_y::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void tensor_weight_y::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void tensor_weight_y::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void tensor_weight_y::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void tensor_weight_y::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln153_fu_324_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void tensor_weight_y::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void tensor_weight_y::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln153_fu_324_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void tensor_weight_y::thread_c_fu_394_p2() {
    c_fu_394_p2 = (!c_0_reg_252.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(c_0_reg_252.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void tensor_weight_y::thread_component_fu_545_p2() {
    component_fu_545_p2 = (!component_0_reg_286.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(component_0_reg_286.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void tensor_weight_y::thread_i_fu_431_p2() {
    i_fu_431_p2 = (!i_0_reg_275.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i_0_reg_275.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void tensor_weight_y::thread_icmp_ln153_fu_324_p2() {
    icmp_ln153_fu_324_p2 = (!r_0_reg_240.read().is_01() || !ap_const_lv9_1B5.is_01())? sc_lv<1>(): sc_lv<1>(r_0_reg_240.read() == ap_const_lv9_1B5);
}

void tensor_weight_y::thread_icmp_ln155_fu_388_p2() {
    icmp_ln155_fu_388_p2 = (!c_0_reg_252.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(c_0_reg_252.read() == ap_const_lv11_400);
}

void tensor_weight_y::thread_icmp_ln158_fu_400_p2() {
    icmp_ln158_fu_400_p2 = (!k_0_reg_264.read().is_01() || !ap_const_lv3_6.is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_264.read() == ap_const_lv3_6);
}

void tensor_weight_y::thread_icmp_ln163_1_fu_352_p2() {
    icmp_ln163_1_fu_352_p2 = (!r_0_reg_240.read().is_01() || !ap_const_lv9_1B4.is_01())? sc_lv<1>(): (sc_biguint<9>(r_0_reg_240.read()) < sc_biguint<9>(ap_const_lv9_1B4));
}

void tensor_weight_y::thread_icmp_ln163_fu_346_p2() {
    icmp_ln163_fu_346_p2 = (!tmp_4_fu_336_p4.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_4_fu_336_p4.read() != ap_const_lv8_0);
}

void tensor_weight_y::thread_icmp_ln165_fu_425_p2() {
    icmp_ln165_fu_425_p2 = (!i_0_reg_275.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_275.read() == ap_const_lv2_3);
}

void tensor_weight_y::thread_icmp_ln167_fu_539_p2() {
    icmp_ln167_fu_539_p2 = (!component_0_reg_286.read().is_01() || !ap_const_lv3_6.is_01())? sc_lv<1>(): sc_lv<1>(component_0_reg_286.read() == ap_const_lv3_6);
}

void tensor_weight_y::thread_icmp_ln173_fu_364_p2() {
    icmp_ln173_fu_364_p2 = (!r_0_reg_240.read().is_01() || !ap_const_lv9_0.is_01())? sc_lv<1>(): sc_lv<1>(r_0_reg_240.read() == ap_const_lv9_0);
}

void tensor_weight_y::thread_icmp_ln7_fu_486_p2() {
    icmp_ln7_fu_486_p2 = (!i_0_reg_275.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_275.read() == ap_const_lv2_1);
}

void tensor_weight_y::thread_k_fu_406_p2() {
    k_fu_406_p2 = (!k_0_reg_264.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(k_0_reg_264.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void tensor_weight_y::thread_or_ln175_fu_574_p2() {
    or_ln175_fu_574_p2 = (sub_ln175_reg_714.read() | ap_const_lv23_1);
}

void tensor_weight_y::thread_out_product_val_address0() {
    out_product_val_address0 =  (sc_lv<22>) (zext_ln169_4_fu_560_p1.read());
}

void tensor_weight_y::thread_out_product_val_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        out_product_val_ce0 = ap_const_logic_1;
    } else {
        out_product_val_ce0 = ap_const_logic_0;
    }
}

void tensor_weight_y::thread_p_shl2_cast_fu_513_p3() {
    p_shl2_cast_fu_513_p3 = esl_concat<20,3>(trunc_ln175_fu_509_p1.read(), ap_const_lv3_0);
}

void tensor_weight_y::thread_p_shl_cast_fu_460_p3() {
    p_shl_cast_fu_460_p3 = esl_concat<20,3>(add_ln169_fu_455_p2.read(), ap_const_lv3_0);
}

void tensor_weight_y::thread_r_fu_330_p2() {
    r_fu_330_p2 = (!r_0_reg_240.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(r_0_reg_240.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void tensor_weight_y::thread_select_ln7_fu_492_p3() {
    select_ln7_fu_492_p3 = (!icmp_ln7_fu_486_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln7_fu_486_p2.read()[0].to_bool())? ap_const_lv32_3EB3DD98: ap_const_lv32_3EA60AA6);
}

void tensor_weight_y::thread_sext_ln155_fu_384_p1() {
    sext_ln155_fu_384_p1 = esl_sext<21,20>(tmp_2_fu_376_p3.read());
}

void tensor_weight_y::thread_sext_ln175_fu_529_p1() {
    sext_ln175_fu_529_p1 = esl_sext<23,22>(tmp_6_fu_521_p3.read());
}

void tensor_weight_y::thread_sub_ln169_1_fu_480_p2() {
    sub_ln169_1_fu_480_p2 = (!p_shl_cast_fu_460_p3.read().is_01() || !zext_ln169_1_fu_476_p1.read().is_01())? sc_lv<23>(): (sc_biguint<23>(p_shl_cast_fu_460_p3.read()) - sc_biguint<23>(zext_ln169_1_fu_476_p1.read()));
}

void tensor_weight_y::thread_sub_ln169_fu_437_p2() {
    sub_ln169_fu_437_p2 = (!r_0_reg_240.read().is_01() || !zext_ln165_fu_421_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(r_0_reg_240.read()) - sc_biguint<9>(zext_ln165_fu_421_p1.read()));
}

void tensor_weight_y::thread_sub_ln175_fu_533_p2() {
    sub_ln175_fu_533_p2 = (!p_shl2_cast_fu_513_p3.read().is_01() || !sext_ln175_fu_529_p1.read().is_01())? sc_lv<23>(): (sc_biguint<23>(p_shl2_cast_fu_513_p3.read()) - sc_bigint<23>(sext_ln175_fu_529_p1.read()));
}

void tensor_weight_y::thread_tensor_y_val_2_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        tensor_y_val_2_address0 =  (sc_lv<22>) (zext_ln175_5_fu_609_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        tensor_y_val_2_address0 =  (sc_lv<22>) (zext_ln175_3_fu_589_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        tensor_y_val_2_address0 =  (sc_lv<22>) (zext_ln175_1_fu_570_p1.read());
    } else {
        tensor_y_val_2_address0 =  (sc_lv<22>) ("XXXXXXXXXXXXXXXXXXXXXX");
    }
}

void tensor_weight_y::thread_tensor_y_val_2_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        tensor_y_val_2_address1 =  (sc_lv<22>) (zext_ln175_6_fu_619_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        tensor_y_val_2_address1 =  (sc_lv<22>) (zext_ln175_4_fu_599_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        tensor_y_val_2_address1 =  (sc_lv<22>) (zext_ln175_2_fu_579_p1.read());
    } else {
        tensor_y_val_2_address1 =  (sc_lv<22>) ("XXXXXXXXXXXXXXXXXXXXXX");
    }
}

void tensor_weight_y::thread_tensor_y_val_2_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        tensor_y_val_2_ce0 = ap_const_logic_1;
    } else {
        tensor_y_val_2_ce0 = ap_const_logic_0;
    }
}

void tensor_weight_y::thread_tensor_y_val_2_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        tensor_y_val_2_ce1 = ap_const_logic_1;
    } else {
        tensor_y_val_2_ce1 = ap_const_logic_0;
    }
}

void tensor_weight_y::thread_tensor_y_val_2_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        tensor_y_val_2_d0 = acc_val_q1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        tensor_y_val_2_d0 = acc_val_q0.read();
    } else {
        tensor_y_val_2_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void tensor_weight_y::thread_tensor_y_val_2_d1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        tensor_y_val_2_d1 = acc_val_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        tensor_y_val_2_d1 = acc_val_q1.read();
    } else {
        tensor_y_val_2_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void tensor_weight_y::thread_tensor_y_val_2_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        tensor_y_val_2_we0 = ap_const_logic_1;
    } else {
        tensor_y_val_2_we0 = ap_const_logic_0;
    }
}

void tensor_weight_y::thread_tensor_y_val_2_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        tensor_y_val_2_we1 = ap_const_logic_1;
    } else {
        tensor_y_val_2_we1 = ap_const_logic_0;
    }
}

void tensor_weight_y::thread_tmp_2_fu_376_p3() {
    tmp_2_fu_376_p3 = esl_concat<10,10>(add_ln175_fu_370_p2.read(), ap_const_lv10_0);
}

void tensor_weight_y::thread_tmp_3_fu_443_p3() {
    tmp_3_fu_443_p3 = esl_concat<9,10>(sub_ln169_fu_437_p2.read(), ap_const_lv10_0);
}

void tensor_weight_y::thread_tmp_4_fu_336_p4() {
    tmp_4_fu_336_p4 = r_0_reg_240.read().range(8, 1);
}

void tensor_weight_y::thread_tmp_5_fu_468_p3() {
    tmp_5_fu_468_p3 = esl_concat<20,1>(add_ln169_fu_455_p2.read(), ap_const_lv1_0);
}

void tensor_weight_y::thread_tmp_6_fu_521_p3() {
    tmp_6_fu_521_p3 = esl_concat<21,1>(add_ln175_1_fu_504_p2.read(), ap_const_lv1_0);
}

void tensor_weight_y::thread_trunc_ln175_fu_509_p1() {
    trunc_ln175_fu_509_p1 = add_ln175_1_fu_504_p2.read().range(20-1, 0);
}

void tensor_weight_y::thread_zext_ln153_fu_320_p1() {
    zext_ln153_fu_320_p1 = esl_zext<10,9>(r_0_reg_240.read());
}

void tensor_weight_y::thread_zext_ln160_fu_412_p1() {
    zext_ln160_fu_412_p1 = esl_zext<64,3>(k_0_reg_264.read());
}

void tensor_weight_y::thread_zext_ln165_1_fu_417_p1() {
    zext_ln165_1_fu_417_p1 = esl_zext<20,11>(c_0_reg_252.read());
}

void tensor_weight_y::thread_zext_ln165_fu_421_p1() {
    zext_ln165_fu_421_p1 = esl_zext<9,2>(i_0_reg_275.read());
}

void tensor_weight_y::thread_zext_ln169_1_fu_476_p1() {
    zext_ln169_1_fu_476_p1 = esl_zext<23,21>(tmp_5_fu_468_p3.read());
}

void tensor_weight_y::thread_zext_ln169_2_fu_565_p1() {
    zext_ln169_2_fu_565_p1 = esl_zext<64,3>(component_0_reg_286.read());
}

void tensor_weight_y::thread_zext_ln169_3_fu_551_p1() {
    zext_ln169_3_fu_551_p1 = esl_zext<23,3>(component_0_reg_286.read());
}

void tensor_weight_y::thread_zext_ln169_4_fu_560_p1() {
    zext_ln169_4_fu_560_p1 = esl_zext<64,23>(add_ln169_1_fu_555_p2.read());
}

void tensor_weight_y::thread_zext_ln169_fu_451_p1() {
    zext_ln169_fu_451_p1 = esl_zext<20,19>(tmp_3_fu_443_p3.read());
}

void tensor_weight_y::thread_zext_ln175_1_fu_570_p1() {
    zext_ln175_1_fu_570_p1 = esl_zext<64,23>(sub_ln175_reg_714.read());
}

void tensor_weight_y::thread_zext_ln175_2_fu_579_p1() {
    zext_ln175_2_fu_579_p1 = esl_zext<64,23>(or_ln175_fu_574_p2.read());
}

void tensor_weight_y::thread_zext_ln175_3_fu_589_p1() {
    zext_ln175_3_fu_589_p1 = esl_zext<64,23>(add_ln175_2_fu_584_p2.read());
}

void tensor_weight_y::thread_zext_ln175_4_fu_599_p1() {
    zext_ln175_4_fu_599_p1 = esl_zext<64,23>(add_ln175_3_fu_594_p2.read());
}

void tensor_weight_y::thread_zext_ln175_5_fu_609_p1() {
    zext_ln175_5_fu_609_p1 = esl_zext<64,23>(add_ln175_4_fu_604_p2.read());
}

void tensor_weight_y::thread_zext_ln175_6_fu_619_p1() {
    zext_ln175_6_fu_619_p1 = esl_zext<64,23>(add_ln175_5_fu_614_p2.read());
}

void tensor_weight_y::thread_zext_ln175_fu_500_p1() {
    zext_ln175_fu_500_p1 = esl_zext<21,11>(c_0_reg_252.read());
}

void tensor_weight_y::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln153_fu_324_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln155_fu_388_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln158_fu_400_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && ((esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln165_fu_425_p2.read()) && 
   esl_seteq<1,1,1>(icmp_ln173_reg_666.read(), ap_const_lv1_1)) || 
  (esl_seteq<1,1,1>(and_ln163_reg_662.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(icmp_ln173_reg_666.read(), ap_const_lv1_1))))) {
                ap_NS_fsm = ap_ST_fsm_state21;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && ((esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln165_fu_425_p2.read()) && 
   esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln173_reg_666.read())) || 
  (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln173_reg_666.read()) && 
   esl_seteq<1,1,1>(and_ln163_reg_662.read(), ap_const_lv1_0))))) {
                ap_NS_fsm = ap_ST_fsm_state18;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln167_fu_539_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<21>) ("XXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

