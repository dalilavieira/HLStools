-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rendering_sw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    triangle_3ds_x0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    triangle_3ds_x0_ce0 : OUT STD_LOGIC;
    triangle_3ds_x0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    triangle_3ds_y0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    triangle_3ds_y0_ce0 : OUT STD_LOGIC;
    triangle_3ds_y0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    triangle_3ds_z0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    triangle_3ds_z0_ce0 : OUT STD_LOGIC;
    triangle_3ds_z0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    triangle_3ds_x1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    triangle_3ds_x1_ce0 : OUT STD_LOGIC;
    triangle_3ds_x1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    triangle_3ds_y1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    triangle_3ds_y1_ce0 : OUT STD_LOGIC;
    triangle_3ds_y1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    triangle_3ds_z1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    triangle_3ds_z1_ce0 : OUT STD_LOGIC;
    triangle_3ds_z1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    triangle_3ds_x2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    triangle_3ds_x2_ce0 : OUT STD_LOGIC;
    triangle_3ds_x2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    triangle_3ds_y2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    triangle_3ds_y2_ce0 : OUT STD_LOGIC;
    triangle_3ds_y2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    triangle_3ds_z2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    triangle_3ds_z2_ce0 : OUT STD_LOGIC;
    triangle_3ds_z2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of rendering_sw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "rendering_sw,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.702000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=39,HLS_SYN_DSP=3,HLS_SYN_FF=1316,HLS_SYN_LUT=2493,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv8_64 : STD_LOGIC_VECTOR (7 downto 0) := "01100100";
    constant ap_const_lv12_C78 : STD_LOGIC_VECTOR (11 downto 0) := "110001111000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv18_156 : STD_LOGIC_VECTOR (17 downto 0) := "000000000101010110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_fu_378_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_reg_1090 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln276_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal triangle_2ds_x0_reg_1140 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal triangle_2ds_y0_reg_1146 : STD_LOGIC_VECTOR (7 downto 0);
    signal triangle_2ds_x1_reg_1152 : STD_LOGIC_VECTOR (7 downto 0);
    signal triangle_2ds_y1_reg_1158 : STD_LOGIC_VECTOR (7 downto 0);
    signal triangle_2ds_x2_reg_1164 : STD_LOGIC_VECTOR (7 downto 0);
    signal triangle_2ds_y2_reg_1176 : STD_LOGIC_VECTOR (7 downto 0);
    signal triangle_2ds_z_fu_463_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal triangle_2ds_z_reg_1188 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln24_fu_469_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln24_reg_1193 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln24_1_fu_473_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln24_1_reg_1200 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln24_2_fu_487_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln24_2_reg_1206 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln24_3_fu_491_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln24_3_reg_1212 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln24_1_fu_501_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln24_1_reg_1218 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln24_4_fu_515_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln24_4_reg_1223 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln24_5_fu_529_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln24_5_reg_1230 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln24_3_fu_539_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln24_3_reg_1236 : STD_LOGIC_VECTOR (17 downto 0);
    signal flag_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal flag_reg_1241 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1249 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_min_2_fu_809_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_min_2_reg_1257 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal max_index_0_fu_823_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_index_0_reg_1262 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_min_0_fu_830_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_min_0_reg_1267 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln58_fu_857_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln58_reg_1272 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln59_fu_865_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln59_reg_1278 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln59_1_fu_873_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln59_1_reg_1283 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln60_fu_881_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln60_reg_1288 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln60_1_fu_889_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln60_1_reg_1293 : STD_LOGIC_VECTOR (17 downto 0);
    signal k_fu_902_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_reg_1301 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal x_fu_922_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_reg_1306 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal y_fu_931_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_reg_1311 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln58_fu_949_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln58_reg_1316 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln58_1_fu_958_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln58_1_reg_1321 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln59_fu_972_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln59_reg_1326 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln59_3_fu_977_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln59_3_reg_1331 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln60_fu_991_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln60_reg_1336 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln60_3_fu_996_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln60_3_reg_1341 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_zculling_fu_343_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal size_pixels_reg_1349 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_zculling_fu_343_ap_ready : STD_LOGIC;
    signal grp_zculling_fu_343_ap_done : STD_LOGIC;
    signal fragment_x_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal fragment_x_ce0 : STD_LOGIC;
    signal fragment_x_we0 : STD_LOGIC;
    signal fragment_x_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fragment_y_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal fragment_y_ce0 : STD_LOGIC;
    signal fragment_y_we0 : STD_LOGIC;
    signal fragment_y_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fragment_z_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal fragment_z_ce0 : STD_LOGIC;
    signal fragment_z_we0 : STD_LOGIC;
    signal fragment_z_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fragment_color_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal fragment_color_ce0 : STD_LOGIC;
    signal fragment_color_we0 : STD_LOGIC;
    signal fragment_color_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixels_x_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal pixels_x_ce0 : STD_LOGIC;
    signal pixels_x_we0 : STD_LOGIC;
    signal pixels_x_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixels_y_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal pixels_y_ce0 : STD_LOGIC;
    signal pixels_y_we0 : STD_LOGIC;
    signal pixels_y_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixels_color_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal pixels_color_ce0 : STD_LOGIC;
    signal pixels_color_we0 : STD_LOGIC;
    signal pixels_color_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_zculling_fu_343_ap_start : STD_LOGIC;
    signal grp_zculling_fu_343_ap_idle : STD_LOGIC;
    signal grp_zculling_fu_343_fragments_x_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_zculling_fu_343_fragments_x_ce0 : STD_LOGIC;
    signal grp_zculling_fu_343_fragments_y_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_zculling_fu_343_fragments_y_ce0 : STD_LOGIC;
    signal grp_zculling_fu_343_fragments_z_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_zculling_fu_343_fragments_z_ce0 : STD_LOGIC;
    signal grp_zculling_fu_343_fragments_color_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_zculling_fu_343_fragments_color_ce0 : STD_LOGIC;
    signal grp_zculling_fu_343_pixels_x_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_zculling_fu_343_pixels_x_ce0 : STD_LOGIC;
    signal grp_zculling_fu_343_pixels_x_we0 : STD_LOGIC;
    signal grp_zculling_fu_343_pixels_x_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_zculling_fu_343_pixels_y_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_zculling_fu_343_pixels_y_ce0 : STD_LOGIC;
    signal grp_zculling_fu_343_pixels_y_we0 : STD_LOGIC;
    signal grp_zculling_fu_343_pixels_y_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_zculling_fu_343_pixels_color_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_zculling_fu_343_pixels_color_ce0 : STD_LOGIC;
    signal grp_zculling_fu_343_pixels_color_we0 : STD_LOGIC;
    signal grp_zculling_fu_343_pixels_color_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_coloringFB_fu_360_ap_start : STD_LOGIC;
    signal grp_coloringFB_fu_360_ap_done : STD_LOGIC;
    signal grp_coloringFB_fu_360_ap_idle : STD_LOGIC;
    signal grp_coloringFB_fu_360_ap_ready : STD_LOGIC;
    signal grp_coloringFB_fu_360_pixels_x_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_coloringFB_fu_360_pixels_x_ce0 : STD_LOGIC;
    signal grp_coloringFB_fu_360_pixels_y_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_coloringFB_fu_360_pixels_y_ce0 : STD_LOGIC;
    signal grp_coloringFB_fu_360_pixels_color_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_coloringFB_fu_360_pixels_color_ce0 : STD_LOGIC;
    signal grp_coloringFB_fu_360_frame_buffer_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_coloringFB_fu_360_frame_buffer_ce0 : STD_LOGIC;
    signal grp_coloringFB_fu_360_frame_buffer_we0 : STD_LOGIC;
    signal grp_coloringFB_fu_360_frame_buffer_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_reg_282 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal i_0_i_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_0_i_be_phi_fu_322_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal k_0_i_reg_306 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_1035_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1019_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal size_fragment_reg_330 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln181_fu_897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_zculling_fu_343_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_coloringFB_fu_360_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal zext_ln279_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln188_fu_1027_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_min_0_read_assi_fu_72 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_min_2_read_assi_fu_76 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_min_4_read_assi_fu_80 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_min_4_fu_816_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_index_0_1_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln121_fu_401_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln121_fu_401_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln121_1_fu_421_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln121_1_fu_421_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln121_2_fu_441_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln121_2_fu_441_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal udiv_ln121_2_fu_447_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal udiv_ln121_1_fu_427_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal udiv_ln_fu_407_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_fu_457_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln24_fu_477_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln24_1_fu_495_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln24_fu_505_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln24_fu_505_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln24_fu_505_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln24_2_fu_519_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln24_3_fu_533_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln24_1_fu_543_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln24_1_fu_543_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln24_1_fu_543_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln24_fu_511_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln24_1_fu_549_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal cw_fu_553_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln153_fu_585_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln153_2_fu_595_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln70_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln70_fu_616_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln77_fu_628_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln90_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln88_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln90_fu_654_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln97_fu_666_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln153_1_fu_590_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln153_3_fu_600_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln70_1_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_1_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_1_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln70_1_fu_692_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln77_1_fu_704_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln90_1_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_1_fu_737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln88_1_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln90_1_fu_730_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln97_1_fu_742_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln88_fu_673_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln68_fu_635_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln164_fu_763_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln164_1_fu_767_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln164_fu_771_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln88_1_fu_749_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln68_1_fu_711_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln164_2_fu_781_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln164_3_fu_785_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln164_1_fu_789_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln164_fu_799_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln164_fu_799_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln164_fu_799_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln161_fu_757_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln164_2_fu_805_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln59_fu_861_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln59_1_fu_869_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln60_fu_877_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln60_1_fu_885_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln181_fu_893_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_908_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_913_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_908_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln183_fu_918_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_913_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln184_fu_927_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln58_1_fu_936_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln58_fu_940_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln58_fu_949_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln58_fu_949_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln58_2_fu_954_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln59_2_fu_963_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln59_fu_972_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln59_fu_972_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln60_2_fu_982_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln60_fu_991_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln60_fu_991_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1042_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1049_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_ln62_fu_1010_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1056_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_ln62_1_fu_1014_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1042_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1049_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1056_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_908_ap_start : STD_LOGIC;
    signal grp_fu_908_ap_done : STD_LOGIC;
    signal grp_fu_913_ap_start : STD_LOGIC;
    signal grp_fu_913_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln121_1_fu_421_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln121_2_fu_441_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln121_fu_401_p10 : STD_LOGIC_VECTOR (17 downto 0);

    component zculling IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        counter : IN STD_LOGIC_VECTOR (11 downto 0);
        fragments_x_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        fragments_x_ce0 : OUT STD_LOGIC;
        fragments_x_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        fragments_y_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        fragments_y_ce0 : OUT STD_LOGIC;
        fragments_y_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        fragments_z_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        fragments_z_ce0 : OUT STD_LOGIC;
        fragments_z_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        fragments_color_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        fragments_color_ce0 : OUT STD_LOGIC;
        fragments_color_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        size : IN STD_LOGIC_VECTOR (31 downto 0);
        pixels_x_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        pixels_x_ce0 : OUT STD_LOGIC;
        pixels_x_we0 : OUT STD_LOGIC;
        pixels_x_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        pixels_y_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        pixels_y_ce0 : OUT STD_LOGIC;
        pixels_y_we0 : OUT STD_LOGIC;
        pixels_y_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        pixels_color_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        pixels_color_ce0 : OUT STD_LOGIC;
        pixels_color_we0 : OUT STD_LOGIC;
        pixels_color_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component coloringFB IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        counter : IN STD_LOGIC_VECTOR (11 downto 0);
        size_pixels : IN STD_LOGIC_VECTOR (31 downto 0);
        pixels_x_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        pixels_x_ce0 : OUT STD_LOGIC;
        pixels_x_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        pixels_y_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        pixels_y_ce0 : OUT STD_LOGIC;
        pixels_y_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        pixels_color_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        pixels_color_ce0 : OUT STD_LOGIC;
        pixels_color_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        frame_buffer_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        frame_buffer_ce0 : OUT STD_LOGIC;
        frame_buffer_we0 : OUT STD_LOGIC;
        frame_buffer_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component rendering_sw_urem_16ns_8ns_8_20_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component rendering_sw_udiv_16ns_8ns_8_20_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component rendering_sw_mac_mulsub_9s_9s_18ns_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component rendering_sw_fragment_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    fragment_x_U : component rendering_sw_fragment_x
    generic map (
        DataWidth => 8,
        AddressRange => 500,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fragment_x_address0,
        ce0 => fragment_x_ce0,
        we0 => fragment_x_we0,
        d0 => x_reg_1306,
        q0 => fragment_x_q0);

    fragment_y_U : component rendering_sw_fragment_x
    generic map (
        DataWidth => 8,
        AddressRange => 500,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fragment_y_address0,
        ce0 => fragment_y_ce0,
        we0 => fragment_y_we0,
        d0 => y_reg_1311,
        q0 => fragment_y_q0);

    fragment_z_U : component rendering_sw_fragment_x
    generic map (
        DataWidth => 8,
        AddressRange => 500,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fragment_z_address0,
        ce0 => fragment_z_ce0,
        we0 => fragment_z_we0,
        d0 => triangle_2ds_z_reg_1188,
        q0 => fragment_z_q0);

    fragment_color_U : component rendering_sw_fragment_x
    generic map (
        DataWidth => 8,
        AddressRange => 500,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fragment_color_address0,
        ce0 => fragment_color_ce0,
        we0 => fragment_color_we0,
        d0 => ap_const_lv8_64,
        q0 => fragment_color_q0);

    pixels_x_U : component rendering_sw_fragment_x
    generic map (
        DataWidth => 8,
        AddressRange => 500,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pixels_x_address0,
        ce0 => pixels_x_ce0,
        we0 => pixels_x_we0,
        d0 => grp_zculling_fu_343_pixels_x_d0,
        q0 => pixels_x_q0);

    pixels_y_U : component rendering_sw_fragment_x
    generic map (
        DataWidth => 8,
        AddressRange => 500,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pixels_y_address0,
        ce0 => pixels_y_ce0,
        we0 => pixels_y_we0,
        d0 => grp_zculling_fu_343_pixels_y_d0,
        q0 => pixels_y_q0);

    pixels_color_U : component rendering_sw_fragment_x
    generic map (
        DataWidth => 8,
        AddressRange => 500,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pixels_color_address0,
        ce0 => pixels_color_ce0,
        we0 => pixels_color_we0,
        d0 => grp_zculling_fu_343_pixels_color_d0,
        q0 => pixels_color_q0);

    grp_zculling_fu_343 : component zculling
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_zculling_fu_343_ap_start,
        ap_done => grp_zculling_fu_343_ap_done,
        ap_idle => grp_zculling_fu_343_ap_idle,
        ap_ready => grp_zculling_fu_343_ap_ready,
        counter => i_0_reg_282,
        fragments_x_address0 => grp_zculling_fu_343_fragments_x_address0,
        fragments_x_ce0 => grp_zculling_fu_343_fragments_x_ce0,
        fragments_x_q0 => fragment_x_q0,
        fragments_y_address0 => grp_zculling_fu_343_fragments_y_address0,
        fragments_y_ce0 => grp_zculling_fu_343_fragments_y_ce0,
        fragments_y_q0 => fragment_y_q0,
        fragments_z_address0 => grp_zculling_fu_343_fragments_z_address0,
        fragments_z_ce0 => grp_zculling_fu_343_fragments_z_ce0,
        fragments_z_q0 => fragment_z_q0,
        fragments_color_address0 => grp_zculling_fu_343_fragments_color_address0,
        fragments_color_ce0 => grp_zculling_fu_343_fragments_color_ce0,
        fragments_color_q0 => fragment_color_q0,
        size => size_fragment_reg_330,
        pixels_x_address0 => grp_zculling_fu_343_pixels_x_address0,
        pixels_x_ce0 => grp_zculling_fu_343_pixels_x_ce0,
        pixels_x_we0 => grp_zculling_fu_343_pixels_x_we0,
        pixels_x_d0 => grp_zculling_fu_343_pixels_x_d0,
        pixels_y_address0 => grp_zculling_fu_343_pixels_y_address0,
        pixels_y_ce0 => grp_zculling_fu_343_pixels_y_ce0,
        pixels_y_we0 => grp_zculling_fu_343_pixels_y_we0,
        pixels_y_d0 => grp_zculling_fu_343_pixels_y_d0,
        pixels_color_address0 => grp_zculling_fu_343_pixels_color_address0,
        pixels_color_ce0 => grp_zculling_fu_343_pixels_color_ce0,
        pixels_color_we0 => grp_zculling_fu_343_pixels_color_we0,
        pixels_color_d0 => grp_zculling_fu_343_pixels_color_d0,
        ap_return => grp_zculling_fu_343_ap_return);

    grp_coloringFB_fu_360 : component coloringFB
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_coloringFB_fu_360_ap_start,
        ap_done => grp_coloringFB_fu_360_ap_done,
        ap_idle => grp_coloringFB_fu_360_ap_idle,
        ap_ready => grp_coloringFB_fu_360_ap_ready,
        counter => i_0_reg_282,
        size_pixels => size_pixels_reg_1349,
        pixels_x_address0 => grp_coloringFB_fu_360_pixels_x_address0,
        pixels_x_ce0 => grp_coloringFB_fu_360_pixels_x_ce0,
        pixels_x_q0 => pixels_x_q0,
        pixels_y_address0 => grp_coloringFB_fu_360_pixels_y_address0,
        pixels_y_ce0 => grp_coloringFB_fu_360_pixels_y_ce0,
        pixels_y_q0 => pixels_y_q0,
        pixels_color_address0 => grp_coloringFB_fu_360_pixels_color_address0,
        pixels_color_ce0 => grp_coloringFB_fu_360_pixels_color_ce0,
        pixels_color_q0 => pixels_color_q0,
        frame_buffer_address0 => grp_coloringFB_fu_360_frame_buffer_address0,
        frame_buffer_ce0 => grp_coloringFB_fu_360_frame_buffer_ce0,
        frame_buffer_we0 => grp_coloringFB_fu_360_frame_buffer_we0,
        frame_buffer_d0 => grp_coloringFB_fu_360_frame_buffer_d0);

    rendering_sw_urem_16ns_8ns_8_20_seq_1_U17 : component rendering_sw_urem_16ns_8ns_8_20_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_908_ap_start,
        done => grp_fu_908_ap_done,
        din0 => k_0_i_reg_306,
        din1 => grp_fu_908_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_908_p2);

    rendering_sw_udiv_16ns_8ns_8_20_seq_1_U18 : component rendering_sw_udiv_16ns_8ns_8_20_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_913_ap_start,
        done => grp_fu_913_ap_done,
        din0 => k_0_i_reg_306,
        din1 => grp_fu_913_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_913_p2);

    rendering_sw_mac_mulsub_9s_9s_18ns_18_1_1_U19 : component rendering_sw_mac_mulsub_9s_9s_18ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => sub_ln58_1_reg_1321,
        din1 => grp_fu_1042_p1,
        din2 => mul_ln58_reg_1316,
        dout => grp_fu_1042_p3);

    rendering_sw_mac_mulsub_9s_9s_18ns_18_1_1_U20 : component rendering_sw_mac_mulsub_9s_9s_18ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => sub_ln59_3_reg_1331,
        din1 => grp_fu_1049_p1,
        din2 => mul_ln59_reg_1326,
        dout => grp_fu_1049_p3);

    rendering_sw_mac_mulsub_9s_9s_18ns_18_1_1_U21 : component rendering_sw_mac_mulsub_9s_9s_18ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => sub_ln60_3_reg_1341,
        din1 => grp_fu_1056_p1,
        din2 => mul_ln60_reg_1336,
        dout => grp_fu_1056_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_coloringFB_fu_360_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_coloringFB_fu_360_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                    grp_coloringFB_fu_360_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_coloringFB_fu_360_ap_ready = ap_const_logic_1)) then 
                    grp_coloringFB_fu_360_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_zculling_fu_343_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_zculling_fu_343_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    grp_zculling_fu_343_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_zculling_fu_343_ap_ready = ap_const_logic_1)) then 
                    grp_zculling_fu_343_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                i_0_i_reg_294 <= ap_phi_mux_i_0_i_be_phi_fu_322_p4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (flag_reg_1241 = ap_const_lv1_0))) then 
                i_0_i_reg_294 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_coloringFB_fu_360_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                i_0_reg_282 <= i_1_reg_1090;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_282 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    k_0_i_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                k_0_i_reg_306 <= k_reg_1301;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (flag_reg_1241 = ap_const_lv1_0))) then 
                k_0_i_reg_306 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    size_fragment_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln181_fu_897_p2 = ap_const_lv1_0))) then 
                size_fragment_reg_330 <= i_0_i_reg_294;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (flag_reg_1241 = ap_const_lv1_1))) then 
                size_fragment_reg_330 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                flag_reg_1241 <= flag_fu_559_p2;
                sext_ln24_1_reg_1218 <= sext_ln24_1_fu_501_p1;
                sext_ln24_3_reg_1236 <= sext_ln24_3_fu_539_p1;
                tmp_reg_1249 <= cw_fu_553_p2(17 downto 17);
                triangle_2ds_x0_reg_1140 <= triangle_3ds_x0_q0;
                triangle_2ds_x1_reg_1152 <= triangle_3ds_x1_q0;
                triangle_2ds_x2_reg_1164 <= triangle_3ds_x2_q0;
                triangle_2ds_y0_reg_1146 <= triangle_3ds_y0_q0;
                triangle_2ds_y1_reg_1158 <= triangle_3ds_y1_q0;
                triangle_2ds_y2_reg_1176 <= triangle_3ds_y2_q0;
                triangle_2ds_z_reg_1188 <= triangle_2ds_z_fu_463_p2;
                    zext_ln24_1_reg_1200(7 downto 0) <= zext_ln24_1_fu_473_p1(7 downto 0);
                    zext_ln24_2_reg_1206(7 downto 0) <= zext_ln24_2_fu_487_p1(7 downto 0);
                    zext_ln24_3_reg_1212(7 downto 0) <= zext_ln24_3_fu_491_p1(7 downto 0);
                    zext_ln24_4_reg_1223(7 downto 0) <= zext_ln24_4_fu_515_p1(7 downto 0);
                    zext_ln24_5_reg_1230(7 downto 0) <= zext_ln24_5_fu_529_p1(7 downto 0);
                    zext_ln24_reg_1193(7 downto 0) <= zext_ln24_fu_469_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_1090 <= i_1_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                k_reg_1301 <= k_fu_902_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                max_index_0_1_fu_84 <= max_index_0_fu_823_p3;
                max_index_0_reg_1262 <= max_index_0_fu_823_p3;
                max_min_0_read_assi_fu_72 <= max_min_0_fu_830_p3;
                max_min_0_reg_1267 <= max_min_0_fu_830_p3;
                max_min_2_read_assi_fu_76 <= max_min_2_fu_809_p3;
                max_min_2_reg_1257 <= max_min_2_fu_809_p3;
                max_min_4_read_assi_fu_80 <= max_min_4_fu_816_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                mul_ln58_reg_1316 <= mul_ln58_fu_949_p2;
                mul_ln59_reg_1326 <= mul_ln59_fu_972_p2;
                mul_ln60_reg_1336 <= mul_ln60_fu_991_p2;
                sub_ln58_1_reg_1321 <= sub_ln58_1_fu_958_p2;
                sub_ln59_3_reg_1331 <= sub_ln59_3_fu_977_p2;
                sub_ln60_3_reg_1341 <= sub_ln60_3_fu_996_p2;
                x_reg_1306 <= x_fu_922_p2;
                y_reg_1311 <= y_fu_931_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (flag_reg_1241 = ap_const_lv1_0))) then
                sext_ln59_1_reg_1283 <= sext_ln59_1_fu_873_p1;
                sext_ln59_reg_1278 <= sext_ln59_fu_865_p1;
                sext_ln60_1_reg_1293 <= sext_ln60_1_fu_889_p1;
                sext_ln60_reg_1288 <= sext_ln60_fu_881_p1;
                    zext_ln58_reg_1272(7 downto 0) <= zext_ln58_fu_857_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_zculling_fu_343_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                size_pixels_reg_1349 <= grp_zculling_fu_343_ap_return;
            end if;
        end if;
    end process;
    zext_ln24_reg_1193(8) <= '0';
    zext_ln24_1_reg_1200(8) <= '0';
    zext_ln24_2_reg_1206(8) <= '0';
    zext_ln24_3_reg_1212(8) <= '0';
    zext_ln24_4_reg_1223(8) <= '0';
    zext_ln24_5_reg_1230(8) <= '0';
    zext_ln58_reg_1272(15 downto 8) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln276_fu_372_p2, flag_reg_1241, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state27, grp_zculling_fu_343_ap_done, grp_coloringFB_fu_360_ap_done, ap_CS_fsm_state29, icmp_ln181_fu_897_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln276_fu_372_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (flag_reg_1241 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln181_fu_897_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((grp_zculling_fu_343_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((grp_coloringFB_fu_360_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln121_fu_457_p2 <= std_logic_vector(unsigned(udiv_ln121_2_fu_447_p4) + unsigned(udiv_ln121_1_fu_427_p4));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln276_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln276_fu_372_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_i_be_phi_fu_322_p4_assign_proc : process(i_0_i_reg_294, ap_CS_fsm_state25, i_fu_1035_p2, tmp_1_fu_1019_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
            if ((tmp_1_fu_1019_p3 = ap_const_lv1_1)) then 
                ap_phi_mux_i_0_i_be_phi_fu_322_p4 <= i_0_i_reg_294;
            elsif ((tmp_1_fu_1019_p3 = ap_const_lv1_0)) then 
                ap_phi_mux_i_0_i_be_phi_fu_322_p4 <= i_fu_1035_p2;
            else 
                ap_phi_mux_i_0_i_be_phi_fu_322_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_i_0_i_be_phi_fu_322_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln276_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln276_fu_372_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cw_fu_553_p2 <= std_logic_vector(unsigned(mul_ln24_fu_505_p2) - unsigned(mul_ln24_1_fu_543_p2));
    flag_fu_559_p2 <= "1" when (trunc_ln24_fu_511_p1 = trunc_ln24_1_fu_549_p1) else "0";

    fragment_color_address0_assign_proc : process(ap_CS_fsm_state27, grp_zculling_fu_343_fragments_color_address0, ap_CS_fsm_state25, sext_ln188_fu_1027_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            fragment_color_address0 <= sext_ln188_fu_1027_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            fragment_color_address0 <= grp_zculling_fu_343_fragments_color_address0;
        else 
            fragment_color_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    fragment_color_ce0_assign_proc : process(ap_CS_fsm_state27, grp_zculling_fu_343_fragments_color_ce0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            fragment_color_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            fragment_color_ce0 <= grp_zculling_fu_343_fragments_color_ce0;
        else 
            fragment_color_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fragment_color_we0_assign_proc : process(ap_CS_fsm_state25, tmp_1_fu_1019_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_1_fu_1019_p3 = ap_const_lv1_0))) then 
            fragment_color_we0 <= ap_const_logic_1;
        else 
            fragment_color_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fragment_x_address0_assign_proc : process(ap_CS_fsm_state27, grp_zculling_fu_343_fragments_x_address0, ap_CS_fsm_state25, sext_ln188_fu_1027_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            fragment_x_address0 <= sext_ln188_fu_1027_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            fragment_x_address0 <= grp_zculling_fu_343_fragments_x_address0;
        else 
            fragment_x_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    fragment_x_ce0_assign_proc : process(ap_CS_fsm_state27, grp_zculling_fu_343_fragments_x_ce0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            fragment_x_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            fragment_x_ce0 <= grp_zculling_fu_343_fragments_x_ce0;
        else 
            fragment_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fragment_x_we0_assign_proc : process(ap_CS_fsm_state25, tmp_1_fu_1019_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_1_fu_1019_p3 = ap_const_lv1_0))) then 
            fragment_x_we0 <= ap_const_logic_1;
        else 
            fragment_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fragment_y_address0_assign_proc : process(ap_CS_fsm_state27, grp_zculling_fu_343_fragments_y_address0, ap_CS_fsm_state25, sext_ln188_fu_1027_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            fragment_y_address0 <= sext_ln188_fu_1027_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            fragment_y_address0 <= grp_zculling_fu_343_fragments_y_address0;
        else 
            fragment_y_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    fragment_y_ce0_assign_proc : process(ap_CS_fsm_state27, grp_zculling_fu_343_fragments_y_ce0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            fragment_y_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            fragment_y_ce0 <= grp_zculling_fu_343_fragments_y_ce0;
        else 
            fragment_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fragment_y_we0_assign_proc : process(ap_CS_fsm_state25, tmp_1_fu_1019_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_1_fu_1019_p3 = ap_const_lv1_0))) then 
            fragment_y_we0 <= ap_const_logic_1;
        else 
            fragment_y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fragment_z_address0_assign_proc : process(ap_CS_fsm_state27, grp_zculling_fu_343_fragments_z_address0, ap_CS_fsm_state25, sext_ln188_fu_1027_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            fragment_z_address0 <= sext_ln188_fu_1027_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            fragment_z_address0 <= grp_zculling_fu_343_fragments_z_address0;
        else 
            fragment_z_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    fragment_z_ce0_assign_proc : process(ap_CS_fsm_state27, grp_zculling_fu_343_fragments_z_ce0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            fragment_z_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            fragment_z_ce0 <= grp_zculling_fu_343_fragments_z_ce0;
        else 
            fragment_z_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fragment_z_we0_assign_proc : process(ap_CS_fsm_state25, tmp_1_fu_1019_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_1_fu_1019_p3 = ap_const_lv1_0))) then 
            fragment_z_we0 <= ap_const_logic_1;
        else 
            fragment_z_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_coloringFB_fu_360_ap_start <= grp_coloringFB_fu_360_ap_start_reg;
    grp_fu_1042_p1 <= sext_ln24_3_reg_1236(9 - 1 downto 0);
    grp_fu_1049_p1 <= sext_ln59_1_reg_1283(9 - 1 downto 0);
    grp_fu_1056_p1 <= sext_ln60_1_reg_1293(9 - 1 downto 0);

    grp_fu_908_ap_start_assign_proc : process(ap_CS_fsm_state5, icmp_ln181_fu_897_p2)
    begin
        if (((icmp_ln181_fu_897_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_908_ap_start <= ap_const_logic_1;
        else 
            grp_fu_908_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_908_p1 <= zext_ln58_reg_1272(8 - 1 downto 0);

    grp_fu_913_ap_start_assign_proc : process(ap_CS_fsm_state5, icmp_ln181_fu_897_p2)
    begin
        if (((icmp_ln181_fu_897_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_913_ap_start <= ap_const_logic_1;
        else 
            grp_fu_913_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_913_p1 <= zext_ln58_reg_1272(8 - 1 downto 0);
    grp_zculling_fu_343_ap_start <= grp_zculling_fu_343_ap_start_reg;
    i_1_fu_378_p2 <= std_logic_vector(unsigned(i_0_reg_282) + unsigned(ap_const_lv12_1));
    i_fu_1035_p2 <= std_logic_vector(signed(i_0_i_reg_294) + signed(ap_const_lv32_1));
    icmp_ln181_fu_897_p2 <= "1" when (signed(zext_ln181_fu_893_p1) < signed(max_index_0_reg_1262)) else "0";
    icmp_ln276_fu_372_p2 <= "1" when (i_0_reg_282 = ap_const_lv12_C78) else "0";
    icmp_ln68_1_fu_681_p2 <= "1" when (unsigned(select_ln153_1_fu_590_p3) < unsigned(select_ln153_3_fu_600_p3)) else "0";
    icmp_ln68_fu_605_p2 <= "1" when (unsigned(select_ln153_fu_585_p3) < unsigned(select_ln153_2_fu_595_p3)) else "0";
    icmp_ln70_1_fu_687_p2 <= "1" when (unsigned(select_ln153_1_fu_590_p3) < unsigned(triangle_2ds_y2_reg_1176)) else "0";
    icmp_ln70_fu_611_p2 <= "1" when (unsigned(select_ln153_fu_585_p3) < unsigned(triangle_2ds_x2_reg_1164)) else "0";
    icmp_ln77_1_fu_699_p2 <= "1" when (unsigned(select_ln153_3_fu_600_p3) < unsigned(triangle_2ds_y2_reg_1176)) else "0";
    icmp_ln77_fu_623_p2 <= "1" when (unsigned(select_ln153_2_fu_595_p3) < unsigned(triangle_2ds_x2_reg_1164)) else "0";
    icmp_ln88_1_fu_719_p2 <= "1" when (unsigned(select_ln153_1_fu_590_p3) > unsigned(select_ln153_3_fu_600_p3)) else "0";
    icmp_ln88_fu_643_p2 <= "1" when (unsigned(select_ln153_fu_585_p3) > unsigned(select_ln153_2_fu_595_p3)) else "0";
    icmp_ln90_1_fu_725_p2 <= "1" when (unsigned(select_ln153_1_fu_590_p3) > unsigned(triangle_2ds_y2_reg_1176)) else "0";
    icmp_ln90_fu_649_p2 <= "1" when (unsigned(select_ln153_fu_585_p3) > unsigned(triangle_2ds_x2_reg_1164)) else "0";
    icmp_ln97_1_fu_737_p2 <= "1" when (unsigned(select_ln153_3_fu_600_p3) > unsigned(triangle_2ds_y2_reg_1176)) else "0";
    icmp_ln97_fu_661_p2 <= "1" when (unsigned(select_ln153_2_fu_595_p3) > unsigned(triangle_2ds_x2_reg_1164)) else "0";
    k_fu_902_p2 <= std_logic_vector(unsigned(k_0_i_reg_306) + unsigned(ap_const_lv16_1));
    max_index_0_fu_823_p3 <= 
        max_index_0_1_fu_84 when (flag_reg_1241(0) = '1') else 
        sext_ln164_2_fu_805_p1;
    max_min_0_fu_830_p3 <= 
        max_min_0_read_assi_fu_72 when (flag_reg_1241(0) = '1') else 
        select_ln68_fu_635_p3;
    max_min_2_fu_809_p3 <= 
        max_min_2_read_assi_fu_76 when (flag_reg_1241(0) = '1') else 
        select_ln68_1_fu_711_p3;
    max_min_4_fu_816_p3 <= 
        max_min_4_read_assi_fu_80 when (flag_reg_1241(0) = '1') else 
        sub_ln161_fu_757_p2;
    mul_ln121_1_fu_421_p1 <= mul_ln121_1_fu_421_p10(8 - 1 downto 0);
    mul_ln121_1_fu_421_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(triangle_3ds_z1_q0),18));
    mul_ln121_1_fu_421_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv18_156) * unsigned(mul_ln121_1_fu_421_p1), 18));
    mul_ln121_2_fu_441_p1 <= mul_ln121_2_fu_441_p10(8 - 1 downto 0);
    mul_ln121_2_fu_441_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(triangle_3ds_z2_q0),18));
    mul_ln121_2_fu_441_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv18_156) * unsigned(mul_ln121_2_fu_441_p1), 18));
    mul_ln121_fu_401_p1 <= mul_ln121_fu_401_p10(8 - 1 downto 0);
    mul_ln121_fu_401_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(triangle_3ds_z0_q0),18));
    mul_ln121_fu_401_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv18_156) * unsigned(mul_ln121_fu_401_p1), 18));
    mul_ln164_fu_799_p0 <= sub_ln164_fu_771_p2;
    mul_ln164_fu_799_p1 <= sub_ln164_1_fu_789_p2;
    mul_ln164_fu_799_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln164_fu_799_p0) * signed(mul_ln164_fu_799_p1))), 18));
    mul_ln24_1_fu_543_p0 <= sub_ln24_2_fu_519_p2;
    mul_ln24_1_fu_543_p1 <= sub_ln24_3_fu_533_p2;
    mul_ln24_1_fu_543_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln24_1_fu_543_p0) * signed(mul_ln24_1_fu_543_p1))), 18));
    mul_ln24_fu_505_p0 <= sub_ln24_fu_477_p2;
    mul_ln24_fu_505_p1 <= sub_ln24_1_fu_495_p2;
    mul_ln24_fu_505_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln24_fu_505_p0) * signed(mul_ln24_fu_505_p1))), 18));
    mul_ln58_fu_949_p0 <= sub_ln58_fu_940_p2;
    mul_ln58_fu_949_p1 <= sext_ln24_1_reg_1218(9 - 1 downto 0);
    mul_ln58_fu_949_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln58_fu_949_p0) * signed(mul_ln58_fu_949_p1))), 18));
    mul_ln59_fu_972_p0 <= sub_ln59_2_fu_963_p2;
    mul_ln59_fu_972_p1 <= sext_ln59_reg_1278(9 - 1 downto 0);
    mul_ln59_fu_972_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln59_fu_972_p0) * signed(mul_ln59_fu_972_p1))), 18));
    mul_ln60_fu_991_p0 <= sext_ln60_reg_1288(9 - 1 downto 0);
    mul_ln60_fu_991_p1 <= sub_ln60_2_fu_982_p2;
    mul_ln60_fu_991_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln60_fu_991_p0) * signed(mul_ln60_fu_991_p1))), 18));
    or_ln62_1_fu_1014_p2 <= (or_ln62_fu_1010_p2 or grp_fu_1056_p3);
    or_ln62_fu_1010_p2 <= (grp_fu_1049_p3 or grp_fu_1042_p3);
    output_r_address0 <= grp_coloringFB_fu_360_frame_buffer_address0;
    output_r_ce0 <= grp_coloringFB_fu_360_frame_buffer_ce0;
    output_r_d0 <= grp_coloringFB_fu_360_frame_buffer_d0;
    output_r_we0 <= grp_coloringFB_fu_360_frame_buffer_we0;

    pixels_color_address0_assign_proc : process(ap_CS_fsm_state27, grp_zculling_fu_343_pixels_color_address0, grp_coloringFB_fu_360_pixels_color_address0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            pixels_color_address0 <= grp_coloringFB_fu_360_pixels_color_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            pixels_color_address0 <= grp_zculling_fu_343_pixels_color_address0;
        else 
            pixels_color_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    pixels_color_ce0_assign_proc : process(ap_CS_fsm_state27, grp_zculling_fu_343_pixels_color_ce0, grp_coloringFB_fu_360_pixels_color_ce0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            pixels_color_ce0 <= grp_coloringFB_fu_360_pixels_color_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            pixels_color_ce0 <= grp_zculling_fu_343_pixels_color_ce0;
        else 
            pixels_color_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pixels_color_we0_assign_proc : process(ap_CS_fsm_state27, grp_zculling_fu_343_pixels_color_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            pixels_color_we0 <= grp_zculling_fu_343_pixels_color_we0;
        else 
            pixels_color_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pixels_x_address0_assign_proc : process(ap_CS_fsm_state27, grp_zculling_fu_343_pixels_x_address0, grp_coloringFB_fu_360_pixels_x_address0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            pixels_x_address0 <= grp_coloringFB_fu_360_pixels_x_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            pixels_x_address0 <= grp_zculling_fu_343_pixels_x_address0;
        else 
            pixels_x_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    pixels_x_ce0_assign_proc : process(ap_CS_fsm_state27, grp_zculling_fu_343_pixels_x_ce0, grp_coloringFB_fu_360_pixels_x_ce0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            pixels_x_ce0 <= grp_coloringFB_fu_360_pixels_x_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            pixels_x_ce0 <= grp_zculling_fu_343_pixels_x_ce0;
        else 
            pixels_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pixels_x_we0_assign_proc : process(ap_CS_fsm_state27, grp_zculling_fu_343_pixels_x_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            pixels_x_we0 <= grp_zculling_fu_343_pixels_x_we0;
        else 
            pixels_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pixels_y_address0_assign_proc : process(ap_CS_fsm_state27, grp_zculling_fu_343_pixels_y_address0, grp_coloringFB_fu_360_pixels_y_address0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            pixels_y_address0 <= grp_coloringFB_fu_360_pixels_y_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            pixels_y_address0 <= grp_zculling_fu_343_pixels_y_address0;
        else 
            pixels_y_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    pixels_y_ce0_assign_proc : process(ap_CS_fsm_state27, grp_zculling_fu_343_pixels_y_ce0, grp_coloringFB_fu_360_pixels_y_ce0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            pixels_y_ce0 <= grp_coloringFB_fu_360_pixels_y_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            pixels_y_ce0 <= grp_zculling_fu_343_pixels_y_ce0;
        else 
            pixels_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pixels_y_we0_assign_proc : process(ap_CS_fsm_state27, grp_zculling_fu_343_pixels_y_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            pixels_y_we0 <= grp_zculling_fu_343_pixels_y_we0;
        else 
            pixels_y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln153_1_fu_590_p3 <= 
        triangle_2ds_y1_reg_1158 when (tmp_reg_1249(0) = '1') else 
        triangle_2ds_y0_reg_1146;
    select_ln153_2_fu_595_p3 <= 
        triangle_2ds_x0_reg_1140 when (tmp_reg_1249(0) = '1') else 
        triangle_2ds_x1_reg_1152;
    select_ln153_3_fu_600_p3 <= 
        triangle_2ds_y0_reg_1146 when (tmp_reg_1249(0) = '1') else 
        triangle_2ds_y1_reg_1158;
    select_ln153_fu_585_p3 <= 
        triangle_2ds_x1_reg_1152 when (tmp_reg_1249(0) = '1') else 
        triangle_2ds_x0_reg_1140;
    select_ln68_1_fu_711_p3 <= 
        select_ln70_1_fu_692_p3 when (icmp_ln68_1_fu_681_p2(0) = '1') else 
        select_ln77_1_fu_704_p3;
    select_ln68_fu_635_p3 <= 
        select_ln70_fu_616_p3 when (icmp_ln68_fu_605_p2(0) = '1') else 
        select_ln77_fu_628_p3;
    select_ln70_1_fu_692_p3 <= 
        select_ln153_1_fu_590_p3 when (icmp_ln70_1_fu_687_p2(0) = '1') else 
        triangle_2ds_y2_reg_1176;
    select_ln70_fu_616_p3 <= 
        select_ln153_fu_585_p3 when (icmp_ln70_fu_611_p2(0) = '1') else 
        triangle_2ds_x2_reg_1164;
    select_ln77_1_fu_704_p3 <= 
        select_ln153_3_fu_600_p3 when (icmp_ln77_1_fu_699_p2(0) = '1') else 
        triangle_2ds_y2_reg_1176;
    select_ln77_fu_628_p3 <= 
        select_ln153_2_fu_595_p3 when (icmp_ln77_fu_623_p2(0) = '1') else 
        triangle_2ds_x2_reg_1164;
    select_ln88_1_fu_749_p3 <= 
        select_ln90_1_fu_730_p3 when (icmp_ln88_1_fu_719_p2(0) = '1') else 
        select_ln97_1_fu_742_p3;
    select_ln88_fu_673_p3 <= 
        select_ln90_fu_654_p3 when (icmp_ln88_fu_643_p2(0) = '1') else 
        select_ln97_fu_666_p3;
    select_ln90_1_fu_730_p3 <= 
        select_ln153_1_fu_590_p3 when (icmp_ln90_1_fu_725_p2(0) = '1') else 
        triangle_2ds_y2_reg_1176;
    select_ln90_fu_654_p3 <= 
        select_ln153_fu_585_p3 when (icmp_ln90_fu_649_p2(0) = '1') else 
        triangle_2ds_x2_reg_1164;
    select_ln97_1_fu_742_p3 <= 
        select_ln153_3_fu_600_p3 when (icmp_ln97_1_fu_737_p2(0) = '1') else 
        triangle_2ds_y2_reg_1176;
    select_ln97_fu_666_p3 <= 
        select_ln153_2_fu_595_p3 when (icmp_ln97_fu_661_p2(0) = '1') else 
        triangle_2ds_x2_reg_1164;
        sext_ln164_2_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln164_fu_799_p2),32));

        sext_ln188_fu_1027_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_0_i_reg_294),64));

        sext_ln24_1_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln24_1_fu_495_p2),18));

        sext_ln24_3_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln24_3_fu_533_p2),18));

        sext_ln59_1_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln59_1_fu_869_p2),18));

        sext_ln59_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln59_fu_861_p2),18));

        sext_ln60_1_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln60_1_fu_885_p2),18));

        sext_ln60_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln60_fu_877_p2),18));

    sub_ln161_fu_757_p2 <= std_logic_vector(unsigned(select_ln88_fu_673_p3) - unsigned(select_ln68_fu_635_p3));
    sub_ln164_1_fu_789_p2 <= std_logic_vector(unsigned(zext_ln164_2_fu_781_p1) - unsigned(zext_ln164_3_fu_785_p1));
    sub_ln164_fu_771_p2 <= std_logic_vector(unsigned(zext_ln164_fu_763_p1) - unsigned(zext_ln164_1_fu_767_p1));
    sub_ln24_1_fu_495_p2 <= std_logic_vector(unsigned(zext_ln24_2_fu_487_p1) - unsigned(zext_ln24_3_fu_491_p1));
    sub_ln24_2_fu_519_p2 <= std_logic_vector(unsigned(zext_ln24_4_fu_515_p1) - unsigned(zext_ln24_3_fu_491_p1));
    sub_ln24_3_fu_533_p2 <= std_logic_vector(unsigned(zext_ln24_5_fu_529_p1) - unsigned(zext_ln24_1_fu_473_p1));
    sub_ln24_fu_477_p2 <= std_logic_vector(unsigned(zext_ln24_fu_469_p1) - unsigned(zext_ln24_1_fu_473_p1));
    sub_ln58_1_fu_958_p2 <= std_logic_vector(unsigned(zext_ln58_2_fu_954_p1) - unsigned(zext_ln24_3_reg_1212));
    sub_ln58_fu_940_p2 <= std_logic_vector(unsigned(zext_ln58_1_fu_936_p1) - unsigned(zext_ln24_1_reg_1200));
    sub_ln59_1_fu_869_p2 <= std_logic_vector(unsigned(zext_ln24_reg_1193) - unsigned(zext_ln24_5_reg_1230));
    sub_ln59_2_fu_963_p2 <= std_logic_vector(unsigned(zext_ln58_1_fu_936_p1) - unsigned(zext_ln24_5_reg_1230));
    sub_ln59_3_fu_977_p2 <= std_logic_vector(unsigned(zext_ln58_2_fu_954_p1) - unsigned(zext_ln24_2_reg_1206));
    sub_ln59_fu_861_p2 <= std_logic_vector(unsigned(zext_ln24_4_reg_1223) - unsigned(zext_ln24_2_reg_1206));
    sub_ln60_1_fu_885_p2 <= std_logic_vector(unsigned(zext_ln24_1_reg_1200) - unsigned(zext_ln24_reg_1193));
    sub_ln60_2_fu_982_p2 <= std_logic_vector(unsigned(zext_ln58_1_fu_936_p1) - unsigned(zext_ln24_reg_1193));
    sub_ln60_3_fu_996_p2 <= std_logic_vector(unsigned(zext_ln58_2_fu_954_p1) - unsigned(zext_ln24_4_reg_1223));
    sub_ln60_fu_877_p2 <= std_logic_vector(unsigned(zext_ln24_3_reg_1212) - unsigned(zext_ln24_4_reg_1223));
    tmp_1_fu_1019_p3 <= or_ln62_1_fu_1014_p2(17 downto 17);
    triangle_2ds_z_fu_463_p2 <= std_logic_vector(unsigned(udiv_ln_fu_407_p4) + unsigned(add_ln121_fu_457_p2));
    triangle_3ds_x0_address0 <= zext_ln279_fu_384_p1(12 - 1 downto 0);

    triangle_3ds_x0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            triangle_3ds_x0_ce0 <= ap_const_logic_1;
        else 
            triangle_3ds_x0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    triangle_3ds_x1_address0 <= zext_ln279_fu_384_p1(12 - 1 downto 0);

    triangle_3ds_x1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            triangle_3ds_x1_ce0 <= ap_const_logic_1;
        else 
            triangle_3ds_x1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    triangle_3ds_x2_address0 <= zext_ln279_fu_384_p1(12 - 1 downto 0);

    triangle_3ds_x2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            triangle_3ds_x2_ce0 <= ap_const_logic_1;
        else 
            triangle_3ds_x2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    triangle_3ds_y0_address0 <= zext_ln279_fu_384_p1(12 - 1 downto 0);

    triangle_3ds_y0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            triangle_3ds_y0_ce0 <= ap_const_logic_1;
        else 
            triangle_3ds_y0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    triangle_3ds_y1_address0 <= zext_ln279_fu_384_p1(12 - 1 downto 0);

    triangle_3ds_y1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            triangle_3ds_y1_ce0 <= ap_const_logic_1;
        else 
            triangle_3ds_y1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    triangle_3ds_y2_address0 <= zext_ln279_fu_384_p1(12 - 1 downto 0);

    triangle_3ds_y2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            triangle_3ds_y2_ce0 <= ap_const_logic_1;
        else 
            triangle_3ds_y2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    triangle_3ds_z0_address0 <= zext_ln279_fu_384_p1(12 - 1 downto 0);

    triangle_3ds_z0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            triangle_3ds_z0_ce0 <= ap_const_logic_1;
        else 
            triangle_3ds_z0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    triangle_3ds_z1_address0 <= zext_ln279_fu_384_p1(12 - 1 downto 0);

    triangle_3ds_z1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            triangle_3ds_z1_ce0 <= ap_const_logic_1;
        else 
            triangle_3ds_z1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    triangle_3ds_z2_address0 <= zext_ln279_fu_384_p1(12 - 1 downto 0);

    triangle_3ds_z2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            triangle_3ds_z2_ce0 <= ap_const_logic_1;
        else 
            triangle_3ds_z2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln183_fu_918_p1 <= grp_fu_908_p2(8 - 1 downto 0);
    trunc_ln184_fu_927_p1 <= grp_fu_913_p2(8 - 1 downto 0);
    trunc_ln24_1_fu_549_p1 <= mul_ln24_1_fu_543_p2(17 - 1 downto 0);
    trunc_ln24_fu_511_p1 <= mul_ln24_fu_505_p2(17 - 1 downto 0);
    udiv_ln121_1_fu_427_p4 <= mul_ln121_1_fu_421_p2(17 downto 10);
    udiv_ln121_2_fu_447_p4 <= mul_ln121_2_fu_441_p2(17 downto 10);
    udiv_ln_fu_407_p4 <= mul_ln121_fu_401_p2(17 downto 10);
    x_fu_922_p2 <= std_logic_vector(unsigned(max_min_0_reg_1267) + unsigned(trunc_ln183_fu_918_p1));
    y_fu_931_p2 <= std_logic_vector(unsigned(max_min_2_reg_1257) + unsigned(trunc_ln184_fu_927_p1));
    zext_ln164_1_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_fu_635_p3),9));
    zext_ln164_2_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln88_1_fu_749_p3),9));
    zext_ln164_3_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_1_fu_711_p3),9));
    zext_ln164_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln88_fu_673_p3),9));
    zext_ln181_fu_893_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_i_reg_306),32));
    zext_ln24_1_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(triangle_3ds_x0_q0),9));
    zext_ln24_2_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(triangle_3ds_y1_q0),9));
    zext_ln24_3_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(triangle_3ds_y0_q0),9));
    zext_ln24_4_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(triangle_3ds_y2_q0),9));
    zext_ln24_5_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(triangle_3ds_x1_q0),9));
    zext_ln24_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(triangle_3ds_x2_q0),9));
    zext_ln279_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_282),64));
    zext_ln58_1_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_fu_922_p2),9));
    zext_ln58_2_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_fu_931_p2),9));
    zext_ln58_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_min_4_fu_816_p3),16));
end behav;
