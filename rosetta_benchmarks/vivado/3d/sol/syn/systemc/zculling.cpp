// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "zculling.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic zculling::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic zculling::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> zculling::ap_ST_fsm_state1 = "1";
const sc_lv<7> zculling::ap_ST_fsm_state2 = "10";
const sc_lv<7> zculling::ap_ST_fsm_state3 = "100";
const sc_lv<7> zculling::ap_ST_fsm_state4 = "1000";
const sc_lv<7> zculling::ap_ST_fsm_state5 = "10000";
const sc_lv<7> zculling::ap_ST_fsm_state6 = "100000";
const sc_lv<7> zculling::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> zculling::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> zculling::ap_const_lv32_1 = "1";
const sc_lv<1> zculling::ap_const_lv1_1 = "1";
const sc_lv<1> zculling::ap_const_lv1_0 = "0";
const sc_lv<32> zculling::ap_const_lv32_2 = "10";
const sc_lv<32> zculling::ap_const_lv32_3 = "11";
const sc_lv<32> zculling::ap_const_lv32_4 = "100";
const sc_lv<32> zculling::ap_const_lv32_5 = "101";
const sc_lv<9> zculling::ap_const_lv9_0 = "000000000";
const sc_lv<31> zculling::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> zculling::ap_const_lv32_6 = "110";
const sc_lv<8> zculling::ap_const_lv8_FF = "11111111";
const sc_lv<12> zculling::ap_const_lv12_0 = "000000000000";
const sc_lv<9> zculling::ap_const_lv9_100 = "100000000";
const sc_lv<9> zculling::ap_const_lv9_1 = "1";
const sc_lv<8> zculling::ap_const_lv8_0 = "00000000";
const sc_lv<31> zculling::ap_const_lv31_1 = "1";
const bool zculling::ap_const_boolean_1 = true;

zculling::zculling(sc_module_name name) : sc_module(name), mVcdFile(0) {
    z_buffer_U = new zculling_z_buffer("z_buffer_U");
    z_buffer_U->clk(ap_clk);
    z_buffer_U->reset(ap_rst);
    z_buffer_U->address0(z_buffer_address0);
    z_buffer_U->ce0(z_buffer_ce0);
    z_buffer_U->we0(z_buffer_we0);
    z_buffer_U->d0(z_buffer_d0);
    z_buffer_U->q0(z_buffer_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln211_fu_284_p2);
    sensitive << ( zext_ln209_reg_369 );
    sensitive << ( zext_ln211_fu_280_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln220_fu_298_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln220_fu_298_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln220_fu_298_p2 );
    sensitive << ( pixel_cntr_1_fu_66 );

    SC_METHOD(thread_fragments_color_address0);
    sensitive << ( zext_ln222_reg_397 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_fragments_color_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_fragments_x_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln222_fu_309_p1 );

    SC_METHOD(thread_fragments_x_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_fragments_y_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln222_fu_309_p1 );

    SC_METHOD(thread_fragments_y_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_fragments_z_address0);
    sensitive << ( zext_ln222_reg_397 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_fragments_z_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_i_fu_245_p2);
    sensitive << ( i_0_reg_197 );

    SC_METHOD(thread_icmp_ln205_fu_233_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( counter );

    SC_METHOD(thread_icmp_ln207_fu_239_p2);
    sensitive << ( icmp_ln205_reg_357 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_197 );

    SC_METHOD(thread_icmp_ln209_fu_268_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_208 );

    SC_METHOD(thread_icmp_ln220_fu_298_p2);
    sensitive << ( size );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln220_fu_294_p1 );

    SC_METHOD(thread_icmp_ln222_fu_328_p2);
    sensitive << ( fragments_z_q0 );
    sensitive << ( z_buffer_q0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_j_fu_274_p2);
    sensitive << ( j_0_reg_208 );

    SC_METHOD(thread_n_fu_303_p2);
    sensitive << ( n_0_reg_219 );

    SC_METHOD(thread_pixel_cntr_fu_341_p0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( pixel_cntr_1_fu_66 );

    SC_METHOD(thread_pixel_cntr_fu_341_p2);
    sensitive << ( pixel_cntr_fu_341_p0 );

    SC_METHOD(thread_pixels_color_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( sext_ln224_fu_334_p1 );

    SC_METHOD(thread_pixels_color_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_pixels_color_d0);
    sensitive << ( fragments_color_q0 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_pixels_color_we0);
    sensitive << ( icmp_ln222_reg_433 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_pixels_x_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( sext_ln224_fu_334_p1 );

    SC_METHOD(thread_pixels_x_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_pixels_x_d0);
    sensitive << ( fragments_x_load_reg_418 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_pixels_x_we0);
    sensitive << ( icmp_ln222_reg_433 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_pixels_y_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( sext_ln224_fu_334_p1 );

    SC_METHOD(thread_pixels_y_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_pixels_y_d0);
    sensitive << ( fragments_y_load_reg_423 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_pixels_y_we0);
    sensitive << ( icmp_ln222_reg_433 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_sext_ln224_fu_334_p0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( pixel_cntr_1_fu_66 );

    SC_METHOD(thread_sext_ln224_fu_334_p1);
    sensitive << ( sext_ln224_fu_334_p0 );

    SC_METHOD(thread_tmp_1_fu_251_p3);
    sensitive << ( i_0_reg_197 );

    SC_METHOD(thread_tmp_2_fu_315_p3);
    sensitive << ( fragments_x_q0 );
    sensitive << ( fragments_y_q0 );

    SC_METHOD(thread_z_buffer_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( z_buffer_addr_1_reg_428 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln211_1_fu_289_p1 );
    sensitive << ( zext_ln222_1_fu_323_p1 );

    SC_METHOD(thread_z_buffer_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_z_buffer_d0);
    sensitive << ( fragments_z_q0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_z_buffer_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln222_fu_328_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln209_fu_268_p2 );

    SC_METHOD(thread_zext_ln209_fu_259_p1);
    sensitive << ( tmp_1_fu_251_p3 );

    SC_METHOD(thread_zext_ln211_1_fu_289_p1);
    sensitive << ( add_ln211_fu_284_p2 );

    SC_METHOD(thread_zext_ln211_fu_280_p1);
    sensitive << ( j_0_reg_208 );

    SC_METHOD(thread_zext_ln220_fu_294_p1);
    sensitive << ( n_0_reg_219 );

    SC_METHOD(thread_zext_ln222_1_fu_323_p1);
    sensitive << ( tmp_2_fu_315_p3 );

    SC_METHOD(thread_zext_ln222_fu_309_p1);
    sensitive << ( n_0_reg_219 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln205_reg_357 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln207_fu_239_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln220_fu_298_p2 );
    sensitive << ( icmp_ln209_fu_268_p2 );

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "zculling_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, counter, "(port)counter");
    sc_trace(mVcdFile, fragments_x_address0, "(port)fragments_x_address0");
    sc_trace(mVcdFile, fragments_x_ce0, "(port)fragments_x_ce0");
    sc_trace(mVcdFile, fragments_x_q0, "(port)fragments_x_q0");
    sc_trace(mVcdFile, fragments_y_address0, "(port)fragments_y_address0");
    sc_trace(mVcdFile, fragments_y_ce0, "(port)fragments_y_ce0");
    sc_trace(mVcdFile, fragments_y_q0, "(port)fragments_y_q0");
    sc_trace(mVcdFile, fragments_z_address0, "(port)fragments_z_address0");
    sc_trace(mVcdFile, fragments_z_ce0, "(port)fragments_z_ce0");
    sc_trace(mVcdFile, fragments_z_q0, "(port)fragments_z_q0");
    sc_trace(mVcdFile, fragments_color_address0, "(port)fragments_color_address0");
    sc_trace(mVcdFile, fragments_color_ce0, "(port)fragments_color_ce0");
    sc_trace(mVcdFile, fragments_color_q0, "(port)fragments_color_q0");
    sc_trace(mVcdFile, size, "(port)size");
    sc_trace(mVcdFile, pixels_x_address0, "(port)pixels_x_address0");
    sc_trace(mVcdFile, pixels_x_ce0, "(port)pixels_x_ce0");
    sc_trace(mVcdFile, pixels_x_we0, "(port)pixels_x_we0");
    sc_trace(mVcdFile, pixels_x_d0, "(port)pixels_x_d0");
    sc_trace(mVcdFile, pixels_y_address0, "(port)pixels_y_address0");
    sc_trace(mVcdFile, pixels_y_ce0, "(port)pixels_y_ce0");
    sc_trace(mVcdFile, pixels_y_we0, "(port)pixels_y_we0");
    sc_trace(mVcdFile, pixels_y_d0, "(port)pixels_y_d0");
    sc_trace(mVcdFile, pixels_color_address0, "(port)pixels_color_address0");
    sc_trace(mVcdFile, pixels_color_ce0, "(port)pixels_color_ce0");
    sc_trace(mVcdFile, pixels_color_we0, "(port)pixels_color_we0");
    sc_trace(mVcdFile, pixels_color_d0, "(port)pixels_color_d0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, z_buffer_address0, "z_buffer_address0");
    sc_trace(mVcdFile, z_buffer_ce0, "z_buffer_ce0");
    sc_trace(mVcdFile, z_buffer_we0, "z_buffer_we0");
    sc_trace(mVcdFile, z_buffer_d0, "z_buffer_d0");
    sc_trace(mVcdFile, z_buffer_q0, "z_buffer_q0");
    sc_trace(mVcdFile, icmp_ln205_fu_233_p2, "icmp_ln205_fu_233_p2");
    sc_trace(mVcdFile, icmp_ln205_reg_357, "icmp_ln205_reg_357");
    sc_trace(mVcdFile, i_fu_245_p2, "i_fu_245_p2");
    sc_trace(mVcdFile, i_reg_364, "i_reg_364");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln209_fu_259_p1, "zext_ln209_fu_259_p1");
    sc_trace(mVcdFile, zext_ln209_reg_369, "zext_ln209_reg_369");
    sc_trace(mVcdFile, icmp_ln207_fu_239_p2, "icmp_ln207_fu_239_p2");
    sc_trace(mVcdFile, j_fu_274_p2, "j_fu_274_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, n_fu_303_p2, "n_fu_303_p2");
    sc_trace(mVcdFile, n_reg_392, "n_reg_392");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, zext_ln222_fu_309_p1, "zext_ln222_fu_309_p1");
    sc_trace(mVcdFile, zext_ln222_reg_397, "zext_ln222_reg_397");
    sc_trace(mVcdFile, icmp_ln220_fu_298_p2, "icmp_ln220_fu_298_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, fragments_x_load_reg_418, "fragments_x_load_reg_418");
    sc_trace(mVcdFile, fragments_y_load_reg_423, "fragments_y_load_reg_423");
    sc_trace(mVcdFile, z_buffer_addr_1_reg_428, "z_buffer_addr_1_reg_428");
    sc_trace(mVcdFile, icmp_ln222_fu_328_p2, "icmp_ln222_fu_328_p2");
    sc_trace(mVcdFile, icmp_ln222_reg_433, "icmp_ln222_reg_433");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, i_0_reg_197, "i_0_reg_197");
    sc_trace(mVcdFile, icmp_ln209_fu_268_p2, "icmp_ln209_fu_268_p2");
    sc_trace(mVcdFile, j_0_reg_208, "j_0_reg_208");
    sc_trace(mVcdFile, n_0_reg_219, "n_0_reg_219");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, zext_ln211_1_fu_289_p1, "zext_ln211_1_fu_289_p1");
    sc_trace(mVcdFile, zext_ln222_1_fu_323_p1, "zext_ln222_1_fu_323_p1");
    sc_trace(mVcdFile, sext_ln224_fu_334_p1, "sext_ln224_fu_334_p1");
    sc_trace(mVcdFile, pixel_cntr_1_fu_66, "pixel_cntr_1_fu_66");
    sc_trace(mVcdFile, pixel_cntr_fu_341_p2, "pixel_cntr_fu_341_p2");
    sc_trace(mVcdFile, tmp_1_fu_251_p3, "tmp_1_fu_251_p3");
    sc_trace(mVcdFile, zext_ln211_fu_280_p1, "zext_ln211_fu_280_p1");
    sc_trace(mVcdFile, add_ln211_fu_284_p2, "add_ln211_fu_284_p2");
    sc_trace(mVcdFile, zext_ln220_fu_294_p1, "zext_ln220_fu_294_p1");
    sc_trace(mVcdFile, tmp_2_fu_315_p3, "tmp_2_fu_315_p3");
    sc_trace(mVcdFile, sext_ln224_fu_334_p0, "sext_ln224_fu_334_p0");
    sc_trace(mVcdFile, pixel_cntr_fu_341_p0, "pixel_cntr_fu_341_p0");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

zculling::~zculling() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete z_buffer_U;
}

void zculling::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(icmp_ln205_fu_233_p2.read(), ap_const_lv1_1))) {
        i_0_reg_197 = ap_const_lv9_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln209_fu_268_p2.read()))) {
        i_0_reg_197 = i_reg_364.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln209_fu_268_p2.read()))) {
        j_0_reg_208 = j_fu_274_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln205_reg_357.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(icmp_ln207_fu_239_p2.read(), ap_const_lv1_0))) {
        j_0_reg_208 = ap_const_lv9_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        n_0_reg_219 = n_reg_392.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln207_fu_239_p2.read()) || 
                 esl_seteq<1,1,1>(icmp_ln205_reg_357.read(), ap_const_lv1_0)))) {
        n_0_reg_219 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln222_reg_433.read()))) {
        pixel_cntr_1_fu_66 = pixel_cntr_fu_341_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln207_fu_239_p2.read()) || 
                 esl_seteq<1,1,1>(icmp_ln205_reg_357.read(), ap_const_lv1_0)))) {
        pixel_cntr_1_fu_66 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        fragments_x_load_reg_418 = fragments_x_q0.read();
        fragments_y_load_reg_423 = fragments_y_q0.read();
        z_buffer_addr_1_reg_428 =  (sc_lv<16>) (zext_ln222_1_fu_323_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln205_reg_357.read(), ap_const_lv1_1))) {
        i_reg_364 = i_fu_245_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        icmp_ln205_reg_357 = icmp_ln205_fu_233_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        icmp_ln222_reg_433 = icmp_ln222_fu_328_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        n_reg_392 = n_fu_303_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln205_reg_357.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(icmp_ln207_fu_239_p2.read(), ap_const_lv1_0))) {
        zext_ln209_reg_369 = zext_ln209_fu_259_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln220_fu_298_p2.read()))) {
        zext_ln222_reg_397 = zext_ln222_fu_309_p1.read();
    }
}

void zculling::thread_add_ln211_fu_284_p2() {
    add_ln211_fu_284_p2 = (!zext_ln209_reg_369.read().is_01() || !zext_ln211_fu_280_p1.read().is_01())? sc_lv<18>(): (sc_biguint<18>(zext_ln209_reg_369.read()) + sc_biguint<18>(zext_ln211_fu_280_p1.read()));
}

void zculling::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void zculling::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void zculling::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void zculling::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void zculling::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void zculling::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void zculling::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void zculling::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln220_fu_298_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void zculling::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void zculling::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln220_fu_298_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void zculling::thread_ap_return() {
    ap_return = pixel_cntr_1_fu_66.read();
}

void zculling::thread_fragments_color_address0() {
    fragments_color_address0 =  (sc_lv<9>) (zext_ln222_reg_397.read());
}

void zculling::thread_fragments_color_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        fragments_color_ce0 = ap_const_logic_1;
    } else {
        fragments_color_ce0 = ap_const_logic_0;
    }
}

void zculling::thread_fragments_x_address0() {
    fragments_x_address0 =  (sc_lv<9>) (zext_ln222_fu_309_p1.read());
}

void zculling::thread_fragments_x_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        fragments_x_ce0 = ap_const_logic_1;
    } else {
        fragments_x_ce0 = ap_const_logic_0;
    }
}

void zculling::thread_fragments_y_address0() {
    fragments_y_address0 =  (sc_lv<9>) (zext_ln222_fu_309_p1.read());
}

void zculling::thread_fragments_y_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        fragments_y_ce0 = ap_const_logic_1;
    } else {
        fragments_y_ce0 = ap_const_logic_0;
    }
}

void zculling::thread_fragments_z_address0() {
    fragments_z_address0 =  (sc_lv<9>) (zext_ln222_reg_397.read());
}

void zculling::thread_fragments_z_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        fragments_z_ce0 = ap_const_logic_1;
    } else {
        fragments_z_ce0 = ap_const_logic_0;
    }
}

void zculling::thread_i_fu_245_p2() {
    i_fu_245_p2 = (!i_0_reg_197.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(i_0_reg_197.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void zculling::thread_icmp_ln205_fu_233_p2() {
    icmp_ln205_fu_233_p2 = (!counter.read().is_01() || !ap_const_lv12_0.is_01())? sc_lv<1>(): sc_lv<1>(counter.read() == ap_const_lv12_0);
}

void zculling::thread_icmp_ln207_fu_239_p2() {
    icmp_ln207_fu_239_p2 = (!i_0_reg_197.read().is_01() || !ap_const_lv9_100.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_197.read() == ap_const_lv9_100);
}

void zculling::thread_icmp_ln209_fu_268_p2() {
    icmp_ln209_fu_268_p2 = (!j_0_reg_208.read().is_01() || !ap_const_lv9_100.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_208.read() == ap_const_lv9_100);
}

void zculling::thread_icmp_ln220_fu_298_p2() {
    icmp_ln220_fu_298_p2 = (!zext_ln220_fu_294_p1.read().is_01() || !size.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln220_fu_294_p1.read()) < sc_bigint<32>(size.read()));
}

void zculling::thread_icmp_ln222_fu_328_p2() {
    icmp_ln222_fu_328_p2 = (!fragments_z_q0.read().is_01() || !z_buffer_q0.read().is_01())? sc_lv<1>(): (sc_biguint<8>(fragments_z_q0.read()) < sc_biguint<8>(z_buffer_q0.read()));
}

void zculling::thread_j_fu_274_p2() {
    j_fu_274_p2 = (!j_0_reg_208.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(j_0_reg_208.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void zculling::thread_n_fu_303_p2() {
    n_fu_303_p2 = (!n_0_reg_219.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(n_0_reg_219.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void zculling::thread_pixel_cntr_fu_341_p0() {
    pixel_cntr_fu_341_p0 = pixel_cntr_1_fu_66.read();
}

void zculling::thread_pixel_cntr_fu_341_p2() {
    pixel_cntr_fu_341_p2 = (!pixel_cntr_fu_341_p0.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(pixel_cntr_fu_341_p0.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void zculling::thread_pixels_color_address0() {
    pixels_color_address0 =  (sc_lv<9>) (sext_ln224_fu_334_p1.read());
}

void zculling::thread_pixels_color_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        pixels_color_ce0 = ap_const_logic_1;
    } else {
        pixels_color_ce0 = ap_const_logic_0;
    }
}

void zculling::thread_pixels_color_d0() {
    pixels_color_d0 = fragments_color_q0.read();
}

void zculling::thread_pixels_color_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln222_reg_433.read()))) {
        pixels_color_we0 = ap_const_logic_1;
    } else {
        pixels_color_we0 = ap_const_logic_0;
    }
}

void zculling::thread_pixels_x_address0() {
    pixels_x_address0 =  (sc_lv<9>) (sext_ln224_fu_334_p1.read());
}

void zculling::thread_pixels_x_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        pixels_x_ce0 = ap_const_logic_1;
    } else {
        pixels_x_ce0 = ap_const_logic_0;
    }
}

void zculling::thread_pixels_x_d0() {
    pixels_x_d0 = fragments_x_load_reg_418.read();
}

void zculling::thread_pixels_x_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln222_reg_433.read()))) {
        pixels_x_we0 = ap_const_logic_1;
    } else {
        pixels_x_we0 = ap_const_logic_0;
    }
}

void zculling::thread_pixels_y_address0() {
    pixels_y_address0 =  (sc_lv<9>) (sext_ln224_fu_334_p1.read());
}

void zculling::thread_pixels_y_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        pixels_y_ce0 = ap_const_logic_1;
    } else {
        pixels_y_ce0 = ap_const_logic_0;
    }
}

void zculling::thread_pixels_y_d0() {
    pixels_y_d0 = fragments_y_load_reg_423.read();
}

void zculling::thread_pixels_y_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln222_reg_433.read()))) {
        pixels_y_we0 = ap_const_logic_1;
    } else {
        pixels_y_we0 = ap_const_logic_0;
    }
}

void zculling::thread_sext_ln224_fu_334_p0() {
    sext_ln224_fu_334_p0 = pixel_cntr_1_fu_66.read();
}

void zculling::thread_sext_ln224_fu_334_p1() {
    sext_ln224_fu_334_p1 = esl_sext<64,32>(sext_ln224_fu_334_p0.read());
}

void zculling::thread_tmp_1_fu_251_p3() {
    tmp_1_fu_251_p3 = esl_concat<9,8>(i_0_reg_197.read(), ap_const_lv8_0);
}

void zculling::thread_tmp_2_fu_315_p3() {
    tmp_2_fu_315_p3 = esl_concat<8,8>(fragments_y_q0.read(), fragments_x_q0.read());
}

void zculling::thread_z_buffer_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        z_buffer_address0 = z_buffer_addr_1_reg_428.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        z_buffer_address0 =  (sc_lv<16>) (zext_ln222_1_fu_323_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        z_buffer_address0 =  (sc_lv<16>) (zext_ln211_1_fu_289_p1.read());
    } else {
        z_buffer_address0 = "XXXXXXXXXXXXXXXX";
    }
}

void zculling::thread_z_buffer_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        z_buffer_ce0 = ap_const_logic_1;
    } else {
        z_buffer_ce0 = ap_const_logic_0;
    }
}

void zculling::thread_z_buffer_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        z_buffer_d0 = fragments_z_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        z_buffer_d0 = ap_const_lv8_FF;
    } else {
        z_buffer_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void zculling::thread_z_buffer_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln222_fu_328_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln209_fu_268_p2.read())))) {
        z_buffer_we0 = ap_const_logic_1;
    } else {
        z_buffer_we0 = ap_const_logic_0;
    }
}

void zculling::thread_zext_ln209_fu_259_p1() {
    zext_ln209_fu_259_p1 = esl_zext<18,17>(tmp_1_fu_251_p3.read());
}

void zculling::thread_zext_ln211_1_fu_289_p1() {
    zext_ln211_1_fu_289_p1 = esl_zext<64,18>(add_ln211_fu_284_p2.read());
}

void zculling::thread_zext_ln211_fu_280_p1() {
    zext_ln211_fu_280_p1 = esl_zext<18,9>(j_0_reg_208.read());
}

void zculling::thread_zext_ln220_fu_294_p1() {
    zext_ln220_fu_294_p1 = esl_zext<32,31>(n_0_reg_219.read());
}

void zculling::thread_zext_ln222_1_fu_323_p1() {
    zext_ln222_1_fu_323_p1 = esl_zext<64,16>(tmp_2_fu_315_p3.read());
}

void zculling::thread_zext_ln222_fu_309_p1() {
    zext_ln222_fu_309_p1 = esl_zext<64,31>(n_0_reg_219.read());
}

void zculling::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln207_fu_239_p2.read()) || 
  esl_seteq<1,1,1>(icmp_ln205_reg_357.read(), ap_const_lv1_0)))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln209_fu_268_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln220_fu_298_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

}

