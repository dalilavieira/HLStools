// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _coloringFB_HH_
#define _coloringFB_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct coloringFB : public sc_module {
    // Port declarations 21
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<12> > counter;
    sc_in< sc_lv<32> > size_pixels;
    sc_out< sc_lv<9> > pixels_x_address0;
    sc_out< sc_logic > pixels_x_ce0;
    sc_in< sc_lv<8> > pixels_x_q0;
    sc_out< sc_lv<9> > pixels_y_address0;
    sc_out< sc_logic > pixels_y_ce0;
    sc_in< sc_lv<8> > pixels_y_q0;
    sc_out< sc_lv<9> > pixels_color_address0;
    sc_out< sc_logic > pixels_color_ce0;
    sc_in< sc_lv<8> > pixels_color_q0;
    sc_out< sc_lv<16> > frame_buffer_address0;
    sc_out< sc_logic > frame_buffer_ce0;
    sc_out< sc_logic > frame_buffer_we0;
    sc_out< sc_lv<8> > frame_buffer_d0;


    // Module declarations
    coloringFB(sc_module_name name);
    SC_HAS_PROCESS(coloringFB);

    ~coloringFB();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > icmp_ln239_fu_159_p2;
    sc_signal< sc_lv<1> > icmp_ln239_reg_255;
    sc_signal< sc_lv<9> > i_fu_171_p2;
    sc_signal< sc_lv<9> > i_reg_262;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<18> > zext_ln244_fu_185_p1;
    sc_signal< sc_lv<18> > zext_ln244_reg_267;
    sc_signal< sc_lv<1> > icmp_ln242_fu_165_p2;
    sc_signal< sc_lv<9> > j_fu_195_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<31> > i_2_fu_224_p2;
    sc_signal< sc_lv<31> > i_2_reg_283;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln250_fu_219_p2;
    sc_signal< sc_lv<9> > i_0_reg_126;
    sc_signal< sc_lv<1> > icmp_ln244_fu_189_p2;
    sc_signal< sc_lv<9> > j_0_reg_137;
    sc_signal< sc_lv<31> > i1_0_reg_148;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > zext_ln245_1_fu_210_p1;
    sc_signal< sc_lv<64> > zext_ln251_fu_230_p1;
    sc_signal< sc_lv<64> > zext_ln251_1_fu_245_p1;
    sc_signal< sc_lv<17> > tmp_3_fu_177_p3;
    sc_signal< sc_lv<18> > zext_ln245_fu_201_p1;
    sc_signal< sc_lv<18> > add_ln245_fu_205_p2;
    sc_signal< sc_lv<32> > zext_ln250_fu_215_p1;
    sc_signal< sc_lv<16> > tmp_4_fu_237_p3;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<9> ap_const_lv9_100;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<31> ap_const_lv31_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln245_fu_205_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_frame_buffer_address0();
    void thread_frame_buffer_ce0();
    void thread_frame_buffer_d0();
    void thread_frame_buffer_we0();
    void thread_i_2_fu_224_p2();
    void thread_i_fu_171_p2();
    void thread_icmp_ln239_fu_159_p2();
    void thread_icmp_ln242_fu_165_p2();
    void thread_icmp_ln244_fu_189_p2();
    void thread_icmp_ln250_fu_219_p2();
    void thread_j_fu_195_p2();
    void thread_pixels_color_address0();
    void thread_pixels_color_ce0();
    void thread_pixels_x_address0();
    void thread_pixels_x_ce0();
    void thread_pixels_y_address0();
    void thread_pixels_y_ce0();
    void thread_tmp_3_fu_177_p3();
    void thread_tmp_4_fu_237_p3();
    void thread_zext_ln244_fu_185_p1();
    void thread_zext_ln245_1_fu_210_p1();
    void thread_zext_ln245_fu_201_p1();
    void thread_zext_ln250_fu_215_p1();
    void thread_zext_ln251_1_fu_245_p1();
    void thread_zext_ln251_fu_230_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
