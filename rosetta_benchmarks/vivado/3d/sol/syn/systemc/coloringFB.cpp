// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "coloringFB.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic coloringFB::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic coloringFB::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> coloringFB::ap_ST_fsm_state1 = "1";
const sc_lv<5> coloringFB::ap_ST_fsm_state2 = "10";
const sc_lv<5> coloringFB::ap_ST_fsm_state3 = "100";
const sc_lv<5> coloringFB::ap_ST_fsm_state4 = "1000";
const sc_lv<5> coloringFB::ap_ST_fsm_state5 = "10000";
const sc_lv<32> coloringFB::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> coloringFB::ap_const_lv32_1 = "1";
const sc_lv<1> coloringFB::ap_const_lv1_1 = "1";
const sc_lv<1> coloringFB::ap_const_lv1_0 = "0";
const sc_lv<32> coloringFB::ap_const_lv32_2 = "10";
const sc_lv<32> coloringFB::ap_const_lv32_3 = "11";
const sc_lv<9> coloringFB::ap_const_lv9_0 = "000000000";
const sc_lv<31> coloringFB::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> coloringFB::ap_const_lv32_4 = "100";
const sc_lv<8> coloringFB::ap_const_lv8_0 = "00000000";
const sc_lv<12> coloringFB::ap_const_lv12_0 = "000000000000";
const sc_lv<9> coloringFB::ap_const_lv9_100 = "100000000";
const sc_lv<9> coloringFB::ap_const_lv9_1 = "1";
const sc_lv<31> coloringFB::ap_const_lv31_1 = "1";
const bool coloringFB::ap_const_boolean_1 = true;

coloringFB::coloringFB(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln245_fu_205_p2);
    sensitive << ( zext_ln244_reg_267 );
    sensitive << ( zext_ln245_fu_201_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln250_fu_219_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln250_fu_219_p2 );

    SC_METHOD(thread_frame_buffer_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln245_1_fu_210_p1 );
    sensitive << ( zext_ln251_1_fu_245_p1 );

    SC_METHOD(thread_frame_buffer_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_frame_buffer_d0);
    sensitive << ( pixels_color_q0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_frame_buffer_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln244_fu_189_p2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_i_2_fu_224_p2);
    sensitive << ( i1_0_reg_148 );

    SC_METHOD(thread_i_fu_171_p2);
    sensitive << ( i_0_reg_126 );

    SC_METHOD(thread_icmp_ln239_fu_159_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( counter );

    SC_METHOD(thread_icmp_ln242_fu_165_p2);
    sensitive << ( icmp_ln239_reg_255 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_126 );

    SC_METHOD(thread_icmp_ln244_fu_189_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_137 );

    SC_METHOD(thread_icmp_ln250_fu_219_p2);
    sensitive << ( size_pixels );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln250_fu_215_p1 );

    SC_METHOD(thread_j_fu_195_p2);
    sensitive << ( j_0_reg_137 );

    SC_METHOD(thread_pixels_color_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln251_fu_230_p1 );

    SC_METHOD(thread_pixels_color_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_pixels_x_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln251_fu_230_p1 );

    SC_METHOD(thread_pixels_x_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_pixels_y_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln251_fu_230_p1 );

    SC_METHOD(thread_pixels_y_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_tmp_3_fu_177_p3);
    sensitive << ( i_0_reg_126 );

    SC_METHOD(thread_tmp_4_fu_237_p3);
    sensitive << ( pixels_x_q0 );
    sensitive << ( pixels_y_q0 );

    SC_METHOD(thread_zext_ln244_fu_185_p1);
    sensitive << ( tmp_3_fu_177_p3 );

    SC_METHOD(thread_zext_ln245_1_fu_210_p1);
    sensitive << ( add_ln245_fu_205_p2 );

    SC_METHOD(thread_zext_ln245_fu_201_p1);
    sensitive << ( j_0_reg_137 );

    SC_METHOD(thread_zext_ln250_fu_215_p1);
    sensitive << ( i1_0_reg_148 );

    SC_METHOD(thread_zext_ln251_1_fu_245_p1);
    sensitive << ( tmp_4_fu_237_p3 );

    SC_METHOD(thread_zext_ln251_fu_230_p1);
    sensitive << ( i1_0_reg_148 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln239_reg_255 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln242_fu_165_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln250_fu_219_p2 );
    sensitive << ( icmp_ln244_fu_189_p2 );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "coloringFB_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, counter, "(port)counter");
    sc_trace(mVcdFile, size_pixels, "(port)size_pixels");
    sc_trace(mVcdFile, pixels_x_address0, "(port)pixels_x_address0");
    sc_trace(mVcdFile, pixels_x_ce0, "(port)pixels_x_ce0");
    sc_trace(mVcdFile, pixels_x_q0, "(port)pixels_x_q0");
    sc_trace(mVcdFile, pixels_y_address0, "(port)pixels_y_address0");
    sc_trace(mVcdFile, pixels_y_ce0, "(port)pixels_y_ce0");
    sc_trace(mVcdFile, pixels_y_q0, "(port)pixels_y_q0");
    sc_trace(mVcdFile, pixels_color_address0, "(port)pixels_color_address0");
    sc_trace(mVcdFile, pixels_color_ce0, "(port)pixels_color_ce0");
    sc_trace(mVcdFile, pixels_color_q0, "(port)pixels_color_q0");
    sc_trace(mVcdFile, frame_buffer_address0, "(port)frame_buffer_address0");
    sc_trace(mVcdFile, frame_buffer_ce0, "(port)frame_buffer_ce0");
    sc_trace(mVcdFile, frame_buffer_we0, "(port)frame_buffer_we0");
    sc_trace(mVcdFile, frame_buffer_d0, "(port)frame_buffer_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, icmp_ln239_fu_159_p2, "icmp_ln239_fu_159_p2");
    sc_trace(mVcdFile, icmp_ln239_reg_255, "icmp_ln239_reg_255");
    sc_trace(mVcdFile, i_fu_171_p2, "i_fu_171_p2");
    sc_trace(mVcdFile, i_reg_262, "i_reg_262");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln244_fu_185_p1, "zext_ln244_fu_185_p1");
    sc_trace(mVcdFile, zext_ln244_reg_267, "zext_ln244_reg_267");
    sc_trace(mVcdFile, icmp_ln242_fu_165_p2, "icmp_ln242_fu_165_p2");
    sc_trace(mVcdFile, j_fu_195_p2, "j_fu_195_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_2_fu_224_p2, "i_2_fu_224_p2");
    sc_trace(mVcdFile, i_2_reg_283, "i_2_reg_283");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln250_fu_219_p2, "icmp_ln250_fu_219_p2");
    sc_trace(mVcdFile, i_0_reg_126, "i_0_reg_126");
    sc_trace(mVcdFile, icmp_ln244_fu_189_p2, "icmp_ln244_fu_189_p2");
    sc_trace(mVcdFile, j_0_reg_137, "j_0_reg_137");
    sc_trace(mVcdFile, i1_0_reg_148, "i1_0_reg_148");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, zext_ln245_1_fu_210_p1, "zext_ln245_1_fu_210_p1");
    sc_trace(mVcdFile, zext_ln251_fu_230_p1, "zext_ln251_fu_230_p1");
    sc_trace(mVcdFile, zext_ln251_1_fu_245_p1, "zext_ln251_1_fu_245_p1");
    sc_trace(mVcdFile, tmp_3_fu_177_p3, "tmp_3_fu_177_p3");
    sc_trace(mVcdFile, zext_ln245_fu_201_p1, "zext_ln245_fu_201_p1");
    sc_trace(mVcdFile, add_ln245_fu_205_p2, "add_ln245_fu_205_p2");
    sc_trace(mVcdFile, zext_ln250_fu_215_p1, "zext_ln250_fu_215_p1");
    sc_trace(mVcdFile, tmp_4_fu_237_p3, "tmp_4_fu_237_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

coloringFB::~coloringFB() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void coloringFB::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i1_0_reg_148 = i_2_reg_283.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln242_fu_165_p2.read()) || 
                 esl_seteq<1,1,1>(icmp_ln239_reg_255.read(), ap_const_lv1_0)))) {
        i1_0_reg_148 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(icmp_ln239_fu_159_p2.read(), ap_const_lv1_1))) {
        i_0_reg_126 = ap_const_lv9_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln244_fu_189_p2.read()))) {
        i_0_reg_126 = i_reg_262.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln244_fu_189_p2.read()))) {
        j_0_reg_137 = j_fu_195_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln239_reg_255.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(icmp_ln242_fu_165_p2.read(), ap_const_lv1_0))) {
        j_0_reg_137 = ap_const_lv9_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_2_reg_283 = i_2_fu_224_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln239_reg_255.read(), ap_const_lv1_1))) {
        i_reg_262 = i_fu_171_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        icmp_ln239_reg_255 = icmp_ln239_fu_159_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln239_reg_255.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(icmp_ln242_fu_165_p2.read(), ap_const_lv1_0))) {
        zext_ln244_reg_267 = zext_ln244_fu_185_p1.read();
    }
}

void coloringFB::thread_add_ln245_fu_205_p2() {
    add_ln245_fu_205_p2 = (!zext_ln244_reg_267.read().is_01() || !zext_ln245_fu_201_p1.read().is_01())? sc_lv<18>(): (sc_biguint<18>(zext_ln244_reg_267.read()) + sc_biguint<18>(zext_ln245_fu_201_p1.read()));
}

void coloringFB::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void coloringFB::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void coloringFB::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void coloringFB::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void coloringFB::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void coloringFB::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln250_fu_219_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void coloringFB::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void coloringFB::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln250_fu_219_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void coloringFB::thread_frame_buffer_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        frame_buffer_address0 =  (sc_lv<16>) (zext_ln251_1_fu_245_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        frame_buffer_address0 =  (sc_lv<16>) (zext_ln245_1_fu_210_p1.read());
    } else {
        frame_buffer_address0 = "XXXXXXXXXXXXXXXX";
    }
}

void coloringFB::thread_frame_buffer_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        frame_buffer_ce0 = ap_const_logic_1;
    } else {
        frame_buffer_ce0 = ap_const_logic_0;
    }
}

void coloringFB::thread_frame_buffer_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        frame_buffer_d0 = pixels_color_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        frame_buffer_d0 = ap_const_lv8_0;
    } else {
        frame_buffer_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void coloringFB::thread_frame_buffer_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln244_fu_189_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        frame_buffer_we0 = ap_const_logic_1;
    } else {
        frame_buffer_we0 = ap_const_logic_0;
    }
}

void coloringFB::thread_i_2_fu_224_p2() {
    i_2_fu_224_p2 = (!i1_0_reg_148.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i1_0_reg_148.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void coloringFB::thread_i_fu_171_p2() {
    i_fu_171_p2 = (!i_0_reg_126.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(i_0_reg_126.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void coloringFB::thread_icmp_ln239_fu_159_p2() {
    icmp_ln239_fu_159_p2 = (!counter.read().is_01() || !ap_const_lv12_0.is_01())? sc_lv<1>(): sc_lv<1>(counter.read() == ap_const_lv12_0);
}

void coloringFB::thread_icmp_ln242_fu_165_p2() {
    icmp_ln242_fu_165_p2 = (!i_0_reg_126.read().is_01() || !ap_const_lv9_100.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_126.read() == ap_const_lv9_100);
}

void coloringFB::thread_icmp_ln244_fu_189_p2() {
    icmp_ln244_fu_189_p2 = (!j_0_reg_137.read().is_01() || !ap_const_lv9_100.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_137.read() == ap_const_lv9_100);
}

void coloringFB::thread_icmp_ln250_fu_219_p2() {
    icmp_ln250_fu_219_p2 = (!zext_ln250_fu_215_p1.read().is_01() || !size_pixels.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln250_fu_215_p1.read()) < sc_bigint<32>(size_pixels.read()));
}

void coloringFB::thread_j_fu_195_p2() {
    j_fu_195_p2 = (!j_0_reg_137.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(j_0_reg_137.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void coloringFB::thread_pixels_color_address0() {
    pixels_color_address0 =  (sc_lv<9>) (zext_ln251_fu_230_p1.read());
}

void coloringFB::thread_pixels_color_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        pixels_color_ce0 = ap_const_logic_1;
    } else {
        pixels_color_ce0 = ap_const_logic_0;
    }
}

void coloringFB::thread_pixels_x_address0() {
    pixels_x_address0 =  (sc_lv<9>) (zext_ln251_fu_230_p1.read());
}

void coloringFB::thread_pixels_x_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        pixels_x_ce0 = ap_const_logic_1;
    } else {
        pixels_x_ce0 = ap_const_logic_0;
    }
}

void coloringFB::thread_pixels_y_address0() {
    pixels_y_address0 =  (sc_lv<9>) (zext_ln251_fu_230_p1.read());
}

void coloringFB::thread_pixels_y_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        pixels_y_ce0 = ap_const_logic_1;
    } else {
        pixels_y_ce0 = ap_const_logic_0;
    }
}

void coloringFB::thread_tmp_3_fu_177_p3() {
    tmp_3_fu_177_p3 = esl_concat<9,8>(i_0_reg_126.read(), ap_const_lv8_0);
}

void coloringFB::thread_tmp_4_fu_237_p3() {
    tmp_4_fu_237_p3 = esl_concat<8,8>(pixels_x_q0.read(), pixels_y_q0.read());
}

void coloringFB::thread_zext_ln244_fu_185_p1() {
    zext_ln244_fu_185_p1 = esl_zext<18,17>(tmp_3_fu_177_p3.read());
}

void coloringFB::thread_zext_ln245_1_fu_210_p1() {
    zext_ln245_1_fu_210_p1 = esl_zext<64,18>(add_ln245_fu_205_p2.read());
}

void coloringFB::thread_zext_ln245_fu_201_p1() {
    zext_ln245_fu_201_p1 = esl_zext<18,9>(j_0_reg_137.read());
}

void coloringFB::thread_zext_ln250_fu_215_p1() {
    zext_ln250_fu_215_p1 = esl_zext<32,31>(i1_0_reg_148.read());
}

void coloringFB::thread_zext_ln251_1_fu_245_p1() {
    zext_ln251_1_fu_245_p1 = esl_zext<64,16>(tmp_4_fu_237_p3.read());
}

void coloringFB::thread_zext_ln251_fu_230_p1() {
    zext_ln251_fu_230_p1 = esl_zext<64,31>(i1_0_reg_148.read());
}

void coloringFB::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln242_fu_165_p2.read()) || 
  esl_seteq<1,1,1>(icmp_ln239_reg_255.read(), ap_const_lv1_0)))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln244_fu_189_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln250_fu_219_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

}

