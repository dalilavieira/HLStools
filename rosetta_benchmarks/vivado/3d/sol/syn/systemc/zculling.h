// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _zculling_HH_
#define _zculling_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "zculling_z_buffer.h"

namespace ap_rtl {

struct zculling : public sc_module {
    // Port declarations 33
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<12> > counter;
    sc_out< sc_lv<9> > fragments_x_address0;
    sc_out< sc_logic > fragments_x_ce0;
    sc_in< sc_lv<8> > fragments_x_q0;
    sc_out< sc_lv<9> > fragments_y_address0;
    sc_out< sc_logic > fragments_y_ce0;
    sc_in< sc_lv<8> > fragments_y_q0;
    sc_out< sc_lv<9> > fragments_z_address0;
    sc_out< sc_logic > fragments_z_ce0;
    sc_in< sc_lv<8> > fragments_z_q0;
    sc_out< sc_lv<9> > fragments_color_address0;
    sc_out< sc_logic > fragments_color_ce0;
    sc_in< sc_lv<8> > fragments_color_q0;
    sc_in< sc_lv<32> > size;
    sc_out< sc_lv<9> > pixels_x_address0;
    sc_out< sc_logic > pixels_x_ce0;
    sc_out< sc_logic > pixels_x_we0;
    sc_out< sc_lv<8> > pixels_x_d0;
    sc_out< sc_lv<9> > pixels_y_address0;
    sc_out< sc_logic > pixels_y_ce0;
    sc_out< sc_logic > pixels_y_we0;
    sc_out< sc_lv<8> > pixels_y_d0;
    sc_out< sc_lv<9> > pixels_color_address0;
    sc_out< sc_logic > pixels_color_ce0;
    sc_out< sc_logic > pixels_color_we0;
    sc_out< sc_lv<8> > pixels_color_d0;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    zculling(sc_module_name name);
    SC_HAS_PROCESS(zculling);

    ~zculling();

    sc_trace_file* mVcdFile;

    zculling_z_buffer* z_buffer_U;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<16> > z_buffer_address0;
    sc_signal< sc_logic > z_buffer_ce0;
    sc_signal< sc_logic > z_buffer_we0;
    sc_signal< sc_lv<8> > z_buffer_d0;
    sc_signal< sc_lv<8> > z_buffer_q0;
    sc_signal< sc_lv<1> > icmp_ln205_fu_233_p2;
    sc_signal< sc_lv<1> > icmp_ln205_reg_357;
    sc_signal< sc_lv<9> > i_fu_245_p2;
    sc_signal< sc_lv<9> > i_reg_364;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<18> > zext_ln209_fu_259_p1;
    sc_signal< sc_lv<18> > zext_ln209_reg_369;
    sc_signal< sc_lv<1> > icmp_ln207_fu_239_p2;
    sc_signal< sc_lv<9> > j_fu_274_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<31> > n_fu_303_p2;
    sc_signal< sc_lv<31> > n_reg_392;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > zext_ln222_fu_309_p1;
    sc_signal< sc_lv<64> > zext_ln222_reg_397;
    sc_signal< sc_lv<1> > icmp_ln220_fu_298_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<8> > fragments_x_load_reg_418;
    sc_signal< sc_lv<8> > fragments_y_load_reg_423;
    sc_signal< sc_lv<16> > z_buffer_addr_1_reg_428;
    sc_signal< sc_lv<1> > icmp_ln222_fu_328_p2;
    sc_signal< sc_lv<1> > icmp_ln222_reg_433;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<9> > i_0_reg_197;
    sc_signal< sc_lv<1> > icmp_ln209_fu_268_p2;
    sc_signal< sc_lv<9> > j_0_reg_208;
    sc_signal< sc_lv<31> > n_0_reg_219;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<64> > zext_ln211_1_fu_289_p1;
    sc_signal< sc_lv<64> > zext_ln222_1_fu_323_p1;
    sc_signal< sc_lv<64> > sext_ln224_fu_334_p1;
    sc_signal< sc_lv<32> > pixel_cntr_1_fu_66;
    sc_signal< sc_lv<32> > pixel_cntr_fu_341_p2;
    sc_signal< sc_lv<17> > tmp_1_fu_251_p3;
    sc_signal< sc_lv<18> > zext_ln211_fu_280_p1;
    sc_signal< sc_lv<18> > add_ln211_fu_284_p2;
    sc_signal< sc_lv<32> > zext_ln220_fu_294_p1;
    sc_signal< sc_lv<16> > tmp_2_fu_315_p3;
    sc_signal< sc_lv<32> > sext_ln224_fu_334_p0;
    sc_signal< sc_lv<32> > pixel_cntr_fu_341_p0;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<9> ap_const_lv9_100;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<31> ap_const_lv31_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln211_fu_284_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_fragments_color_address0();
    void thread_fragments_color_ce0();
    void thread_fragments_x_address0();
    void thread_fragments_x_ce0();
    void thread_fragments_y_address0();
    void thread_fragments_y_ce0();
    void thread_fragments_z_address0();
    void thread_fragments_z_ce0();
    void thread_i_fu_245_p2();
    void thread_icmp_ln205_fu_233_p2();
    void thread_icmp_ln207_fu_239_p2();
    void thread_icmp_ln209_fu_268_p2();
    void thread_icmp_ln220_fu_298_p2();
    void thread_icmp_ln222_fu_328_p2();
    void thread_j_fu_274_p2();
    void thread_n_fu_303_p2();
    void thread_pixel_cntr_fu_341_p0();
    void thread_pixel_cntr_fu_341_p2();
    void thread_pixels_color_address0();
    void thread_pixels_color_ce0();
    void thread_pixels_color_d0();
    void thread_pixels_color_we0();
    void thread_pixels_x_address0();
    void thread_pixels_x_ce0();
    void thread_pixels_x_d0();
    void thread_pixels_x_we0();
    void thread_pixels_y_address0();
    void thread_pixels_y_ce0();
    void thread_pixels_y_d0();
    void thread_pixels_y_we0();
    void thread_sext_ln224_fu_334_p0();
    void thread_sext_ln224_fu_334_p1();
    void thread_tmp_1_fu_251_p3();
    void thread_tmp_2_fu_315_p3();
    void thread_z_buffer_address0();
    void thread_z_buffer_ce0();
    void thread_z_buffer_d0();
    void thread_z_buffer_we0();
    void thread_zext_ln209_fu_259_p1();
    void thread_zext_ln211_1_fu_289_p1();
    void thread_zext_ln211_fu_280_p1();
    void thread_zext_ln220_fu_294_p1();
    void thread_zext_ln222_1_fu_323_p1();
    void thread_zext_ln222_fu_309_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
