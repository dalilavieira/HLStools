-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity coloringFB is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    counter : IN STD_LOGIC_VECTOR (11 downto 0);
    size_pixels : IN STD_LOGIC_VECTOR (31 downto 0);
    pixels_x_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    pixels_x_ce0 : OUT STD_LOGIC;
    pixels_x_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixels_y_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    pixels_y_ce0 : OUT STD_LOGIC;
    pixels_y_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixels_color_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    pixels_color_ce0 : OUT STD_LOGIC;
    pixels_color_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    frame_buffer_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    frame_buffer_ce0 : OUT STD_LOGIC;
    frame_buffer_we0 : OUT STD_LOGIC;
    frame_buffer_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of coloringFB is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln239_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln239_reg_255 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_171_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_262 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln244_fu_185_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln244_reg_267 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln242_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_195_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_2_fu_224_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_2_reg_283 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln250_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_126 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln244_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_reg_137 : STD_LOGIC_VECTOR (8 downto 0);
    signal i1_0_reg_148 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln245_1_fu_210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_fu_230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_1_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_177_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln245_fu_201_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln245_fu_205_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln250_fu_215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_237_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_0_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i1_0_reg_148 <= i_2_reg_283;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln242_fu_165_p2 = ap_const_lv1_1) or (icmp_ln239_reg_255 = ap_const_lv1_0)))) then 
                i1_0_reg_148 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_0_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln239_fu_159_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_126 <= ap_const_lv9_0;
            elsif (((icmp_ln244_fu_189_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_126 <= i_reg_262;
            end if; 
        end if;
    end process;

    j_0_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln244_fu_189_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_0_reg_137 <= j_fu_195_p2;
            elsif (((icmp_ln242_fu_165_p2 = ap_const_lv1_0) and (icmp_ln239_reg_255 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_137 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_2_reg_283 <= i_2_fu_224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln239_reg_255 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_262 <= i_fu_171_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                icmp_ln239_reg_255 <= icmp_ln239_fu_159_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln242_fu_165_p2 = ap_const_lv1_0) and (icmp_ln239_reg_255 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln244_reg_267(16 downto 8) <= zext_ln244_fu_185_p1(16 downto 8);
            end if;
        end if;
    end process;
    zext_ln244_reg_267(7 downto 0) <= "00000000";
    zext_ln244_reg_267(17) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln239_reg_255, ap_CS_fsm_state2, icmp_ln242_fu_165_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln250_fu_219_p2, icmp_ln244_fu_189_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln242_fu_165_p2 = ap_const_lv1_1) or (icmp_ln239_reg_255 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln244_fu_189_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln250_fu_219_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln245_fu_205_p2 <= std_logic_vector(unsigned(zext_ln244_reg_267) + unsigned(zext_ln245_fu_201_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln250_fu_219_p2)
    begin
        if ((((icmp_ln250_fu_219_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln250_fu_219_p2)
    begin
        if (((icmp_ln250_fu_219_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    frame_buffer_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, zext_ln245_1_fu_210_p1, zext_ln251_1_fu_245_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            frame_buffer_address0 <= zext_ln251_1_fu_245_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            frame_buffer_address0 <= zext_ln245_1_fu_210_p1(16 - 1 downto 0);
        else 
            frame_buffer_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    frame_buffer_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            frame_buffer_ce0 <= ap_const_logic_1;
        else 
            frame_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    frame_buffer_d0_assign_proc : process(pixels_color_q0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            frame_buffer_d0 <= pixels_color_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            frame_buffer_d0 <= ap_const_lv8_0;
        else 
            frame_buffer_d0 <= "XXXXXXXX";
        end if; 
    end process;


    frame_buffer_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln244_fu_189_p2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln244_fu_189_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            frame_buffer_we0 <= ap_const_logic_1;
        else 
            frame_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_224_p2 <= std_logic_vector(unsigned(i1_0_reg_148) + unsigned(ap_const_lv31_1));
    i_fu_171_p2 <= std_logic_vector(unsigned(i_0_reg_126) + unsigned(ap_const_lv9_1));
    icmp_ln239_fu_159_p2 <= "1" when (counter = ap_const_lv12_0) else "0";
    icmp_ln242_fu_165_p2 <= "1" when (i_0_reg_126 = ap_const_lv9_100) else "0";
    icmp_ln244_fu_189_p2 <= "1" when (j_0_reg_137 = ap_const_lv9_100) else "0";
    icmp_ln250_fu_219_p2 <= "1" when (signed(zext_ln250_fu_215_p1) < signed(size_pixels)) else "0";
    j_fu_195_p2 <= std_logic_vector(unsigned(j_0_reg_137) + unsigned(ap_const_lv9_1));
    pixels_color_address0 <= zext_ln251_fu_230_p1(9 - 1 downto 0);

    pixels_color_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pixels_color_ce0 <= ap_const_logic_1;
        else 
            pixels_color_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pixels_x_address0 <= zext_ln251_fu_230_p1(9 - 1 downto 0);

    pixels_x_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pixels_x_ce0 <= ap_const_logic_1;
        else 
            pixels_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pixels_y_address0 <= zext_ln251_fu_230_p1(9 - 1 downto 0);

    pixels_y_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pixels_y_ce0 <= ap_const_logic_1;
        else 
            pixels_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_fu_177_p3 <= (i_0_reg_126 & ap_const_lv8_0);
    tmp_4_fu_237_p3 <= (pixels_x_q0 & pixels_y_q0);
    zext_ln244_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_177_p3),18));
    zext_ln245_1_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln245_fu_205_p2),64));
    zext_ln245_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_137),18));
    zext_ln250_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_148),32));
    zext_ln251_1_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_237_p3),64));
    zext_ln251_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_148),64));
end behav;
