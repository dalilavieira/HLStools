-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity update_knn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    train_inst_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    train_inst_ce0 : OUT STD_LOGIC;
    train_inst_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    train_inst_offset : IN STD_LOGIC_VECTOR (16 downto 0);
    test_inst_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    test_inst_ce0 : OUT STD_LOGIC;
    test_inst_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    test_inst_offset : IN STD_LOGIC_VECTOR (12 downto 0);
    dists_0_read_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    dists_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    dists_1_read_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    dists_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    dists_2_read_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    dists_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    labels_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    labels_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    labels_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    label_r : IN STD_LOGIC_VECTOR (3 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of update_knn is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal label_cast_fu_468_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal label_cast_reg_1986 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_478_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_1996 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln33_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln33_fu_512_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln33_reg_2011 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln21_fu_918_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln21_reg_2019 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_32_fu_932_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_32_reg_2025 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_33_fu_942_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_33_reg_2030 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_34_fu_952_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_34_reg_2035 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_35_fu_962_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_35_reg_2040 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_36_fu_972_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_36_reg_2045 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_37_fu_982_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_37_reg_2050 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_38_fu_992_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_38_reg_2055 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_39_fu_1002_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_39_reg_2060 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_40_fu_1012_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_40_reg_2065 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_41_fu_1022_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_41_reg_2070 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_42_fu_1032_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_42_reg_2075 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_43_fu_1042_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_43_reg_2080 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_44_fu_1052_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_44_reg_2085 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_45_fu_1062_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_45_reg_2090 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln21_2_fu_1142_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln21_2_reg_2095 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_47_fu_1162_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_47_reg_2101 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_48_fu_1172_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_48_reg_2106 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_49_fu_1182_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_49_reg_2111 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_50_fu_1192_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_50_reg_2116 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_51_fu_1202_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_51_reg_2121 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_52_fu_1212_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_52_reg_2126 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_53_fu_1222_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_53_reg_2131 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_54_fu_1232_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_54_reg_2136 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_55_fu_1242_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_55_reg_2141 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_56_fu_1252_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_56_reg_2146 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_57_fu_1262_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_57_reg_2151 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_58_fu_1272_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_58_reg_2156 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_59_fu_1282_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_59_reg_2161 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_60_fu_1292_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_60_reg_2166 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_61_reg_2171 : STD_LOGIC_VECTOR (58 downto 0);
    signal trunc_ln1_reg_2176 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln22_2_fu_1528_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln22_2_reg_2181 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_68_fu_1594_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_68_reg_2186 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_2_fu_1736_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln26_2_reg_2191 : STD_LOGIC_VECTOR (6 downto 0);
    signal dist_fu_1767_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal k_fu_1783_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal select_ln45_fu_1804_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln43_fu_1777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln45_1_fu_1812_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag_fu_1829_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_fu_1820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag7_fu_1843_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag4_fu_1857_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal dists_0_0_reg_328 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_0_reg_340 : STD_LOGIC_VECTOR (2 downto 0);
    signal max_dist_0_reg_351 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_dist_id_0_reg_362 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_dist_id_reg_373 : STD_LOGIC_VECTOR (1 downto 0);
    signal write_flag4_1_reg_384 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln55_fu_1825_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal write_flag7_1_reg_399 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag_1_reg_414 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln59_reg_429 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln59_1_reg_442 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln59_2_reg_455 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln35_2_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_3_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_1_fu_488_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln35_fu_492_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln35_fu_484_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln35_1_fu_502_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal diff_fu_516_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_522_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_530_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_538_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_546_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_554_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_562_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_570_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_578_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_586_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_594_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_602_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_610_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_618_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_626_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_634_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_642_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_650_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_658_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_666_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_674_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_682_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_690_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_698_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_706_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_714_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_722_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_730_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_738_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_746_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_754_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_762_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_770_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln_fu_778_p64 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln20_fu_908_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln20_fu_912_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_922_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln1_fu_1072_p32 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_46_fu_1152_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln21_1_fu_1302_p32 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln21_fu_1138_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln21_1_fu_1368_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln21_1_fu_1378_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln21_fu_1372_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln21_3_fu_1410_p31 : STD_LOGIC_VECTOR (59 downto 0);
    signal trunc_ln21_4_fu_1459_p31 : STD_LOGIC_VECTOR (59 downto 0);
    signal add_ln22_fu_1508_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal zext_ln22_3_fu_1514_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal zext_ln22_1_fu_1407_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln22_3_fu_1523_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln22_fu_1404_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln22_1_fu_1517_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal tmp_62_fu_1534_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_63_fu_1544_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_64_fu_1554_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_65_fu_1564_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_66_fu_1574_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_67_fu_1584_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln22_fu_1604_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_assign_3_fu_1608_p16 : STD_LOGIC_VECTOR (59 downto 0);
    signal lshr_ln_fu_1646_p14 : STD_LOGIC_VECTOR (51 downto 0);
    signal zext_ln23_1_fu_1676_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal zext_ln22_2_fu_1642_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal zext_ln23_fu_1680_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal add_ln23_1_fu_1690_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal lshr_ln1_fu_1696_p4 : STD_LOGIC_VECTOR (44 downto 0);
    signal add_ln23_fu_1684_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal zext_ln24_fu_1706_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal add_ln24_fu_1720_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln26_1_fu_1710_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln26_2_fu_1726_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln2_fu_1745_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_fu_1742_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln26_1_fu_1752_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln26_fu_1758_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_1_fu_1763_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal max_dist_fu_1789_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln45_fu_1798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln48_fu_1773_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal select_ln59_fu_1871_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln59_1_fu_1877_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln59_2_fu_1883_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component DigitRec_sw_mux_32_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DigitRec_sw_mux_42_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    DigitRec_sw_mux_32_32_1_1_U1 : component DigitRec_sw_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => dists_0_read,
        din1 => dists_1_read,
        din2 => dists_2_read,
        din3 => max_dist_id_reg_373,
        dout => max_dist_fu_1789_p5);

    DigitRec_sw_mux_42_1_1_1_U2 : component DigitRec_sw_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_0,
        din4 => trunc_ln55_fu_1825_p1,
        dout => write_flag_fu_1829_p6);

    DigitRec_sw_mux_42_1_1_1_U3 : component DigitRec_sw_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_1,
        din4 => trunc_ln55_fu_1825_p1,
        dout => write_flag7_fu_1843_p6);

    DigitRec_sw_mux_42_1_1_1_U4 : component DigitRec_sw_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_0,
        din4 => trunc_ln55_fu_1825_p1,
        dout => write_flag4_fu_1857_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_0_preg <= phi_ln59_2_reg_455;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_1_preg <= phi_ln59_1_reg_442;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_2_preg <= phi_ln59_reg_429;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_3_preg <= select_ln59_fu_1871_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_4_preg <= select_ln59_1_fu_1877_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_5_preg <= select_ln59_2_fu_1883_p3;
                end if; 
            end if;
        end if;
    end process;


    dists_0_0_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                dists_0_0_reg_328 <= dist_fu_1767_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                dists_0_0_reg_328 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_0_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_340 <= i_reg_1996;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_340 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    max_dist_0_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_472_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                max_dist_0_reg_351 <= ap_const_lv32_0;
            elsif (((icmp_ln43_fu_1777_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                max_dist_0_reg_351 <= select_ln45_fu_1804_p3;
            end if; 
        end if;
    end process;

    max_dist_id_0_reg_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_472_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                max_dist_id_0_reg_362 <= ap_const_lv32_4;
            elsif (((icmp_ln43_fu_1777_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                max_dist_id_0_reg_362 <= select_ln45_1_fu_1812_p3;
            end if; 
        end if;
    end process;

    max_dist_id_reg_373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_472_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                max_dist_id_reg_373 <= ap_const_lv2_0;
            elsif (((icmp_ln43_fu_1777_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                max_dist_id_reg_373 <= k_fu_1783_p2;
            end if; 
        end if;
    end process;

    phi_ln59_1_reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln55_fu_1825_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln53_fu_1820_p2 = ap_const_lv1_1) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1))) then 
                phi_ln59_1_reg_442 <= label_cast_reg_1986;
            elsif ((((icmp_ln53_fu_1820_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1)) or (not((trunc_ln55_fu_1825_p1 = ap_const_lv2_1)) and not((trunc_ln55_fu_1825_p1 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln53_fu_1820_p2 = ap_const_lv1_1) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1)) or ((trunc_ln55_fu_1825_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln53_fu_1820_p2 = ap_const_lv1_1) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1)))) then 
                phi_ln59_1_reg_442 <= labels_1_read;
            end if; 
        end if;
    end process;

    phi_ln59_2_reg_455_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln55_fu_1825_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln53_fu_1820_p2 = ap_const_lv1_1) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1))) then 
                phi_ln59_2_reg_455 <= label_cast_reg_1986;
            elsif ((((icmp_ln53_fu_1820_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1)) or ((trunc_ln55_fu_1825_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln53_fu_1820_p2 = ap_const_lv1_1) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1)) or (not((trunc_ln55_fu_1825_p1 = ap_const_lv2_1)) and not((trunc_ln55_fu_1825_p1 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln53_fu_1820_p2 = ap_const_lv1_1) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1)))) then 
                phi_ln59_2_reg_455 <= labels_0_read;
            end if; 
        end if;
    end process;

    phi_ln59_reg_429_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln53_fu_1820_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1)) or ((trunc_ln55_fu_1825_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln53_fu_1820_p2 = ap_const_lv1_1) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1)) or ((trunc_ln55_fu_1825_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln53_fu_1820_p2 = ap_const_lv1_1) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1)))) then 
                phi_ln59_reg_429 <= labels_2_read;
            elsif ((not((trunc_ln55_fu_1825_p1 = ap_const_lv2_1)) and not((trunc_ln55_fu_1825_p1 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln53_fu_1820_p2 = ap_const_lv1_1) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1))) then 
                phi_ln59_reg_429 <= label_cast_reg_1986;
            end if; 
        end if;
    end process;

    write_flag4_1_reg_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_1820_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1))) then 
                write_flag4_1_reg_384 <= ap_const_lv1_0;
            elsif ((((trunc_ln55_fu_1825_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln53_fu_1820_p2 = ap_const_lv1_1) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1)) or (not((trunc_ln55_fu_1825_p1 = ap_const_lv2_1)) and not((trunc_ln55_fu_1825_p1 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln53_fu_1820_p2 = ap_const_lv1_1) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1)) or ((trunc_ln55_fu_1825_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln53_fu_1820_p2 = ap_const_lv1_1) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1)))) then 
                write_flag4_1_reg_384 <= write_flag4_fu_1857_p6;
            end if; 
        end if;
    end process;

    write_flag7_1_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_1820_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1))) then 
                write_flag7_1_reg_399 <= ap_const_lv1_0;
            elsif ((((trunc_ln55_fu_1825_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln53_fu_1820_p2 = ap_const_lv1_1) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1)) or (not((trunc_ln55_fu_1825_p1 = ap_const_lv2_1)) and not((trunc_ln55_fu_1825_p1 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln53_fu_1820_p2 = ap_const_lv1_1) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1)) or ((trunc_ln55_fu_1825_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln53_fu_1820_p2 = ap_const_lv1_1) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1)))) then 
                write_flag7_1_reg_399 <= write_flag7_fu_1843_p6;
            end if; 
        end if;
    end process;

    write_flag_1_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_1820_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1))) then 
                write_flag_1_reg_414 <= ap_const_lv1_0;
            elsif ((((trunc_ln55_fu_1825_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln53_fu_1820_p2 = ap_const_lv1_1) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1)) or (not((trunc_ln55_fu_1825_p1 = ap_const_lv2_1)) and not((trunc_ln55_fu_1825_p1 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln53_fu_1820_p2 = ap_const_lv1_1) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1)) or ((trunc_ln55_fu_1825_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln53_fu_1820_p2 = ap_const_lv1_1) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1)))) then 
                write_flag_1_reg_414 <= write_flag_fu_1829_p6;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln22_2_reg_2181 <= add_ln22_2_fu_1528_p2;
                add_ln26_2_reg_2191 <= add_ln26_2_fu_1736_p2;
                tmp_68_reg_2186 <= add_ln22_1_fu_1517_p2(11 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1996 <= i_fu_478_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    label_cast_reg_1986(3 downto 0) <= label_cast_fu_468_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_32_reg_2025 <= sub_ln20_fu_912_p2(57 downto 56);
                tmp_33_reg_2030 <= sub_ln20_fu_912_p2(53 downto 52);
                tmp_34_reg_2035 <= sub_ln20_fu_912_p2(49 downto 48);
                tmp_35_reg_2040 <= sub_ln20_fu_912_p2(45 downto 44);
                tmp_36_reg_2045 <= sub_ln20_fu_912_p2(41 downto 40);
                tmp_37_reg_2050 <= sub_ln20_fu_912_p2(37 downto 36);
                tmp_38_reg_2055 <= sub_ln20_fu_912_p2(33 downto 32);
                tmp_39_reg_2060 <= sub_ln20_fu_912_p2(29 downto 28);
                tmp_40_reg_2065 <= sub_ln20_fu_912_p2(25 downto 24);
                tmp_41_reg_2070 <= sub_ln20_fu_912_p2(21 downto 20);
                tmp_42_reg_2075 <= sub_ln20_fu_912_p2(17 downto 16);
                tmp_43_reg_2080 <= sub_ln20_fu_912_p2(13 downto 12);
                tmp_44_reg_2085 <= sub_ln20_fu_912_p2(9 downto 8);
                tmp_45_reg_2090 <= sub_ln20_fu_912_p2(5 downto 4);
                tmp_47_reg_2101 <= sub_ln20_fu_912_p2(59 downto 58);
                tmp_48_reg_2106 <= sub_ln20_fu_912_p2(55 downto 54);
                tmp_49_reg_2111 <= sub_ln20_fu_912_p2(51 downto 50);
                tmp_50_reg_2116 <= sub_ln20_fu_912_p2(47 downto 46);
                tmp_51_reg_2121 <= sub_ln20_fu_912_p2(43 downto 42);
                tmp_52_reg_2126 <= sub_ln20_fu_912_p2(39 downto 38);
                tmp_53_reg_2131 <= sub_ln20_fu_912_p2(35 downto 34);
                tmp_54_reg_2136 <= sub_ln20_fu_912_p2(31 downto 30);
                tmp_55_reg_2141 <= sub_ln20_fu_912_p2(27 downto 26);
                tmp_56_reg_2146 <= sub_ln20_fu_912_p2(23 downto 22);
                tmp_57_reg_2151 <= sub_ln20_fu_912_p2(19 downto 18);
                tmp_58_reg_2156 <= sub_ln20_fu_912_p2(15 downto 14);
                tmp_59_reg_2161 <= sub_ln20_fu_912_p2(11 downto 10);
                tmp_60_reg_2166 <= sub_ln20_fu_912_p2(7 downto 6);
                tmp_61_reg_2171 <= add_ln21_1_fu_1378_p2(62 downto 4);
                trunc_ln1_reg_2176 <= add_ln21_fu_1372_p2(7 downto 4);
                trunc_ln21_2_reg_2095 <= sub_ln20_fu_912_p2(3 downto 2);
                trunc_ln21_reg_2019 <= trunc_ln21_fu_918_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_472_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln33_reg_2011(8 downto 0) <= zext_ln33_fu_512_p1(8 downto 0);
            end if;
        end if;
    end process;
    label_cast_reg_1986(31 downto 4) <= "0000000000000000000000000000";
    zext_ln33_reg_2011(31 downto 9) <= "00000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln33_fu_472_p2, ap_CS_fsm_state6, icmp_ln43_fu_1777_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln33_fu_472_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln43_fu_1777_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln21_1_fu_1378_p2 <= std_logic_vector(unsigned(zext_ln21_fu_1138_p1) + unsigned(zext_ln21_1_fu_1368_p1));
    add_ln21_fu_1372_p2 <= std_logic_vector(unsigned(and_ln21_1_fu_1302_p32) + unsigned(and_ln1_fu_1072_p32));
    add_ln22_1_fu_1517_p2 <= std_logic_vector(unsigned(add_ln22_fu_1508_p2) + unsigned(zext_ln22_3_fu_1514_p1));
    add_ln22_2_fu_1528_p2 <= std_logic_vector(unsigned(add_ln22_3_fu_1523_p2) + unsigned(zext_ln22_fu_1404_p1));
    add_ln22_3_fu_1523_p2 <= std_logic_vector(unsigned(zext_ln22_1_fu_1407_p1) + unsigned(trunc_ln1_reg_2176));
    add_ln22_fu_1508_p2 <= std_logic_vector(unsigned(trunc_ln21_3_fu_1410_p31) + unsigned(trunc_ln21_4_fu_1459_p31));
    add_ln23_1_fu_1690_p2 <= std_logic_vector(unsigned(zext_ln22_2_fu_1642_p1) + unsigned(zext_ln23_fu_1680_p1));
    add_ln23_fu_1684_p2 <= std_logic_vector(unsigned(zext_ln23_1_fu_1676_p1) + unsigned(x_assign_3_fu_1608_p16));
    add_ln24_fu_1720_p2 <= std_logic_vector(unsigned(add_ln23_1_fu_1690_p2) + unsigned(zext_ln24_fu_1706_p1));
    add_ln26_1_fu_1752_p2 <= std_logic_vector(unsigned(trunc_ln2_fu_1745_p3) + unsigned(zext_ln26_fu_1742_p1));
    add_ln26_2_fu_1736_p2 <= std_logic_vector(unsigned(trunc_ln26_1_fu_1710_p4) + unsigned(trunc_ln26_2_fu_1726_p4));
    add_ln26_fu_1758_p2 <= std_logic_vector(unsigned(add_ln26_2_reg_2191) + unsigned(add_ln26_1_fu_1752_p2));
    add_ln35_1_fu_502_p2 <= std_logic_vector(unsigned(train_inst_offset) + unsigned(zext_ln35_fu_484_p1));
    add_ln35_fu_492_p2 <= std_logic_vector(unsigned(test_inst_offset) + unsigned(zext_ln35_1_fu_488_p1));
    and_ln1_fu_1072_p32 <= ((((((((((((((((((((((((((((((tmp_s_fu_922_p4 & ap_const_lv2_0) & tmp_32_fu_932_p4) & ap_const_lv2_0) & tmp_33_fu_942_p4) & ap_const_lv2_0) & tmp_34_fu_952_p4) & ap_const_lv2_0) & tmp_35_fu_962_p4) & ap_const_lv2_0) & tmp_36_fu_972_p4) & ap_const_lv2_0) & tmp_37_fu_982_p4) & ap_const_lv2_0) & tmp_38_fu_992_p4) & ap_const_lv2_0) & tmp_39_fu_1002_p4) & ap_const_lv2_0) & tmp_40_fu_1012_p4) & ap_const_lv2_0) & tmp_41_fu_1022_p4) & ap_const_lv2_0) & tmp_42_fu_1032_p4) & ap_const_lv2_0) & tmp_43_fu_1042_p4) & ap_const_lv2_0) & tmp_44_fu_1052_p4) & ap_const_lv2_0) & tmp_45_fu_1062_p4) & ap_const_lv2_0) & trunc_ln21_fu_918_p1);
    and_ln21_1_fu_1302_p32 <= ((((((((((((((((((((((((((((((tmp_46_fu_1152_p4 & ap_const_lv2_0) & tmp_47_fu_1162_p4) & ap_const_lv2_0) & tmp_48_fu_1172_p4) & ap_const_lv2_0) & tmp_49_fu_1182_p4) & ap_const_lv2_0) & tmp_50_fu_1192_p4) & ap_const_lv2_0) & tmp_51_fu_1202_p4) & ap_const_lv2_0) & tmp_52_fu_1212_p4) & ap_const_lv2_0) & tmp_53_fu_1222_p4) & ap_const_lv2_0) & tmp_54_fu_1232_p4) & ap_const_lv2_0) & tmp_55_fu_1242_p4) & ap_const_lv2_0) & tmp_56_fu_1252_p4) & ap_const_lv2_0) & tmp_57_fu_1262_p4) & ap_const_lv2_0) & tmp_58_fu_1272_p4) & ap_const_lv2_0) & tmp_59_fu_1282_p4) & ap_const_lv2_0) & tmp_60_fu_1292_p4) & ap_const_lv2_0) & trunc_ln21_2_fu_1142_p4);
    and_ln_fu_778_p64 <= ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((tmp_fu_522_p3 & ap_const_lv1_0) & tmp_1_fu_530_p3) & ap_const_lv1_0) & tmp_2_fu_538_p3) & ap_const_lv1_0) & tmp_3_fu_546_p3) & ap_const_lv1_0) & tmp_4_fu_554_p3) & ap_const_lv1_0) & tmp_5_fu_562_p3) & ap_const_lv1_0) & tmp_6_fu_570_p3) & ap_const_lv1_0) & tmp_7_fu_578_p3) & ap_const_lv1_0) & tmp_8_fu_586_p3) & ap_const_lv1_0) & tmp_9_fu_594_p3) & ap_const_lv1_0) & tmp_10_fu_602_p3) & ap_const_lv1_0) & tmp_11_fu_610_p3) & ap_const_lv1_0) & tmp_12_fu_618_p3) & ap_const_lv1_0) & tmp_13_fu_626_p3) & ap_const_lv1_0) & tmp_14_fu_634_p3) & ap_const_lv1_0) & tmp_15_fu_642_p3) & ap_const_lv1_0) & tmp_16_fu_650_p3) & ap_const_lv1_0) & tmp_17_fu_658_p3) & ap_const_lv1_0) & tmp_18_fu_666_p3) & ap_const_lv1_0) & tmp_19_fu_674_p3) & ap_const_lv1_0) & tmp_20_fu_682_p3) & ap_const_lv1_0) & tmp_21_fu_690_p3) & ap_const_lv1_0) & tmp_22_fu_698_p3) & ap_const_lv1_0) & tmp_23_fu_706_p3) & ap_const_lv1_0) & tmp_24_fu_714_p3) & ap_const_lv1_0) & tmp_25_fu_722_p3) & ap_const_lv1_0) & tmp_26_fu_730_p3) & ap_const_lv1_0) & tmp_27_fu_738_p3) & ap_const_lv1_0) & tmp_28_fu_746_p3) & ap_const_lv1_0) & tmp_29_fu_754_p3) & ap_const_lv1_0) & tmp_30_fu_762_p3) & ap_const_lv1_0) & tmp_31_fu_770_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(phi_ln59_2_reg_455, ap_CS_fsm_state7, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_0 <= phi_ln59_2_reg_455;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(phi_ln59_1_reg_442, ap_CS_fsm_state7, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_1 <= phi_ln59_1_reg_442;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(phi_ln59_reg_429, ap_CS_fsm_state7, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_2 <= phi_ln59_reg_429;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state7, select_ln59_fu_1871_p3, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_3 <= select_ln59_fu_1871_p3;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_CS_fsm_state7, select_ln59_1_fu_1877_p3, ap_return_4_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_4 <= select_ln59_1_fu_1877_p3;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(ap_CS_fsm_state7, select_ln59_2_fu_1883_p3, ap_return_5_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_5 <= select_ln59_2_fu_1883_p3;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;

    diff_fu_516_p2 <= (train_inst_q0 xor test_inst_q0);
    dist_fu_1767_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_1763_p1) + unsigned(dists_0_0_reg_328));
    i_fu_478_p2 <= std_logic_vector(unsigned(i_0_reg_340) + unsigned(ap_const_lv3_1));
    icmp_ln33_fu_472_p2 <= "1" when (i_0_reg_340 = ap_const_lv3_4) else "0";
    icmp_ln43_fu_1777_p2 <= "1" when (max_dist_id_reg_373 = ap_const_lv2_3) else "0";
    icmp_ln45_fu_1798_p2 <= "1" when (signed(max_dist_fu_1789_p5) > signed(max_dist_0_reg_351)) else "0";
    icmp_ln53_fu_1820_p2 <= "1" when (signed(zext_ln33_reg_2011) < signed(max_dist_0_reg_351)) else "0";
    k_fu_1783_p2 <= std_logic_vector(unsigned(max_dist_id_reg_373) + unsigned(ap_const_lv2_1));
    label_cast_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(label_r),32));
    lshr_ln1_fu_1696_p4 <= add_ln23_1_fu_1690_p2(60 downto 16);
    lshr_ln_fu_1646_p14 <= ((((((((((((tmp_62_fu_1534_p4 & ap_const_lv4_0) & tmp_63_fu_1544_p4) & ap_const_lv4_0) & tmp_64_fu_1554_p4) & ap_const_lv4_0) & tmp_65_fu_1564_p4) & ap_const_lv4_0) & tmp_66_fu_1574_p4) & ap_const_lv4_0) & tmp_67_fu_1584_p4) & ap_const_lv4_0) & tmp_68_fu_1594_p4);
    select_ln45_1_fu_1812_p3 <= 
        zext_ln48_fu_1773_p1 when (icmp_ln45_fu_1798_p2(0) = '1') else 
        max_dist_id_0_reg_362;
    select_ln45_fu_1804_p3 <= 
        max_dist_fu_1789_p5 when (icmp_ln45_fu_1798_p2(0) = '1') else 
        max_dist_0_reg_351;
    select_ln59_1_fu_1877_p3 <= 
        zext_ln33_reg_2011 when (write_flag4_1_reg_384(0) = '1') else 
        dists_1_read_5;
    select_ln59_2_fu_1883_p3 <= 
        zext_ln33_reg_2011 when (write_flag7_1_reg_399(0) = '1') else 
        dists_2_read_5;
    select_ln59_fu_1871_p3 <= 
        zext_ln33_reg_2011 when (write_flag_1_reg_414(0) = '1') else 
        dists_0_read_5;
    sub_ln20_fu_912_p2 <= std_logic_vector(unsigned(diff_fu_516_p2) - unsigned(zext_ln20_fu_908_p1));
    test_inst_address0 <= zext_ln35_2_fu_497_p1(13 - 1 downto 0);

    test_inst_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            test_inst_ce0 <= ap_const_logic_1;
        else 
            test_inst_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_602_p3 <= diff_fu_516_p2(43 downto 43);
    tmp_11_fu_610_p3 <= diff_fu_516_p2(41 downto 41);
    tmp_12_fu_618_p3 <= diff_fu_516_p2(39 downto 39);
    tmp_13_fu_626_p3 <= diff_fu_516_p2(37 downto 37);
    tmp_14_fu_634_p3 <= diff_fu_516_p2(35 downto 35);
    tmp_15_fu_642_p3 <= diff_fu_516_p2(33 downto 33);
    tmp_16_fu_650_p3 <= diff_fu_516_p2(31 downto 31);
    tmp_17_fu_658_p3 <= diff_fu_516_p2(29 downto 29);
    tmp_18_fu_666_p3 <= diff_fu_516_p2(27 downto 27);
    tmp_19_fu_674_p3 <= diff_fu_516_p2(25 downto 25);
    tmp_1_fu_530_p3 <= diff_fu_516_p2(61 downto 61);
    tmp_20_fu_682_p3 <= diff_fu_516_p2(23 downto 23);
    tmp_21_fu_690_p3 <= diff_fu_516_p2(21 downto 21);
    tmp_22_fu_698_p3 <= diff_fu_516_p2(19 downto 19);
    tmp_23_fu_706_p3 <= diff_fu_516_p2(17 downto 17);
    tmp_24_fu_714_p3 <= diff_fu_516_p2(15 downto 15);
    tmp_25_fu_722_p3 <= diff_fu_516_p2(13 downto 13);
    tmp_26_fu_730_p3 <= diff_fu_516_p2(11 downto 11);
    tmp_27_fu_738_p3 <= diff_fu_516_p2(9 downto 9);
    tmp_28_fu_746_p3 <= diff_fu_516_p2(7 downto 7);
    tmp_29_fu_754_p3 <= diff_fu_516_p2(5 downto 5);
    tmp_2_fu_538_p3 <= diff_fu_516_p2(59 downto 59);
    tmp_30_fu_762_p3 <= diff_fu_516_p2(3 downto 3);
    tmp_31_fu_770_p3 <= diff_fu_516_p2(1 downto 1);
    tmp_32_fu_932_p4 <= sub_ln20_fu_912_p2(57 downto 56);
    tmp_33_fu_942_p4 <= sub_ln20_fu_912_p2(53 downto 52);
    tmp_34_fu_952_p4 <= sub_ln20_fu_912_p2(49 downto 48);
    tmp_35_fu_962_p4 <= sub_ln20_fu_912_p2(45 downto 44);
    tmp_36_fu_972_p4 <= sub_ln20_fu_912_p2(41 downto 40);
    tmp_37_fu_982_p4 <= sub_ln20_fu_912_p2(37 downto 36);
    tmp_38_fu_992_p4 <= sub_ln20_fu_912_p2(33 downto 32);
    tmp_39_fu_1002_p4 <= sub_ln20_fu_912_p2(29 downto 28);
    tmp_3_fu_546_p3 <= diff_fu_516_p2(57 downto 57);
    tmp_40_fu_1012_p4 <= sub_ln20_fu_912_p2(25 downto 24);
    tmp_41_fu_1022_p4 <= sub_ln20_fu_912_p2(21 downto 20);
    tmp_42_fu_1032_p4 <= sub_ln20_fu_912_p2(17 downto 16);
    tmp_43_fu_1042_p4 <= sub_ln20_fu_912_p2(13 downto 12);
    tmp_44_fu_1052_p4 <= sub_ln20_fu_912_p2(9 downto 8);
    tmp_45_fu_1062_p4 <= sub_ln20_fu_912_p2(5 downto 4);
    tmp_46_fu_1152_p4 <= sub_ln20_fu_912_p2(63 downto 62);
    tmp_47_fu_1162_p4 <= sub_ln20_fu_912_p2(59 downto 58);
    tmp_48_fu_1172_p4 <= sub_ln20_fu_912_p2(55 downto 54);
    tmp_49_fu_1182_p4 <= sub_ln20_fu_912_p2(51 downto 50);
    tmp_4_fu_554_p3 <= diff_fu_516_p2(55 downto 55);
    tmp_50_fu_1192_p4 <= sub_ln20_fu_912_p2(47 downto 46);
    tmp_51_fu_1202_p4 <= sub_ln20_fu_912_p2(43 downto 42);
    tmp_52_fu_1212_p4 <= sub_ln20_fu_912_p2(39 downto 38);
    tmp_53_fu_1222_p4 <= sub_ln20_fu_912_p2(35 downto 34);
    tmp_54_fu_1232_p4 <= sub_ln20_fu_912_p2(31 downto 30);
    tmp_55_fu_1242_p4 <= sub_ln20_fu_912_p2(27 downto 26);
    tmp_56_fu_1252_p4 <= sub_ln20_fu_912_p2(23 downto 22);
    tmp_57_fu_1262_p4 <= sub_ln20_fu_912_p2(19 downto 18);
    tmp_58_fu_1272_p4 <= sub_ln20_fu_912_p2(15 downto 14);
    tmp_59_fu_1282_p4 <= sub_ln20_fu_912_p2(11 downto 10);
    tmp_5_fu_562_p3 <= diff_fu_516_p2(53 downto 53);
    tmp_60_fu_1292_p4 <= sub_ln20_fu_912_p2(7 downto 6);
    tmp_62_fu_1534_p4 <= add_ln22_1_fu_1517_p2(59 downto 56);
    tmp_63_fu_1544_p4 <= add_ln22_1_fu_1517_p2(51 downto 48);
    tmp_64_fu_1554_p4 <= add_ln22_1_fu_1517_p2(43 downto 40);
    tmp_65_fu_1564_p4 <= add_ln22_1_fu_1517_p2(35 downto 32);
    tmp_66_fu_1574_p4 <= add_ln22_1_fu_1517_p2(27 downto 24);
    tmp_67_fu_1584_p4 <= add_ln22_1_fu_1517_p2(19 downto 16);
    tmp_68_fu_1594_p4 <= add_ln22_1_fu_1517_p2(11 downto 8);
    tmp_6_fu_570_p3 <= diff_fu_516_p2(51 downto 51);
    tmp_7_fu_578_p3 <= diff_fu_516_p2(49 downto 49);
    tmp_8_fu_586_p3 <= diff_fu_516_p2(47 downto 47);
    tmp_9_fu_594_p3 <= diff_fu_516_p2(45 downto 45);
    tmp_fu_522_p3 <= diff_fu_516_p2(63 downto 63);
    tmp_s_fu_922_p4 <= sub_ln20_fu_912_p2(61 downto 60);
    train_inst_address0 <= zext_ln35_3_fu_507_p1(17 - 1 downto 0);

    train_inst_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            train_inst_ce0 <= ap_const_logic_1;
        else 
            train_inst_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln21_2_fu_1142_p4 <= sub_ln20_fu_912_p2(3 downto 2);
    trunc_ln21_3_fu_1410_p31 <= (((((((((((((((((((((((((((((ap_const_lv2_0 & tmp_47_reg_2101) & ap_const_lv2_0) & tmp_48_reg_2106) & ap_const_lv2_0) & tmp_49_reg_2111) & ap_const_lv2_0) & tmp_50_reg_2116) & ap_const_lv2_0) & tmp_51_reg_2121) & ap_const_lv2_0) & tmp_52_reg_2126) & ap_const_lv2_0) & tmp_53_reg_2131) & ap_const_lv2_0) & tmp_54_reg_2136) & ap_const_lv2_0) & tmp_55_reg_2141) & ap_const_lv2_0) & tmp_56_reg_2146) & ap_const_lv2_0) & tmp_57_reg_2151) & ap_const_lv2_0) & tmp_58_reg_2156) & ap_const_lv2_0) & tmp_59_reg_2161) & ap_const_lv2_0) & tmp_60_reg_2166) & ap_const_lv2_0) & trunc_ln21_2_reg_2095);
    trunc_ln21_4_fu_1459_p31 <= (((((((((((((((((((((((((((((ap_const_lv2_0 & tmp_32_reg_2025) & ap_const_lv2_0) & tmp_33_reg_2030) & ap_const_lv2_0) & tmp_34_reg_2035) & ap_const_lv2_0) & tmp_35_reg_2040) & ap_const_lv2_0) & tmp_36_reg_2045) & ap_const_lv2_0) & tmp_37_reg_2050) & ap_const_lv2_0) & tmp_38_reg_2055) & ap_const_lv2_0) & tmp_39_reg_2060) & ap_const_lv2_0) & tmp_40_reg_2065) & ap_const_lv2_0) & tmp_41_reg_2070) & ap_const_lv2_0) & tmp_42_reg_2075) & ap_const_lv2_0) & tmp_43_reg_2080) & ap_const_lv2_0) & tmp_44_reg_2085) & ap_const_lv2_0) & tmp_45_reg_2090) & ap_const_lv2_0) & trunc_ln21_reg_2019);
    trunc_ln21_fu_918_p1 <= sub_ln20_fu_912_p2(2 - 1 downto 0);
    trunc_ln22_fu_1604_p1 <= add_ln22_1_fu_1517_p2(4 - 1 downto 0);
    trunc_ln26_1_fu_1710_p4 <= add_ln23_fu_1684_p2(22 downto 16);
    trunc_ln26_2_fu_1726_p4 <= add_ln24_fu_1720_p2(38 downto 32);
    trunc_ln2_fu_1745_p3 <= (ap_const_lv3_0 & tmp_68_reg_2186);
    trunc_ln55_fu_1825_p1 <= max_dist_id_0_reg_362(2 - 1 downto 0);
    x_assign_3_fu_1608_p16 <= ((((((((((((((tmp_62_fu_1534_p4 & ap_const_lv4_0) & tmp_63_fu_1544_p4) & ap_const_lv4_0) & tmp_64_fu_1554_p4) & ap_const_lv4_0) & tmp_65_fu_1564_p4) & ap_const_lv4_0) & tmp_66_fu_1574_p4) & ap_const_lv4_0) & tmp_67_fu_1584_p4) & ap_const_lv4_0) & tmp_68_fu_1594_p4) & ap_const_lv4_0) & trunc_ln22_fu_1604_p1);
    zext_ln20_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_778_p64),64));
    zext_ln21_1_fu_1368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln21_1_fu_1302_p32),63));
    zext_ln21_fu_1138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln1_fu_1072_p32),63));
    zext_ln22_1_fu_1407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln21_reg_2019),4));
    zext_ln22_2_fu_1642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_assign_3_fu_1608_p16),61));
    zext_ln22_3_fu_1514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_61_reg_2171),60));
    zext_ln22_fu_1404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln21_2_reg_2095),4));
    zext_ln23_1_fu_1676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_1646_p14),60));
    zext_ln23_fu_1680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_1646_p14),61));
    zext_ln24_fu_1706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_1696_p4),61));
    zext_ln26_1_fu_1763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_fu_1758_p2),9));
    zext_ln26_fu_1742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln22_2_reg_2181),7));
    zext_ln33_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dists_0_0_reg_328),32));
    zext_ln35_1_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_340),13));
    zext_ln35_2_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_fu_492_p2),64));
    zext_ln35_3_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_502_p2),64));
    zext_ln35_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_340),17));
    zext_ln48_fu_1773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_dist_id_reg_373),32));
end behav;
