-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DigitRec_sw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    training_set_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    training_set_ce0 : OUT STD_LOGIC;
    training_set_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    test_set_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    test_set_ce0 : OUT STD_LOGIC;
    test_set_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    results_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    results_ce0 : OUT STD_LOGIC;
    results_we0 : OUT STD_LOGIC;
    results_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of DigitRec_sw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "DigitRec_sw,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.448786,HLS_SYN_LAT=864088001,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1385,HLS_SYN_LUT=1760,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_7D0 : STD_LOGIC_VECTOR (10 downto 0) := "11111010000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv15_4650 : STD_LOGIC_VECTOR (14 downto 0) := "100011001010000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv30_91A3 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000001001000110100011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal t_fu_489_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal t_reg_765 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_501_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal dists_0_2_fu_507_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln99_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dists_1_2_fu_521_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal dists_2_2_fu_535_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal labels_0_2_fu_549_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal labels_1_2_fu_563_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal labels_2_2_fu_577_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_591_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln_reg_808 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_fu_605_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_1_reg_816 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal shl_ln108_1_fu_611_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln108_1_reg_821 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln107_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln108_fu_620_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln108_reg_826 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln_reg_831 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_update_knn_fu_454_ap_ready : STD_LOGIC;
    signal grp_update_knn_fu_454_ap_done : STD_LOGIC;
    signal add_ln67_fu_661_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_2_fu_684_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_877 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal votes_addr_1_reg_882 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln69_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_720_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_890 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln72_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln74_fu_746_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal select_ln74_1_fu_754_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal votes_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal votes_ce0 : STD_LOGIC;
    signal votes_we0 : STD_LOGIC;
    signal votes_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal votes_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_knn_fu_454_ap_start : STD_LOGIC;
    signal grp_update_knn_fu_454_ap_idle : STD_LOGIC;
    signal grp_update_knn_fu_454_train_inst_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_update_knn_fu_454_train_inst_ce0 : STD_LOGIC;
    signal grp_update_knn_fu_454_test_inst_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_update_knn_fu_454_test_inst_ce0 : STD_LOGIC;
    signal grp_update_knn_fu_454_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_knn_fu_454_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_knn_fu_454_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_knn_fu_454_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_knn_fu_454_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_knn_fu_454_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal labels_2_read_assig_reg_301 : STD_LOGIC_VECTOR (31 downto 0);
    signal labels_2_0_reg_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal labels_1_read_assig_reg_313 : STD_LOGIC_VECTOR (31 downto 0);
    signal labels_1_0_reg_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal labels_0_read_assig_reg_325 : STD_LOGIC_VECTOR (31 downto 0);
    signal labels_0_0_reg_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal dists_2_3_reg_337 : STD_LOGIC_VECTOR (31 downto 0);
    signal dists_2_0_reg_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal dists_1_3_reg_349 : STD_LOGIC_VECTOR (31 downto 0);
    signal dists_1_0_reg_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal dists_0_3_reg_361 : STD_LOGIC_VECTOR (31 downto 0);
    signal dists_0_0_reg_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_0_reg_212 : STD_LOGIC_VECTOR (10 downto 0);
    signal labels_2_112_reg_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln96_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal labels_1_111_reg_235 : STD_LOGIC_VECTOR (31 downto 0);
    signal labels_0_110_reg_246 : STD_LOGIC_VECTOR (31 downto 0);
    signal dists_2_1_reg_257 : STD_LOGIC_VECTOR (31 downto 0);
    signal dists_1_1_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal dists_0_1_reg_279 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_290 : STD_LOGIC_VECTOR (1 downto 0);
    signal i1_0_reg_373 : STD_LOGIC_VECTOR (14 downto 0);
    signal phi_mul_reg_384 : STD_LOGIC_VECTOR (29 downto 0);
    signal phi_ln67_i_reg_395 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln67_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i_reg_406 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal max_vote_reg_417 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_vote_0_i_reg_430 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_0_i_reg_442 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_update_knn_fu_454_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln67_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln70_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln74_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_fu_731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln70_fu_707_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_690_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln74_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_label_fu_742_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component update_knn IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        train_inst_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        train_inst_ce0 : OUT STD_LOGIC;
        train_inst_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        train_inst_offset : IN STD_LOGIC_VECTOR (16 downto 0);
        test_inst_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        test_inst_ce0 : OUT STD_LOGIC;
        test_inst_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        test_inst_offset : IN STD_LOGIC_VECTOR (12 downto 0);
        dists_0_read_5 : IN STD_LOGIC_VECTOR (31 downto 0);
        dists_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        dists_1_read_5 : IN STD_LOGIC_VECTOR (31 downto 0);
        dists_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        dists_2_read_5 : IN STD_LOGIC_VECTOR (31 downto 0);
        dists_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        labels_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        labels_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        labels_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        label_r : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DigitRec_sw_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DigitRec_sw_mux_32_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DigitRec_sw_votes IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    votes_U : component DigitRec_sw_votes
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => votes_address0,
        ce0 => votes_ce0,
        we0 => votes_we0,
        d0 => votes_d0,
        q0 => votes_q0);

    grp_update_knn_fu_454 : component update_knn
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_update_knn_fu_454_ap_start,
        ap_done => grp_update_knn_fu_454_ap_done,
        ap_idle => grp_update_knn_fu_454_ap_idle,
        ap_ready => grp_update_knn_fu_454_ap_ready,
        train_inst_address0 => grp_update_knn_fu_454_train_inst_address0,
        train_inst_ce0 => grp_update_knn_fu_454_train_inst_ce0,
        train_inst_q0 => training_set_q0,
        train_inst_offset => shl_ln108_1_reg_821,
        test_inst_address0 => grp_update_knn_fu_454_test_inst_address0,
        test_inst_ce0 => grp_update_knn_fu_454_test_inst_ce0,
        test_inst_q0 => test_set_q0,
        test_inst_offset => shl_ln_reg_808,
        dists_0_read_5 => dists_0_3_reg_361,
        dists_0_read => dists_0_3_reg_361,
        dists_1_read_5 => dists_1_3_reg_349,
        dists_1_read => dists_1_3_reg_349,
        dists_2_read_5 => dists_2_3_reg_337,
        dists_2_read => dists_2_3_reg_337,
        labels_0_read => labels_0_read_assig_reg_325,
        labels_1_read => labels_1_read_assig_reg_313,
        labels_2_read => labels_2_read_assig_reg_301,
        label_r => trunc_ln_reg_831,
        ap_return_0 => grp_update_knn_fu_454_ap_return_0,
        ap_return_1 => grp_update_knn_fu_454_ap_return_1,
        ap_return_2 => grp_update_knn_fu_454_ap_return_2,
        ap_return_3 => grp_update_knn_fu_454_ap_return_3,
        ap_return_4 => grp_update_knn_fu_454_ap_return_4,
        ap_return_5 => grp_update_knn_fu_454_ap_return_5);

    DigitRec_sw_mux_42_32_1_1_U23 : component DigitRec_sw_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_100,
        din1 => dists_0_1_reg_279,
        din2 => dists_0_1_reg_279,
        din3 => dists_0_1_reg_279,
        din4 => i_0_reg_290,
        dout => dists_0_2_fu_507_p6);

    DigitRec_sw_mux_42_32_1_1_U24 : component DigitRec_sw_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => dists_1_1_reg_268,
        din1 => ap_const_lv32_100,
        din2 => dists_1_1_reg_268,
        din3 => dists_1_1_reg_268,
        din4 => i_0_reg_290,
        dout => dists_1_2_fu_521_p6);

    DigitRec_sw_mux_42_32_1_1_U25 : component DigitRec_sw_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => dists_2_1_reg_257,
        din1 => dists_2_1_reg_257,
        din2 => ap_const_lv32_100,
        din3 => ap_const_lv32_100,
        din4 => i_0_reg_290,
        dout => dists_2_2_fu_535_p6);

    DigitRec_sw_mux_42_32_1_1_U26 : component DigitRec_sw_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => labels_0_110_reg_246,
        din2 => labels_0_110_reg_246,
        din3 => labels_0_110_reg_246,
        din4 => i_0_reg_290,
        dout => labels_0_2_fu_549_p6);

    DigitRec_sw_mux_42_32_1_1_U27 : component DigitRec_sw_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => labels_1_111_reg_235,
        din1 => ap_const_lv32_0,
        din2 => labels_1_111_reg_235,
        din3 => labels_1_111_reg_235,
        din4 => i_0_reg_290,
        dout => labels_1_2_fu_563_p6);

    DigitRec_sw_mux_42_32_1_1_U28 : component DigitRec_sw_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => labels_2_112_reg_224,
        din1 => labels_2_112_reg_224,
        din2 => ap_const_lv32_0,
        din3 => ap_const_lv32_0,
        din4 => i_0_reg_290,
        dout => labels_2_2_fu_577_p6);

    DigitRec_sw_mux_32_32_1_1_U29 : component DigitRec_sw_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => labels_0_read_assig_reg_325,
        din1 => labels_1_read_assig_reg_313,
        din2 => labels_2_read_assig_reg_301,
        din3 => i_0_i_reg_406,
        dout => tmp_1_fu_690_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_update_knn_fu_454_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_update_knn_fu_454_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln107_fu_599_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_update_knn_fu_454_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_update_knn_fu_454_ap_ready = ap_const_logic_1)) then 
                    grp_update_knn_fu_454_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dists_0_1_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_495_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                dists_0_1_reg_279 <= dists_0_2_fu_507_p6;
            elsif (((icmp_ln96_fu_483_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                dists_0_1_reg_279 <= dists_0_0_reg_200;
            end if; 
        end if;
    end process;

    dists_0_3_reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_update_knn_fu_454_ap_done = ap_const_logic_1))) then 
                dists_0_3_reg_361 <= grp_update_knn_fu_454_ap_return_3;
            elsif (((icmp_ln99_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                dists_0_3_reg_361 <= dists_0_1_reg_279;
            end if; 
        end if;
    end process;

    dists_1_1_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_495_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                dists_1_1_reg_268 <= dists_1_2_fu_521_p6;
            elsif (((icmp_ln96_fu_483_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                dists_1_1_reg_268 <= dists_1_0_reg_188;
            end if; 
        end if;
    end process;

    dists_1_3_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_update_knn_fu_454_ap_done = ap_const_logic_1))) then 
                dists_1_3_reg_349 <= grp_update_knn_fu_454_ap_return_4;
            elsif (((icmp_ln99_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                dists_1_3_reg_349 <= dists_1_1_reg_268;
            end if; 
        end if;
    end process;

    dists_2_1_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_495_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                dists_2_1_reg_257 <= dists_2_2_fu_535_p6;
            elsif (((icmp_ln96_fu_483_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                dists_2_1_reg_257 <= dists_2_0_reg_176;
            end if; 
        end if;
    end process;

    dists_2_3_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_update_knn_fu_454_ap_done = ap_const_logic_1))) then 
                dists_2_3_reg_337 <= grp_update_knn_fu_454_ap_return_5;
            elsif (((icmp_ln99_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                dists_2_3_reg_337 <= dists_2_1_reg_257;
            end if; 
        end if;
    end process;

    i1_0_i_reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_678_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i1_0_i_reg_442 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i1_0_i_reg_442 <= i_3_reg_890;
            end if; 
        end if;
    end process;

    i1_0_reg_373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_update_knn_fu_454_ap_done = ap_const_logic_1))) then 
                i1_0_reg_373 <= i_1_reg_816;
            elsif (((icmp_ln99_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i1_0_reg_373 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_406_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_fu_672_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_0_i_reg_406 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_0_i_reg_406 <= i_2_reg_877;
            end if; 
        end if;
    end process;

    i_0_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_495_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_290 <= i_fu_501_p2;
            elsif (((icmp_ln96_fu_483_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_290 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    labels_0_110_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_495_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                labels_0_110_reg_246 <= labels_0_2_fu_549_p6;
            elsif (((icmp_ln96_fu_483_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                labels_0_110_reg_246 <= labels_0_0_reg_164;
            end if; 
        end if;
    end process;

    labels_0_read_assig_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_update_knn_fu_454_ap_done = ap_const_logic_1))) then 
                labels_0_read_assig_reg_325 <= grp_update_knn_fu_454_ap_return_0;
            elsif (((icmp_ln99_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                labels_0_read_assig_reg_325 <= labels_0_110_reg_246;
            end if; 
        end if;
    end process;

    labels_1_111_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_495_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                labels_1_111_reg_235 <= labels_1_2_fu_563_p6;
            elsif (((icmp_ln96_fu_483_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                labels_1_111_reg_235 <= labels_1_0_reg_152;
            end if; 
        end if;
    end process;

    labels_1_read_assig_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_update_knn_fu_454_ap_done = ap_const_logic_1))) then 
                labels_1_read_assig_reg_313 <= grp_update_knn_fu_454_ap_return_1;
            elsif (((icmp_ln99_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                labels_1_read_assig_reg_313 <= labels_1_111_reg_235;
            end if; 
        end if;
    end process;

    labels_2_112_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_495_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                labels_2_112_reg_224 <= labels_2_2_fu_577_p6;
            elsif (((icmp_ln96_fu_483_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                labels_2_112_reg_224 <= labels_2_0_reg_140;
            end if; 
        end if;
    end process;

    labels_2_read_assig_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_update_knn_fu_454_ap_done = ap_const_logic_1))) then 
                labels_2_read_assig_reg_301 <= grp_update_knn_fu_454_ap_return_2;
            elsif (((icmp_ln99_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                labels_2_read_assig_reg_301 <= labels_2_112_reg_224;
            end if; 
        end if;
    end process;

    max_vote_0_i_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_678_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                max_vote_0_i_reg_430 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                max_vote_0_i_reg_430 <= select_ln74_1_fu_754_p3;
            end if; 
        end if;
    end process;

    max_vote_reg_417_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_678_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                max_vote_reg_417 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                max_vote_reg_417 <= select_ln74_fu_746_p3;
            end if; 
        end if;
    end process;

    phi_ln67_i_reg_395_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln107_fu_599_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_ln67_i_reg_395 <= ap_const_lv4_0;
            elsif (((icmp_ln67_fu_672_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_ln67_i_reg_395 <= add_ln67_fu_661_p2;
            end if; 
        end if;
    end process;

    phi_mul_reg_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_update_knn_fu_454_ap_done = ap_const_logic_1))) then 
                phi_mul_reg_384 <= add_ln108_reg_826;
            elsif (((icmp_ln99_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_384 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    t_0_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln72_fu_714_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                t_0_reg_212 <= t_reg_765;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_0_reg_212 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln107_fu_599_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln108_reg_826 <= add_ln108_fu_620_p2;
                    shl_ln108_1_reg_821(16 downto 2) <= shl_ln108_1_fu_611_p3(16 downto 2);
                trunc_ln_reg_831 <= phi_mul_reg_384(29 downto 26);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln72_fu_714_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                dists_0_0_reg_200 <= dists_0_3_reg_361;
                dists_1_0_reg_188 <= dists_1_3_reg_349;
                dists_2_0_reg_176 <= dists_2_3_reg_337;
                labels_0_0_reg_164 <= labels_0_read_assig_reg_325;
                labels_1_0_reg_152 <= labels_1_read_assig_reg_313;
                labels_2_0_reg_140 <= labels_2_read_assig_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_1_reg_816 <= i_1_fu_605_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_2_reg_877 <= i_2_fu_684_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_3_reg_890 <= i_3_fu_720_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    shl_ln_reg_808(12 downto 2) <= shl_ln_fu_591_p3(12 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                t_reg_765 <= t_fu_489_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_678_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                votes_addr_1_reg_882 <= sext_ln70_fu_702_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    shl_ln_reg_808(1 downto 0) <= "00";
    shl_ln108_1_reg_821(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln99_fu_495_p2, ap_CS_fsm_state4, icmp_ln107_fu_599_p2, ap_CS_fsm_state5, grp_update_knn_fu_454_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state7, icmp_ln69_fu_678_p2, ap_CS_fsm_state9, icmp_ln72_fu_714_p2, icmp_ln96_fu_483_p2, icmp_ln67_fu_672_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln96_fu_483_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln99_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln107_fu_599_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_update_knn_fu_454_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln67_fu_672_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln69_fu_678_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln72_fu_714_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln108_fu_620_p2 <= std_logic_vector(unsigned(phi_mul_reg_384) + unsigned(ap_const_lv30_91A3));
    add_ln67_fu_661_p2 <= std_logic_vector(unsigned(phi_ln67_i_reg_395) + unsigned(ap_const_lv4_1));
    add_ln70_fu_707_p2 <= std_logic_vector(unsigned(votes_q0) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln96_fu_483_p2)
    begin
        if (((icmp_ln96_fu_483_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln96_fu_483_p2)
    begin
        if (((icmp_ln96_fu_483_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_update_knn_fu_454_ap_start <= grp_update_knn_fu_454_ap_start_reg;
    i_1_fu_605_p2 <= std_logic_vector(unsigned(i1_0_reg_373) + unsigned(ap_const_lv15_1));
    i_2_fu_684_p2 <= std_logic_vector(unsigned(i_0_i_reg_406) + unsigned(ap_const_lv2_1));
    i_3_fu_720_p2 <= std_logic_vector(unsigned(i1_0_i_reg_442) + unsigned(ap_const_lv4_1));
    i_fu_501_p2 <= std_logic_vector(unsigned(i_0_reg_290) + unsigned(ap_const_lv2_1));
    icmp_ln107_fu_599_p2 <= "1" when (i1_0_reg_373 = ap_const_lv15_4650) else "0";
    icmp_ln67_fu_672_p2 <= "1" when (phi_ln67_i_reg_395 = ap_const_lv4_9) else "0";
    icmp_ln69_fu_678_p2 <= "1" when (i_0_i_reg_406 = ap_const_lv2_3) else "0";
    icmp_ln72_fu_714_p2 <= "1" when (i1_0_i_reg_442 = ap_const_lv4_A) else "0";
    icmp_ln74_fu_736_p2 <= "1" when (signed(votes_q0) > signed(max_vote_0_i_reg_430)) else "0";
    icmp_ln96_fu_483_p2 <= "1" when (t_0_reg_212 = ap_const_lv11_7D0) else "0";
    icmp_ln99_fu_495_p2 <= "1" when (i_0_reg_290 = ap_const_lv2_3) else "0";
    max_label_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_i_reg_442),8));
    results_address0 <= zext_ln112_fu_731_p1(11 - 1 downto 0);

    results_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            results_ce0 <= ap_const_logic_1;
        else 
            results_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    results_d0 <= max_vote_reg_417;

    results_we0_assign_proc : process(ap_CS_fsm_state9, icmp_ln72_fu_714_p2)
    begin
        if (((icmp_ln72_fu_714_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            results_we0 <= ap_const_logic_1;
        else 
            results_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln74_1_fu_754_p3 <= 
        votes_q0 when (icmp_ln74_fu_736_p2(0) = '1') else 
        max_vote_0_i_reg_430;
    select_ln74_fu_746_p3 <= 
        max_label_fu_742_p1 when (icmp_ln74_fu_736_p2(0) = '1') else 
        max_vote_reg_417;
        sext_ln70_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_690_p5),64));

    shl_ln108_1_fu_611_p3 <= (i1_0_reg_373 & ap_const_lv2_0);
    shl_ln_fu_591_p3 <= (t_0_reg_212 & ap_const_lv2_0);
    t_fu_489_p2 <= std_logic_vector(unsigned(t_0_reg_212) + unsigned(ap_const_lv11_1));
    test_set_address0 <= grp_update_knn_fu_454_test_inst_address0;
    test_set_ce0 <= grp_update_knn_fu_454_test_inst_ce0;
    training_set_address0 <= grp_update_knn_fu_454_train_inst_address0;
    training_set_ce0 <= grp_update_knn_fu_454_train_inst_ce0;

    votes_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, votes_addr_1_reg_882, ap_CS_fsm_state9, ap_CS_fsm_state8, zext_ln67_fu_667_p1, sext_ln70_fu_702_p1, zext_ln74_fu_726_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            votes_address0 <= zext_ln74_fu_726_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            votes_address0 <= votes_addr_1_reg_882;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            votes_address0 <= sext_ln70_fu_702_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            votes_address0 <= zext_ln67_fu_667_p1(4 - 1 downto 0);
        else 
            votes_address0 <= "XXXX";
        end if; 
    end process;


    votes_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            votes_ce0 <= ap_const_logic_1;
        else 
            votes_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    votes_d0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, add_ln70_fu_707_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            votes_d0 <= add_ln70_fu_707_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            votes_d0 <= ap_const_lv32_0;
        else 
            votes_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    votes_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            votes_we0 <= ap_const_logic_1;
        else 
            votes_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln112_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_0_reg_212),64));
    zext_ln67_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln67_i_reg_395),64));
    zext_ln74_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_i_reg_442),64));
end behav;
