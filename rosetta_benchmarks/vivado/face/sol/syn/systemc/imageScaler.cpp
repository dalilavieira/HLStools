// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "imageScaler.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic imageScaler::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic imageScaler::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<34> imageScaler::ap_ST_fsm_state1 = "1";
const sc_lv<34> imageScaler::ap_ST_fsm_state2 = "10";
const sc_lv<34> imageScaler::ap_ST_fsm_state3 = "100";
const sc_lv<34> imageScaler::ap_ST_fsm_state4 = "1000";
const sc_lv<34> imageScaler::ap_ST_fsm_state5 = "10000";
const sc_lv<34> imageScaler::ap_ST_fsm_state6 = "100000";
const sc_lv<34> imageScaler::ap_ST_fsm_state7 = "1000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state8 = "10000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state9 = "100000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state10 = "1000000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state11 = "10000000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state12 = "100000000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<34> imageScaler::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<32> imageScaler::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> imageScaler::ap_const_lv32_1 = "1";
const sc_lv<32> imageScaler::ap_const_lv32_1E = "11110";
const sc_lv<32> imageScaler::ap_const_lv32_1F = "11111";
const sc_lv<1> imageScaler::ap_const_lv1_0 = "0";
const sc_lv<32> imageScaler::ap_const_lv32_20 = "100000";
const sc_lv<1> imageScaler::ap_const_lv1_1 = "1";
const sc_lv<8> imageScaler::ap_const_lv8_0 = "00000000";
const sc_lv<9> imageScaler::ap_const_lv9_0 = "000000000";
const sc_lv<32> imageScaler::ap_const_lv32_21 = "100001";
const sc_lv<32> imageScaler::ap_const_lv32_1400000 = "1010000000000000000000000";
const sc_lv<32> imageScaler::ap_const_lv32_F00000 = "111100000000000000000000";
const sc_lv<8> imageScaler::ap_const_lv8_F0 = "11110000";
const sc_lv<8> imageScaler::ap_const_lv8_1 = "1";
const sc_lv<32> imageScaler::ap_const_lv32_10 = "10000";
const sc_lv<32> imageScaler::ap_const_lv32_19 = "11001";
const sc_lv<32> imageScaler::ap_const_lv32_1B = "11011";
const sc_lv<6> imageScaler::ap_const_lv6_0 = "000000";
const sc_lv<9> imageScaler::ap_const_lv9_140 = "101000000";
const sc_lv<9> imageScaler::ap_const_lv9_1 = "1";
const bool imageScaler::ap_const_boolean_1 = true;

imageScaler::imageScaler(sc_module_name name) : sc_module(name), mVcdFile(0) {
    face_detect_sw_sdiv_27ns_32ns_32_31_seq_1_U1 = new face_detect_sw_sdiv_27ns_32ns_32_31_seq_1<1,31,27,32,32>("face_detect_sw_sdiv_27ns_32ns_32_31_seq_1_U1");
    face_detect_sw_sdiv_27ns_32ns_32_31_seq_1_U1->clk(ap_clk);
    face_detect_sw_sdiv_27ns_32ns_32_31_seq_1_U1->reset(ap_rst);
    face_detect_sw_sdiv_27ns_32ns_32_31_seq_1_U1->start(grp_fu_155_ap_start);
    face_detect_sw_sdiv_27ns_32ns_32_31_seq_1_U1->done(grp_fu_155_ap_done);
    face_detect_sw_sdiv_27ns_32ns_32_31_seq_1_U1->din0(grp_fu_155_p0);
    face_detect_sw_sdiv_27ns_32ns_32_31_seq_1_U1->din1(dest_width);
    face_detect_sw_sdiv_27ns_32ns_32_31_seq_1_U1->ce(ap_var_for_const0);
    face_detect_sw_sdiv_27ns_32ns_32_31_seq_1_U1->dout(grp_fu_155_p2);
    face_detect_sw_sdiv_26ns_32ns_32_30_seq_1_U2 = new face_detect_sw_sdiv_26ns_32ns_32_30_seq_1<1,30,26,32,32>("face_detect_sw_sdiv_26ns_32ns_32_30_seq_1_U2");
    face_detect_sw_sdiv_26ns_32ns_32_30_seq_1_U2->clk(ap_clk);
    face_detect_sw_sdiv_26ns_32ns_32_30_seq_1_U2->reset(ap_rst);
    face_detect_sw_sdiv_26ns_32ns_32_30_seq_1_U2->start(grp_fu_161_ap_start);
    face_detect_sw_sdiv_26ns_32ns_32_30_seq_1_U2->done(grp_fu_161_ap_done);
    face_detect_sw_sdiv_26ns_32ns_32_30_seq_1_U2->din0(grp_fu_161_p0);
    face_detect_sw_sdiv_26ns_32ns_32_30_seq_1_U2->din1(dest_height);
    face_detect_sw_sdiv_26ns_32ns_32_30_seq_1_U2->ce(ap_var_for_const0);
    face_detect_sw_sdiv_26ns_32ns_32_30_seq_1_U2->dout(grp_fu_161_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Data_address0);
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( sext_ln407_1_fu_327_p1 );

    SC_METHOD(thread_Data_ce0);
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_IMG1_data_address0);
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( zext_ln407_3_fu_341_p1 );

    SC_METHOD(thread_IMG1_data_ce0);
    sensitive << ( ap_CS_fsm_state34 );

    SC_METHOD(thread_IMG1_data_d0);
    sensitive << ( Data_q0 );
    sensitive << ( ap_CS_fsm_state34 );

    SC_METHOD(thread_IMG1_data_we0);
    sensitive << ( and_ln405_reg_403 );
    sensitive << ( ap_CS_fsm_state34 );

    SC_METHOD(thread_add_ln400_fu_179_p2);
    sensitive << ( y_ratio_reg_362 );
    sensitive << ( phi_mul5_reg_122 );

    SC_METHOD(thread_add_ln405_fu_303_p2);
    sensitive << ( x_ratio_reg_357 );
    sensitive << ( phi_mul_reg_144 );

    SC_METHOD(thread_add_ln407_1_fu_271_p2);
    sensitive << ( zext_ln407_fu_255_p1 );
    sensitive << ( zext_ln407_1_fu_267_p1 );

    SC_METHOD(thread_add_ln407_2_fu_322_p2);
    sensitive << ( add_ln407_reg_385 );
    sensitive << ( sext_ln407_fu_318_p1 );

    SC_METHOD(thread_add_ln407_3_fu_336_p2);
    sensitive << ( add_ln407_1_reg_390 );
    sensitive << ( zext_ln407_2_fu_332_p1 );

    SC_METHOD(thread_add_ln407_fu_241_p2);
    sensitive << ( sext_ln407_cast_fu_215_p3 );
    sensitive << ( sext_ln407_2_cast_fu_233_p3 );

    SC_METHOD(thread_and_ln405_fu_298_p2);
    sensitive << ( icmp_ln405_reg_380 );
    sensitive << ( icmp_ln405_1_fu_293_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( icmp_ln400_fu_188_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( icmp_ln400_fu_188_p2 );

    SC_METHOD(thread_grp_fu_155_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_grp_fu_155_p0);
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_grp_fu_161_ap_start);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_fu_161_p0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_i_fu_194_p2);
    sensitive << ( i_0_reg_111 );

    SC_METHOD(thread_icmp_ln400_fu_188_p2);
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( i_0_reg_111 );

    SC_METHOD(thread_icmp_ln403_fu_281_p2);
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( j_0_reg_133 );

    SC_METHOD(thread_icmp_ln405_1_fu_293_p2);
    sensitive << ( dest_width );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( icmp_ln403_fu_281_p2 );
    sensitive << ( zext_ln403_fu_277_p1 );

    SC_METHOD(thread_icmp_ln405_fu_200_p2);
    sensitive << ( dest_height );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( icmp_ln400_fu_188_p2 );
    sensitive << ( zext_ln400_fu_184_p1 );

    SC_METHOD(thread_j_fu_287_p2);
    sensitive << ( j_0_reg_133 );

    SC_METHOD(thread_sext_ln407_1_fu_327_p1);
    sensitive << ( add_ln407_2_fu_322_p2 );

    SC_METHOD(thread_sext_ln407_2_cast_fu_233_p3);
    sensitive << ( tmp_14_fu_223_p4 );

    SC_METHOD(thread_sext_ln407_cast_fu_215_p3);
    sensitive << ( tmp_13_fu_205_p4 );

    SC_METHOD(thread_sext_ln407_fu_318_p1);
    sensitive << ( tmp_15_fu_308_p4 );

    SC_METHOD(thread_tmp_13_fu_205_p4);
    sensitive << ( phi_mul5_reg_122 );

    SC_METHOD(thread_tmp_14_fu_223_p4);
    sensitive << ( phi_mul5_reg_122 );

    SC_METHOD(thread_tmp_15_fu_308_p4);
    sensitive << ( phi_mul_reg_144 );

    SC_METHOD(thread_tmp_8_fu_259_p3);
    sensitive << ( i_0_reg_111 );

    SC_METHOD(thread_tmp_s_fu_247_p3);
    sensitive << ( i_0_reg_111 );

    SC_METHOD(thread_x_ratio_fu_167_p2);
    sensitive << ( grp_fu_155_p2 );

    SC_METHOD(thread_y_ratio_fu_173_p2);
    sensitive << ( grp_fu_161_p2 );

    SC_METHOD(thread_zext_ln400_fu_184_p1);
    sensitive << ( i_0_reg_111 );

    SC_METHOD(thread_zext_ln403_fu_277_p1);
    sensitive << ( j_0_reg_133 );

    SC_METHOD(thread_zext_ln407_1_fu_267_p1);
    sensitive << ( tmp_8_fu_259_p3 );

    SC_METHOD(thread_zext_ln407_2_fu_332_p1);
    sensitive << ( j_0_reg_133 );

    SC_METHOD(thread_zext_ln407_3_fu_341_p1);
    sensitive << ( add_ln407_3_reg_417 );

    SC_METHOD(thread_zext_ln407_fu_255_p1);
    sensitive << ( tmp_s_fu_247_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( icmp_ln400_fu_188_p2 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( icmp_ln403_fu_281_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "imageScaler_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, Data_address0, "(port)Data_address0");
    sc_trace(mVcdFile, Data_ce0, "(port)Data_ce0");
    sc_trace(mVcdFile, Data_q0, "(port)Data_q0");
    sc_trace(mVcdFile, dest_height, "(port)dest_height");
    sc_trace(mVcdFile, dest_width, "(port)dest_width");
    sc_trace(mVcdFile, IMG1_data_address0, "(port)IMG1_data_address0");
    sc_trace(mVcdFile, IMG1_data_ce0, "(port)IMG1_data_ce0");
    sc_trace(mVcdFile, IMG1_data_we0, "(port)IMG1_data_we0");
    sc_trace(mVcdFile, IMG1_data_d0, "(port)IMG1_data_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, x_ratio_fu_167_p2, "x_ratio_fu_167_p2");
    sc_trace(mVcdFile, x_ratio_reg_357, "x_ratio_reg_357");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, y_ratio_fu_173_p2, "y_ratio_fu_173_p2");
    sc_trace(mVcdFile, y_ratio_reg_362, "y_ratio_reg_362");
    sc_trace(mVcdFile, add_ln400_fu_179_p2, "add_ln400_fu_179_p2");
    sc_trace(mVcdFile, add_ln400_reg_367, "add_ln400_reg_367");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, i_fu_194_p2, "i_fu_194_p2");
    sc_trace(mVcdFile, i_reg_375, "i_reg_375");
    sc_trace(mVcdFile, icmp_ln405_fu_200_p2, "icmp_ln405_fu_200_p2");
    sc_trace(mVcdFile, icmp_ln405_reg_380, "icmp_ln405_reg_380");
    sc_trace(mVcdFile, icmp_ln400_fu_188_p2, "icmp_ln400_fu_188_p2");
    sc_trace(mVcdFile, add_ln407_fu_241_p2, "add_ln407_fu_241_p2");
    sc_trace(mVcdFile, add_ln407_reg_385, "add_ln407_reg_385");
    sc_trace(mVcdFile, add_ln407_1_fu_271_p2, "add_ln407_1_fu_271_p2");
    sc_trace(mVcdFile, add_ln407_1_reg_390, "add_ln407_1_reg_390");
    sc_trace(mVcdFile, j_fu_287_p2, "j_fu_287_p2");
    sc_trace(mVcdFile, j_reg_398, "j_reg_398");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, and_ln405_fu_298_p2, "and_ln405_fu_298_p2");
    sc_trace(mVcdFile, and_ln405_reg_403, "and_ln405_reg_403");
    sc_trace(mVcdFile, icmp_ln403_fu_281_p2, "icmp_ln403_fu_281_p2");
    sc_trace(mVcdFile, add_ln405_fu_303_p2, "add_ln405_fu_303_p2");
    sc_trace(mVcdFile, add_ln405_reg_407, "add_ln405_reg_407");
    sc_trace(mVcdFile, add_ln407_3_fu_336_p2, "add_ln407_3_fu_336_p2");
    sc_trace(mVcdFile, add_ln407_3_reg_417, "add_ln407_3_reg_417");
    sc_trace(mVcdFile, i_0_reg_111, "i_0_reg_111");
    sc_trace(mVcdFile, phi_mul5_reg_122, "phi_mul5_reg_122");
    sc_trace(mVcdFile, j_0_reg_133, "j_0_reg_133");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, phi_mul_reg_144, "phi_mul_reg_144");
    sc_trace(mVcdFile, sext_ln407_1_fu_327_p1, "sext_ln407_1_fu_327_p1");
    sc_trace(mVcdFile, zext_ln407_3_fu_341_p1, "zext_ln407_3_fu_341_p1");
    sc_trace(mVcdFile, grp_fu_155_p0, "grp_fu_155_p0");
    sc_trace(mVcdFile, grp_fu_161_p0, "grp_fu_161_p0");
    sc_trace(mVcdFile, grp_fu_155_p2, "grp_fu_155_p2");
    sc_trace(mVcdFile, grp_fu_161_p2, "grp_fu_161_p2");
    sc_trace(mVcdFile, zext_ln400_fu_184_p1, "zext_ln400_fu_184_p1");
    sc_trace(mVcdFile, tmp_13_fu_205_p4, "tmp_13_fu_205_p4");
    sc_trace(mVcdFile, tmp_14_fu_223_p4, "tmp_14_fu_223_p4");
    sc_trace(mVcdFile, sext_ln407_cast_fu_215_p3, "sext_ln407_cast_fu_215_p3");
    sc_trace(mVcdFile, sext_ln407_2_cast_fu_233_p3, "sext_ln407_2_cast_fu_233_p3");
    sc_trace(mVcdFile, tmp_s_fu_247_p3, "tmp_s_fu_247_p3");
    sc_trace(mVcdFile, tmp_8_fu_259_p3, "tmp_8_fu_259_p3");
    sc_trace(mVcdFile, zext_ln407_fu_255_p1, "zext_ln407_fu_255_p1");
    sc_trace(mVcdFile, zext_ln407_1_fu_267_p1, "zext_ln407_1_fu_267_p1");
    sc_trace(mVcdFile, zext_ln403_fu_277_p1, "zext_ln403_fu_277_p1");
    sc_trace(mVcdFile, icmp_ln405_1_fu_293_p2, "icmp_ln405_1_fu_293_p2");
    sc_trace(mVcdFile, tmp_15_fu_308_p4, "tmp_15_fu_308_p4");
    sc_trace(mVcdFile, sext_ln407_fu_318_p1, "sext_ln407_fu_318_p1");
    sc_trace(mVcdFile, add_ln407_2_fu_322_p2, "add_ln407_2_fu_322_p2");
    sc_trace(mVcdFile, zext_ln407_2_fu_332_p1, "zext_ln407_2_fu_332_p1");
    sc_trace(mVcdFile, grp_fu_155_ap_start, "grp_fu_155_ap_start");
    sc_trace(mVcdFile, grp_fu_155_ap_done, "grp_fu_155_ap_done");
    sc_trace(mVcdFile, grp_fu_161_ap_start, "grp_fu_161_ap_start");
    sc_trace(mVcdFile, grp_fu_161_ap_done, "grp_fu_161_ap_done");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

imageScaler::~imageScaler() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete face_detect_sw_sdiv_27ns_32ns_32_31_seq_1_U1;
    delete face_detect_sw_sdiv_26ns_32ns_32_30_seq_1_U2;
}

void imageScaler::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void imageScaler::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && 
         esl_seteq<1,1,1>(icmp_ln403_fu_281_p2.read(), ap_const_lv1_1))) {
        i_0_reg_111 = i_reg_375.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        i_0_reg_111 = ap_const_lv8_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        j_0_reg_133 = j_reg_398.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) && 
                esl_seteq<1,1,1>(icmp_ln400_fu_188_p2.read(), ap_const_lv1_0))) {
        j_0_reg_133 = ap_const_lv9_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && 
         esl_seteq<1,1,1>(icmp_ln403_fu_281_p2.read(), ap_const_lv1_1))) {
        phi_mul5_reg_122 = add_ln400_reg_367.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        phi_mul5_reg_122 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        phi_mul_reg_144 = add_ln405_reg_407.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) && 
                esl_seteq<1,1,1>(icmp_ln400_fu_188_p2.read(), ap_const_lv1_0))) {
        phi_mul_reg_144 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        add_ln400_reg_367 = add_ln400_fu_179_p2.read();
        i_reg_375 = i_fu_194_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln403_fu_281_p2.read()))) {
        add_ln405_reg_407 = add_ln405_fu_303_p2.read();
        and_ln405_reg_403 = and_ln405_fu_298_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) && esl_seteq<1,1,1>(icmp_ln400_fu_188_p2.read(), ap_const_lv1_0))) {
        add_ln407_1_reg_390 = add_ln407_1_fu_271_p2.read();
        add_ln407_reg_385 = add_ln407_fu_241_p2.read();
        icmp_ln405_reg_380 = icmp_ln405_fu_200_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln403_fu_281_p2.read()) && esl_seteq<1,1,1>(and_ln405_fu_298_p2.read(), ap_const_lv1_1))) {
        add_ln407_3_reg_417 = add_ln407_3_fu_336_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        j_reg_398 = j_fu_287_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        x_ratio_reg_357 = x_ratio_fu_167_p2.read();
        y_ratio_reg_362 = y_ratio_fu_173_p2.read();
    }
}

void imageScaler::thread_Data_address0() {
    Data_address0 =  (sc_lv<17>) (sext_ln407_1_fu_327_p1.read());
}

void imageScaler::thread_Data_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        Data_ce0 = ap_const_logic_1;
    } else {
        Data_ce0 = ap_const_logic_0;
    }
}

void imageScaler::thread_IMG1_data_address0() {
    IMG1_data_address0 =  (sc_lv<17>) (zext_ln407_3_fu_341_p1.read());
}

void imageScaler::thread_IMG1_data_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        IMG1_data_ce0 = ap_const_logic_1;
    } else {
        IMG1_data_ce0 = ap_const_logic_0;
    }
}

void imageScaler::thread_IMG1_data_d0() {
    IMG1_data_d0 = Data_q0.read();
}

void imageScaler::thread_IMG1_data_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) && 
         esl_seteq<1,1,1>(and_ln405_reg_403.read(), ap_const_lv1_1))) {
        IMG1_data_we0 = ap_const_logic_1;
    } else {
        IMG1_data_we0 = ap_const_logic_0;
    }
}

void imageScaler::thread_add_ln400_fu_179_p2() {
    add_ln400_fu_179_p2 = (!phi_mul5_reg_122.read().is_01() || !y_ratio_reg_362.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul5_reg_122.read()) + sc_biguint<32>(y_ratio_reg_362.read()));
}

void imageScaler::thread_add_ln405_fu_303_p2() {
    add_ln405_fu_303_p2 = (!phi_mul_reg_144.read().is_01() || !x_ratio_reg_357.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul_reg_144.read()) + sc_biguint<32>(x_ratio_reg_357.read()));
}

void imageScaler::thread_add_ln407_1_fu_271_p2() {
    add_ln407_1_fu_271_p2 = (!zext_ln407_fu_255_p1.read().is_01() || !zext_ln407_1_fu_267_p1.read().is_01())? sc_lv<17>(): (sc_biguint<17>(zext_ln407_fu_255_p1.read()) + sc_biguint<17>(zext_ln407_1_fu_267_p1.read()));
}

void imageScaler::thread_add_ln407_2_fu_322_p2() {
    add_ln407_2_fu_322_p2 = (!add_ln407_reg_385.read().is_01() || !sext_ln407_fu_318_p1.read().is_01())? sc_lv<18>(): (sc_biguint<18>(add_ln407_reg_385.read()) + sc_bigint<18>(sext_ln407_fu_318_p1.read()));
}

void imageScaler::thread_add_ln407_3_fu_336_p2() {
    add_ln407_3_fu_336_p2 = (!add_ln407_1_reg_390.read().is_01() || !zext_ln407_2_fu_332_p1.read().is_01())? sc_lv<17>(): (sc_biguint<17>(add_ln407_1_reg_390.read()) + sc_biguint<17>(zext_ln407_2_fu_332_p1.read()));
}

void imageScaler::thread_add_ln407_fu_241_p2() {
    add_ln407_fu_241_p2 = (!sext_ln407_cast_fu_215_p3.read().is_01() || !sext_ln407_2_cast_fu_233_p3.read().is_01())? sc_lv<18>(): (sc_biguint<18>(sext_ln407_cast_fu_215_p3.read()) + sc_biguint<18>(sext_ln407_2_cast_fu_233_p3.read()));
}

void imageScaler::thread_and_ln405_fu_298_p2() {
    and_ln405_fu_298_p2 = (icmp_ln405_1_fu_293_p2.read() & icmp_ln405_reg_380.read());
}

void imageScaler::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void imageScaler::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void imageScaler::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void imageScaler::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void imageScaler::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void imageScaler::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void imageScaler::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) && 
          esl_seteq<1,1,1>(icmp_ln400_fu_188_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void imageScaler::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void imageScaler::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) && 
         esl_seteq<1,1,1>(icmp_ln400_fu_188_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void imageScaler::thread_grp_fu_155_ap_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        grp_fu_155_ap_start = ap_const_logic_1;
    } else {
        grp_fu_155_ap_start = ap_const_logic_0;
    }
}

void imageScaler::thread_grp_fu_155_p0() {
    grp_fu_155_p0 =  (sc_lv<27>) (ap_const_lv32_1400000);
}

void imageScaler::thread_grp_fu_161_ap_start() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_fu_161_ap_start = ap_const_logic_1;
    } else {
        grp_fu_161_ap_start = ap_const_logic_0;
    }
}

void imageScaler::thread_grp_fu_161_p0() {
    grp_fu_161_p0 =  (sc_lv<26>) (ap_const_lv32_F00000);
}

void imageScaler::thread_i_fu_194_p2() {
    i_fu_194_p2 = (!i_0_reg_111.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(i_0_reg_111.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void imageScaler::thread_icmp_ln400_fu_188_p2() {
    icmp_ln400_fu_188_p2 = (!i_0_reg_111.read().is_01() || !ap_const_lv8_F0.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_111.read() == ap_const_lv8_F0);
}

void imageScaler::thread_icmp_ln403_fu_281_p2() {
    icmp_ln403_fu_281_p2 = (!j_0_reg_133.read().is_01() || !ap_const_lv9_140.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_133.read() == ap_const_lv9_140);
}

void imageScaler::thread_icmp_ln405_1_fu_293_p2() {
    icmp_ln405_1_fu_293_p2 = (!zext_ln403_fu_277_p1.read().is_01() || !dest_width.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln403_fu_277_p1.read()) < sc_bigint<32>(dest_width.read()));
}

void imageScaler::thread_icmp_ln405_fu_200_p2() {
    icmp_ln405_fu_200_p2 = (!zext_ln400_fu_184_p1.read().is_01() || !dest_height.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln400_fu_184_p1.read()) < sc_bigint<32>(dest_height.read()));
}

void imageScaler::thread_j_fu_287_p2() {
    j_fu_287_p2 = (!j_0_reg_133.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(j_0_reg_133.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void imageScaler::thread_sext_ln407_1_fu_327_p1() {
    sext_ln407_1_fu_327_p1 = esl_sext<64,18>(add_ln407_2_fu_322_p2.read());
}

void imageScaler::thread_sext_ln407_2_cast_fu_233_p3() {
    sext_ln407_2_cast_fu_233_p3 = esl_concat<12,6>(tmp_14_fu_223_p4.read(), ap_const_lv6_0);
}

void imageScaler::thread_sext_ln407_cast_fu_215_p3() {
    sext_ln407_cast_fu_215_p3 = esl_concat<10,8>(tmp_13_fu_205_p4.read(), ap_const_lv8_0);
}

void imageScaler::thread_sext_ln407_fu_318_p1() {
    sext_ln407_fu_318_p1 = esl_sext<18,16>(tmp_15_fu_308_p4.read());
}

void imageScaler::thread_tmp_13_fu_205_p4() {
    tmp_13_fu_205_p4 = phi_mul5_reg_122.read().range(25, 16);
}

void imageScaler::thread_tmp_14_fu_223_p4() {
    tmp_14_fu_223_p4 = phi_mul5_reg_122.read().range(27, 16);
}

void imageScaler::thread_tmp_15_fu_308_p4() {
    tmp_15_fu_308_p4 = phi_mul_reg_144.read().range(31, 16);
}

void imageScaler::thread_tmp_8_fu_259_p3() {
    tmp_8_fu_259_p3 = esl_concat<8,6>(i_0_reg_111.read(), ap_const_lv6_0);
}

void imageScaler::thread_tmp_s_fu_247_p3() {
    tmp_s_fu_247_p3 = esl_concat<8,8>(i_0_reg_111.read(), ap_const_lv8_0);
}

void imageScaler::thread_x_ratio_fu_167_p2() {
    x_ratio_fu_167_p2 = (!grp_fu_155_p2.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(grp_fu_155_p2.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void imageScaler::thread_y_ratio_fu_173_p2() {
    y_ratio_fu_173_p2 = (!grp_fu_161_p2.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(grp_fu_161_p2.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void imageScaler::thread_zext_ln400_fu_184_p1() {
    zext_ln400_fu_184_p1 = esl_zext<32,8>(i_0_reg_111.read());
}

void imageScaler::thread_zext_ln403_fu_277_p1() {
    zext_ln403_fu_277_p1 = esl_zext<32,9>(j_0_reg_133.read());
}

void imageScaler::thread_zext_ln407_1_fu_267_p1() {
    zext_ln407_1_fu_267_p1 = esl_zext<17,14>(tmp_8_fu_259_p3.read());
}

void imageScaler::thread_zext_ln407_2_fu_332_p1() {
    zext_ln407_2_fu_332_p1 = esl_zext<17,9>(j_0_reg_133.read());
}

void imageScaler::thread_zext_ln407_3_fu_341_p1() {
    zext_ln407_3_fu_341_p1 = esl_zext<64,17>(add_ln407_3_reg_417.read());
}

void imageScaler::thread_zext_ln407_fu_255_p1() {
    zext_ln407_fu_255_p1 = esl_zext<17,16>(tmp_s_fu_247_p3.read());
}

void imageScaler::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) && esl_seteq<1,1,1>(icmp_ln400_fu_188_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state33;
            }
            break;
        case 4294967296 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && esl_seteq<1,1,1>(icmp_ln403_fu_281_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state32;
            } else {
                ap_NS_fsm = ap_ST_fsm_state34;
            }
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            break;
    }
}

}

