-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity face_detect_sw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    Data_ce0 : OUT STD_LOGIC;
    Data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    result_x_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    result_x_ce0 : OUT STD_LOGIC;
    result_x_we0 : OUT STD_LOGIC;
    result_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_y_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    result_y_ce0 : OUT STD_LOGIC;
    result_y_we0 : OUT STD_LOGIC;
    result_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_w_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    result_w_ce0 : OUT STD_LOGIC;
    result_w_we0 : OUT STD_LOGIC;
    result_w_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_h_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    result_h_ce0 : OUT STD_LOGIC;
    result_h_we0 : OUT STD_LOGIC;
    result_h_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_size_i : IN STD_LOGIC_VECTOR (31 downto 0);
    result_size_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_size_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of face_detect_sw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "face_detect_sw,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.454000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=622,HLS_SYN_DSP=35,HLS_SYN_FF=7358,HLS_SYN_LUT=13809,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_3F99999A : STD_LOGIC_VECTOR (31 downto 0) := "00111111100110011001100110011010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_41C00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001110000000000000000000000";
    constant ap_const_lv32_43A00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011101000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_43700000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011011100000000000000000000";
    constant ap_const_lv32_41C80000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001110010000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_BFE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_2_reg_832 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_284_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_3_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_5_fu_311_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_5_reg_844 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_V_6_fu_321_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_6_reg_850 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_7_fu_352_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_7_reg_855 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_8_fu_362_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_8_reg_861 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_2_reg_869 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_reg_874 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_271_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_assign_reg_879 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln57_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_reg_886 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln57_4_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_4_reg_891 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_896 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_901 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal p_Val2_31_fu_566_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_31_reg_911 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal p_Val2_33_fu_680_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_33_reg_917 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_304_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_923 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_imageScaler_fu_262_ap_ready : STD_LOGIC;
    signal grp_imageScaler_fu_262_ap_done : STD_LOGIC;
    signal p_Val2_29_fu_822_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_29_reg_928 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_processImage_fu_194_ap_ready : STD_LOGIC;
    signal grp_processImage_fu_194_ap_done : STD_LOGIC;
    signal IMG1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal IMG1_data_ce0 : STD_LOGIC;
    signal IMG1_data_we0 : STD_LOGIC;
    signal IMG1_data_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_processImage_fu_194_ap_start : STD_LOGIC;
    signal grp_processImage_fu_194_ap_idle : STD_LOGIC;
    signal grp_processImage_fu_194_AllCandidates_x_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_processImage_fu_194_AllCandidates_x_ce0 : STD_LOGIC;
    signal grp_processImage_fu_194_AllCandidates_x_we0 : STD_LOGIC;
    signal grp_processImage_fu_194_AllCandidates_x_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_194_AllCandidates_y_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_processImage_fu_194_AllCandidates_y_ce0 : STD_LOGIC;
    signal grp_processImage_fu_194_AllCandidates_y_we0 : STD_LOGIC;
    signal grp_processImage_fu_194_AllCandidates_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_194_AllCandidates_w_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_processImage_fu_194_AllCandidates_w_ce0 : STD_LOGIC;
    signal grp_processImage_fu_194_AllCandidates_w_we0 : STD_LOGIC;
    signal grp_processImage_fu_194_AllCandidates_w_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_194_AllCandidates_h_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_processImage_fu_194_AllCandidates_h_ce0 : STD_LOGIC;
    signal grp_processImage_fu_194_AllCandidates_h_we0 : STD_LOGIC;
    signal grp_processImage_fu_194_AllCandidates_h_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_194_IMG1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_processImage_fu_194_IMG1_data_ce0 : STD_LOGIC;
    signal grp_processImage_fu_194_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_imageScaler_fu_262_ap_start : STD_LOGIC;
    signal grp_imageScaler_fu_262_ap_idle : STD_LOGIC;
    signal grp_imageScaler_fu_262_Data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_imageScaler_fu_262_Data_ce0 : STD_LOGIC;
    signal grp_imageScaler_fu_262_IMG1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_imageScaler_fu_262_IMG1_data_ce0 : STD_LOGIC;
    signal grp_imageScaler_fu_262_IMG1_data_we0 : STD_LOGIC;
    signal grp_imageScaler_fu_262_IMG1_data_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal factor_0_reg_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_194_ap_start_reg : STD_LOGIC := '0';
    signal grp_imageScaler_fu_262_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_293_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_18_fu_308_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln92_1_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln92_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_23_fu_349_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln92_3_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_2_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln92_1_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln92_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln92_1_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln57_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_415_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln57_fu_425_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln57_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln57_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mantissa_V_2_fu_459_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln339_fu_472_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_475_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_2_fu_489_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_2_fu_481_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_5_fu_494_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_2_fu_498_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_6_fu_506_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_9_fu_510_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_2_fu_468_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_2_fu_514_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_5_fu_518_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_18_fu_530_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_6_fu_524_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_2_fu_538_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_542_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_30_fu_552_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_6_fu_560_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mantissa_V_3_fu_573_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln339_1_fu_586_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_1_fu_589_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_3_fu_603_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_3_fu_595_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_7_fu_608_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_3_fu_612_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_8_fu_620_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_10_fu_624_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_3_fu_582_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_3_fu_628_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_7_fu_632_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_21_fu_644_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_8_fu_638_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_3_fu_652_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_656_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_32_fu_666_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_8_fu_674_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_4_fu_708_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_V_fu_712_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_fu_698_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln502_fu_726_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln502_fu_730_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_744_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_736_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_750_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_754_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1311_4_fu_762_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1285_fu_770_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln682_fu_722_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln1287_fu_766_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_774_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_fu_786_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_fu_780_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln662_fu_794_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_798_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_28_fu_808_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_690_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_4_fu_816_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_271_ce : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_293_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_304_ce : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);

    component processImage IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        factor : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_row : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_col : IN STD_LOGIC_VECTOR (31 downto 0);
        AllCandidates_x_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        AllCandidates_x_ce0 : OUT STD_LOGIC;
        AllCandidates_x_we0 : OUT STD_LOGIC;
        AllCandidates_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AllCandidates_y_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        AllCandidates_y_ce0 : OUT STD_LOGIC;
        AllCandidates_y_we0 : OUT STD_LOGIC;
        AllCandidates_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AllCandidates_w_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        AllCandidates_w_ce0 : OUT STD_LOGIC;
        AllCandidates_w_we0 : OUT STD_LOGIC;
        AllCandidates_w_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AllCandidates_h_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        AllCandidates_h_ce0 : OUT STD_LOGIC;
        AllCandidates_h_we0 : OUT STD_LOGIC;
        AllCandidates_h_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AllCandidates_size_r : IN STD_LOGIC_VECTOR (31 downto 0);
        IMG1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        IMG1_data_ce0 : OUT STD_LOGIC;
        IMG1_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        winSize_width : IN STD_LOGIC_VECTOR (31 downto 0);
        winSize_height : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component imageScaler IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        Data_ce0 : OUT STD_LOGIC;
        Data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        dest_height : IN STD_LOGIC_VECTOR (31 downto 0);
        dest_width : IN STD_LOGIC_VECTOR (31 downto 0);
        IMG1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        IMG1_data_ce0 : OUT STD_LOGIC;
        IMG1_data_we0 : OUT STD_LOGIC;
        IMG1_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component face_detect_sw_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_detect_sw_fdiv_32ns_32ns_32_9_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_detect_sw_fpext_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component face_detect_sw_fcmp_32ns_32ns_1_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component face_detect_sw_dadd_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component face_detect_sw_IMG1_data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    IMG1_data_U : component face_detect_sw_IMG1_data
    generic map (
        DataWidth => 8,
        AddressRange => 76800,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => IMG1_data_address0,
        ce0 => IMG1_data_ce0,
        we0 => IMG1_data_we0,
        d0 => grp_imageScaler_fu_262_IMG1_data_d0,
        q0 => IMG1_data_q0);

    grp_processImage_fu_194 : component processImage
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_processImage_fu_194_ap_start,
        ap_done => grp_processImage_fu_194_ap_done,
        ap_idle => grp_processImage_fu_194_ap_idle,
        ap_ready => grp_processImage_fu_194_ap_ready,
        factor => factor_0_reg_182,
        sum_row => p_Val2_33_reg_917,
        sum_col => p_Val2_31_reg_911,
        AllCandidates_x_address0 => grp_processImage_fu_194_AllCandidates_x_address0,
        AllCandidates_x_ce0 => grp_processImage_fu_194_AllCandidates_x_ce0,
        AllCandidates_x_we0 => grp_processImage_fu_194_AllCandidates_x_we0,
        AllCandidates_x_d0 => grp_processImage_fu_194_AllCandidates_x_d0,
        AllCandidates_y_address0 => grp_processImage_fu_194_AllCandidates_y_address0,
        AllCandidates_y_ce0 => grp_processImage_fu_194_AllCandidates_y_ce0,
        AllCandidates_y_we0 => grp_processImage_fu_194_AllCandidates_y_we0,
        AllCandidates_y_d0 => grp_processImage_fu_194_AllCandidates_y_d0,
        AllCandidates_w_address0 => grp_processImage_fu_194_AllCandidates_w_address0,
        AllCandidates_w_ce0 => grp_processImage_fu_194_AllCandidates_w_ce0,
        AllCandidates_w_we0 => grp_processImage_fu_194_AllCandidates_w_we0,
        AllCandidates_w_d0 => grp_processImage_fu_194_AllCandidates_w_d0,
        AllCandidates_h_address0 => grp_processImage_fu_194_AllCandidates_h_address0,
        AllCandidates_h_ce0 => grp_processImage_fu_194_AllCandidates_h_ce0,
        AllCandidates_h_we0 => grp_processImage_fu_194_AllCandidates_h_we0,
        AllCandidates_h_d0 => grp_processImage_fu_194_AllCandidates_h_d0,
        AllCandidates_size_r => result_size_i,
        IMG1_data_address0 => grp_processImage_fu_194_IMG1_data_address0,
        IMG1_data_ce0 => grp_processImage_fu_194_IMG1_data_ce0,
        IMG1_data_q0 => IMG1_data_q0,
        winSize_width => p_Val2_29_reg_928,
        winSize_height => p_Val2_29_reg_928,
        ap_return => grp_processImage_fu_194_ap_return);

    grp_imageScaler_fu_262 : component imageScaler
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_imageScaler_fu_262_ap_start,
        ap_done => grp_imageScaler_fu_262_ap_done,
        ap_idle => grp_imageScaler_fu_262_ap_idle,
        ap_ready => grp_imageScaler_fu_262_ap_ready,
        Data_address0 => grp_imageScaler_fu_262_Data_address0,
        Data_ce0 => grp_imageScaler_fu_262_Data_ce0,
        Data_q0 => Data_q0,
        dest_height => p_Val2_33_reg_917,
        dest_width => p_Val2_31_reg_911,
        IMG1_data_address0 => grp_imageScaler_fu_262_IMG1_data_address0,
        IMG1_data_ce0 => grp_imageScaler_fu_262_IMG1_data_ce0,
        IMG1_data_we0 => grp_imageScaler_fu_262_IMG1_data_we0,
        IMG1_data_d0 => grp_imageScaler_fu_262_IMG1_data_d0);

    face_detect_sw_fmul_32ns_32ns_32_3_max_dsp_1_U63 : component face_detect_sw_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => factor_0_reg_182,
        din1 => grp_fu_271_p1,
        ce => grp_fu_271_ce,
        dout => grp_fu_271_p2);

    face_detect_sw_fdiv_32ns_32ns_32_9_1_U64 : component face_detect_sw_fdiv_32ns_32ns_32_9_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_43A00000,
        din1 => factor_0_reg_182,
        ce => ap_const_logic_1,
        dout => grp_fu_278_p2);

    face_detect_sw_fdiv_32ns_32ns_32_9_1_U65 : component face_detect_sw_fdiv_32ns_32ns_32_9_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_43700000,
        din1 => factor_0_reg_182,
        ce => ap_const_logic_1,
        dout => grp_fu_284_p2);

    face_detect_sw_fpext_32ns_64_2_1_U66 : component face_detect_sw_fpext_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => value_assign_reg_879,
        ce => ap_const_logic_1,
        dout => grp_fu_290_p1);

    face_detect_sw_fcmp_32ns_32ns_1_2_1_U67 : component face_detect_sw_fcmp_32ns_32ns_1_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_293_p0,
        din1 => grp_fu_293_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_293_opcode,
        dout => grp_fu_293_p2);

    face_detect_sw_fcmp_32ns_32ns_1_2_1_U68 : component face_detect_sw_fcmp_32ns_32ns_1_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x_assign_3_reg_838,
        din1 => ap_const_lv32_41C80000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_298_p2);

    face_detect_sw_dadd_64ns_64ns_64_5_full_dsp_1_U69 : component face_detect_sw_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_reg_896,
        din1 => grp_fu_304_p1,
        ce => grp_fu_304_ce,
        dout => grp_fu_304_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_imageScaler_fu_262_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_imageScaler_fu_262_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    grp_imageScaler_fu_262_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_imageScaler_fu_262_ap_ready = ap_const_logic_1)) then 
                    grp_imageScaler_fu_262_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_processImage_fu_194_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_processImage_fu_194_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    grp_processImage_fu_194_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_processImage_fu_194_ap_ready = ap_const_logic_1)) then 
                    grp_processImage_fu_194_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    factor_0_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (grp_processImage_fu_194_ap_done = ap_const_logic_1))) then 
                factor_0_reg_182 <= grp_fu_271_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                factor_0_reg_182 <= ap_const_lv32_3F99999A;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                icmp_ln57_4_reg_891 <= icmp_ln57_4_fu_435_p2;
                icmp_ln57_reg_886 <= icmp_ln57_fu_429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (or_cond_fu_390_p2 = ap_const_lv1_1))) then
                p_Result_2_reg_869 <= p_Val2_18_fu_308_p1(31 downto 31);
                p_Result_3_reg_874 <= p_Val2_23_fu_349_p1(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                p_Val2_29_reg_928 <= p_Val2_29_fu_822_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                p_Val2_31_reg_911 <= p_Val2_31_fu_566_p3;
                p_Val2_33_reg_917 <= p_Val2_33_fu_680_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_1_reg_901 <= grp_fu_293_p2;
                tmp_i_reg_896 <= grp_fu_290_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_V_5_reg_844 <= p_Val2_18_fu_308_p1(30 downto 23);
                tmp_V_6_reg_850 <= tmp_V_6_fu_321_p1;
                tmp_V_7_reg_855 <= p_Val2_23_fu_349_p1(30 downto 23);
                tmp_V_8_reg_861 <= tmp_V_8_fu_362_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                value_assign_reg_879 <= grp_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                x_assign_2_reg_832 <= grp_fu_278_p2;
                x_assign_3_reg_838 <= grp_fu_284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_imageScaler_fu_262_ap_done = ap_const_logic_1))) then
                x_assign_reg_923 <= grp_fu_304_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state12, or_cond_fu_390_p2, ap_CS_fsm_state21, grp_imageScaler_fu_262_ap_done, ap_CS_fsm_state23, grp_processImage_fu_194_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (or_cond_fu_390_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_imageScaler_fu_262_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (grp_processImage_fu_194_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Data_address0 <= grp_imageScaler_fu_262_Data_address0;
    Data_ce0 <= grp_imageScaler_fu_262_Data_ce0;

    IMG1_data_address0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state23, grp_processImage_fu_194_IMG1_data_address0, grp_imageScaler_fu_262_IMG1_data_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            IMG1_data_address0 <= grp_imageScaler_fu_262_IMG1_data_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            IMG1_data_address0 <= grp_processImage_fu_194_IMG1_data_address0;
        else 
            IMG1_data_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    IMG1_data_ce0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state23, grp_processImage_fu_194_IMG1_data_ce0, grp_imageScaler_fu_262_IMG1_data_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            IMG1_data_ce0 <= grp_imageScaler_fu_262_IMG1_data_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            IMG1_data_ce0 <= grp_processImage_fu_194_IMG1_data_ce0;
        else 
            IMG1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    IMG1_data_we0_assign_proc : process(ap_CS_fsm_state21, grp_imageScaler_fu_262_IMG1_data_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            IMG1_data_we0 <= grp_imageScaler_fu_262_IMG1_data_we0;
        else 
            IMG1_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln339_1_fu_589_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_1_fu_586_p1));
    add_ln339_fu_475_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_472_p1));
    add_ln502_fu_730_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(zext_ln502_fu_726_p1));
    and_ln57_fu_445_p2 <= (tmp_1_reg_901 and or_ln57_fu_441_p2);
    and_ln92_1_fu_384_p2 <= (or_ln92_1_fu_378_p2 and grp_fu_298_p2);
    and_ln92_fu_343_p2 <= (or_ln92_fu_337_p2 and grp_fu_293_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);

    ap_done_assign_proc : process(ap_CS_fsm_state12, or_cond_fu_390_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (or_cond_fu_390_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12, or_cond_fu_390_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (or_cond_fu_390_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln57_fu_412_p1 <= value_assign_reg_879;

    grp_fu_271_ce_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state21, grp_imageScaler_fu_262_ap_done, ap_CS_fsm_state22, ap_CS_fsm_state23, grp_processImage_fu_194_ap_done, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (grp_processImage_fu_194_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_imageScaler_fu_262_ap_done = ap_const_logic_1)))) then 
            grp_fu_271_ce <= ap_const_logic_1;
        else 
            grp_fu_271_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_271_p1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_271_p1 <= ap_const_lv32_3F99999A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_271_p1 <= ap_const_lv32_41C00000;
        else 
            grp_fu_271_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_293_opcode_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_293_opcode <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_293_opcode <= ap_const_lv5_2;
        else 
            grp_fu_293_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_293_p0_assign_proc : process(x_assign_2_reg_832, value_assign_reg_879, ap_CS_fsm_state15, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_293_p0 <= value_assign_reg_879;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_293_p0 <= x_assign_2_reg_832;
        else 
            grp_fu_293_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_293_p1_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_293_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_293_p1 <= ap_const_lv32_41C80000;
        else 
            grp_fu_293_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_304_ce_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, grp_imageScaler_fu_262_ap_done, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_imageScaler_fu_262_ap_done = ap_const_logic_1)))) then 
            grp_fu_304_ce <= ap_const_logic_1;
        else 
            grp_fu_304_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_304_p1 <= 
        ap_const_lv64_3FE0000000000000 when (and_ln57_fu_445_p2(0) = '1') else 
        ap_const_lv64_BFE0000000000000;
    grp_imageScaler_fu_262_ap_start <= grp_imageScaler_fu_262_ap_start_reg;
    grp_processImage_fu_194_ap_start <= grp_processImage_fu_194_ap_start_reg;
    icmp_ln57_4_fu_435_p2 <= "1" when (trunc_ln57_fu_425_p1 = ap_const_lv23_0) else "0";
    icmp_ln57_fu_429_p2 <= "0" when (tmp_s_fu_415_p4 = ap_const_lv8_FF) else "1";
    icmp_ln92_1_fu_331_p2 <= "1" when (tmp_V_6_fu_321_p1 = ap_const_lv23_0) else "0";
    icmp_ln92_2_fu_366_p2 <= "0" when (tmp_V_7_fu_352_p4 = ap_const_lv8_FF) else "1";
    icmp_ln92_3_fu_372_p2 <= "1" when (tmp_V_8_fu_362_p1 = ap_const_lv23_0) else "0";
    icmp_ln92_fu_325_p2 <= "0" when (tmp_V_5_fu_311_p4 = ap_const_lv8_FF) else "1";
    isNeg_2_fu_481_p3 <= add_ln339_fu_475_p2(8 downto 8);
    isNeg_3_fu_595_p3 <= add_ln339_1_fu_589_p2(8 downto 8);
    isNeg_fu_736_p3 <= add_ln502_fu_730_p2(11 downto 11);
    mantissa_V_2_fu_459_p4 <= ((ap_const_lv1_1 & tmp_V_6_reg_850) & ap_const_lv1_0);
    mantissa_V_3_fu_573_p4 <= ((ap_const_lv1_1 & tmp_V_8_reg_861) & ap_const_lv1_0);
    mantissa_V_fu_712_p4 <= ((ap_const_lv1_1 & tmp_V_4_fu_708_p1) & ap_const_lv1_0);
    or_cond_fu_390_p2 <= (and_ln92_fu_343_p2 and and_ln92_1_fu_384_p2);
    or_ln57_fu_441_p2 <= (icmp_ln57_reg_886 or icmp_ln57_4_reg_891);
    or_ln92_1_fu_378_p2 <= (icmp_ln92_3_fu_372_p2 or icmp_ln92_2_fu_366_p2);
    or_ln92_fu_337_p2 <= (icmp_ln92_fu_325_p2 or icmp_ln92_1_fu_331_p2);
    p_Result_s_fu_690_p3 <= p_Val2_s_fu_687_p1(63 downto 63);
    p_Val2_18_fu_308_p1 <= x_assign_2_reg_832;
    p_Val2_23_fu_349_p1 <= x_assign_3_reg_838;
    p_Val2_28_fu_808_p3 <= 
        zext_ln662_fu_794_p1 when (isNeg_fu_736_p3(0) = '1') else 
        tmp_10_fu_798_p4;
    p_Val2_29_fu_822_p3 <= 
        result_V_4_fu_816_p2 when (p_Result_s_fu_690_p3(0) = '1') else 
        p_Val2_28_fu_808_p3;
    p_Val2_30_fu_552_p3 <= 
        zext_ln662_2_fu_538_p1 when (isNeg_2_fu_481_p3(0) = '1') else 
        tmp_11_fu_542_p4;
    p_Val2_31_fu_566_p3 <= 
        result_V_6_fu_560_p2 when (p_Result_2_reg_869(0) = '1') else 
        p_Val2_30_fu_552_p3;
    p_Val2_32_fu_666_p3 <= 
        zext_ln662_3_fu_652_p1 when (isNeg_3_fu_595_p3(0) = '1') else 
        tmp_12_fu_656_p4;
    p_Val2_33_fu_680_p3 <= 
        result_V_8_fu_674_p2 when (p_Result_3_reg_874(0) = '1') else 
        p_Val2_32_fu_666_p3;
    p_Val2_s_fu_687_p1 <= x_assign_reg_923;
    r_V_4_fu_780_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_722_p1),to_integer(unsigned('0' & zext_ln1287_fu_766_p1(31-1 downto 0)))));
    r_V_5_fu_518_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_2_fu_459_p4),to_integer(unsigned('0' & sext_ln1311_9_fu_510_p1(25-1 downto 0)))));
    r_V_6_fu_524_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_2_fu_468_p1),to_integer(unsigned('0' & zext_ln1287_2_fu_514_p1(31-1 downto 0)))));
    r_V_7_fu_632_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_3_fu_573_p4),to_integer(unsigned('0' & sext_ln1311_10_fu_624_p1(25-1 downto 0)))));
    r_V_8_fu_638_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_3_fu_582_p1),to_integer(unsigned('0' & zext_ln1287_3_fu_628_p1(31-1 downto 0)))));
    r_V_fu_774_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_712_p4),to_integer(unsigned('0' & zext_ln1285_fu_770_p1(31-1 downto 0)))));
    result_V_4_fu_816_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_28_fu_808_p3));
    result_V_6_fu_560_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_30_fu_552_p3));
    result_V_8_fu_674_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_32_fu_666_p3));
    result_h_address0 <= grp_processImage_fu_194_AllCandidates_h_address0;
    result_h_ce0 <= grp_processImage_fu_194_AllCandidates_h_ce0;
    result_h_d0 <= grp_processImage_fu_194_AllCandidates_h_d0;
    result_h_we0 <= grp_processImage_fu_194_AllCandidates_h_we0;

    result_size_o_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state23, grp_processImage_fu_194_ap_done, grp_processImage_fu_194_ap_return)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) and (grp_processImage_fu_194_ap_done = ap_const_logic_1))) then 
            result_size_o <= grp_processImage_fu_194_ap_return;
        elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            result_size_o <= ap_const_lv32_0;
        else 
            result_size_o <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    result_size_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state23, grp_processImage_fu_194_ap_done)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (grp_processImage_fu_194_ap_done = ap_const_logic_1)))) then 
            result_size_o_ap_vld <= ap_const_logic_1;
        else 
            result_size_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    result_w_address0 <= grp_processImage_fu_194_AllCandidates_w_address0;
    result_w_ce0 <= grp_processImage_fu_194_AllCandidates_w_ce0;
    result_w_d0 <= grp_processImage_fu_194_AllCandidates_w_d0;
    result_w_we0 <= grp_processImage_fu_194_AllCandidates_w_we0;
    result_x_address0 <= grp_processImage_fu_194_AllCandidates_x_address0;
    result_x_ce0 <= grp_processImage_fu_194_AllCandidates_x_ce0;
    result_x_d0 <= grp_processImage_fu_194_AllCandidates_x_d0;
    result_x_we0 <= grp_processImage_fu_194_AllCandidates_x_we0;
    result_y_address0 <= grp_processImage_fu_194_AllCandidates_y_address0;
    result_y_ce0 <= grp_processImage_fu_194_AllCandidates_y_ce0;
    result_y_d0 <= grp_processImage_fu_194_AllCandidates_y_d0;
    result_y_we0 <= grp_processImage_fu_194_AllCandidates_y_we0;
        sext_ln1311_10_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_3_fu_612_p3),25));

        sext_ln1311_4_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_754_p3),32));

        sext_ln1311_5_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_2_fu_489_p2),9));

        sext_ln1311_6_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_2_fu_498_p3),32));

        sext_ln1311_7_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_3_fu_603_p2),9));

        sext_ln1311_8_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_3_fu_612_p3),32));

        sext_ln1311_9_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_2_fu_498_p3),25));

        sext_ln1311_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_744_p2),12));

    sub_ln1311_2_fu_489_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_5_reg_844));
    sub_ln1311_3_fu_603_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_7_reg_855));
    sub_ln1311_fu_744_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_fu_698_p4));
    tmp_10_fu_798_p4 <= r_V_4_fu_780_p2(84 downto 53);
    tmp_11_fu_542_p4 <= r_V_6_fu_524_p2(55 downto 24);
    tmp_12_fu_656_p4 <= r_V_8_fu_638_p2(55 downto 24);
    tmp_18_fu_530_p3 <= r_V_5_fu_518_p2(24 downto 24);
    tmp_21_fu_644_p3 <= r_V_7_fu_632_p2(24 downto 24);
    tmp_V_4_fu_708_p1 <= p_Val2_s_fu_687_p1(52 - 1 downto 0);
    tmp_V_5_fu_311_p4 <= p_Val2_18_fu_308_p1(30 downto 23);
    tmp_V_6_fu_321_p1 <= p_Val2_18_fu_308_p1(23 - 1 downto 0);
    tmp_V_7_fu_352_p4 <= p_Val2_23_fu_349_p1(30 downto 23);
    tmp_V_8_fu_362_p1 <= p_Val2_23_fu_349_p1(23 - 1 downto 0);
    tmp_V_fu_698_p4 <= p_Val2_s_fu_687_p1(62 downto 52);
    tmp_fu_786_p3 <= r_V_fu_774_p2(53 downto 53);
    tmp_s_fu_415_p4 <= bitcast_ln57_fu_412_p1(30 downto 23);
    trunc_ln57_fu_425_p1 <= bitcast_ln57_fu_412_p1(23 - 1 downto 0);
    ush_2_fu_498_p3 <= 
        sext_ln1311_5_fu_494_p1 when (isNeg_2_fu_481_p3(0) = '1') else 
        add_ln339_fu_475_p2;
    ush_3_fu_612_p3 <= 
        sext_ln1311_7_fu_608_p1 when (isNeg_3_fu_595_p3(0) = '1') else 
        add_ln339_1_fu_589_p2;
    ush_fu_754_p3 <= 
        sext_ln1311_fu_750_p1 when (isNeg_fu_736_p3(0) = '1') else 
        add_ln502_fu_730_p2;
    zext_ln1285_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_4_fu_762_p1),54));
    zext_ln1287_2_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_6_fu_506_p1),79));
    zext_ln1287_3_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_8_fu_620_p1),79));
    zext_ln1287_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_4_fu_762_p1),137));
    zext_ln339_1_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_7_reg_855),9));
    zext_ln339_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_5_reg_844),9));
    zext_ln502_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_698_p4),12));
    zext_ln662_2_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_530_p3),32));
    zext_ln662_3_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_644_p3),32));
    zext_ln662_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_786_p3),32));
    zext_ln682_2_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_2_fu_459_p4),79));
    zext_ln682_3_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_3_fu_573_p4),79));
    zext_ln682_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_712_p4),137));
end behav;
