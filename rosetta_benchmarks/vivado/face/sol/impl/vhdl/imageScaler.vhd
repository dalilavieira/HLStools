-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity imageScaler is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    Data_ce0 : OUT STD_LOGIC;
    Data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    dest_height : IN STD_LOGIC_VECTOR (31 downto 0);
    dest_width : IN STD_LOGIC_VECTOR (31 downto 0);
    IMG1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    IMG1_data_ce0 : OUT STD_LOGIC;
    IMG1_data_we0 : OUT STD_LOGIC;
    IMG1_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of imageScaler is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (33 downto 0) := "0000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (33 downto 0) := "0000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (33 downto 0) := "0000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (33 downto 0) := "0000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (33 downto 0) := "0000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (33 downto 0) := "0000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (33 downto 0) := "0001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (33 downto 0) := "0010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (33 downto 0) := "0100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (33 downto 0) := "1000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1400000 : STD_LOGIC_VECTOR (31 downto 0) := "00000001010000000000000000000000";
    constant ap_const_lv32_F00000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000111100000000000000000000";
    constant ap_const_lv8_F0 : STD_LOGIC_VECTOR (7 downto 0) := "11110000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_140 : STD_LOGIC_VECTOR (8 downto 0) := "101000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal x_ratio_fu_167_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_ratio_reg_357 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal y_ratio_fu_173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_ratio_reg_362 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln400_fu_179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln400_reg_367 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal i_fu_194_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_375 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln405_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln405_reg_380 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln400_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln407_fu_241_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln407_reg_385 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln407_1_fu_271_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln407_1_reg_390 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_fu_287_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_398 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal and_ln405_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln405_reg_403 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln403_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln405_fu_303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln405_reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln407_3_fu_336_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln407_3_reg_417 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_0_reg_111 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_mul5_reg_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_133 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal phi_mul_reg_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln407_1_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln407_3_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_155_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_161_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln400_fu_184_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_205_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_fu_223_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln407_cast_fu_215_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln407_2_cast_fu_233_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_s_fu_247_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_259_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln407_fu_255_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln407_1_fu_267_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln403_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln405_1_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_308_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln407_fu_318_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln407_2_fu_322_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln407_2_fu_332_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_155_ap_start : STD_LOGIC;
    signal grp_fu_155_ap_done : STD_LOGIC;
    signal grp_fu_161_ap_start : STD_LOGIC;
    signal grp_fu_161_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (33 downto 0);

    component face_detect_sw_sdiv_27ns_32ns_32_31_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (26 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_detect_sw_sdiv_26ns_32ns_32_30_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (25 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    face_detect_sw_sdiv_27ns_32ns_32_31_seq_1_U1 : component face_detect_sw_sdiv_27ns_32ns_32_31_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 27,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_155_ap_start,
        done => grp_fu_155_ap_done,
        din0 => grp_fu_155_p0,
        din1 => dest_width,
        ce => ap_const_logic_1,
        dout => grp_fu_155_p2);

    face_detect_sw_sdiv_26ns_32ns_32_30_seq_1_U2 : component face_detect_sw_sdiv_26ns_32ns_32_30_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 30,
        din0_WIDTH => 26,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_161_ap_start,
        done => grp_fu_161_ap_done,
        din0 => grp_fu_161_p0,
        din1 => dest_height,
        ce => ap_const_logic_1,
        dout => grp_fu_161_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln403_fu_281_p2 = ap_const_lv1_1))) then 
                i_0_reg_111 <= i_reg_375;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                i_0_reg_111 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j_0_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                j_0_reg_133 <= j_reg_398;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state32) and (icmp_ln400_fu_188_p2 = ap_const_lv1_0))) then 
                j_0_reg_133 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_mul5_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln403_fu_281_p2 = ap_const_lv1_1))) then 
                phi_mul5_reg_122 <= add_ln400_reg_367;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                phi_mul5_reg_122 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                phi_mul_reg_144 <= add_ln405_reg_407;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state32) and (icmp_ln400_fu_188_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_144 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                add_ln400_reg_367 <= add_ln400_fu_179_p2;
                i_reg_375 <= i_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln403_fu_281_p2 = ap_const_lv1_0))) then
                add_ln405_reg_407 <= add_ln405_fu_303_p2;
                and_ln405_reg_403 <= and_ln405_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) and (icmp_ln400_fu_188_p2 = ap_const_lv1_0))) then
                    add_ln407_1_reg_390(16 downto 6) <= add_ln407_1_fu_271_p2(16 downto 6);
                    add_ln407_reg_385(17 downto 6) <= add_ln407_fu_241_p2(17 downto 6);
                icmp_ln405_reg_380 <= icmp_ln405_fu_200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_1 = and_ln405_fu_298_p2) and (icmp_ln403_fu_281_p2 = ap_const_lv1_0))) then
                add_ln407_3_reg_417 <= add_ln407_3_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                j_reg_398 <= j_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                x_ratio_reg_357 <= x_ratio_fu_167_p2;
                y_ratio_reg_362 <= y_ratio_fu_173_p2;
            end if;
        end if;
    end process;
    add_ln407_reg_385(5 downto 0) <= "000000";
    add_ln407_1_reg_390(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state32, icmp_ln400_fu_188_p2, ap_CS_fsm_state33, icmp_ln403_fu_281_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (icmp_ln400_fu_188_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln403_fu_281_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Data_address0 <= sext_ln407_1_fu_327_p1(17 - 1 downto 0);

    Data_ce0_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            Data_ce0 <= ap_const_logic_1;
        else 
            Data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG1_data_address0 <= zext_ln407_3_fu_341_p1(17 - 1 downto 0);

    IMG1_data_ce0_assign_proc : process(ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            IMG1_data_ce0 <= ap_const_logic_1;
        else 
            IMG1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG1_data_d0 <= Data_q0;

    IMG1_data_we0_assign_proc : process(and_ln405_reg_403, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (ap_const_lv1_1 = and_ln405_reg_403))) then 
            IMG1_data_we0 <= ap_const_logic_1;
        else 
            IMG1_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln400_fu_179_p2 <= std_logic_vector(unsigned(phi_mul5_reg_122) + unsigned(y_ratio_reg_362));
    add_ln405_fu_303_p2 <= std_logic_vector(unsigned(phi_mul_reg_144) + unsigned(x_ratio_reg_357));
    add_ln407_1_fu_271_p2 <= std_logic_vector(unsigned(zext_ln407_fu_255_p1) + unsigned(zext_ln407_1_fu_267_p1));
    add_ln407_2_fu_322_p2 <= std_logic_vector(unsigned(add_ln407_reg_385) + unsigned(sext_ln407_fu_318_p1));
    add_ln407_3_fu_336_p2 <= std_logic_vector(unsigned(add_ln407_1_reg_390) + unsigned(zext_ln407_2_fu_332_p1));
    add_ln407_fu_241_p2 <= std_logic_vector(unsigned(sext_ln407_cast_fu_215_p3) + unsigned(sext_ln407_2_cast_fu_233_p3));
    and_ln405_fu_298_p2 <= (icmp_ln405_reg_380 and icmp_ln405_1_fu_293_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state32, icmp_ln400_fu_188_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (icmp_ln400_fu_188_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state32, icmp_ln400_fu_188_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) and (icmp_ln400_fu_188_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_155_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_155_ap_start <= ap_const_logic_1;
        else 
            grp_fu_155_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_155_p0 <= ap_const_lv32_1400000(27 - 1 downto 0);

    grp_fu_161_ap_start_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_161_ap_start <= ap_const_logic_1;
        else 
            grp_fu_161_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_161_p0 <= ap_const_lv32_F00000(26 - 1 downto 0);
    i_fu_194_p2 <= std_logic_vector(unsigned(i_0_reg_111) + unsigned(ap_const_lv8_1));
    icmp_ln400_fu_188_p2 <= "1" when (i_0_reg_111 = ap_const_lv8_F0) else "0";
    icmp_ln403_fu_281_p2 <= "1" when (j_0_reg_133 = ap_const_lv9_140) else "0";
    icmp_ln405_1_fu_293_p2 <= "1" when (signed(zext_ln403_fu_277_p1) < signed(dest_width)) else "0";
    icmp_ln405_fu_200_p2 <= "1" when (signed(zext_ln400_fu_184_p1) < signed(dest_height)) else "0";
    j_fu_287_p2 <= std_logic_vector(unsigned(j_0_reg_133) + unsigned(ap_const_lv9_1));
        sext_ln407_1_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln407_2_fu_322_p2),64));

    sext_ln407_2_cast_fu_233_p3 <= (tmp_14_fu_223_p4 & ap_const_lv6_0);
    sext_ln407_cast_fu_215_p3 <= (tmp_13_fu_205_p4 & ap_const_lv8_0);
        sext_ln407_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_fu_308_p4),18));

    tmp_13_fu_205_p4 <= phi_mul5_reg_122(25 downto 16);
    tmp_14_fu_223_p4 <= phi_mul5_reg_122(27 downto 16);
    tmp_15_fu_308_p4 <= phi_mul_reg_144(31 downto 16);
    tmp_8_fu_259_p3 <= (i_0_reg_111 & ap_const_lv6_0);
    tmp_s_fu_247_p3 <= (i_0_reg_111 & ap_const_lv8_0);
    x_ratio_fu_167_p2 <= std_logic_vector(unsigned(grp_fu_155_p2) + unsigned(ap_const_lv32_1));
    y_ratio_fu_173_p2 <= std_logic_vector(unsigned(grp_fu_161_p2) + unsigned(ap_const_lv32_1));
    zext_ln400_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_111),32));
    zext_ln403_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_133),32));
    zext_ln407_1_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_259_p3),17));
    zext_ln407_2_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_133),17));
    zext_ln407_3_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln407_3_reg_417),64));
    zext_ln407_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_247_p3),17));
end behav;
