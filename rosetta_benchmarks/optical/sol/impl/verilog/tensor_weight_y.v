// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tensor_weight_y (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tensor_y_val_2_address0,
        tensor_y_val_2_ce0,
        tensor_y_val_2_we0,
        tensor_y_val_2_d0,
        tensor_y_val_2_address1,
        tensor_y_val_2_ce1,
        tensor_y_val_2_we1,
        tensor_y_val_2_d1,
        out_product_val_address0,
        out_product_val_ce0,
        out_product_val_q0
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_state16 = 21'd32768;
parameter    ap_ST_fsm_state17 = 21'd65536;
parameter    ap_ST_fsm_state18 = 21'd131072;
parameter    ap_ST_fsm_state19 = 21'd262144;
parameter    ap_ST_fsm_state20 = 21'd524288;
parameter    ap_ST_fsm_state21 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [21:0] tensor_y_val_2_address0;
output   tensor_y_val_2_ce0;
output   tensor_y_val_2_we0;
output  [31:0] tensor_y_val_2_d0;
output  [21:0] tensor_y_val_2_address1;
output   tensor_y_val_2_ce1;
output   tensor_y_val_2_we1;
output  [31:0] tensor_y_val_2_d1;
output  [21:0] out_product_val_address0;
output   out_product_val_ce0;
input  [31:0] out_product_val_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[21:0] tensor_y_val_2_address0;
reg tensor_y_val_2_ce0;
reg tensor_y_val_2_we0;
reg[31:0] tensor_y_val_2_d0;
reg[21:0] tensor_y_val_2_address1;
reg tensor_y_val_2_ce1;
reg tensor_y_val_2_we1;
reg[31:0] tensor_y_val_2_d1;
reg out_product_val_ce0;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] acc_val_q1;
reg   [31:0] reg_306;
wire    ap_CS_fsm_state12;
wire   [31:0] acc_val_q0;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire   [8:0] r_fu_330_p2;
reg   [8:0] r_reg_657;
wire    ap_CS_fsm_state2;
wire   [0:0] and_ln163_fu_358_p2;
reg   [0:0] and_ln163_reg_662;
wire   [0:0] icmp_ln153_fu_324_p2;
wire   [0:0] icmp_ln173_fu_364_p2;
reg   [0:0] icmp_ln173_reg_666;
wire  signed [20:0] sext_ln155_fu_384_p1;
reg  signed [20:0] sext_ln155_reg_670;
wire   [10:0] c_fu_394_p2;
reg   [10:0] c_reg_678;
wire    ap_CS_fsm_state3;
wire   [2:0] k_fu_406_p2;
wire    ap_CS_fsm_state4;
wire   [19:0] zext_ln165_1_fu_417_p1;
reg   [19:0] zext_ln165_1_reg_691;
wire   [0:0] icmp_ln158_fu_400_p2;
wire   [1:0] i_fu_431_p2;
reg   [1:0] i_reg_699;
wire    ap_CS_fsm_state5;
wire   [22:0] sub_ln169_1_fu_480_p2;
reg   [22:0] sub_ln169_1_reg_704;
wire   [0:0] icmp_ln165_fu_425_p2;
wire   [31:0] select_ln7_fu_492_p3;
reg   [31:0] select_ln7_reg_709;
wire   [22:0] sub_ln175_fu_533_p2;
reg   [22:0] sub_ln175_reg_714;
wire   [2:0] component_fu_545_p2;
reg   [2:0] component_reg_727;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln167_fu_539_p2;
reg   [31:0] out_product_val_load_reg_737;
wire    ap_CS_fsm_state9;
reg   [2:0] acc_val_addr_7_reg_742;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_302_p2;
reg   [31:0] tmp_reg_748;
wire   [31:0] grp_fu_298_p2;
reg   [31:0] tmp_1_reg_753;
wire    ap_CS_fsm_state16;
reg   [2:0] acc_val_address0;
reg    acc_val_ce0;
reg    acc_val_we0;
reg   [31:0] acc_val_d0;
reg   [2:0] acc_val_address1;
reg    acc_val_ce1;
reg   [8:0] r_0_reg_240;
wire   [0:0] icmp_ln155_fu_388_p2;
reg   [10:0] c_0_reg_252;
wire    ap_CS_fsm_state21;
reg   [2:0] k_0_reg_264;
reg   [1:0] i_0_reg_275;
reg   [2:0] component_0_reg_286;
wire    ap_CS_fsm_state17;
wire   [63:0] zext_ln160_fu_412_p1;
wire   [63:0] zext_ln169_4_fu_560_p1;
wire   [63:0] zext_ln169_2_fu_565_p1;
wire   [63:0] zext_ln175_1_fu_570_p1;
wire   [63:0] zext_ln175_2_fu_579_p1;
wire   [63:0] zext_ln175_3_fu_589_p1;
wire   [63:0] zext_ln175_4_fu_599_p1;
wire   [63:0] zext_ln175_5_fu_609_p1;
wire   [63:0] zext_ln175_6_fu_619_p1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state10;
wire   [7:0] tmp_4_fu_336_p4;
wire   [0:0] icmp_ln163_fu_346_p2;
wire   [0:0] icmp_ln163_1_fu_352_p2;
wire   [9:0] zext_ln153_fu_320_p1;
wire   [9:0] add_ln175_fu_370_p2;
wire   [19:0] tmp_2_fu_376_p3;
wire   [8:0] zext_ln165_fu_421_p1;
wire   [8:0] sub_ln169_fu_437_p2;
wire   [18:0] tmp_3_fu_443_p3;
wire   [19:0] zext_ln169_fu_451_p1;
wire   [19:0] add_ln169_fu_455_p2;
wire   [20:0] tmp_5_fu_468_p3;
wire   [22:0] p_shl_cast_fu_460_p3;
wire   [22:0] zext_ln169_1_fu_476_p1;
wire   [0:0] icmp_ln7_fu_486_p2;
wire   [20:0] zext_ln175_fu_500_p1;
wire   [20:0] add_ln175_1_fu_504_p2;
wire   [19:0] trunc_ln175_fu_509_p1;
wire   [21:0] tmp_6_fu_521_p3;
wire   [22:0] p_shl2_cast_fu_513_p3;
wire  signed [22:0] sext_ln175_fu_529_p1;
wire   [22:0] zext_ln169_3_fu_551_p1;
wire   [22:0] add_ln169_1_fu_555_p2;
wire   [22:0] or_ln175_fu_574_p2;
wire   [22:0] add_ln175_2_fu_584_p2;
wire   [22:0] add_ln175_3_fu_594_p2;
wire   [22:0] add_ln175_4_fu_604_p2;
wire   [22:0] add_ln175_5_fu_614_p2;
reg   [20:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
end

tensor_weight_y_acc_val #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
acc_val_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(acc_val_address0),
    .ce0(acc_val_ce0),
    .we0(acc_val_we0),
    .d0(acc_val_d0),
    .q0(acc_val_q0),
    .address1(acc_val_address1),
    .ce1(acc_val_ce1),
    .q1(acc_val_q1)
);

optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_306),
    .din1(tmp_reg_748),
    .ce(1'b1),
    .dout(grp_fu_298_p2)
);

optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(out_product_val_load_reg_737),
    .din1(select_ln7_reg_709),
    .ce(1'b1),
    .dout(grp_fu_302_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln153_fu_324_p2 == 1'd0))) begin
        c_0_reg_252 <= 11'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        c_0_reg_252 <= c_reg_678;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln165_fu_425_p2 == 1'd0) & (1'd1 == and_ln163_reg_662))) begin
        component_0_reg_286 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        component_0_reg_286 <= component_reg_727;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln167_fu_539_p2 == 1'd1))) begin
        i_0_reg_275 <= i_reg_699;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln158_fu_400_p2 == 1'd1) & (1'd1 == and_ln163_reg_662))) begin
        i_0_reg_275 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln155_fu_388_p2 == 1'd0))) begin
        k_0_reg_264 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln158_fu_400_p2 == 1'd0))) begin
        k_0_reg_264 <= k_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln155_fu_388_p2 == 1'd1))) begin
        r_0_reg_240 <= r_reg_657;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_240 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        reg_306 <= acc_val_q0;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_306 <= acc_val_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        acc_val_addr_7_reg_742 <= zext_ln169_2_fu_565_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln153_fu_324_p2 == 1'd0))) begin
        and_ln163_reg_662 <= and_ln163_fu_358_p2;
        icmp_ln173_reg_666 <= icmp_ln173_fu_364_p2;
        sext_ln155_reg_670[20 : 10] <= sext_ln155_fu_384_p1[20 : 10];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_678 <= c_fu_394_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        component_reg_727 <= component_fu_545_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == and_ln163_reg_662))) begin
        i_reg_699 <= i_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        out_product_val_load_reg_737 <= out_product_val_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_657 <= r_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln165_fu_425_p2 == 1'd0) & (1'd1 == and_ln163_reg_662))) begin
        select_ln7_reg_709[5 : 1] <= select_ln7_fu_492_p3[5 : 1];
select_ln7_reg_709[10 : 8] <= select_ln7_fu_492_p3[10 : 8];
select_ln7_reg_709[12] <= select_ln7_fu_492_p3[12];
select_ln7_reg_709[16 : 14] <= select_ln7_fu_492_p3[16 : 14];
select_ln7_reg_709[18] <= select_ln7_fu_492_p3[18];
select_ln7_reg_709[20] <= select_ln7_fu_492_p3[20];
        sub_ln169_1_reg_704[22 : 1] <= sub_ln169_1_fu_480_p2[22 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (((icmp_ln173_reg_666 == 1'd0) & (1'd0 == and_ln163_reg_662)) | ((icmp_ln165_fu_425_p2 == 1'd1) & (icmp_ln173_reg_666 == 1'd0))))) begin
        sub_ln175_reg_714[22 : 1] <= sub_ln175_fu_533_p2[22 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_1_reg_753 <= grp_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_reg_748 <= grp_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln158_fu_400_p2 == 1'd1) & (1'd1 == and_ln163_reg_662))) begin
        zext_ln165_1_reg_691[10 : 0] <= zext_ln165_1_fu_417_p1[10 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        acc_val_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        acc_val_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        acc_val_address0 = acc_val_addr_7_reg_742;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        acc_val_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        acc_val_address0 = zext_ln160_fu_412_p1;
    end else begin
        acc_val_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        acc_val_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        acc_val_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        acc_val_address1 = zext_ln169_2_fu_565_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        acc_val_address1 = 64'd1;
    end else begin
        acc_val_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        acc_val_ce0 = 1'b1;
    end else begin
        acc_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state5))) begin
        acc_val_ce1 = 1'b1;
    end else begin
        acc_val_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        acc_val_d0 = tmp_1_reg_753;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        acc_val_d0 = 32'd0;
    end else begin
        acc_val_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln158_fu_400_p2 == 1'd0)))) begin
        acc_val_we0 = 1'b1;
    end else begin
        acc_val_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln153_fu_324_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln153_fu_324_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6))) begin
        out_product_val_ce0 = 1'b1;
    end else begin
        out_product_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tensor_y_val_2_address0 = zext_ln175_5_fu_609_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        tensor_y_val_2_address0 = zext_ln175_3_fu_589_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        tensor_y_val_2_address0 = zext_ln175_1_fu_570_p1;
    end else begin
        tensor_y_val_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tensor_y_val_2_address1 = zext_ln175_6_fu_619_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        tensor_y_val_2_address1 = zext_ln175_4_fu_599_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        tensor_y_val_2_address1 = zext_ln175_2_fu_579_p1;
    end else begin
        tensor_y_val_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state21))) begin
        tensor_y_val_2_ce0 = 1'b1;
    end else begin
        tensor_y_val_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state21))) begin
        tensor_y_val_2_ce1 = 1'b1;
    end else begin
        tensor_y_val_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19))) begin
        tensor_y_val_2_d0 = acc_val_q1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        tensor_y_val_2_d0 = acc_val_q0;
    end else begin
        tensor_y_val_2_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19))) begin
        tensor_y_val_2_d1 = acc_val_q0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        tensor_y_val_2_d1 = acc_val_q1;
    end else begin
        tensor_y_val_2_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18))) begin
        tensor_y_val_2_we0 = 1'b1;
    end else begin
        tensor_y_val_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18))) begin
        tensor_y_val_2_we1 = 1'b1;
    end else begin
        tensor_y_val_2_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln153_fu_324_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln155_fu_388_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln158_fu_400_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (((icmp_ln173_reg_666 == 1'd1) & (1'd0 == and_ln163_reg_662)) | ((icmp_ln165_fu_425_p2 == 1'd1) & (icmp_ln173_reg_666 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else if (((1'b1 == ap_CS_fsm_state5) & (((icmp_ln173_reg_666 == 1'd0) & (1'd0 == and_ln163_reg_662)) | ((icmp_ln165_fu_425_p2 == 1'd1) & (icmp_ln173_reg_666 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln167_fu_539_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln169_1_fu_555_p2 = (sub_ln169_1_reg_704 + zext_ln169_3_fu_551_p1);

assign add_ln169_fu_455_p2 = (zext_ln169_fu_451_p1 + zext_ln165_1_reg_691);

assign add_ln175_1_fu_504_p2 = ($signed(sext_ln155_reg_670) + $signed(zext_ln175_fu_500_p1));

assign add_ln175_2_fu_584_p2 = (23'd2 + sub_ln175_reg_714);

assign add_ln175_3_fu_594_p2 = (23'd3 + sub_ln175_reg_714);

assign add_ln175_4_fu_604_p2 = (23'd4 + sub_ln175_reg_714);

assign add_ln175_5_fu_614_p2 = (23'd5 + sub_ln175_reg_714);

assign add_ln175_fu_370_p2 = ($signed(zext_ln153_fu_320_p1) + $signed(10'd1023));

assign and_ln163_fu_358_p2 = (icmp_ln163_fu_346_p2 & icmp_ln163_1_fu_352_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_fu_394_p2 = (c_0_reg_252 + 11'd1);

assign component_fu_545_p2 = (component_0_reg_286 + 3'd1);

assign i_fu_431_p2 = (i_0_reg_275 + 2'd1);

assign icmp_ln153_fu_324_p2 = ((r_0_reg_240 == 9'd437) ? 1'b1 : 1'b0);

assign icmp_ln155_fu_388_p2 = ((c_0_reg_252 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln158_fu_400_p2 = ((k_0_reg_264 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln163_1_fu_352_p2 = ((r_0_reg_240 < 9'd436) ? 1'b1 : 1'b0);

assign icmp_ln163_fu_346_p2 = ((tmp_4_fu_336_p4 != 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln165_fu_425_p2 = ((i_0_reg_275 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln167_fu_539_p2 = ((component_0_reg_286 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln173_fu_364_p2 = ((r_0_reg_240 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_486_p2 = ((i_0_reg_275 == 2'd1) ? 1'b1 : 1'b0);

assign k_fu_406_p2 = (k_0_reg_264 + 3'd1);

assign or_ln175_fu_574_p2 = (sub_ln175_reg_714 | 23'd1);

assign out_product_val_address0 = zext_ln169_4_fu_560_p1;

assign p_shl2_cast_fu_513_p3 = {{trunc_ln175_fu_509_p1}, {3'd0}};

assign p_shl_cast_fu_460_p3 = {{add_ln169_fu_455_p2}, {3'd0}};

assign r_fu_330_p2 = (r_0_reg_240 + 9'd1);

assign select_ln7_fu_492_p3 = ((icmp_ln7_fu_486_p2[0:0] === 1'b1) ? 32'd1051975064 : 32'd1051069094);

assign sext_ln155_fu_384_p1 = $signed(tmp_2_fu_376_p3);

assign sext_ln175_fu_529_p1 = $signed(tmp_6_fu_521_p3);

assign sub_ln169_1_fu_480_p2 = (p_shl_cast_fu_460_p3 - zext_ln169_1_fu_476_p1);

assign sub_ln169_fu_437_p2 = (r_0_reg_240 - zext_ln165_fu_421_p1);

assign sub_ln175_fu_533_p2 = ($signed(p_shl2_cast_fu_513_p3) - $signed(sext_ln175_fu_529_p1));

assign tmp_2_fu_376_p3 = {{add_ln175_fu_370_p2}, {10'd0}};

assign tmp_3_fu_443_p3 = {{sub_ln169_fu_437_p2}, {10'd0}};

assign tmp_4_fu_336_p4 = {{r_0_reg_240[8:1]}};

assign tmp_5_fu_468_p3 = {{add_ln169_fu_455_p2}, {1'd0}};

assign tmp_6_fu_521_p3 = {{add_ln175_1_fu_504_p2}, {1'd0}};

assign trunc_ln175_fu_509_p1 = add_ln175_1_fu_504_p2[19:0];

assign zext_ln153_fu_320_p1 = r_0_reg_240;

assign zext_ln160_fu_412_p1 = k_0_reg_264;

assign zext_ln165_1_fu_417_p1 = c_0_reg_252;

assign zext_ln165_fu_421_p1 = i_0_reg_275;

assign zext_ln169_1_fu_476_p1 = tmp_5_fu_468_p3;

assign zext_ln169_2_fu_565_p1 = component_0_reg_286;

assign zext_ln169_3_fu_551_p1 = component_0_reg_286;

assign zext_ln169_4_fu_560_p1 = add_ln169_1_fu_555_p2;

assign zext_ln169_fu_451_p1 = tmp_3_fu_443_p3;

assign zext_ln175_1_fu_570_p1 = sub_ln175_reg_714;

assign zext_ln175_2_fu_579_p1 = or_ln175_fu_574_p2;

assign zext_ln175_3_fu_589_p1 = add_ln175_2_fu_584_p2;

assign zext_ln175_4_fu_599_p1 = add_ln175_3_fu_594_p2;

assign zext_ln175_5_fu_609_p1 = add_ln175_4_fu_604_p2;

assign zext_ln175_6_fu_619_p1 = add_ln175_5_fu_614_p2;

assign zext_ln175_fu_500_p1 = c_0_reg_252;

always @ (posedge ap_clk) begin
    sext_ln155_reg_670[9:0] <= 10'b0000000000;
    zext_ln165_1_reg_691[19:11] <= 9'b000000000;
    sub_ln169_1_reg_704[0] <= 1'b0;
    select_ln7_reg_709[0] <= 1'b0;
    select_ln7_reg_709[7:6] <= 2'b10;
    select_ln7_reg_709[11:11] <= 1'b1;
    select_ln7_reg_709[13:13] <= 1'b0;
    select_ln7_reg_709[17:17] <= 1'b1;
    select_ln7_reg_709[19:19] <= 1'b0;
    select_ln7_reg_709[31:21] <= 11'b00111110101;
    sub_ln175_reg_714[0] <= 1'b0;
end

endmodule //tensor_weight_y
