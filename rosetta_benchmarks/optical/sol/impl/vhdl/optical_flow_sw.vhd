-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity optical_flow_sw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    frame0_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    frame0_ce0 : OUT STD_LOGIC;
    frame0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    frame1_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    frame1_ce0 : OUT STD_LOGIC;
    frame1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    frame2_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    frame2_ce0 : OUT STD_LOGIC;
    frame2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    frame2_address1 : OUT STD_LOGIC_VECTOR (18 downto 0);
    frame2_ce1 : OUT STD_LOGIC;
    frame2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    frame3_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    frame3_ce0 : OUT STD_LOGIC;
    frame3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    frame4_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    frame4_ce0 : OUT STD_LOGIC;
    frame4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    outputs_x_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    outputs_x_ce0 : OUT STD_LOGIC;
    outputs_x_we0 : OUT STD_LOGIC;
    outputs_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    outputs_y_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    outputs_y_ce0 : OUT STD_LOGIC;
    outputs_y_we0 : OUT STD_LOGIC;
    outputs_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of optical_flow_sw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "optical_flow_sw,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.136900,HLS_SYN_LAT=180820561,HLS_SYN_TPT=none,HLS_SYN_MEM=30720,HLS_SYN_DSP=88,HLS_SYN_FF=11561,HLS_SYN_LUT=14811,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (52 downto 0) := "00000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (52 downto 0) := "00000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (52 downto 0) := "00000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (52 downto 0) := "00000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (52 downto 0) := "00000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (52 downto 0) := "00000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (52 downto 0) := "00001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (52 downto 0) := "00010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (52 downto 0) := "00100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (52 downto 0) := "01000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (52 downto 0) := "10000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_C1000000 : STD_LOGIC_VECTOR (31 downto 0) := "11000001000000000000000000000000";
    constant ap_const_lv32_41000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_41400000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001010000000000000000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv9_1B4 : STD_LOGIC_VECTOR (8 downto 0) := "110110100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv23_1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_const_lv23_2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_const_lv23_3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000011";
    constant ap_const_lv23_4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_const_lv23_5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gradient_x_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal gradient_x_ce0 : STD_LOGIC;
    signal gradient_x_we0 : STD_LOGIC;
    signal gradient_x_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_y_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal gradient_y_ce0 : STD_LOGIC;
    signal gradient_y_we0 : STD_LOGIC;
    signal gradient_y_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_z_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal gradient_z_ce0 : STD_LOGIC;
    signal gradient_z_we0 : STD_LOGIC;
    signal gradient_z_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_filtered_x_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal y_filtered_x_ce0 : STD_LOGIC;
    signal y_filtered_x_we0 : STD_LOGIC;
    signal y_filtered_x_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_filtered_y_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal y_filtered_y_ce0 : STD_LOGIC;
    signal y_filtered_y_we0 : STD_LOGIC;
    signal y_filtered_y_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_filtered_z_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal y_filtered_z_ce0 : STD_LOGIC;
    signal y_filtered_z_we0 : STD_LOGIC;
    signal y_filtered_z_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal filtered_gradient_x_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal filtered_gradient_x_ce0 : STD_LOGIC;
    signal filtered_gradient_x_we0 : STD_LOGIC;
    signal filtered_gradient_x_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal filtered_gradient_y_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal filtered_gradient_y_ce0 : STD_LOGIC;
    signal filtered_gradient_y_we0 : STD_LOGIC;
    signal filtered_gradient_y_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal filtered_gradient_z_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal filtered_gradient_z_ce0 : STD_LOGIC;
    signal filtered_gradient_z_we0 : STD_LOGIC;
    signal filtered_gradient_z_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_product_val_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal out_product_val_ce0 : STD_LOGIC;
    signal out_product_val_we0 : STD_LOGIC;
    signal out_product_val_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_product_val_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_product_val_address1 : STD_LOGIC_VECTOR (21 downto 0);
    signal out_product_val_ce1 : STD_LOGIC;
    signal out_product_val_we1 : STD_LOGIC;
    signal out_product_val_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tensor_y_val_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal tensor_y_val_ce0 : STD_LOGIC;
    signal tensor_y_val_we0 : STD_LOGIC;
    signal tensor_y_val_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tensor_y_val_ce1 : STD_LOGIC;
    signal tensor_y_val_we1 : STD_LOGIC;
    signal tensor_val_0_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal tensor_val_0_ce0 : STD_LOGIC;
    signal tensor_val_0_we0 : STD_LOGIC;
    signal tensor_val_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tensor_val_1_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal tensor_val_1_ce0 : STD_LOGIC;
    signal tensor_val_1_we0 : STD_LOGIC;
    signal tensor_val_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tensor_val_3_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal tensor_val_3_ce0 : STD_LOGIC;
    signal tensor_val_3_we0 : STD_LOGIC;
    signal tensor_val_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tensor_val_4_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal tensor_val_4_ce0 : STD_LOGIC;
    signal tensor_val_4_we0 : STD_LOGIC;
    signal tensor_val_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tensor_val_5_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal tensor_val_5_ce0 : STD_LOGIC;
    signal tensor_val_5_we0 : STD_LOGIC;
    signal tensor_val_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_457 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_463 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal r_fu_475_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_reg_668 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln53_fu_489_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln53_reg_673 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln51_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_499_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_reg_681 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln55_1_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_1_reg_686 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln53_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal frame0_load_reg_705 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame1_load_reg_710 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal frame2_load_reg_720 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal frame3_load_reg_730 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal frame4_load_reg_740 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln60_1_fu_528_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_reg_750 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal r_1_fu_539_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_1_reg_758 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal zext_ln134_fu_553_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln134_reg_763 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln132_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_1_fu_563_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_1_reg_771 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal add_ln136_fu_573_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln136_reg_776 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln134_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grad_x_reg_797 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grad_y_reg_805 : STD_LOGIC_VECTOR (31 downto 0);
    signal grad_z_reg_812 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i1_reg_820 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln144_fu_603_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln144_reg_825 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal tmp_4_i_reg_843 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i1_reg_848 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_444_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i1_reg_853 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_448_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_reg_858 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_flow_calc_fu_338_ap_start : STD_LOGIC;
    signal grp_flow_calc_fu_338_ap_done : STD_LOGIC;
    signal grp_flow_calc_fu_338_ap_idle : STD_LOGIC;
    signal grp_flow_calc_fu_338_ap_ready : STD_LOGIC;
    signal grp_flow_calc_fu_338_output_x_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_flow_calc_fu_338_output_x_ce0 : STD_LOGIC;
    signal grp_flow_calc_fu_338_output_x_we0 : STD_LOGIC;
    signal grp_flow_calc_fu_338_output_x_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_flow_calc_fu_338_output_y_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_flow_calc_fu_338_output_y_ce0 : STD_LOGIC;
    signal grp_flow_calc_fu_338_output_y_we0 : STD_LOGIC;
    signal grp_flow_calc_fu_338_output_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_flow_calc_fu_338_tensor_val_0_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_flow_calc_fu_338_tensor_val_0_ce0 : STD_LOGIC;
    signal grp_flow_calc_fu_338_tensor_val_1_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_flow_calc_fu_338_tensor_val_1_ce0 : STD_LOGIC;
    signal grp_flow_calc_fu_338_tensor_val_3_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_flow_calc_fu_338_tensor_val_3_ce0 : STD_LOGIC;
    signal grp_flow_calc_fu_338_tensor_val_5_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_flow_calc_fu_338_tensor_val_5_ce0 : STD_LOGIC;
    signal grp_flow_calc_fu_338_tensor_val_4_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_flow_calc_fu_338_tensor_val_4_ce0 : STD_LOGIC;
    signal grp_gradient_xy_calc_fu_356_ap_start : STD_LOGIC;
    signal grp_gradient_xy_calc_fu_356_ap_done : STD_LOGIC;
    signal grp_gradient_xy_calc_fu_356_ap_idle : STD_LOGIC;
    signal grp_gradient_xy_calc_fu_356_ap_ready : STD_LOGIC;
    signal grp_gradient_xy_calc_fu_356_frame_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_gradient_xy_calc_fu_356_frame_ce0 : STD_LOGIC;
    signal grp_gradient_xy_calc_fu_356_frame_address1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_gradient_xy_calc_fu_356_frame_ce1 : STD_LOGIC;
    signal grp_gradient_xy_calc_fu_356_gradient_x_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_gradient_xy_calc_fu_356_gradient_x_ce0 : STD_LOGIC;
    signal grp_gradient_xy_calc_fu_356_gradient_x_we0 : STD_LOGIC;
    signal grp_gradient_xy_calc_fu_356_gradient_x_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_gradient_xy_calc_fu_356_gradient_y_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_gradient_xy_calc_fu_356_gradient_y_ce0 : STD_LOGIC;
    signal grp_gradient_xy_calc_fu_356_gradient_y_we0 : STD_LOGIC;
    signal grp_gradient_xy_calc_fu_356_gradient_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_gradient_weight_y_fu_368_ap_start : STD_LOGIC;
    signal grp_gradient_weight_y_fu_368_ap_done : STD_LOGIC;
    signal grp_gradient_weight_y_fu_368_ap_idle : STD_LOGIC;
    signal grp_gradient_weight_y_fu_368_ap_ready : STD_LOGIC;
    signal grp_gradient_weight_y_fu_368_filt_grad_x_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_gradient_weight_y_fu_368_filt_grad_x_ce0 : STD_LOGIC;
    signal grp_gradient_weight_y_fu_368_filt_grad_x_we0 : STD_LOGIC;
    signal grp_gradient_weight_y_fu_368_filt_grad_x_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_gradient_weight_y_fu_368_filt_grad_y_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_gradient_weight_y_fu_368_filt_grad_y_ce0 : STD_LOGIC;
    signal grp_gradient_weight_y_fu_368_filt_grad_y_we0 : STD_LOGIC;
    signal grp_gradient_weight_y_fu_368_filt_grad_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_gradient_weight_y_fu_368_filt_grad_z_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_gradient_weight_y_fu_368_filt_grad_z_ce0 : STD_LOGIC;
    signal grp_gradient_weight_y_fu_368_filt_grad_z_we0 : STD_LOGIC;
    signal grp_gradient_weight_y_fu_368_filt_grad_z_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_gradient_weight_y_fu_368_gradient_x_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_gradient_weight_y_fu_368_gradient_x_ce0 : STD_LOGIC;
    signal grp_gradient_weight_y_fu_368_gradient_y_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_gradient_weight_y_fu_368_gradient_y_ce0 : STD_LOGIC;
    signal grp_gradient_weight_y_fu_368_gradient_z_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_gradient_weight_y_fu_368_gradient_z_ce0 : STD_LOGIC;
    signal grp_gradient_weight_x_fu_386_ap_start : STD_LOGIC;
    signal grp_gradient_weight_x_fu_386_ap_done : STD_LOGIC;
    signal grp_gradient_weight_x_fu_386_ap_idle : STD_LOGIC;
    signal grp_gradient_weight_x_fu_386_ap_ready : STD_LOGIC;
    signal grp_gradient_weight_x_fu_386_filt_grad_x_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_gradient_weight_x_fu_386_filt_grad_x_ce0 : STD_LOGIC;
    signal grp_gradient_weight_x_fu_386_filt_grad_x_we0 : STD_LOGIC;
    signal grp_gradient_weight_x_fu_386_filt_grad_x_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_gradient_weight_x_fu_386_filt_grad_y_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_gradient_weight_x_fu_386_filt_grad_y_ce0 : STD_LOGIC;
    signal grp_gradient_weight_x_fu_386_filt_grad_y_we0 : STD_LOGIC;
    signal grp_gradient_weight_x_fu_386_filt_grad_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_gradient_weight_x_fu_386_filt_grad_z_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_gradient_weight_x_fu_386_filt_grad_z_ce0 : STD_LOGIC;
    signal grp_gradient_weight_x_fu_386_filt_grad_z_we0 : STD_LOGIC;
    signal grp_gradient_weight_x_fu_386_filt_grad_z_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_gradient_weight_x_fu_386_y_filtered_x_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_gradient_weight_x_fu_386_y_filtered_x_ce0 : STD_LOGIC;
    signal grp_gradient_weight_x_fu_386_y_filtered_y_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_gradient_weight_x_fu_386_y_filtered_y_ce0 : STD_LOGIC;
    signal grp_gradient_weight_x_fu_386_y_filtered_z_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_gradient_weight_x_fu_386_y_filtered_z_ce0 : STD_LOGIC;
    signal grp_tensor_weight_y_fu_404_ap_start : STD_LOGIC;
    signal grp_tensor_weight_y_fu_404_ap_done : STD_LOGIC;
    signal grp_tensor_weight_y_fu_404_ap_idle : STD_LOGIC;
    signal grp_tensor_weight_y_fu_404_ap_ready : STD_LOGIC;
    signal grp_tensor_weight_y_fu_404_tensor_y_val_2_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_tensor_weight_y_fu_404_tensor_y_val_2_ce0 : STD_LOGIC;
    signal grp_tensor_weight_y_fu_404_tensor_y_val_2_we0 : STD_LOGIC;
    signal grp_tensor_weight_y_fu_404_tensor_y_val_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tensor_weight_y_fu_404_tensor_y_val_2_address1 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_tensor_weight_y_fu_404_tensor_y_val_2_ce1 : STD_LOGIC;
    signal grp_tensor_weight_y_fu_404_tensor_y_val_2_we1 : STD_LOGIC;
    signal grp_tensor_weight_y_fu_404_tensor_y_val_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tensor_weight_y_fu_404_out_product_val_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_tensor_weight_y_fu_404_out_product_val_ce0 : STD_LOGIC;
    signal grp_tensor_weight_x_fu_412_ap_start : STD_LOGIC;
    signal grp_tensor_weight_x_fu_412_ap_done : STD_LOGIC;
    signal grp_tensor_weight_x_fu_412_ap_idle : STD_LOGIC;
    signal grp_tensor_weight_x_fu_412_ap_ready : STD_LOGIC;
    signal grp_tensor_weight_x_fu_412_tensor_0_val_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_tensor_weight_x_fu_412_tensor_0_val_ce0 : STD_LOGIC;
    signal grp_tensor_weight_x_fu_412_tensor_0_val_we0 : STD_LOGIC;
    signal grp_tensor_weight_x_fu_412_tensor_0_val_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tensor_weight_x_fu_412_tensor_1_val_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_tensor_weight_x_fu_412_tensor_1_val_ce0 : STD_LOGIC;
    signal grp_tensor_weight_x_fu_412_tensor_1_val_we0 : STD_LOGIC;
    signal grp_tensor_weight_x_fu_412_tensor_1_val_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tensor_weight_x_fu_412_tensor_3_val_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_tensor_weight_x_fu_412_tensor_3_val_ce0 : STD_LOGIC;
    signal grp_tensor_weight_x_fu_412_tensor_3_val_we0 : STD_LOGIC;
    signal grp_tensor_weight_x_fu_412_tensor_3_val_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tensor_weight_x_fu_412_tensor_4_val_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_tensor_weight_x_fu_412_tensor_4_val_ce0 : STD_LOGIC;
    signal grp_tensor_weight_x_fu_412_tensor_4_val_we0 : STD_LOGIC;
    signal grp_tensor_weight_x_fu_412_tensor_4_val_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tensor_weight_x_fu_412_tensor_5_val_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_tensor_weight_x_fu_412_tensor_5_val_ce0 : STD_LOGIC;
    signal grp_tensor_weight_x_fu_412_tensor_5_val_we0 : STD_LOGIC;
    signal grp_tensor_weight_x_fu_412_tensor_5_val_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tensor_weight_x_fu_412_tensor_y_val_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_tensor_weight_x_fu_412_tensor_y_val_ce0 : STD_LOGIC;
    signal r_0_i_reg_294 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal c_0_i_reg_305 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal r_0_i7_reg_316 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal c_0_i9_reg_327 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_flow_calc_fu_338_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_gradient_xy_calc_fu_356_ap_start_reg : STD_LOGIC := '0';
    signal grp_gradient_weight_y_fu_368_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal grp_gradient_weight_x_fu_386_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal grp_tensor_weight_y_fu_404_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_tensor_weight_x_fu_412_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal zext_ln136_1_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln144_1_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln144_2_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln144_3_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln144_4_fu_640_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln144_5_fu_650_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln144_6_fu_660_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_428_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_433_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_433_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_fu_440_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_fu_481_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln55_fu_505_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln55_fu_509_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal bitcast_ln60_fu_519_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln60_fu_522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_545_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln136_fu_569_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_11_fu_592_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_shl_cast_fu_585_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln144_fu_599_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln144_fu_614_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln144_fu_625_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln144_1_fu_635_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln144_2_fu_645_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln144_3_fu_655_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (52 downto 0);

    component flow_calc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_x_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        output_x_ce0 : OUT STD_LOGIC;
        output_x_we0 : OUT STD_LOGIC;
        output_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_y_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        output_y_ce0 : OUT STD_LOGIC;
        output_y_we0 : OUT STD_LOGIC;
        output_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tensor_val_0_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        tensor_val_0_ce0 : OUT STD_LOGIC;
        tensor_val_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tensor_val_1_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        tensor_val_1_ce0 : OUT STD_LOGIC;
        tensor_val_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tensor_val_3_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        tensor_val_3_ce0 : OUT STD_LOGIC;
        tensor_val_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tensor_val_5_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        tensor_val_5_ce0 : OUT STD_LOGIC;
        tensor_val_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tensor_val_4_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        tensor_val_4_ce0 : OUT STD_LOGIC;
        tensor_val_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gradient_xy_calc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        frame_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        frame_ce0 : OUT STD_LOGIC;
        frame_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        frame_address1 : OUT STD_LOGIC_VECTOR (18 downto 0);
        frame_ce1 : OUT STD_LOGIC;
        frame_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        gradient_x_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        gradient_x_ce0 : OUT STD_LOGIC;
        gradient_x_we0 : OUT STD_LOGIC;
        gradient_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        gradient_y_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        gradient_y_ce0 : OUT STD_LOGIC;
        gradient_y_we0 : OUT STD_LOGIC;
        gradient_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gradient_weight_y IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        filt_grad_x_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        filt_grad_x_ce0 : OUT STD_LOGIC;
        filt_grad_x_we0 : OUT STD_LOGIC;
        filt_grad_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        filt_grad_y_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        filt_grad_y_ce0 : OUT STD_LOGIC;
        filt_grad_y_we0 : OUT STD_LOGIC;
        filt_grad_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        filt_grad_z_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        filt_grad_z_ce0 : OUT STD_LOGIC;
        filt_grad_z_we0 : OUT STD_LOGIC;
        filt_grad_z_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        gradient_x_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        gradient_x_ce0 : OUT STD_LOGIC;
        gradient_x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        gradient_y_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        gradient_y_ce0 : OUT STD_LOGIC;
        gradient_y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        gradient_z_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        gradient_z_ce0 : OUT STD_LOGIC;
        gradient_z_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gradient_weight_x IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        filt_grad_x_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        filt_grad_x_ce0 : OUT STD_LOGIC;
        filt_grad_x_we0 : OUT STD_LOGIC;
        filt_grad_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        filt_grad_y_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        filt_grad_y_ce0 : OUT STD_LOGIC;
        filt_grad_y_we0 : OUT STD_LOGIC;
        filt_grad_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        filt_grad_z_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        filt_grad_z_ce0 : OUT STD_LOGIC;
        filt_grad_z_we0 : OUT STD_LOGIC;
        filt_grad_z_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_filtered_x_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        y_filtered_x_ce0 : OUT STD_LOGIC;
        y_filtered_x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_filtered_y_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        y_filtered_y_ce0 : OUT STD_LOGIC;
        y_filtered_y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_filtered_z_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        y_filtered_z_ce0 : OUT STD_LOGIC;
        y_filtered_z_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component tensor_weight_y IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        tensor_y_val_2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        tensor_y_val_2_ce0 : OUT STD_LOGIC;
        tensor_y_val_2_we0 : OUT STD_LOGIC;
        tensor_y_val_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tensor_y_val_2_address1 : OUT STD_LOGIC_VECTOR (21 downto 0);
        tensor_y_val_2_ce1 : OUT STD_LOGIC;
        tensor_y_val_2_we1 : OUT STD_LOGIC;
        tensor_y_val_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_product_val_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        out_product_val_ce0 : OUT STD_LOGIC;
        out_product_val_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component tensor_weight_x IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        tensor_0_val_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        tensor_0_val_ce0 : OUT STD_LOGIC;
        tensor_0_val_we0 : OUT STD_LOGIC;
        tensor_0_val_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tensor_1_val_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        tensor_1_val_ce0 : OUT STD_LOGIC;
        tensor_1_val_we0 : OUT STD_LOGIC;
        tensor_1_val_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tensor_3_val_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        tensor_3_val_ce0 : OUT STD_LOGIC;
        tensor_3_val_we0 : OUT STD_LOGIC;
        tensor_3_val_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tensor_4_val_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        tensor_4_val_ce0 : OUT STD_LOGIC;
        tensor_4_val_we0 : OUT STD_LOGIC;
        tensor_4_val_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tensor_5_val_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        tensor_5_val_ce0 : OUT STD_LOGIC;
        tensor_5_val_we0 : OUT STD_LOGIC;
        tensor_5_val_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tensor_y_val_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        tensor_y_val_ce0 : OUT STD_LOGIC;
        tensor_y_val_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component optical_flow_sw_fdiv_32ns_32ns_32_9_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component optical_flow_sw_gradient_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component optical_flow_sw_out_product_val IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (21 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (21 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    gradient_x_U : component optical_flow_sw_gradient_x
    generic map (
        DataWidth => 32,
        AddressRange => 446464,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gradient_x_address0,
        ce0 => gradient_x_ce0,
        we0 => gradient_x_we0,
        d0 => grp_gradient_xy_calc_fu_356_gradient_x_d0,
        q0 => gradient_x_q0);

    gradient_y_U : component optical_flow_sw_gradient_x
    generic map (
        DataWidth => 32,
        AddressRange => 446464,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gradient_y_address0,
        ce0 => gradient_y_ce0,
        we0 => gradient_y_we0,
        d0 => grp_gradient_xy_calc_fu_356_gradient_y_d0,
        q0 => gradient_y_q0);

    gradient_z_U : component optical_flow_sw_gradient_x
    generic map (
        DataWidth => 32,
        AddressRange => 446464,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gradient_z_address0,
        ce0 => gradient_z_ce0,
        we0 => gradient_z_we0,
        d0 => tmp_6_i_reg_750,
        q0 => gradient_z_q0);

    y_filtered_x_U : component optical_flow_sw_gradient_x
    generic map (
        DataWidth => 32,
        AddressRange => 446464,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_filtered_x_address0,
        ce0 => y_filtered_x_ce0,
        we0 => y_filtered_x_we0,
        d0 => grp_gradient_weight_y_fu_368_filt_grad_x_d0,
        q0 => y_filtered_x_q0);

    y_filtered_y_U : component optical_flow_sw_gradient_x
    generic map (
        DataWidth => 32,
        AddressRange => 446464,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_filtered_y_address0,
        ce0 => y_filtered_y_ce0,
        we0 => y_filtered_y_we0,
        d0 => grp_gradient_weight_y_fu_368_filt_grad_y_d0,
        q0 => y_filtered_y_q0);

    y_filtered_z_U : component optical_flow_sw_gradient_x
    generic map (
        DataWidth => 32,
        AddressRange => 446464,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_filtered_z_address0,
        ce0 => y_filtered_z_ce0,
        we0 => y_filtered_z_we0,
        d0 => grp_gradient_weight_y_fu_368_filt_grad_z_d0,
        q0 => y_filtered_z_q0);

    filtered_gradient_x_U : component optical_flow_sw_gradient_x
    generic map (
        DataWidth => 32,
        AddressRange => 446464,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => filtered_gradient_x_address0,
        ce0 => filtered_gradient_x_ce0,
        we0 => filtered_gradient_x_we0,
        d0 => grp_gradient_weight_x_fu_386_filt_grad_x_d0,
        q0 => filtered_gradient_x_q0);

    filtered_gradient_y_U : component optical_flow_sw_gradient_x
    generic map (
        DataWidth => 32,
        AddressRange => 446464,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => filtered_gradient_y_address0,
        ce0 => filtered_gradient_y_ce0,
        we0 => filtered_gradient_y_we0,
        d0 => grp_gradient_weight_x_fu_386_filt_grad_y_d0,
        q0 => filtered_gradient_y_q0);

    filtered_gradient_z_U : component optical_flow_sw_gradient_x
    generic map (
        DataWidth => 32,
        AddressRange => 446464,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => filtered_gradient_z_address0,
        ce0 => filtered_gradient_z_ce0,
        we0 => filtered_gradient_z_we0,
        d0 => grp_gradient_weight_x_fu_386_filt_grad_z_d0,
        q0 => filtered_gradient_z_q0);

    out_product_val_U : component optical_flow_sw_out_product_val
    generic map (
        DataWidth => 32,
        AddressRange => 2678784,
        AddressWidth => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => out_product_val_address0,
        ce0 => out_product_val_ce0,
        we0 => out_product_val_we0,
        d0 => out_product_val_d0,
        q0 => out_product_val_q0,
        address1 => out_product_val_address1,
        ce1 => out_product_val_ce1,
        we1 => out_product_val_we1,
        d1 => out_product_val_d1);

    tensor_y_val_U : component optical_flow_sw_out_product_val
    generic map (
        DataWidth => 32,
        AddressRange => 2678784,
        AddressWidth => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tensor_y_val_address0,
        ce0 => tensor_y_val_ce0,
        we0 => tensor_y_val_we0,
        d0 => grp_tensor_weight_y_fu_404_tensor_y_val_2_d0,
        q0 => tensor_y_val_q0,
        address1 => grp_tensor_weight_y_fu_404_tensor_y_val_2_address1,
        ce1 => tensor_y_val_ce1,
        we1 => tensor_y_val_we1,
        d1 => grp_tensor_weight_y_fu_404_tensor_y_val_2_d1);

    tensor_val_0_U : component optical_flow_sw_gradient_x
    generic map (
        DataWidth => 32,
        AddressRange => 446464,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tensor_val_0_address0,
        ce0 => tensor_val_0_ce0,
        we0 => tensor_val_0_we0,
        d0 => grp_tensor_weight_x_fu_412_tensor_0_val_d0,
        q0 => tensor_val_0_q0);

    tensor_val_1_U : component optical_flow_sw_gradient_x
    generic map (
        DataWidth => 32,
        AddressRange => 446464,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tensor_val_1_address0,
        ce0 => tensor_val_1_ce0,
        we0 => tensor_val_1_we0,
        d0 => grp_tensor_weight_x_fu_412_tensor_1_val_d0,
        q0 => tensor_val_1_q0);

    tensor_val_3_U : component optical_flow_sw_gradient_x
    generic map (
        DataWidth => 32,
        AddressRange => 446464,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tensor_val_3_address0,
        ce0 => tensor_val_3_ce0,
        we0 => tensor_val_3_we0,
        d0 => grp_tensor_weight_x_fu_412_tensor_3_val_d0,
        q0 => tensor_val_3_q0);

    tensor_val_4_U : component optical_flow_sw_gradient_x
    generic map (
        DataWidth => 32,
        AddressRange => 446464,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tensor_val_4_address0,
        ce0 => tensor_val_4_ce0,
        we0 => tensor_val_4_we0,
        d0 => grp_tensor_weight_x_fu_412_tensor_4_val_d0,
        q0 => tensor_val_4_q0);

    tensor_val_5_U : component optical_flow_sw_gradient_x
    generic map (
        DataWidth => 32,
        AddressRange => 446464,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tensor_val_5_address0,
        ce0 => tensor_val_5_ce0,
        we0 => tensor_val_5_we0,
        d0 => grp_tensor_weight_x_fu_412_tensor_5_val_d0,
        q0 => tensor_val_5_q0);

    grp_flow_calc_fu_338 : component flow_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_flow_calc_fu_338_ap_start,
        ap_done => grp_flow_calc_fu_338_ap_done,
        ap_idle => grp_flow_calc_fu_338_ap_idle,
        ap_ready => grp_flow_calc_fu_338_ap_ready,
        output_x_address0 => grp_flow_calc_fu_338_output_x_address0,
        output_x_ce0 => grp_flow_calc_fu_338_output_x_ce0,
        output_x_we0 => grp_flow_calc_fu_338_output_x_we0,
        output_x_d0 => grp_flow_calc_fu_338_output_x_d0,
        output_y_address0 => grp_flow_calc_fu_338_output_y_address0,
        output_y_ce0 => grp_flow_calc_fu_338_output_y_ce0,
        output_y_we0 => grp_flow_calc_fu_338_output_y_we0,
        output_y_d0 => grp_flow_calc_fu_338_output_y_d0,
        tensor_val_0_address0 => grp_flow_calc_fu_338_tensor_val_0_address0,
        tensor_val_0_ce0 => grp_flow_calc_fu_338_tensor_val_0_ce0,
        tensor_val_0_q0 => tensor_val_0_q0,
        tensor_val_1_address0 => grp_flow_calc_fu_338_tensor_val_1_address0,
        tensor_val_1_ce0 => grp_flow_calc_fu_338_tensor_val_1_ce0,
        tensor_val_1_q0 => tensor_val_1_q0,
        tensor_val_3_address0 => grp_flow_calc_fu_338_tensor_val_3_address0,
        tensor_val_3_ce0 => grp_flow_calc_fu_338_tensor_val_3_ce0,
        tensor_val_3_q0 => tensor_val_3_q0,
        tensor_val_5_address0 => grp_flow_calc_fu_338_tensor_val_5_address0,
        tensor_val_5_ce0 => grp_flow_calc_fu_338_tensor_val_5_ce0,
        tensor_val_5_q0 => tensor_val_5_q0,
        tensor_val_4_address0 => grp_flow_calc_fu_338_tensor_val_4_address0,
        tensor_val_4_ce0 => grp_flow_calc_fu_338_tensor_val_4_ce0,
        tensor_val_4_q0 => tensor_val_4_q0);

    grp_gradient_xy_calc_fu_356 : component gradient_xy_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_gradient_xy_calc_fu_356_ap_start,
        ap_done => grp_gradient_xy_calc_fu_356_ap_done,
        ap_idle => grp_gradient_xy_calc_fu_356_ap_idle,
        ap_ready => grp_gradient_xy_calc_fu_356_ap_ready,
        frame_address0 => grp_gradient_xy_calc_fu_356_frame_address0,
        frame_ce0 => grp_gradient_xy_calc_fu_356_frame_ce0,
        frame_q0 => frame2_q0,
        frame_address1 => grp_gradient_xy_calc_fu_356_frame_address1,
        frame_ce1 => grp_gradient_xy_calc_fu_356_frame_ce1,
        frame_q1 => frame2_q1,
        gradient_x_address0 => grp_gradient_xy_calc_fu_356_gradient_x_address0,
        gradient_x_ce0 => grp_gradient_xy_calc_fu_356_gradient_x_ce0,
        gradient_x_we0 => grp_gradient_xy_calc_fu_356_gradient_x_we0,
        gradient_x_d0 => grp_gradient_xy_calc_fu_356_gradient_x_d0,
        gradient_y_address0 => grp_gradient_xy_calc_fu_356_gradient_y_address0,
        gradient_y_ce0 => grp_gradient_xy_calc_fu_356_gradient_y_ce0,
        gradient_y_we0 => grp_gradient_xy_calc_fu_356_gradient_y_we0,
        gradient_y_d0 => grp_gradient_xy_calc_fu_356_gradient_y_d0);

    grp_gradient_weight_y_fu_368 : component gradient_weight_y
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_gradient_weight_y_fu_368_ap_start,
        ap_done => grp_gradient_weight_y_fu_368_ap_done,
        ap_idle => grp_gradient_weight_y_fu_368_ap_idle,
        ap_ready => grp_gradient_weight_y_fu_368_ap_ready,
        filt_grad_x_address0 => grp_gradient_weight_y_fu_368_filt_grad_x_address0,
        filt_grad_x_ce0 => grp_gradient_weight_y_fu_368_filt_grad_x_ce0,
        filt_grad_x_we0 => grp_gradient_weight_y_fu_368_filt_grad_x_we0,
        filt_grad_x_d0 => grp_gradient_weight_y_fu_368_filt_grad_x_d0,
        filt_grad_y_address0 => grp_gradient_weight_y_fu_368_filt_grad_y_address0,
        filt_grad_y_ce0 => grp_gradient_weight_y_fu_368_filt_grad_y_ce0,
        filt_grad_y_we0 => grp_gradient_weight_y_fu_368_filt_grad_y_we0,
        filt_grad_y_d0 => grp_gradient_weight_y_fu_368_filt_grad_y_d0,
        filt_grad_z_address0 => grp_gradient_weight_y_fu_368_filt_grad_z_address0,
        filt_grad_z_ce0 => grp_gradient_weight_y_fu_368_filt_grad_z_ce0,
        filt_grad_z_we0 => grp_gradient_weight_y_fu_368_filt_grad_z_we0,
        filt_grad_z_d0 => grp_gradient_weight_y_fu_368_filt_grad_z_d0,
        gradient_x_address0 => grp_gradient_weight_y_fu_368_gradient_x_address0,
        gradient_x_ce0 => grp_gradient_weight_y_fu_368_gradient_x_ce0,
        gradient_x_q0 => gradient_x_q0,
        gradient_y_address0 => grp_gradient_weight_y_fu_368_gradient_y_address0,
        gradient_y_ce0 => grp_gradient_weight_y_fu_368_gradient_y_ce0,
        gradient_y_q0 => gradient_y_q0,
        gradient_z_address0 => grp_gradient_weight_y_fu_368_gradient_z_address0,
        gradient_z_ce0 => grp_gradient_weight_y_fu_368_gradient_z_ce0,
        gradient_z_q0 => gradient_z_q0);

    grp_gradient_weight_x_fu_386 : component gradient_weight_x
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_gradient_weight_x_fu_386_ap_start,
        ap_done => grp_gradient_weight_x_fu_386_ap_done,
        ap_idle => grp_gradient_weight_x_fu_386_ap_idle,
        ap_ready => grp_gradient_weight_x_fu_386_ap_ready,
        filt_grad_x_address0 => grp_gradient_weight_x_fu_386_filt_grad_x_address0,
        filt_grad_x_ce0 => grp_gradient_weight_x_fu_386_filt_grad_x_ce0,
        filt_grad_x_we0 => grp_gradient_weight_x_fu_386_filt_grad_x_we0,
        filt_grad_x_d0 => grp_gradient_weight_x_fu_386_filt_grad_x_d0,
        filt_grad_y_address0 => grp_gradient_weight_x_fu_386_filt_grad_y_address0,
        filt_grad_y_ce0 => grp_gradient_weight_x_fu_386_filt_grad_y_ce0,
        filt_grad_y_we0 => grp_gradient_weight_x_fu_386_filt_grad_y_we0,
        filt_grad_y_d0 => grp_gradient_weight_x_fu_386_filt_grad_y_d0,
        filt_grad_z_address0 => grp_gradient_weight_x_fu_386_filt_grad_z_address0,
        filt_grad_z_ce0 => grp_gradient_weight_x_fu_386_filt_grad_z_ce0,
        filt_grad_z_we0 => grp_gradient_weight_x_fu_386_filt_grad_z_we0,
        filt_grad_z_d0 => grp_gradient_weight_x_fu_386_filt_grad_z_d0,
        y_filtered_x_address0 => grp_gradient_weight_x_fu_386_y_filtered_x_address0,
        y_filtered_x_ce0 => grp_gradient_weight_x_fu_386_y_filtered_x_ce0,
        y_filtered_x_q0 => y_filtered_x_q0,
        y_filtered_y_address0 => grp_gradient_weight_x_fu_386_y_filtered_y_address0,
        y_filtered_y_ce0 => grp_gradient_weight_x_fu_386_y_filtered_y_ce0,
        y_filtered_y_q0 => y_filtered_y_q0,
        y_filtered_z_address0 => grp_gradient_weight_x_fu_386_y_filtered_z_address0,
        y_filtered_z_ce0 => grp_gradient_weight_x_fu_386_y_filtered_z_ce0,
        y_filtered_z_q0 => y_filtered_z_q0);

    grp_tensor_weight_y_fu_404 : component tensor_weight_y
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_tensor_weight_y_fu_404_ap_start,
        ap_done => grp_tensor_weight_y_fu_404_ap_done,
        ap_idle => grp_tensor_weight_y_fu_404_ap_idle,
        ap_ready => grp_tensor_weight_y_fu_404_ap_ready,
        tensor_y_val_2_address0 => grp_tensor_weight_y_fu_404_tensor_y_val_2_address0,
        tensor_y_val_2_ce0 => grp_tensor_weight_y_fu_404_tensor_y_val_2_ce0,
        tensor_y_val_2_we0 => grp_tensor_weight_y_fu_404_tensor_y_val_2_we0,
        tensor_y_val_2_d0 => grp_tensor_weight_y_fu_404_tensor_y_val_2_d0,
        tensor_y_val_2_address1 => grp_tensor_weight_y_fu_404_tensor_y_val_2_address1,
        tensor_y_val_2_ce1 => grp_tensor_weight_y_fu_404_tensor_y_val_2_ce1,
        tensor_y_val_2_we1 => grp_tensor_weight_y_fu_404_tensor_y_val_2_we1,
        tensor_y_val_2_d1 => grp_tensor_weight_y_fu_404_tensor_y_val_2_d1,
        out_product_val_address0 => grp_tensor_weight_y_fu_404_out_product_val_address0,
        out_product_val_ce0 => grp_tensor_weight_y_fu_404_out_product_val_ce0,
        out_product_val_q0 => out_product_val_q0);

    grp_tensor_weight_x_fu_412 : component tensor_weight_x
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_tensor_weight_x_fu_412_ap_start,
        ap_done => grp_tensor_weight_x_fu_412_ap_done,
        ap_idle => grp_tensor_weight_x_fu_412_ap_idle,
        ap_ready => grp_tensor_weight_x_fu_412_ap_ready,
        tensor_0_val_address0 => grp_tensor_weight_x_fu_412_tensor_0_val_address0,
        tensor_0_val_ce0 => grp_tensor_weight_x_fu_412_tensor_0_val_ce0,
        tensor_0_val_we0 => grp_tensor_weight_x_fu_412_tensor_0_val_we0,
        tensor_0_val_d0 => grp_tensor_weight_x_fu_412_tensor_0_val_d0,
        tensor_1_val_address0 => grp_tensor_weight_x_fu_412_tensor_1_val_address0,
        tensor_1_val_ce0 => grp_tensor_weight_x_fu_412_tensor_1_val_ce0,
        tensor_1_val_we0 => grp_tensor_weight_x_fu_412_tensor_1_val_we0,
        tensor_1_val_d0 => grp_tensor_weight_x_fu_412_tensor_1_val_d0,
        tensor_3_val_address0 => grp_tensor_weight_x_fu_412_tensor_3_val_address0,
        tensor_3_val_ce0 => grp_tensor_weight_x_fu_412_tensor_3_val_ce0,
        tensor_3_val_we0 => grp_tensor_weight_x_fu_412_tensor_3_val_we0,
        tensor_3_val_d0 => grp_tensor_weight_x_fu_412_tensor_3_val_d0,
        tensor_4_val_address0 => grp_tensor_weight_x_fu_412_tensor_4_val_address0,
        tensor_4_val_ce0 => grp_tensor_weight_x_fu_412_tensor_4_val_ce0,
        tensor_4_val_we0 => grp_tensor_weight_x_fu_412_tensor_4_val_we0,
        tensor_4_val_d0 => grp_tensor_weight_x_fu_412_tensor_4_val_d0,
        tensor_5_val_address0 => grp_tensor_weight_x_fu_412_tensor_5_val_address0,
        tensor_5_val_ce0 => grp_tensor_weight_x_fu_412_tensor_5_val_ce0,
        tensor_5_val_we0 => grp_tensor_weight_x_fu_412_tensor_5_val_we0,
        tensor_5_val_d0 => grp_tensor_weight_x_fu_412_tensor_5_val_d0,
        tensor_y_val_address0 => grp_tensor_weight_x_fu_412_tensor_y_val_address0,
        tensor_y_val_ce0 => grp_tensor_weight_x_fu_412_tensor_y_val_ce0,
        tensor_y_val_q0 => tensor_y_val_q0);

    optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U73 : component optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_428_p0,
        din1 => grp_fu_428_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_428_p2);

    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U74 : component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_433_p0,
        din1 => grp_fu_433_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_433_p2);

    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U75 : component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_440_p0,
        din1 => grad_y_reg_805,
        ce => ap_const_logic_1,
        dout => grp_fu_440_p2);

    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U76 : component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grad_x_reg_797,
        din1 => grad_z_reg_812,
        ce => ap_const_logic_1,
        dout => grp_fu_444_p2);

    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U77 : component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grad_y_reg_805,
        din1 => grad_z_reg_812,
        ce => ap_const_logic_1,
        dout => grp_fu_448_p2);

    optical_flow_sw_fdiv_32ns_32ns_32_9_1_U78 : component optical_flow_sw_fdiv_32ns_32ns_32_9_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_457,
        din1 => ap_const_lv32_41400000,
        ce => ap_const_logic_1,
        dout => grp_fu_452_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_flow_calc_fu_338_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_flow_calc_fu_338_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                    grp_flow_calc_fu_338_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_flow_calc_fu_338_ap_ready = ap_const_logic_1)) then 
                    grp_flow_calc_fu_338_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_gradient_weight_x_fu_386_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_gradient_weight_x_fu_386_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    grp_gradient_weight_x_fu_386_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_gradient_weight_x_fu_386_ap_ready = ap_const_logic_1)) then 
                    grp_gradient_weight_x_fu_386_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_gradient_weight_y_fu_368_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_gradient_weight_y_fu_368_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln51_fu_469_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_gradient_weight_y_fu_368_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_gradient_weight_y_fu_368_ap_ready = ap_const_logic_1)) then 
                    grp_gradient_weight_y_fu_368_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_gradient_xy_calc_fu_356_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_gradient_xy_calc_fu_356_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_gradient_xy_calc_fu_356_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_gradient_xy_calc_fu_356_ap_ready = ap_const_logic_1)) then 
                    grp_gradient_xy_calc_fu_356_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_tensor_weight_x_fu_412_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_tensor_weight_x_fu_412_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                    grp_tensor_weight_x_fu_412_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_tensor_weight_x_fu_412_ap_ready = ap_const_logic_1)) then 
                    grp_tensor_weight_x_fu_412_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_tensor_weight_y_fu_404_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_tensor_weight_y_fu_404_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln132_fu_533_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                    grp_tensor_weight_y_fu_404_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_tensor_weight_y_fu_404_ap_ready = ap_const_logic_1)) then 
                    grp_tensor_weight_y_fu_404_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_i9_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln132_fu_533_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                c_0_i9_reg_327 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                c_0_i9_reg_327 <= c_1_reg_771;
            end if; 
        end if;
    end process;

    c_0_i_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c_0_i_reg_305 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                c_0_i_reg_305 <= c_reg_681;
            end if; 
        end if;
    end process;

    r_0_i7_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln134_fu_557_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                r_0_i7_reg_316 <= r_1_reg_758;
            elsif (((grp_gradient_weight_x_fu_386_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                r_0_i7_reg_316 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    r_0_i_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_493_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                r_0_i_reg_294 <= r_reg_668;
            elsif (((grp_gradient_xy_calc_fu_356_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                r_0_i_reg_294 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln134_fu_557_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                add_ln136_reg_776 <= add_ln136_fu_573_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                c_1_reg_771 <= c_1_fu_563_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                c_reg_681 <= c_fu_499_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                frame0_load_reg_705 <= frame0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                frame1_load_reg_710 <= frame1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                frame2_load_reg_720 <= frame2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                frame3_load_reg_730 <= frame3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                frame4_load_reg_740 <= frame4_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                grad_x_reg_797 <= filtered_gradient_x_q0;
                grad_y_reg_805 <= filtered_gradient_y_q0;
                grad_z_reg_812 <= filtered_gradient_z_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                r_1_reg_758 <= r_1_fu_539_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                r_reg_668 <= r_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_457 <= grp_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_463 <= grp_fu_433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                    sub_ln144_reg_825(22 downto 1) <= sub_ln144_fu_603_p2(22 downto 1);
                tmp_4_i_reg_843 <= grp_fu_433_p2;
                tmp_5_i1_reg_848 <= grp_fu_440_p2;
                tmp_6_i1_reg_853 <= grp_fu_444_p2;
                tmp_7_i_reg_858 <= grp_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                tmp_3_i1_reg_820 <= grp_fu_440_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                tmp_6_i_reg_750 <= grp_fu_452_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln132_fu_533_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    zext_ln134_reg_763(18 downto 10) <= zext_ln134_fu_553_p1(18 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln53_reg_673(18 downto 10) <= zext_ln53_fu_489_p1(18 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_493_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    zext_ln55_1_reg_686(19 downto 0) <= zext_ln55_1_fu_514_p1(19 downto 0);
            end if;
        end if;
    end process;
    zext_ln53_reg_673(9 downto 0) <= "0000000000";
    zext_ln53_reg_673(19) <= '0';
    zext_ln55_1_reg_686(63 downto 20) <= "00000000000000000000000000000000000000000000";
    zext_ln134_reg_763(9 downto 0) <= "0000000000";
    zext_ln134_reg_763(19) <= '0';
    sub_ln144_reg_825(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln51_fu_469_p2, ap_CS_fsm_state4, icmp_ln53_fu_493_p2, ap_CS_fsm_state39, icmp_ln132_fu_533_p2, ap_CS_fsm_state40, icmp_ln134_fu_557_p2, grp_flow_calc_fu_338_ap_done, grp_gradient_xy_calc_fu_356_ap_done, grp_gradient_weight_y_fu_368_ap_done, grp_gradient_weight_x_fu_386_ap_done, grp_tensor_weight_y_fu_404_ap_done, grp_tensor_weight_x_fu_412_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state38, ap_CS_fsm_state53, ap_CS_fsm_state36, ap_CS_fsm_state49, ap_CS_fsm_state51)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_gradient_xy_calc_fu_356_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln51_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln53_fu_493_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state36 => 
                if (((grp_gradient_weight_y_fu_368_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((grp_gradient_weight_x_fu_386_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                if (((icmp_ln132_fu_533_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state40 => 
                if (((icmp_ln134_fu_557_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state49 => 
                if (((grp_tensor_weight_y_fu_404_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                if (((grp_tensor_weight_x_fu_412_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((grp_flow_calc_fu_338_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln136_fu_573_p2 <= std_logic_vector(unsigned(zext_ln136_fu_569_p1) + unsigned(zext_ln134_reg_763));
    add_ln144_1_fu_635_p2 <= std_logic_vector(unsigned(sub_ln144_reg_825) + unsigned(ap_const_lv23_3));
    add_ln144_2_fu_645_p2 <= std_logic_vector(unsigned(sub_ln144_reg_825) + unsigned(ap_const_lv23_4));
    add_ln144_3_fu_655_p2 <= std_logic_vector(unsigned(sub_ln144_reg_825) + unsigned(ap_const_lv23_5));
    add_ln144_fu_625_p2 <= std_logic_vector(unsigned(sub_ln144_reg_825) + unsigned(ap_const_lv23_2));
    add_ln55_fu_509_p2 <= std_logic_vector(unsigned(zext_ln53_reg_673) + unsigned(zext_ln55_fu_505_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(grp_flow_calc_fu_338_ap_done, ap_CS_fsm_state53)
    begin
        if (((grp_flow_calc_fu_338_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_flow_calc_fu_338_ap_done, ap_CS_fsm_state53)
    begin
        if (((grp_flow_calc_fu_338_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln60_1_fu_528_p1 <= xor_ln60_fu_522_p2;
    bitcast_ln60_fu_519_p1 <= frame4_load_reg_740;
    c_1_fu_563_p2 <= std_logic_vector(unsigned(c_0_i9_reg_327) + unsigned(ap_const_lv11_1));
    c_fu_499_p2 <= std_logic_vector(unsigned(c_0_i_reg_305) + unsigned(ap_const_lv11_1));

    filtered_gradient_x_address0_assign_proc : process(ap_CS_fsm_state40, grp_gradient_weight_x_fu_386_filt_grad_x_address0, ap_CS_fsm_state38, zext_ln136_1_fu_578_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            filtered_gradient_x_address0 <= zext_ln136_1_fu_578_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            filtered_gradient_x_address0 <= grp_gradient_weight_x_fu_386_filt_grad_x_address0;
        else 
            filtered_gradient_x_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    filtered_gradient_x_ce0_assign_proc : process(ap_CS_fsm_state40, grp_gradient_weight_x_fu_386_filt_grad_x_ce0, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            filtered_gradient_x_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            filtered_gradient_x_ce0 <= grp_gradient_weight_x_fu_386_filt_grad_x_ce0;
        else 
            filtered_gradient_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    filtered_gradient_x_we0_assign_proc : process(grp_gradient_weight_x_fu_386_filt_grad_x_we0, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            filtered_gradient_x_we0 <= grp_gradient_weight_x_fu_386_filt_grad_x_we0;
        else 
            filtered_gradient_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    filtered_gradient_y_address0_assign_proc : process(ap_CS_fsm_state40, grp_gradient_weight_x_fu_386_filt_grad_y_address0, ap_CS_fsm_state38, zext_ln136_1_fu_578_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            filtered_gradient_y_address0 <= zext_ln136_1_fu_578_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            filtered_gradient_y_address0 <= grp_gradient_weight_x_fu_386_filt_grad_y_address0;
        else 
            filtered_gradient_y_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    filtered_gradient_y_ce0_assign_proc : process(ap_CS_fsm_state40, grp_gradient_weight_x_fu_386_filt_grad_y_ce0, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            filtered_gradient_y_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            filtered_gradient_y_ce0 <= grp_gradient_weight_x_fu_386_filt_grad_y_ce0;
        else 
            filtered_gradient_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    filtered_gradient_y_we0_assign_proc : process(grp_gradient_weight_x_fu_386_filt_grad_y_we0, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            filtered_gradient_y_we0 <= grp_gradient_weight_x_fu_386_filt_grad_y_we0;
        else 
            filtered_gradient_y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    filtered_gradient_z_address0_assign_proc : process(ap_CS_fsm_state40, grp_gradient_weight_x_fu_386_filt_grad_z_address0, ap_CS_fsm_state38, zext_ln136_1_fu_578_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            filtered_gradient_z_address0 <= zext_ln136_1_fu_578_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            filtered_gradient_z_address0 <= grp_gradient_weight_x_fu_386_filt_grad_z_address0;
        else 
            filtered_gradient_z_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    filtered_gradient_z_ce0_assign_proc : process(ap_CS_fsm_state40, grp_gradient_weight_x_fu_386_filt_grad_z_ce0, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            filtered_gradient_z_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            filtered_gradient_z_ce0 <= grp_gradient_weight_x_fu_386_filt_grad_z_ce0;
        else 
            filtered_gradient_z_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    filtered_gradient_z_we0_assign_proc : process(grp_gradient_weight_x_fu_386_filt_grad_z_we0, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            filtered_gradient_z_we0 <= grp_gradient_weight_x_fu_386_filt_grad_z_we0;
        else 
            filtered_gradient_z_we0 <= ap_const_logic_0;
        end if; 
    end process;

    frame0_address0 <= zext_ln55_1_fu_514_p1(19 - 1 downto 0);

    frame0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            frame0_ce0 <= ap_const_logic_1;
        else 
            frame0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    frame1_address0 <= zext_ln55_1_reg_686(19 - 1 downto 0);

    frame1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            frame1_ce0 <= ap_const_logic_1;
        else 
            frame1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    frame2_address0_assign_proc : process(ap_CS_fsm_state9, zext_ln55_1_reg_686, grp_gradient_xy_calc_fu_356_frame_address0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            frame2_address0 <= zext_ln55_1_reg_686(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            frame2_address0 <= grp_gradient_xy_calc_fu_356_frame_address0;
        else 
            frame2_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    frame2_address1 <= grp_gradient_xy_calc_fu_356_frame_address1;

    frame2_ce0_assign_proc : process(ap_CS_fsm_state9, grp_gradient_xy_calc_fu_356_frame_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            frame2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            frame2_ce0 <= grp_gradient_xy_calc_fu_356_frame_ce0;
        else 
            frame2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    frame2_ce1_assign_proc : process(grp_gradient_xy_calc_fu_356_frame_ce1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            frame2_ce1 <= grp_gradient_xy_calc_fu_356_frame_ce1;
        else 
            frame2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    frame3_address0 <= zext_ln55_1_reg_686(19 - 1 downto 0);

    frame3_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            frame3_ce0 <= ap_const_logic_1;
        else 
            frame3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    frame4_address0 <= zext_ln55_1_reg_686(19 - 1 downto 0);

    frame4_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            frame4_ce0 <= ap_const_logic_1;
        else 
            frame4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gradient_x_address0_assign_proc : process(grp_gradient_xy_calc_fu_356_gradient_x_address0, grp_gradient_weight_y_fu_368_gradient_x_address0, ap_CS_fsm_state2, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            gradient_x_address0 <= grp_gradient_weight_y_fu_368_gradient_x_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gradient_x_address0 <= grp_gradient_xy_calc_fu_356_gradient_x_address0;
        else 
            gradient_x_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gradient_x_ce0_assign_proc : process(grp_gradient_xy_calc_fu_356_gradient_x_ce0, grp_gradient_weight_y_fu_368_gradient_x_ce0, ap_CS_fsm_state2, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            gradient_x_ce0 <= grp_gradient_weight_y_fu_368_gradient_x_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gradient_x_ce0 <= grp_gradient_xy_calc_fu_356_gradient_x_ce0;
        else 
            gradient_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gradient_x_we0_assign_proc : process(grp_gradient_xy_calc_fu_356_gradient_x_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gradient_x_we0 <= grp_gradient_xy_calc_fu_356_gradient_x_we0;
        else 
            gradient_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    gradient_y_address0_assign_proc : process(grp_gradient_xy_calc_fu_356_gradient_y_address0, grp_gradient_weight_y_fu_368_gradient_y_address0, ap_CS_fsm_state2, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            gradient_y_address0 <= grp_gradient_weight_y_fu_368_gradient_y_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gradient_y_address0 <= grp_gradient_xy_calc_fu_356_gradient_y_address0;
        else 
            gradient_y_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gradient_y_ce0_assign_proc : process(grp_gradient_xy_calc_fu_356_gradient_y_ce0, grp_gradient_weight_y_fu_368_gradient_y_ce0, ap_CS_fsm_state2, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            gradient_y_ce0 <= grp_gradient_weight_y_fu_368_gradient_y_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gradient_y_ce0 <= grp_gradient_xy_calc_fu_356_gradient_y_ce0;
        else 
            gradient_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gradient_y_we0_assign_proc : process(grp_gradient_xy_calc_fu_356_gradient_y_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gradient_y_we0 <= grp_gradient_xy_calc_fu_356_gradient_y_we0;
        else 
            gradient_y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    gradient_z_address0_assign_proc : process(zext_ln55_1_reg_686, grp_gradient_weight_y_fu_368_gradient_z_address0, ap_CS_fsm_state35, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            gradient_z_address0 <= zext_ln55_1_reg_686(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            gradient_z_address0 <= grp_gradient_weight_y_fu_368_gradient_z_address0;
        else 
            gradient_z_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gradient_z_ce0_assign_proc : process(grp_gradient_weight_y_fu_368_gradient_z_ce0, ap_CS_fsm_state35, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            gradient_z_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            gradient_z_ce0 <= grp_gradient_weight_y_fu_368_gradient_z_ce0;
        else 
            gradient_z_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gradient_z_we0_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            gradient_z_we0 <= ap_const_logic_1;
        else 
            gradient_z_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_flow_calc_fu_338_ap_start <= grp_flow_calc_fu_338_ap_start_reg;

    grp_fu_428_p0_assign_proc : process(reg_457, frame0_load_reg_705, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state22, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_428_p0 <= reg_457;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_428_p0 <= frame0_load_reg_705;
        else 
            grp_fu_428_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_428_p1_assign_proc : process(reg_463, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, bitcast_ln60_1_fu_528_p1, ap_CS_fsm_state22, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_428_p1 <= bitcast_ln60_1_fu_528_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_428_p1 <= reg_463;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_428_p1 <= ap_const_lv32_0;
        else 
            grp_fu_428_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_433_p0_assign_proc : process(frame1_load_reg_710, frame2_load_reg_720, frame3_load_reg_730, grad_x_reg_797, grad_z_reg_812, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_433_p0 <= grad_z_reg_812;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_433_p0 <= grad_x_reg_797;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_433_p0 <= frame3_load_reg_730;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_433_p0 <= frame2_load_reg_720;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_433_p0 <= frame1_load_reg_710;
        else 
            grp_fu_433_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_433_p1_assign_proc : process(grad_x_reg_797, grad_z_reg_812, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_433_p1 <= grad_z_reg_812;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_433_p1 <= grad_x_reg_797;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_433_p1 <= ap_const_lv32_41000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_433_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_433_p1 <= ap_const_lv32_C1000000;
        else 
            grp_fu_433_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_440_p0_assign_proc : process(grad_x_reg_797, grad_y_reg_805, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_440_p0 <= grad_x_reg_797;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_440_p0 <= grad_y_reg_805;
        else 
            grp_fu_440_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_gradient_weight_x_fu_386_ap_start <= grp_gradient_weight_x_fu_386_ap_start_reg;
    grp_gradient_weight_y_fu_368_ap_start <= grp_gradient_weight_y_fu_368_ap_start_reg;
    grp_gradient_xy_calc_fu_356_ap_start <= grp_gradient_xy_calc_fu_356_ap_start_reg;
    grp_tensor_weight_x_fu_412_ap_start <= grp_tensor_weight_x_fu_412_ap_start_reg;
    grp_tensor_weight_y_fu_404_ap_start <= grp_tensor_weight_y_fu_404_ap_start_reg;
    icmp_ln132_fu_533_p2 <= "1" when (r_0_i7_reg_316 = ap_const_lv9_1B4) else "0";
    icmp_ln134_fu_557_p2 <= "1" when (c_0_i9_reg_327 = ap_const_lv11_400) else "0";
    icmp_ln51_fu_469_p2 <= "1" when (r_0_i_reg_294 = ap_const_lv9_1B4) else "0";
    icmp_ln53_fu_493_p2 <= "1" when (c_0_i_reg_305 = ap_const_lv11_400) else "0";
    or_ln144_fu_614_p2 <= (sub_ln144_fu_603_p2 or ap_const_lv23_1);

    out_product_val_address0_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, grp_tensor_weight_y_fu_404_out_product_val_address0, ap_CS_fsm_state49, zext_ln144_1_fu_609_p1, zext_ln144_3_fu_630_p1, zext_ln144_5_fu_650_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            out_product_val_address0 <= zext_ln144_5_fu_650_p1(22 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            out_product_val_address0 <= zext_ln144_3_fu_630_p1(22 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            out_product_val_address0 <= zext_ln144_1_fu_609_p1(22 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            out_product_val_address0 <= grp_tensor_weight_y_fu_404_out_product_val_address0;
        else 
            out_product_val_address0 <= "XXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_product_val_address1_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, zext_ln144_2_fu_620_p1, zext_ln144_4_fu_640_p1, zext_ln144_6_fu_660_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            out_product_val_address1 <= zext_ln144_6_fu_660_p1(22 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            out_product_val_address1 <= zext_ln144_4_fu_640_p1(22 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            out_product_val_address1 <= zext_ln144_2_fu_620_p1(22 - 1 downto 0);
        else 
            out_product_val_address1 <= "XXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_product_val_ce0_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, grp_tensor_weight_y_fu_404_out_product_val_ce0, ap_CS_fsm_state48, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            out_product_val_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            out_product_val_ce0 <= grp_tensor_weight_y_fu_404_out_product_val_ce0;
        else 
            out_product_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_product_val_ce1_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            out_product_val_ce1 <= ap_const_logic_1;
        else 
            out_product_val_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_product_val_d0_assign_proc : process(reg_463, ap_CS_fsm_state45, tmp_4_i_reg_843, tmp_6_i1_reg_853, ap_CS_fsm_state46, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            out_product_val_d0 <= tmp_6_i1_reg_853;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            out_product_val_d0 <= tmp_4_i_reg_843;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            out_product_val_d0 <= reg_463;
        else 
            out_product_val_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_product_val_d1_assign_proc : process(tmp_3_i1_reg_820, ap_CS_fsm_state45, tmp_5_i1_reg_848, tmp_7_i_reg_858, ap_CS_fsm_state46, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            out_product_val_d1 <= tmp_7_i_reg_858;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            out_product_val_d1 <= tmp_5_i1_reg_848;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            out_product_val_d1 <= tmp_3_i1_reg_820;
        else 
            out_product_val_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_product_val_we0_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            out_product_val_we0 <= ap_const_logic_1;
        else 
            out_product_val_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_product_val_we1_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            out_product_val_we1 <= ap_const_logic_1;
        else 
            out_product_val_we1 <= ap_const_logic_0;
        end if; 
    end process;

    outputs_x_address0 <= grp_flow_calc_fu_338_output_x_address0;
    outputs_x_ce0 <= grp_flow_calc_fu_338_output_x_ce0;
    outputs_x_d0 <= grp_flow_calc_fu_338_output_x_d0;
    outputs_x_we0 <= grp_flow_calc_fu_338_output_x_we0;
    outputs_y_address0 <= grp_flow_calc_fu_338_output_y_address0;
    outputs_y_ce0 <= grp_flow_calc_fu_338_output_y_ce0;
    outputs_y_d0 <= grp_flow_calc_fu_338_output_y_d0;
    outputs_y_we0 <= grp_flow_calc_fu_338_output_y_we0;
    p_shl_cast_fu_585_p3 <= (add_ln136_reg_776 & ap_const_lv3_0);
    r_1_fu_539_p2 <= std_logic_vector(unsigned(r_0_i7_reg_316) + unsigned(ap_const_lv9_1));
    r_fu_475_p2 <= std_logic_vector(unsigned(r_0_i_reg_294) + unsigned(ap_const_lv9_1));
    sub_ln144_fu_603_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_585_p3) - unsigned(zext_ln144_fu_599_p1));

    tensor_val_0_address0_assign_proc : process(grp_flow_calc_fu_338_tensor_val_0_address0, grp_tensor_weight_x_fu_412_tensor_0_val_address0, ap_CS_fsm_state53, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            tensor_val_0_address0 <= grp_tensor_weight_x_fu_412_tensor_0_val_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            tensor_val_0_address0 <= grp_flow_calc_fu_338_tensor_val_0_address0;
        else 
            tensor_val_0_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tensor_val_0_ce0_assign_proc : process(grp_flow_calc_fu_338_tensor_val_0_ce0, grp_tensor_weight_x_fu_412_tensor_0_val_ce0, ap_CS_fsm_state53, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            tensor_val_0_ce0 <= grp_tensor_weight_x_fu_412_tensor_0_val_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            tensor_val_0_ce0 <= grp_flow_calc_fu_338_tensor_val_0_ce0;
        else 
            tensor_val_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tensor_val_0_we0_assign_proc : process(grp_tensor_weight_x_fu_412_tensor_0_val_we0, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            tensor_val_0_we0 <= grp_tensor_weight_x_fu_412_tensor_0_val_we0;
        else 
            tensor_val_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tensor_val_1_address0_assign_proc : process(grp_flow_calc_fu_338_tensor_val_1_address0, grp_tensor_weight_x_fu_412_tensor_1_val_address0, ap_CS_fsm_state53, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            tensor_val_1_address0 <= grp_tensor_weight_x_fu_412_tensor_1_val_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            tensor_val_1_address0 <= grp_flow_calc_fu_338_tensor_val_1_address0;
        else 
            tensor_val_1_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tensor_val_1_ce0_assign_proc : process(grp_flow_calc_fu_338_tensor_val_1_ce0, grp_tensor_weight_x_fu_412_tensor_1_val_ce0, ap_CS_fsm_state53, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            tensor_val_1_ce0 <= grp_tensor_weight_x_fu_412_tensor_1_val_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            tensor_val_1_ce0 <= grp_flow_calc_fu_338_tensor_val_1_ce0;
        else 
            tensor_val_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tensor_val_1_we0_assign_proc : process(grp_tensor_weight_x_fu_412_tensor_1_val_we0, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            tensor_val_1_we0 <= grp_tensor_weight_x_fu_412_tensor_1_val_we0;
        else 
            tensor_val_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tensor_val_3_address0_assign_proc : process(grp_flow_calc_fu_338_tensor_val_3_address0, grp_tensor_weight_x_fu_412_tensor_3_val_address0, ap_CS_fsm_state53, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            tensor_val_3_address0 <= grp_tensor_weight_x_fu_412_tensor_3_val_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            tensor_val_3_address0 <= grp_flow_calc_fu_338_tensor_val_3_address0;
        else 
            tensor_val_3_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tensor_val_3_ce0_assign_proc : process(grp_flow_calc_fu_338_tensor_val_3_ce0, grp_tensor_weight_x_fu_412_tensor_3_val_ce0, ap_CS_fsm_state53, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            tensor_val_3_ce0 <= grp_tensor_weight_x_fu_412_tensor_3_val_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            tensor_val_3_ce0 <= grp_flow_calc_fu_338_tensor_val_3_ce0;
        else 
            tensor_val_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tensor_val_3_we0_assign_proc : process(grp_tensor_weight_x_fu_412_tensor_3_val_we0, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            tensor_val_3_we0 <= grp_tensor_weight_x_fu_412_tensor_3_val_we0;
        else 
            tensor_val_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tensor_val_4_address0_assign_proc : process(grp_flow_calc_fu_338_tensor_val_4_address0, grp_tensor_weight_x_fu_412_tensor_4_val_address0, ap_CS_fsm_state53, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            tensor_val_4_address0 <= grp_tensor_weight_x_fu_412_tensor_4_val_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            tensor_val_4_address0 <= grp_flow_calc_fu_338_tensor_val_4_address0;
        else 
            tensor_val_4_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tensor_val_4_ce0_assign_proc : process(grp_flow_calc_fu_338_tensor_val_4_ce0, grp_tensor_weight_x_fu_412_tensor_4_val_ce0, ap_CS_fsm_state53, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            tensor_val_4_ce0 <= grp_tensor_weight_x_fu_412_tensor_4_val_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            tensor_val_4_ce0 <= grp_flow_calc_fu_338_tensor_val_4_ce0;
        else 
            tensor_val_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tensor_val_4_we0_assign_proc : process(grp_tensor_weight_x_fu_412_tensor_4_val_we0, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            tensor_val_4_we0 <= grp_tensor_weight_x_fu_412_tensor_4_val_we0;
        else 
            tensor_val_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tensor_val_5_address0_assign_proc : process(grp_flow_calc_fu_338_tensor_val_5_address0, grp_tensor_weight_x_fu_412_tensor_5_val_address0, ap_CS_fsm_state53, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            tensor_val_5_address0 <= grp_tensor_weight_x_fu_412_tensor_5_val_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            tensor_val_5_address0 <= grp_flow_calc_fu_338_tensor_val_5_address0;
        else 
            tensor_val_5_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tensor_val_5_ce0_assign_proc : process(grp_flow_calc_fu_338_tensor_val_5_ce0, grp_tensor_weight_x_fu_412_tensor_5_val_ce0, ap_CS_fsm_state53, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            tensor_val_5_ce0 <= grp_tensor_weight_x_fu_412_tensor_5_val_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            tensor_val_5_ce0 <= grp_flow_calc_fu_338_tensor_val_5_ce0;
        else 
            tensor_val_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tensor_val_5_we0_assign_proc : process(grp_tensor_weight_x_fu_412_tensor_5_val_we0, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            tensor_val_5_we0 <= grp_tensor_weight_x_fu_412_tensor_5_val_we0;
        else 
            tensor_val_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tensor_y_val_address0_assign_proc : process(grp_tensor_weight_y_fu_404_tensor_y_val_2_address0, grp_tensor_weight_x_fu_412_tensor_y_val_address0, ap_CS_fsm_state49, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            tensor_y_val_address0 <= grp_tensor_weight_x_fu_412_tensor_y_val_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            tensor_y_val_address0 <= grp_tensor_weight_y_fu_404_tensor_y_val_2_address0;
        else 
            tensor_y_val_address0 <= "XXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tensor_y_val_ce0_assign_proc : process(grp_tensor_weight_y_fu_404_tensor_y_val_2_ce0, grp_tensor_weight_x_fu_412_tensor_y_val_ce0, ap_CS_fsm_state49, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            tensor_y_val_ce0 <= grp_tensor_weight_x_fu_412_tensor_y_val_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            tensor_y_val_ce0 <= grp_tensor_weight_y_fu_404_tensor_y_val_2_ce0;
        else 
            tensor_y_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tensor_y_val_ce1_assign_proc : process(grp_tensor_weight_y_fu_404_tensor_y_val_2_ce1, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            tensor_y_val_ce1 <= grp_tensor_weight_y_fu_404_tensor_y_val_2_ce1;
        else 
            tensor_y_val_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    tensor_y_val_we0_assign_proc : process(grp_tensor_weight_y_fu_404_tensor_y_val_2_we0, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            tensor_y_val_we0 <= grp_tensor_weight_y_fu_404_tensor_y_val_2_we0;
        else 
            tensor_y_val_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tensor_y_val_we1_assign_proc : process(grp_tensor_weight_y_fu_404_tensor_y_val_2_we1, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            tensor_y_val_we1 <= grp_tensor_weight_y_fu_404_tensor_y_val_2_we1;
        else 
            tensor_y_val_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_fu_592_p3 <= (add_ln136_reg_776 & ap_const_lv1_0);
    tmp_fu_481_p3 <= (r_0_i_reg_294 & ap_const_lv10_0);
    tmp_s_fu_545_p3 <= (r_0_i7_reg_316 & ap_const_lv10_0);
    xor_ln60_fu_522_p2 <= (bitcast_ln60_fu_519_p1 xor ap_const_lv32_80000000);

    y_filtered_x_address0_assign_proc : process(grp_gradient_weight_y_fu_368_filt_grad_x_address0, grp_gradient_weight_x_fu_386_y_filtered_x_address0, ap_CS_fsm_state38, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            y_filtered_x_address0 <= grp_gradient_weight_x_fu_386_y_filtered_x_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            y_filtered_x_address0 <= grp_gradient_weight_y_fu_368_filt_grad_x_address0;
        else 
            y_filtered_x_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_filtered_x_ce0_assign_proc : process(grp_gradient_weight_y_fu_368_filt_grad_x_ce0, grp_gradient_weight_x_fu_386_y_filtered_x_ce0, ap_CS_fsm_state38, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            y_filtered_x_ce0 <= grp_gradient_weight_x_fu_386_y_filtered_x_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            y_filtered_x_ce0 <= grp_gradient_weight_y_fu_368_filt_grad_x_ce0;
        else 
            y_filtered_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_filtered_x_we0_assign_proc : process(grp_gradient_weight_y_fu_368_filt_grad_x_we0, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            y_filtered_x_we0 <= grp_gradient_weight_y_fu_368_filt_grad_x_we0;
        else 
            y_filtered_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_filtered_y_address0_assign_proc : process(grp_gradient_weight_y_fu_368_filt_grad_y_address0, grp_gradient_weight_x_fu_386_y_filtered_y_address0, ap_CS_fsm_state38, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            y_filtered_y_address0 <= grp_gradient_weight_x_fu_386_y_filtered_y_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            y_filtered_y_address0 <= grp_gradient_weight_y_fu_368_filt_grad_y_address0;
        else 
            y_filtered_y_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_filtered_y_ce0_assign_proc : process(grp_gradient_weight_y_fu_368_filt_grad_y_ce0, grp_gradient_weight_x_fu_386_y_filtered_y_ce0, ap_CS_fsm_state38, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            y_filtered_y_ce0 <= grp_gradient_weight_x_fu_386_y_filtered_y_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            y_filtered_y_ce0 <= grp_gradient_weight_y_fu_368_filt_grad_y_ce0;
        else 
            y_filtered_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_filtered_y_we0_assign_proc : process(grp_gradient_weight_y_fu_368_filt_grad_y_we0, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            y_filtered_y_we0 <= grp_gradient_weight_y_fu_368_filt_grad_y_we0;
        else 
            y_filtered_y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_filtered_z_address0_assign_proc : process(grp_gradient_weight_y_fu_368_filt_grad_z_address0, grp_gradient_weight_x_fu_386_y_filtered_z_address0, ap_CS_fsm_state38, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            y_filtered_z_address0 <= grp_gradient_weight_x_fu_386_y_filtered_z_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            y_filtered_z_address0 <= grp_gradient_weight_y_fu_368_filt_grad_z_address0;
        else 
            y_filtered_z_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_filtered_z_ce0_assign_proc : process(grp_gradient_weight_y_fu_368_filt_grad_z_ce0, grp_gradient_weight_x_fu_386_y_filtered_z_ce0, ap_CS_fsm_state38, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            y_filtered_z_ce0 <= grp_gradient_weight_x_fu_386_y_filtered_z_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            y_filtered_z_ce0 <= grp_gradient_weight_y_fu_368_filt_grad_z_ce0;
        else 
            y_filtered_z_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_filtered_z_we0_assign_proc : process(grp_gradient_weight_y_fu_368_filt_grad_z_we0, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            y_filtered_z_we0 <= grp_gradient_weight_y_fu_368_filt_grad_z_we0;
        else 
            y_filtered_z_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln134_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_545_p3),20));
    zext_ln136_1_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_fu_573_p2),64));
    zext_ln136_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_i9_reg_327),20));
    zext_ln144_1_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln144_fu_603_p2),64));
    zext_ln144_2_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln144_fu_614_p2),64));
    zext_ln144_3_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln144_fu_625_p2),64));
    zext_ln144_4_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln144_1_fu_635_p2),64));
    zext_ln144_5_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln144_2_fu_645_p2),64));
    zext_ln144_6_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln144_3_fu_655_p2),64));
    zext_ln144_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_592_p3),23));
    zext_ln53_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_481_p3),20));
    zext_ln55_1_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln55_fu_509_p2),64));
    zext_ln55_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_i_reg_305),20));
end behav;
