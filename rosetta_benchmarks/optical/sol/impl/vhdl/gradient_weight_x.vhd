-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gradient_weight_x is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    filt_grad_x_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    filt_grad_x_ce0 : OUT STD_LOGIC;
    filt_grad_x_we0 : OUT STD_LOGIC;
    filt_grad_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    filt_grad_y_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    filt_grad_y_ce0 : OUT STD_LOGIC;
    filt_grad_y_we0 : OUT STD_LOGIC;
    filt_grad_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    filt_grad_z_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    filt_grad_z_ce0 : OUT STD_LOGIC;
    filt_grad_z_we0 : OUT STD_LOGIC;
    filt_grad_z_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_filtered_x_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    y_filtered_x_ce0 : OUT STD_LOGIC;
    y_filtered_x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_filtered_y_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    y_filtered_y_ce0 : OUT STD_LOGIC;
    y_filtered_y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_filtered_z_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    y_filtered_z_ce0 : OUT STD_LOGIC;
    y_filtered_z_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of gradient_weight_x is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv11_7FD : STD_LOGIC_VECTOR (10 downto 0) := "11111111101";
    constant ap_const_lv9_1B4 : STD_LOGIC_VECTOR (8 downto 0) := "110110100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_403 : STD_LOGIC_VECTOR (10 downto 0) := "10000000011";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal GRAD_FILTER_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal GRAD_FILTER_ce0 : STD_LOGIC;
    signal GRAD_FILTER_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_fu_291_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_reg_431 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln104_fu_305_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln104_reg_436 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln102_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_315_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_reg_446 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal and_ln110_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln110_reg_451 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_379_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_461 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln112_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_filtered_x_load_reg_486 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal GRAD_FILTER_load_reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_filtered_y_load_reg_498 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_filtered_z_load_reg_503 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_513 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_518 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_251_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_0_reg_178 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_c_0_phi_fu_193_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_0_reg_189 : STD_LOGIC_VECTOR (10 downto 0);
    signal acc_2_0_reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_0_reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_0_0_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_240 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln122_1_fu_362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln120_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln114_2_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln114_1_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_1_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_278_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_fu_297_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_18_fu_327_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln110_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln110_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_278_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln122_fu_353_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln122_1_fu_357_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln112_fu_369_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln114_fu_385_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln114_fu_391_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln114_fu_395_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln118_fu_412_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln118_1_fu_416_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gradient_weight_y_GRAD_FILTER IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    GRAD_FILTER_U : component gradient_weight_y_GRAD_FILTER
    generic map (
        DataWidth => 32,
        AddressRange => 7,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => GRAD_FILTER_address0,
        ce0 => GRAD_FILTER_ce0,
        q0 => GRAD_FILTER_q0);

    optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U29 : component optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => acc_0_0_reg_227,
        din1 => tmp_reg_508,
        ce => ap_const_logic_1,
        dout => grp_fu_251_p2);

    optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U30 : component optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => acc_1_0_reg_214,
        din1 => tmp_s_reg_513,
        ce => ap_const_logic_1,
        dout => grp_fu_256_p2);

    optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U31 : component optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => acc_2_0_reg_201,
        din1 => tmp_2_reg_518,
        ce => ap_const_logic_1,
        dout => grp_fu_261_p2);

    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U32 : component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_filtered_x_load_reg_486,
        din1 => GRAD_FILTER_load_reg_491,
        ce => ap_const_logic_1,
        dout => grp_fu_266_p2);

    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U33 : component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_filtered_y_load_reg_498,
        din1 => GRAD_FILTER_load_reg_491,
        ce => ap_const_logic_1,
        dout => grp_fu_270_p2);

    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U34 : component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_filtered_z_load_reg_503,
        din1 => GRAD_FILTER_load_reg_491,
        ce => ap_const_logic_1,
        dout => grp_fu_274_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    acc_0_0_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln110_fu_341_p2) and (icmp_ln104_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                acc_0_0_reg_227 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                acc_0_0_reg_227 <= grp_fu_251_p2;
            end if; 
        end if;
    end process;

    acc_1_0_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln110_fu_341_p2) and (icmp_ln104_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                acc_1_0_reg_214 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                acc_1_0_reg_214 <= grp_fu_256_p2;
            end if; 
        end if;
    end process;

    acc_2_0_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln110_fu_341_p2) and (icmp_ln104_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                acc_2_0_reg_201 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                acc_2_0_reg_201 <= grp_fu_261_p2;
            end if; 
        end if;
    end process;

    c_0_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln102_fu_285_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_reg_189 <= ap_const_lv11_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and ((ap_const_lv1_0 = and_ln110_reg_451) or (icmp_ln112_fu_373_p2 = ap_const_lv1_1)))) then 
                c_0_reg_189 <= c_reg_446;
            end if; 
        end if;
    end process;

    i_0_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln110_fu_341_p2) and (icmp_ln104_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_240 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_0_reg_240 <= i_reg_461;
            end if; 
        end if;
    end process;

    r_0_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln104_fu_309_p2 = ap_const_lv1_1))) then 
                r_0_reg_178 <= r_reg_431;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_178 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                GRAD_FILTER_load_reg_491 <= GRAD_FILTER_q0;
                y_filtered_x_load_reg_486 <= y_filtered_x_q0;
                y_filtered_y_load_reg_498 <= y_filtered_y_q0;
                y_filtered_z_load_reg_503 <= y_filtered_z_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                and_ln110_reg_451 <= and_ln110_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_446 <= c_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln110_reg_451) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                i_reg_461 <= i_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_reg_431 <= r_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_2_reg_518 <= grp_fu_274_p2;
                tmp_reg_508 <= grp_fu_266_p2;
                tmp_s_reg_513 <= grp_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln102_fu_285_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln104_reg_436(18 downto 10) <= zext_ln104_fu_305_p1(18 downto 10);
            end if;
        end if;
    end process;
    zext_ln104_reg_436(9 downto 0) <= "0000000000";
    zext_ln104_reg_436(19) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln102_fu_285_p2, ap_CS_fsm_state3, and_ln110_reg_451, icmp_ln104_fu_309_p2, ap_CS_fsm_state4, icmp_ln112_fu_373_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln102_fu_285_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln104_fu_309_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((ap_const_lv1_0 = and_ln110_reg_451) or (icmp_ln112_fu_373_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    GRAD_FILTER_address0 <= zext_ln114_1_fu_407_p1(3 - 1 downto 0);

    GRAD_FILTER_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            GRAD_FILTER_ce0 <= ap_const_logic_1;
        else 
            GRAD_FILTER_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln114_fu_395_p2 <= std_logic_vector(unsigned(zext_ln104_reg_436) + unsigned(zext_ln114_fu_391_p1));
    add_ln118_1_fu_416_p2 <= std_logic_vector(unsigned(zext_ln104_reg_436) + unsigned(zext_ln118_fu_412_p1));
    add_ln122_1_fu_357_p2 <= std_logic_vector(unsigned(zext_ln104_reg_436) + unsigned(zext_ln122_fu_353_p1));
    and_ln110_fu_341_p2 <= (xor_ln110_fu_335_p2 and icmp_ln110_fu_321_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln102_fu_285_p2)
    begin
        if ((((icmp_ln102_fu_285_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_c_0_phi_fu_193_p4 <= c_0_reg_189;

    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln102_fu_285_p2)
    begin
        if (((icmp_ln102_fu_285_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_315_p2 <= std_logic_vector(unsigned(c_0_reg_189) + unsigned(ap_const_lv11_1));

    filt_grad_x_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln122_1_fu_362_p1, zext_ln118_1_fu_421_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            filt_grad_x_address0 <= zext_ln118_1_fu_421_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            filt_grad_x_address0 <= zext_ln122_1_fu_362_p1(19 - 1 downto 0);
        else 
            filt_grad_x_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    filt_grad_x_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            filt_grad_x_ce0 <= ap_const_logic_1;
        else 
            filt_grad_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    filt_grad_x_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, acc_0_0_reg_227)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            filt_grad_x_d0 <= acc_0_0_reg_227;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            filt_grad_x_d0 <= ap_const_lv32_0;
        else 
            filt_grad_x_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    filt_grad_x_we0_assign_proc : process(ap_CS_fsm_state3, and_ln110_fu_341_p2, and_ln110_reg_451, icmp_ln104_fu_309_p2, ap_CS_fsm_state4, icmp_ln112_fu_373_p2, icmp_ln120_fu_347_p2)
    begin
        if ((((ap_const_lv1_0 = and_ln110_fu_341_p2) and (icmp_ln104_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln120_fu_347_p2 = ap_const_lv1_1)) or ((ap_const_lv1_1 = and_ln110_reg_451) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln112_fu_373_p2 = ap_const_lv1_1)))) then 
            filt_grad_x_we0 <= ap_const_logic_1;
        else 
            filt_grad_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    filt_grad_y_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln122_1_fu_362_p1, zext_ln118_1_fu_421_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            filt_grad_y_address0 <= zext_ln118_1_fu_421_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            filt_grad_y_address0 <= zext_ln122_1_fu_362_p1(19 - 1 downto 0);
        else 
            filt_grad_y_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    filt_grad_y_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            filt_grad_y_ce0 <= ap_const_logic_1;
        else 
            filt_grad_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    filt_grad_y_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, acc_1_0_reg_214)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            filt_grad_y_d0 <= acc_1_0_reg_214;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            filt_grad_y_d0 <= ap_const_lv32_0;
        else 
            filt_grad_y_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    filt_grad_y_we0_assign_proc : process(ap_CS_fsm_state3, and_ln110_fu_341_p2, and_ln110_reg_451, icmp_ln104_fu_309_p2, ap_CS_fsm_state4, icmp_ln112_fu_373_p2, icmp_ln120_fu_347_p2)
    begin
        if ((((ap_const_lv1_0 = and_ln110_fu_341_p2) and (icmp_ln104_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln120_fu_347_p2 = ap_const_lv1_1)) or ((ap_const_lv1_1 = and_ln110_reg_451) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln112_fu_373_p2 = ap_const_lv1_1)))) then 
            filt_grad_y_we0 <= ap_const_logic_1;
        else 
            filt_grad_y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    filt_grad_z_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln122_1_fu_362_p1, zext_ln118_1_fu_421_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            filt_grad_z_address0 <= zext_ln118_1_fu_421_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            filt_grad_z_address0 <= zext_ln122_1_fu_362_p1(19 - 1 downto 0);
        else 
            filt_grad_z_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    filt_grad_z_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            filt_grad_z_ce0 <= ap_const_logic_1;
        else 
            filt_grad_z_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    filt_grad_z_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, acc_2_0_reg_201)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            filt_grad_z_d0 <= acc_2_0_reg_201;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            filt_grad_z_d0 <= ap_const_lv32_0;
        else 
            filt_grad_z_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    filt_grad_z_we0_assign_proc : process(ap_CS_fsm_state3, and_ln110_fu_341_p2, and_ln110_reg_451, icmp_ln104_fu_309_p2, ap_CS_fsm_state4, icmp_ln112_fu_373_p2, icmp_ln120_fu_347_p2)
    begin
        if ((((ap_const_lv1_0 = and_ln110_fu_341_p2) and (icmp_ln104_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln120_fu_347_p2 = ap_const_lv1_1)) or ((ap_const_lv1_1 = and_ln110_reg_451) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln112_fu_373_p2 = ap_const_lv1_1)))) then 
            filt_grad_z_we0 <= ap_const_logic_1;
        else 
            filt_grad_z_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_278_p0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_phi_mux_c_0_phi_fu_193_p4, c_0_reg_189)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_278_p0 <= c_0_reg_189;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_278_p0 <= ap_phi_mux_c_0_phi_fu_193_p4;
        else 
            grp_fu_278_p0 <= "XXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_278_p2 <= std_logic_vector(unsigned(grp_fu_278_p0) + unsigned(ap_const_lv11_7FD));
    i_fu_379_p2 <= std_logic_vector(unsigned(i_0_reg_240) + unsigned(ap_const_lv3_1));
    icmp_ln102_fu_285_p2 <= "1" when (r_0_reg_178 = ap_const_lv9_1B4) else "0";
    icmp_ln104_fu_309_p2 <= "1" when (c_0_reg_189 = ap_const_lv11_403) else "0";
    icmp_ln110_fu_321_p2 <= "1" when (unsigned(c_0_reg_189) > unsigned(ap_const_lv11_5)) else "0";
    icmp_ln112_fu_373_p2 <= "1" when (i_0_reg_240 = ap_const_lv3_7) else "0";
    icmp_ln120_fu_347_p2 <= "1" when (unsigned(c_0_reg_189) > unsigned(ap_const_lv11_2)) else "0";
    r_fu_291_p2 <= std_logic_vector(unsigned(r_0_reg_178) + unsigned(ap_const_lv9_1));
    sub_ln114_fu_385_p2 <= std_logic_vector(unsigned(c_0_reg_189) - unsigned(zext_ln112_fu_369_p1));
    tmp_18_fu_327_p3 <= c_0_reg_189(10 downto 10);
    tmp_5_fu_297_p3 <= (r_0_reg_178 & ap_const_lv10_0);
    xor_ln110_fu_335_p2 <= (tmp_18_fu_327_p3 xor ap_const_lv1_1);
    y_filtered_x_address0 <= zext_ln114_2_fu_400_p1(19 - 1 downto 0);

    y_filtered_x_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            y_filtered_x_ce0 <= ap_const_logic_1;
        else 
            y_filtered_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_filtered_y_address0 <= zext_ln114_2_fu_400_p1(19 - 1 downto 0);

    y_filtered_y_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            y_filtered_y_ce0 <= ap_const_logic_1;
        else 
            y_filtered_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_filtered_z_address0 <= zext_ln114_2_fu_400_p1(19 - 1 downto 0);

    y_filtered_z_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            y_filtered_z_ce0 <= ap_const_logic_1;
        else 
            y_filtered_z_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln104_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_297_p3),20));
    zext_ln112_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_240),11));
    zext_ln114_1_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_240),64));
    zext_ln114_2_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_fu_395_p2),64));
    zext_ln114_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln114_fu_385_p2),20));
    zext_ln118_1_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln118_1_fu_416_p2),64));
    zext_ln118_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_278_p2),20));
    zext_ln122_1_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln122_1_fu_357_p2),64));
    zext_ln122_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_278_p2),20));
end behav;
