-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gradient_xy_calc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    frame_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    frame_ce0 : OUT STD_LOGIC;
    frame_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    frame_address1 : OUT STD_LOGIC_VECTOR (18 downto 0);
    frame_ce1 : OUT STD_LOGIC;
    frame_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    gradient_x_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    gradient_x_ce0 : OUT STD_LOGIC;
    gradient_x_we0 : OUT STD_LOGIC;
    gradient_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    gradient_y_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    gradient_y_ce0 : OUT STD_LOGIC;
    gradient_y_we0 : OUT STD_LOGIC;
    gradient_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of gradient_xy_calc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_41400000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001010000000000000000000000";
    constant ap_const_lv11_7FE : STD_LOGIC_VECTOR (10 downto 0) := "11111111110";
    constant ap_const_lv9_1B6 : STD_LOGIC_VECTOR (8 downto 0) := "110110110";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv9_1B4 : STD_LOGIC_VECTOR (8 downto 0) := "110110100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_3FE : STD_LOGIC_VECTOR (9 downto 0) := "1111111110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_402 : STD_LOGIC_VECTOR (10 downto 0) := "10000000010";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal GRAD_WEIGHTS_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal GRAD_WEIGHTS_ce0 : STD_LOGIC;
    signal GRAD_WEIGHTS_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_fu_266_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_reg_518 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln34_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_523 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_316_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_1_reg_528 : STD_LOGIC_VECTOR (19 downto 0);
    signal and_ln24_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_reg_535 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_336_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_reg_543 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal and_ln24_2_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_2_reg_548 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln31_fu_419_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln31_reg_555 : STD_LOGIC_VECTOR (19 downto 0);
    signal gradient_x_addr_1_reg_560 : STD_LOGIC_VECTOR (18 downto 0);
    signal gradient_y_addr_1_reg_565 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_fu_448_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_573 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln28_fu_464_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln28_reg_578 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln26_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln29_1_fu_498_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln29_1_reg_588 : STD_LOGIC_VECTOR (19 downto 0);
    signal GRAD_WEIGHTS_load_reg_593 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal frame_load_reg_613 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_247_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_618 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_load_1_reg_624 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_222_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_649 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_0_reg_158 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_0_reg_170 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal y_grad_0_reg_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_grad_0_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_206 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln36_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln34_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln31_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_1_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln28_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_1_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_247_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_272_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_fu_294_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln18_fu_256_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln36_fu_310_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln24_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_1_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_342_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_fu_358_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_2_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln24_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_1_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_383_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln34_1_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_250_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln36_fu_404_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln36_2_fu_408_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln31_fu_423_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln26_1_fu_438_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln28_fu_454_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln28_fu_460_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln28_1_fu_469_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln26_fu_434_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln29_fu_480_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_fu_486_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln29_fu_494_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);

    component optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component optical_flow_sw_fdiv_32ns_32ns_32_9_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component optical_flow_sw_sitofp_32s_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gradient_xy_calc_GRAD_WEIGHTS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    GRAD_WEIGHTS_U : component gradient_xy_calc_GRAD_WEIGHTS
    generic map (
        DataWidth => 5,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => GRAD_WEIGHTS_address0,
        ce0 => GRAD_WEIGHTS_ce0,
        q0 => GRAD_WEIGHTS_q0);

    optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U1 : component optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x_grad_0_reg_194,
        din1 => tmp_8_reg_629,
        ce => ap_const_logic_1,
        dout => grp_fu_217_p2);

    optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U2 : component optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_grad_0_reg_182,
        din1 => tmp_9_reg_634,
        ce => ap_const_logic_1,
        dout => grp_fu_222_p2);

    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U3 : component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => frame_load_reg_613,
        din1 => tmp_7_reg_618,
        ce => ap_const_logic_1,
        dout => grp_fu_227_p2);

    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U4 : component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => frame_load_1_reg_624,
        din1 => tmp_7_reg_618,
        ce => ap_const_logic_1,
        dout => grp_fu_231_p2);

    optical_flow_sw_fdiv_32ns_32ns_32_9_1_U5 : component optical_flow_sw_fdiv_32ns_32ns_32_9_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x_grad_0_reg_194,
        din1 => ap_const_lv32_41400000,
        ce => ap_const_logic_1,
        dout => grp_fu_235_p2);

    optical_flow_sw_fdiv_32ns_32ns_32_9_1_U6 : component optical_flow_sw_fdiv_32ns_32ns_32_9_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_grad_0_reg_182,
        din1 => ap_const_lv32_41400000,
        ce => ap_const_logic_1,
        dout => grp_fu_241_p2);

    optical_flow_sw_sitofp_32s_32_4_1_U7 : component optical_flow_sw_sitofp_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_247_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_247_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_260_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_reg_170 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                c_0_reg_170 <= c_reg_543;
            end if; 
        end if;
    end process;

    i_0_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln24_2_fu_378_p2) and (icmp_ln20_fu_330_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_206 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_0_reg_206 <= i_reg_573;
            end if; 
        end if;
    end process;

    r_0_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln20_fu_330_p2 = ap_const_lv1_1))) then 
                r_0_reg_158 <= r_reg_518;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_158 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    x_grad_0_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln24_2_fu_378_p2) and (icmp_ln20_fu_330_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_grad_0_reg_194 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                x_grad_0_reg_194 <= grp_fu_217_p2;
            end if; 
        end if;
    end process;

    y_grad_0_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln24_2_fu_378_p2) and (icmp_ln20_fu_330_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                y_grad_0_reg_182 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                y_grad_0_reg_182 <= grp_fu_222_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                GRAD_WEIGHTS_load_reg_593 <= GRAD_WEIGHTS_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_442_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln28_reg_578 <= add_ln28_fu_464_p2;
                add_ln29_1_reg_588 <= add_ln29_1_fu_498_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_330_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                and_ln24_2_reg_548 <= and_ln24_2_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_260_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                and_ln24_reg_535 <= and_ln24_fu_324_p2;
                icmp_ln34_reg_523 <= icmp_ln34_fu_304_p2;
                    tmp_1_reg_528(19 downto 10) <= tmp_1_fu_316_p3(19 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_543 <= c_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                frame_load_1_reg_624 <= frame_q1;
                frame_load_reg_613 <= frame_q0;
                tmp_7_reg_618 <= grp_fu_247_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln24_2_fu_378_p2) and (icmp_ln20_fu_330_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                gradient_x_addr_1_reg_560 <= sext_ln31_fu_428_p1(19 - 1 downto 0);
                gradient_y_addr_1_reg_565 <= sext_ln31_fu_428_p1(19 - 1 downto 0);
                    zext_ln31_reg_555(10 downto 0) <= zext_ln31_fu_419_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_573 <= i_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_reg_518 <= r_fu_266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_8_reg_629 <= grp_fu_227_p2;
                tmp_9_reg_634 <= grp_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                tmp_reg_649 <= grp_fu_235_p2;
                tmp_s_reg_654 <= grp_fu_241_p2;
            end if;
        end if;
    end process;
    tmp_1_reg_528(9 downto 0) <= "0000000000";
    zext_ln31_reg_555(19 downto 11) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln18_fu_260_p2, ap_CS_fsm_state3, and_ln24_2_fu_378_p2, icmp_ln20_fu_330_p2, ap_CS_fsm_state4, icmp_ln26_fu_442_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln18_fu_260_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln20_fu_330_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_lv1_1 = and_ln24_2_fu_378_p2) and (icmp_ln20_fu_330_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln26_fu_442_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    GRAD_WEIGHTS_address0 <= zext_ln28_1_fu_475_p1(3 - 1 downto 0);

    GRAD_WEIGHTS_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            GRAD_WEIGHTS_ce0 <= ap_const_logic_1;
        else 
            GRAD_WEIGHTS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln28_fu_464_p2 <= std_logic_vector(unsigned(zext_ln28_fu_460_p1) + unsigned(tmp_1_reg_528));
    add_ln29_1_fu_498_p2 <= std_logic_vector(unsigned(zext_ln31_reg_555) + unsigned(zext_ln29_fu_494_p1));
    add_ln31_fu_423_p2 <= std_logic_vector(unsigned(tmp_1_reg_528) + unsigned(zext_ln31_fu_419_p1));
    add_ln36_2_fu_408_p2 <= std_logic_vector(unsigned(tmp_1_reg_528) + unsigned(zext_ln36_fu_404_p1));
    add_ln36_fu_310_p2 <= std_logic_vector(unsigned(zext_ln18_fu_256_p1) + unsigned(ap_const_lv10_3FE));
    and_ln24_1_fu_372_p2 <= (xor_ln24_fu_366_p2 and icmp_ln24_2_fu_352_p2);
    and_ln24_2_fu_378_p2 <= (and_ln24_reg_535 and and_ln24_1_fu_372_p2);
    and_ln24_fu_324_p2 <= (icmp_ln24_fu_282_p2 and icmp_ln24_1_fu_288_p2);
    and_ln34_fu_399_p2 <= (icmp_ln34_reg_523 and icmp_ln34_1_fu_393_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln18_fu_260_p2)
    begin
        if ((((icmp_ln18_fu_260_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln18_fu_260_p2)
    begin
        if (((icmp_ln18_fu_260_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_336_p2 <= std_logic_vector(unsigned(c_0_reg_170) + unsigned(ap_const_lv11_1));
    frame_address0 <= sext_ln28_fu_507_p1(19 - 1 downto 0);
    frame_address1 <= zext_ln29_1_fu_511_p1(19 - 1 downto 0);

    frame_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            frame_ce0 <= ap_const_logic_1;
        else 
            frame_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    frame_ce1_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            frame_ce1 <= ap_const_logic_1;
        else 
            frame_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    gradient_x_address0_assign_proc : process(ap_CS_fsm_state3, gradient_x_addr_1_reg_560, ap_CS_fsm_state25, sext_ln36_fu_413_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            gradient_x_address0 <= gradient_x_addr_1_reg_560;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gradient_x_address0 <= sext_ln36_fu_413_p1(19 - 1 downto 0);
        else 
            gradient_x_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gradient_x_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            gradient_x_ce0 <= ap_const_logic_1;
        else 
            gradient_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gradient_x_d0_assign_proc : process(ap_CS_fsm_state3, tmp_reg_649, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            gradient_x_d0 <= tmp_reg_649;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gradient_x_d0 <= ap_const_lv32_0;
        else 
            gradient_x_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gradient_x_we0_assign_proc : process(ap_CS_fsm_state3, and_ln24_2_fu_378_p2, and_ln24_2_reg_548, icmp_ln20_fu_330_p2, ap_CS_fsm_state25, and_ln34_fu_399_p2)
    begin
        if ((((ap_const_lv1_0 = and_ln24_2_fu_378_p2) and (icmp_ln20_fu_330_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln34_fu_399_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_lv1_1 = and_ln24_2_reg_548)))) then 
            gradient_x_we0 <= ap_const_logic_1;
        else 
            gradient_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    gradient_y_address0_assign_proc : process(ap_CS_fsm_state3, gradient_y_addr_1_reg_565, ap_CS_fsm_state25, sext_ln36_fu_413_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            gradient_y_address0 <= gradient_y_addr_1_reg_565;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gradient_y_address0 <= sext_ln36_fu_413_p1(19 - 1 downto 0);
        else 
            gradient_y_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gradient_y_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            gradient_y_ce0 <= ap_const_logic_1;
        else 
            gradient_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gradient_y_d0_assign_proc : process(ap_CS_fsm_state3, tmp_s_reg_654, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            gradient_y_d0 <= tmp_s_reg_654;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gradient_y_d0 <= ap_const_lv32_0;
        else 
            gradient_y_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gradient_y_we0_assign_proc : process(ap_CS_fsm_state3, and_ln24_2_fu_378_p2, and_ln24_2_reg_548, icmp_ln20_fu_330_p2, ap_CS_fsm_state25, and_ln34_fu_399_p2)
    begin
        if ((((ap_const_lv1_0 = and_ln24_2_fu_378_p2) and (icmp_ln20_fu_330_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln34_fu_399_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_lv1_1 = and_ln24_2_reg_548)))) then 
            gradient_y_we0 <= ap_const_logic_1;
        else 
            gradient_y_we0 <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_247_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(GRAD_WEIGHTS_load_reg_593),32));

    grp_fu_250_p2 <= std_logic_vector(unsigned(c_0_reg_170) + unsigned(ap_const_lv11_7FE));
    i_fu_448_p2 <= std_logic_vector(unsigned(i_0_reg_206) + unsigned(ap_const_lv3_1));
    icmp_ln18_fu_260_p2 <= "1" when (r_0_reg_158 = ap_const_lv9_1B6) else "0";
    icmp_ln20_fu_330_p2 <= "1" when (c_0_reg_170 = ap_const_lv11_402) else "0";
    icmp_ln24_1_fu_288_p2 <= "1" when (unsigned(r_0_reg_158) < unsigned(ap_const_lv9_1B4)) else "0";
    icmp_ln24_2_fu_352_p2 <= "0" when (tmp_14_fu_342_p4 = ap_const_lv9_0) else "1";
    icmp_ln24_fu_282_p2 <= "0" when (tmp_12_fu_272_p4 = ap_const_lv7_0) else "1";
    icmp_ln26_fu_442_p2 <= "1" when (i_0_reg_206 = ap_const_lv3_5) else "0";
    icmp_ln34_1_fu_393_p2 <= "0" when (tmp_17_fu_383_p4 = ap_const_lv10_0) else "1";
    icmp_ln34_fu_304_p2 <= "0" when (tmp_13_fu_294_p4 = ap_const_lv8_0) else "1";
    r_fu_266_p2 <= std_logic_vector(unsigned(r_0_reg_158) + unsigned(ap_const_lv9_1));
        sext_ln28_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln28_reg_578),64));

        sext_ln31_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln31_fu_423_p2),64));

        sext_ln36_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln36_2_fu_408_p2),64));

    sub_ln28_1_fu_469_p2 <= std_logic_vector(signed(ap_const_lv3_4) - signed(i_0_reg_206));
    sub_ln28_fu_454_p2 <= std_logic_vector(unsigned(c_0_reg_170) - unsigned(zext_ln26_1_fu_438_p1));
    sub_ln29_fu_480_p2 <= std_logic_vector(unsigned(r_0_reg_158) - unsigned(zext_ln26_fu_434_p1));
    tmp_12_fu_272_p4 <= r_0_reg_158(8 downto 2);
    tmp_13_fu_294_p4 <= r_0_reg_158(8 downto 1);
    tmp_14_fu_342_p4 <= c_0_reg_170(10 downto 2);
    tmp_16_fu_358_p3 <= c_0_reg_170(10 downto 10);
    tmp_17_fu_383_p4 <= c_0_reg_170(10 downto 1);
    tmp_1_fu_316_p3 <= (add_ln36_fu_310_p2 & ap_const_lv10_0);
    tmp_2_fu_486_p3 <= (sub_ln29_fu_480_p2 & ap_const_lv10_0);
    xor_ln24_fu_366_p2 <= (tmp_16_fu_358_p3 xor ap_const_lv1_1);
    zext_ln18_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_reg_158),10));
    zext_ln26_1_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_206),11));
    zext_ln26_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_206),9));
    zext_ln28_1_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln28_1_fu_469_p2),64));
    zext_ln28_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln28_fu_454_p2),20));
    zext_ln29_1_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_1_reg_588),64));
    zext_ln29_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_486_p3),20));
    zext_ln31_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_250_p2),20));
    zext_ln36_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_250_p2),20));
end behav;
