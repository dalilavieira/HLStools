// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "tensor_weight_x.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic tensor_weight_x::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic tensor_weight_x::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<20> tensor_weight_x::ap_ST_fsm_state1 = "1";
const sc_lv<20> tensor_weight_x::ap_ST_fsm_state2 = "10";
const sc_lv<20> tensor_weight_x::ap_ST_fsm_state3 = "100";
const sc_lv<20> tensor_weight_x::ap_ST_fsm_state4 = "1000";
const sc_lv<20> tensor_weight_x::ap_ST_fsm_state5 = "10000";
const sc_lv<20> tensor_weight_x::ap_ST_fsm_state6 = "100000";
const sc_lv<20> tensor_weight_x::ap_ST_fsm_state7 = "1000000";
const sc_lv<20> tensor_weight_x::ap_ST_fsm_state8 = "10000000";
const sc_lv<20> tensor_weight_x::ap_ST_fsm_state9 = "100000000";
const sc_lv<20> tensor_weight_x::ap_ST_fsm_state10 = "1000000000";
const sc_lv<20> tensor_weight_x::ap_ST_fsm_state11 = "10000000000";
const sc_lv<20> tensor_weight_x::ap_ST_fsm_state12 = "100000000000";
const sc_lv<20> tensor_weight_x::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<20> tensor_weight_x::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<20> tensor_weight_x::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<20> tensor_weight_x::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<20> tensor_weight_x::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<20> tensor_weight_x::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<20> tensor_weight_x::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<20> tensor_weight_x::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<32> tensor_weight_x::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> tensor_weight_x::ap_const_lv32_B = "1011";
const sc_lv<32> tensor_weight_x::ap_const_lv32_11 = "10001";
const sc_lv<32> tensor_weight_x::ap_const_lv32_1 = "1";
const sc_lv<1> tensor_weight_x::ap_const_lv1_0 = "0";
const sc_lv<32> tensor_weight_x::ap_const_lv32_2 = "10";
const sc_lv<32> tensor_weight_x::ap_const_lv32_3 = "11";
const sc_lv<1> tensor_weight_x::ap_const_lv1_1 = "1";
const sc_lv<32> tensor_weight_x::ap_const_lv32_4 = "100";
const sc_lv<32> tensor_weight_x::ap_const_lv32_5 = "101";
const sc_lv<32> tensor_weight_x::ap_const_lv32_8 = "1000";
const sc_lv<32> tensor_weight_x::ap_const_lv32_A = "1010";
const sc_lv<32> tensor_weight_x::ap_const_lv32_F = "1111";
const sc_lv<32> tensor_weight_x::ap_const_lv32_12 = "10010";
const sc_lv<9> tensor_weight_x::ap_const_lv9_0 = "000000000";
const sc_lv<32> tensor_weight_x::ap_const_lv32_13 = "10011";
const sc_lv<11> tensor_weight_x::ap_const_lv11_0 = "00000000000";
const sc_lv<3> tensor_weight_x::ap_const_lv3_0 = "000";
const sc_lv<2> tensor_weight_x::ap_const_lv2_0 = "00";
const sc_lv<32> tensor_weight_x::ap_const_lv32_10 = "10000";
const sc_lv<64> tensor_weight_x::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> tensor_weight_x::ap_const_lv64_1 = "1";
const sc_lv<64> tensor_weight_x::ap_const_lv64_3 = "11";
const sc_lv<64> tensor_weight_x::ap_const_lv64_4 = "100";
const sc_lv<64> tensor_weight_x::ap_const_lv64_5 = "101";
const sc_lv<32> tensor_weight_x::ap_const_lv32_6 = "110";
const sc_lv<32> tensor_weight_x::ap_const_lv32_7 = "111";
const sc_lv<32> tensor_weight_x::ap_const_lv32_C = "1100";
const sc_lv<32> tensor_weight_x::ap_const_lv32_9 = "1001";
const sc_lv<9> tensor_weight_x::ap_const_lv9_1B4 = "110110100";
const sc_lv<9> tensor_weight_x::ap_const_lv9_1 = "1";
const sc_lv<10> tensor_weight_x::ap_const_lv10_0 = "0000000000";
const sc_lv<11> tensor_weight_x::ap_const_lv11_401 = "10000000001";
const sc_lv<11> tensor_weight_x::ap_const_lv11_1 = "1";
const sc_lv<3> tensor_weight_x::ap_const_lv3_6 = "110";
const sc_lv<3> tensor_weight_x::ap_const_lv3_1 = "1";
const sc_lv<2> tensor_weight_x::ap_const_lv2_3 = "11";
const sc_lv<2> tensor_weight_x::ap_const_lv2_1 = "1";
const sc_lv<32> tensor_weight_x::ap_const_lv32_3EB3DD98 = "111110101100111101110110011000";
const sc_lv<32> tensor_weight_x::ap_const_lv32_3EA60AA6 = "111110101001100000101010100110";
const sc_lv<11> tensor_weight_x::ap_const_lv11_7FF = "11111111111";
const bool tensor_weight_x::ap_const_boolean_1 = true;

tensor_weight_x::tensor_weight_x(sc_module_name name) : sc_module(name), mVcdFile(0) {
    acc_val_U = new tensor_weight_y_acc_val("acc_val_U");
    acc_val_U->clk(ap_clk);
    acc_val_U->reset(ap_rst);
    acc_val_U->address0(acc_val_address0);
    acc_val_U->ce0(acc_val_ce0);
    acc_val_U->we0(acc_val_we0);
    acc_val_U->d0(acc_val_d0);
    acc_val_U->q0(acc_val_q0);
    acc_val_U->address1(acc_val_address1);
    acc_val_U->ce1(acc_val_ce1);
    acc_val_U->q1(acc_val_q1);
    optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U46 = new optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1<1,4,32,32,32>("optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U46");
    optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U46->clk(ap_clk);
    optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U46->reset(ap_rst);
    optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U46->din0(reg_295);
    optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U46->din1(tmp_reg_622);
    optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U46->ce(ap_var_for_const0);
    optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U46->dout(grp_fu_287_p2);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U47 = new optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1<1,3,32,32,32>("optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U47");
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U47->clk(ap_clk);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U47->reset(ap_rst);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U47->din0(tensor_y_val_load_reg_612);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U47->din1(select_ln7_reg_585);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U47->ce(ap_var_for_const0);
    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U47->dout(grp_fu_291_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_acc_val_address0);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( acc_val_addr_13_reg_617 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( zext_ln192_fu_349_p1 );
    sensitive << ( zext_ln200_1_fu_502_p1 );

    SC_METHOD(thread_acc_val_address1);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_acc_val_ce0);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_acc_val_ce1);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_acc_val_d0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_2_reg_627 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_acc_val_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln190_fu_337_p2 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_add_ln200_1_fu_492_p2);
    sensitive << ( sub_ln200_1_reg_580 );
    sensitive << ( zext_ln200_3_fu_488_p1 );

    SC_METHOD(thread_add_ln200_fu_410_p2);
    sensitive << ( zext_ln187_reg_546 );
    sensitive << ( zext_ln200_fu_406_p1 );

    SC_METHOD(thread_add_ln206_1_fu_471_p2);
    sensitive << ( zext_ln187_reg_546 );
    sensitive << ( zext_ln206_fu_467_p1 );

    SC_METHOD(thread_add_ln206_fu_461_p2);
    sensitive << ( c_0_reg_241 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln185_fu_301_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln185_fu_301_p2 );

    SC_METHOD(thread_c_fu_331_p2);
    sensitive << ( c_0_reg_241 );

    SC_METHOD(thread_component_fu_482_p2);
    sensitive << ( component_0_reg_275 );

    SC_METHOD(thread_i_fu_394_p2);
    sensitive << ( i_0_reg_264 );

    SC_METHOD(thread_icmp_ln185_fu_301_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( r_0_reg_230 );

    SC_METHOD(thread_icmp_ln187_fu_325_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( c_0_reg_241 );

    SC_METHOD(thread_icmp_ln190_fu_337_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( k_0_reg_253 );

    SC_METHOD(thread_icmp_ln194_fu_364_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln190_fu_337_p2 );
    sensitive << ( tmp_7_fu_354_p4 );

    SC_METHOD(thread_icmp_ln196_fu_388_p2);
    sensitive << ( or_ln194_reg_568 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( i_0_reg_264 );

    SC_METHOD(thread_icmp_ln198_fu_476_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( component_0_reg_275 );

    SC_METHOD(thread_icmp_ln204_fu_455_p2);
    sensitive << ( or_ln194_reg_568 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln196_fu_388_p2 );
    sensitive << ( c_0_reg_241 );

    SC_METHOD(thread_icmp_ln7_fu_441_p2);
    sensitive << ( or_ln194_reg_568 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln196_fu_388_p2 );
    sensitive << ( i_0_reg_264 );

    SC_METHOD(thread_k_fu_343_p2);
    sensitive << ( k_0_reg_253 );

    SC_METHOD(thread_or_ln194_fu_378_p2);
    sensitive << ( tmp_9_fu_370_p3 );
    sensitive << ( icmp_ln194_fu_364_p2 );

    SC_METHOD(thread_p_shl_cast_fu_415_p3);
    sensitive << ( add_ln200_fu_410_p2 );

    SC_METHOD(thread_r_fu_307_p2);
    sensitive << ( r_0_reg_230 );

    SC_METHOD(thread_select_ln7_fu_447_p3);
    sensitive << ( icmp_ln7_fu_441_p2 );

    SC_METHOD(thread_sub_ln200_1_fu_435_p2);
    sensitive << ( p_shl_cast_fu_415_p3 );
    sensitive << ( zext_ln200_2_fu_431_p1 );

    SC_METHOD(thread_sub_ln200_fu_400_p2);
    sensitive << ( c_0_reg_241 );
    sensitive << ( zext_ln196_fu_384_p1 );

    SC_METHOD(thread_tensor_0_val_address0);
    sensitive << ( zext_ln206_1_fu_507_p1 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_tensor_0_val_ce0);
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_tensor_0_val_d0);
    sensitive << ( reg_295 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_tensor_0_val_we0);
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_tensor_1_val_address0);
    sensitive << ( zext_ln206_1_fu_507_p1 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_tensor_1_val_ce0);
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_tensor_1_val_d0);
    sensitive << ( acc_val_q0 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_tensor_1_val_we0);
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_tensor_3_val_address0);
    sensitive << ( zext_ln206_1_fu_507_p1 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_tensor_3_val_ce0);
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_tensor_3_val_d0);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( acc_val_q1 );

    SC_METHOD(thread_tensor_3_val_we0);
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_tensor_4_val_address0);
    sensitive << ( zext_ln206_1_reg_632 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_tensor_4_val_ce0);
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_tensor_4_val_d0);
    sensitive << ( acc_val_q1 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_tensor_4_val_we0);
    sensitive << ( icmp_ln204_reg_590 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_tensor_5_val_address0);
    sensitive << ( zext_ln206_1_reg_632 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_tensor_5_val_ce0);
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_tensor_5_val_d0);
    sensitive << ( acc_val_q0 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_tensor_5_val_we0);
    sensitive << ( icmp_ln204_reg_590 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_tensor_y_val_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln200_4_fu_497_p1 );

    SC_METHOD(thread_tensor_y_val_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_tmp_10_fu_423_p3);
    sensitive << ( add_ln200_fu_410_p2 );

    SC_METHOD(thread_tmp_7_fu_354_p4);
    sensitive << ( c_0_reg_241 );

    SC_METHOD(thread_tmp_8_fu_313_p3);
    sensitive << ( r_0_reg_230 );

    SC_METHOD(thread_tmp_9_fu_370_p3);
    sensitive << ( c_0_reg_241 );

    SC_METHOD(thread_zext_ln187_fu_321_p1);
    sensitive << ( tmp_8_fu_313_p3 );

    SC_METHOD(thread_zext_ln192_fu_349_p1);
    sensitive << ( k_0_reg_253 );

    SC_METHOD(thread_zext_ln196_fu_384_p1);
    sensitive << ( i_0_reg_264 );

    SC_METHOD(thread_zext_ln200_1_fu_502_p1);
    sensitive << ( component_0_reg_275 );

    SC_METHOD(thread_zext_ln200_2_fu_431_p1);
    sensitive << ( tmp_10_fu_423_p3 );

    SC_METHOD(thread_zext_ln200_3_fu_488_p1);
    sensitive << ( component_0_reg_275 );

    SC_METHOD(thread_zext_ln200_4_fu_497_p1);
    sensitive << ( add_ln200_1_fu_492_p2 );

    SC_METHOD(thread_zext_ln200_fu_406_p1);
    sensitive << ( sub_ln200_fu_400_p2 );

    SC_METHOD(thread_zext_ln206_1_fu_507_p1);
    sensitive << ( add_ln206_1_reg_594 );

    SC_METHOD(thread_zext_ln206_fu_467_p1);
    sensitive << ( add_ln206_fu_461_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln185_fu_301_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( or_ln194_reg_568 );
    sensitive << ( icmp_ln190_fu_337_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln196_fu_388_p2 );
    sensitive << ( icmp_ln204_fu_455_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln198_fu_476_p2 );
    sensitive << ( icmp_ln187_fu_325_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "tensor_weight_x_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, tensor_0_val_address0, "(port)tensor_0_val_address0");
    sc_trace(mVcdFile, tensor_0_val_ce0, "(port)tensor_0_val_ce0");
    sc_trace(mVcdFile, tensor_0_val_we0, "(port)tensor_0_val_we0");
    sc_trace(mVcdFile, tensor_0_val_d0, "(port)tensor_0_val_d0");
    sc_trace(mVcdFile, tensor_1_val_address0, "(port)tensor_1_val_address0");
    sc_trace(mVcdFile, tensor_1_val_ce0, "(port)tensor_1_val_ce0");
    sc_trace(mVcdFile, tensor_1_val_we0, "(port)tensor_1_val_we0");
    sc_trace(mVcdFile, tensor_1_val_d0, "(port)tensor_1_val_d0");
    sc_trace(mVcdFile, tensor_3_val_address0, "(port)tensor_3_val_address0");
    sc_trace(mVcdFile, tensor_3_val_ce0, "(port)tensor_3_val_ce0");
    sc_trace(mVcdFile, tensor_3_val_we0, "(port)tensor_3_val_we0");
    sc_trace(mVcdFile, tensor_3_val_d0, "(port)tensor_3_val_d0");
    sc_trace(mVcdFile, tensor_4_val_address0, "(port)tensor_4_val_address0");
    sc_trace(mVcdFile, tensor_4_val_ce0, "(port)tensor_4_val_ce0");
    sc_trace(mVcdFile, tensor_4_val_we0, "(port)tensor_4_val_we0");
    sc_trace(mVcdFile, tensor_4_val_d0, "(port)tensor_4_val_d0");
    sc_trace(mVcdFile, tensor_5_val_address0, "(port)tensor_5_val_address0");
    sc_trace(mVcdFile, tensor_5_val_ce0, "(port)tensor_5_val_ce0");
    sc_trace(mVcdFile, tensor_5_val_we0, "(port)tensor_5_val_we0");
    sc_trace(mVcdFile, tensor_5_val_d0, "(port)tensor_5_val_d0");
    sc_trace(mVcdFile, tensor_y_val_address0, "(port)tensor_y_val_address0");
    sc_trace(mVcdFile, tensor_y_val_ce0, "(port)tensor_y_val_ce0");
    sc_trace(mVcdFile, tensor_y_val_q0, "(port)tensor_y_val_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, acc_val_q0, "acc_val_q0");
    sc_trace(mVcdFile, reg_295, "reg_295");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, r_fu_307_p2, "r_fu_307_p2");
    sc_trace(mVcdFile, r_reg_541, "r_reg_541");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln187_fu_321_p1, "zext_ln187_fu_321_p1");
    sc_trace(mVcdFile, zext_ln187_reg_546, "zext_ln187_reg_546");
    sc_trace(mVcdFile, icmp_ln185_fu_301_p2, "icmp_ln185_fu_301_p2");
    sc_trace(mVcdFile, c_fu_331_p2, "c_fu_331_p2");
    sc_trace(mVcdFile, c_reg_555, "c_reg_555");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, k_fu_343_p2, "k_fu_343_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, or_ln194_fu_378_p2, "or_ln194_fu_378_p2");
    sc_trace(mVcdFile, or_ln194_reg_568, "or_ln194_reg_568");
    sc_trace(mVcdFile, icmp_ln190_fu_337_p2, "icmp_ln190_fu_337_p2");
    sc_trace(mVcdFile, i_fu_394_p2, "i_fu_394_p2");
    sc_trace(mVcdFile, i_reg_575, "i_reg_575");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, sub_ln200_1_fu_435_p2, "sub_ln200_1_fu_435_p2");
    sc_trace(mVcdFile, sub_ln200_1_reg_580, "sub_ln200_1_reg_580");
    sc_trace(mVcdFile, icmp_ln196_fu_388_p2, "icmp_ln196_fu_388_p2");
    sc_trace(mVcdFile, select_ln7_fu_447_p3, "select_ln7_fu_447_p3");
    sc_trace(mVcdFile, select_ln7_reg_585, "select_ln7_reg_585");
    sc_trace(mVcdFile, icmp_ln204_fu_455_p2, "icmp_ln204_fu_455_p2");
    sc_trace(mVcdFile, icmp_ln204_reg_590, "icmp_ln204_reg_590");
    sc_trace(mVcdFile, add_ln206_1_fu_471_p2, "add_ln206_1_fu_471_p2");
    sc_trace(mVcdFile, add_ln206_1_reg_594, "add_ln206_1_reg_594");
    sc_trace(mVcdFile, component_fu_482_p2, "component_fu_482_p2");
    sc_trace(mVcdFile, component_reg_602, "component_reg_602");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, icmp_ln198_fu_476_p2, "icmp_ln198_fu_476_p2");
    sc_trace(mVcdFile, tensor_y_val_load_reg_612, "tensor_y_val_load_reg_612");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, acc_val_addr_13_reg_617, "acc_val_addr_13_reg_617");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, grp_fu_291_p2, "grp_fu_291_p2");
    sc_trace(mVcdFile, tmp_reg_622, "tmp_reg_622");
    sc_trace(mVcdFile, grp_fu_287_p2, "grp_fu_287_p2");
    sc_trace(mVcdFile, tmp_2_reg_627, "tmp_2_reg_627");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, zext_ln206_1_fu_507_p1, "zext_ln206_1_fu_507_p1");
    sc_trace(mVcdFile, zext_ln206_1_reg_632, "zext_ln206_1_reg_632");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, acc_val_address0, "acc_val_address0");
    sc_trace(mVcdFile, acc_val_ce0, "acc_val_ce0");
    sc_trace(mVcdFile, acc_val_we0, "acc_val_we0");
    sc_trace(mVcdFile, acc_val_d0, "acc_val_d0");
    sc_trace(mVcdFile, acc_val_address1, "acc_val_address1");
    sc_trace(mVcdFile, acc_val_ce1, "acc_val_ce1");
    sc_trace(mVcdFile, acc_val_q1, "acc_val_q1");
    sc_trace(mVcdFile, r_0_reg_230, "r_0_reg_230");
    sc_trace(mVcdFile, icmp_ln187_fu_325_p2, "icmp_ln187_fu_325_p2");
    sc_trace(mVcdFile, c_0_reg_241, "c_0_reg_241");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, k_0_reg_253, "k_0_reg_253");
    sc_trace(mVcdFile, i_0_reg_264, "i_0_reg_264");
    sc_trace(mVcdFile, component_0_reg_275, "component_0_reg_275");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, zext_ln192_fu_349_p1, "zext_ln192_fu_349_p1");
    sc_trace(mVcdFile, zext_ln200_4_fu_497_p1, "zext_ln200_4_fu_497_p1");
    sc_trace(mVcdFile, zext_ln200_1_fu_502_p1, "zext_ln200_1_fu_502_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, tmp_8_fu_313_p3, "tmp_8_fu_313_p3");
    sc_trace(mVcdFile, tmp_7_fu_354_p4, "tmp_7_fu_354_p4");
    sc_trace(mVcdFile, tmp_9_fu_370_p3, "tmp_9_fu_370_p3");
    sc_trace(mVcdFile, icmp_ln194_fu_364_p2, "icmp_ln194_fu_364_p2");
    sc_trace(mVcdFile, zext_ln196_fu_384_p1, "zext_ln196_fu_384_p1");
    sc_trace(mVcdFile, sub_ln200_fu_400_p2, "sub_ln200_fu_400_p2");
    sc_trace(mVcdFile, zext_ln200_fu_406_p1, "zext_ln200_fu_406_p1");
    sc_trace(mVcdFile, add_ln200_fu_410_p2, "add_ln200_fu_410_p2");
    sc_trace(mVcdFile, tmp_10_fu_423_p3, "tmp_10_fu_423_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_415_p3, "p_shl_cast_fu_415_p3");
    sc_trace(mVcdFile, zext_ln200_2_fu_431_p1, "zext_ln200_2_fu_431_p1");
    sc_trace(mVcdFile, icmp_ln7_fu_441_p2, "icmp_ln7_fu_441_p2");
    sc_trace(mVcdFile, add_ln206_fu_461_p2, "add_ln206_fu_461_p2");
    sc_trace(mVcdFile, zext_ln206_fu_467_p1, "zext_ln206_fu_467_p1");
    sc_trace(mVcdFile, zext_ln200_3_fu_488_p1, "zext_ln200_3_fu_488_p1");
    sc_trace(mVcdFile, add_ln200_1_fu_492_p2, "add_ln200_1_fu_492_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

tensor_weight_x::~tensor_weight_x() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete acc_val_U;
    delete optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U46;
    delete optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U47;
}

void tensor_weight_x::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void tensor_weight_x::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln185_fu_301_p2.read(), ap_const_lv1_0))) {
        c_0_reg_241 = ap_const_lv11_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        c_0_reg_241 = c_reg_555.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, or_ln194_reg_568.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln196_fu_388_p2.read()))) {
        component_0_reg_275 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        component_0_reg_275 = component_reg_602.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln190_fu_337_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, or_ln194_fu_378_p2.read()))) {
        i_0_reg_264 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln198_fu_476_p2.read()))) {
        i_0_reg_264 = i_reg_575.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln187_fu_325_p2.read()))) {
        k_0_reg_253 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln190_fu_337_p2.read()))) {
        k_0_reg_253 = k_fu_343_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln187_fu_325_p2.read()))) {
        r_0_reg_230 = r_reg_541.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        r_0_reg_230 = ap_const_lv9_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        acc_val_addr_13_reg_617 =  (sc_lv<3>) (zext_ln200_1_fu_502_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && ((esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln196_fu_388_p2.read()) && 
   esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln204_fu_455_p2.read())) || 
  (esl_seteq<1,1,1>(or_ln194_reg_568.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln204_fu_455_p2.read()))))) {
        add_ln206_1_reg_594 = add_ln206_1_fu_471_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        c_reg_555 = c_fu_331_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        component_reg_602 = component_fu_482_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, or_ln194_reg_568.read()))) {
        i_reg_575 = i_fu_394_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln196_fu_388_p2.read()) || 
  esl_seteq<1,1,1>(or_ln194_reg_568.read(), ap_const_lv1_1)))) {
        icmp_ln204_reg_590 = icmp_ln204_fu_455_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln190_fu_337_p2.read(), ap_const_lv1_1))) {
        or_ln194_reg_568 = or_ln194_fu_378_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        r_reg_541 = r_fu_307_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()))) {
        reg_295 = acc_val_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, or_ln194_reg_568.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln196_fu_388_p2.read()))) {
        select_ln7_reg_585 = select_ln7_fu_447_p3.read();
        sub_ln200_1_reg_580 = sub_ln200_1_fu_435_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        tensor_y_val_load_reg_612 = tensor_y_val_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        tmp_2_reg_627 = grp_fu_287_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        tmp_reg_622 = grp_fu_291_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln185_fu_301_p2.read(), ap_const_lv1_0))) {
        zext_ln187_reg_546 = zext_ln187_fu_321_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        zext_ln206_1_reg_632 = zext_ln206_1_fu_507_p1.read();
    }
}

void tensor_weight_x::thread_acc_val_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        acc_val_address0 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        acc_val_address0 =  (sc_lv<3>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        acc_val_address0 = acc_val_addr_13_reg_617.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        acc_val_address0 =  (sc_lv<3>) (zext_ln200_1_fu_502_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        acc_val_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        acc_val_address0 =  (sc_lv<3>) (zext_ln192_fu_349_p1.read());
    } else {
        acc_val_address0 = "XXX";
    }
}

void tensor_weight_x::thread_acc_val_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        acc_val_address1 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        acc_val_address1 =  (sc_lv<3>) (ap_const_lv64_3);
    } else {
        acc_val_address1 = "XXX";
    }
}

void tensor_weight_x::thread_acc_val_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        acc_val_ce0 = ap_const_logic_1;
    } else {
        acc_val_ce0 = ap_const_logic_0;
    }
}

void tensor_weight_x::thread_acc_val_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
        acc_val_ce1 = ap_const_logic_1;
    } else {
        acc_val_ce1 = ap_const_logic_0;
    }
}

void tensor_weight_x::thread_acc_val_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        acc_val_d0 = tmp_2_reg_627.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        acc_val_d0 = ap_const_lv32_0;
    } else {
        acc_val_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void tensor_weight_x::thread_acc_val_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln190_fu_337_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        acc_val_we0 = ap_const_logic_1;
    } else {
        acc_val_we0 = ap_const_logic_0;
    }
}

void tensor_weight_x::thread_add_ln200_1_fu_492_p2() {
    add_ln200_1_fu_492_p2 = (!sub_ln200_1_reg_580.read().is_01() || !zext_ln200_3_fu_488_p1.read().is_01())? sc_lv<23>(): (sc_biguint<23>(sub_ln200_1_reg_580.read()) + sc_biguint<23>(zext_ln200_3_fu_488_p1.read()));
}

void tensor_weight_x::thread_add_ln200_fu_410_p2() {
    add_ln200_fu_410_p2 = (!zext_ln200_fu_406_p1.read().is_01() || !zext_ln187_reg_546.read().is_01())? sc_lv<20>(): (sc_biguint<20>(zext_ln200_fu_406_p1.read()) + sc_biguint<20>(zext_ln187_reg_546.read()));
}

void tensor_weight_x::thread_add_ln206_1_fu_471_p2() {
    add_ln206_1_fu_471_p2 = (!zext_ln187_reg_546.read().is_01() || !zext_ln206_fu_467_p1.read().is_01())? sc_lv<20>(): (sc_biguint<20>(zext_ln187_reg_546.read()) + sc_biguint<20>(zext_ln206_fu_467_p1.read()));
}

void tensor_weight_x::thread_add_ln206_fu_461_p2() {
    add_ln206_fu_461_p2 = (!c_0_reg_241.read().is_01() || !ap_const_lv11_7FF.is_01())? sc_lv<11>(): (sc_biguint<11>(c_0_reg_241.read()) + sc_bigint<11>(ap_const_lv11_7FF));
}

void tensor_weight_x::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void tensor_weight_x::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void tensor_weight_x::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void tensor_weight_x::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void tensor_weight_x::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void tensor_weight_x::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void tensor_weight_x::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void tensor_weight_x::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void tensor_weight_x::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void tensor_weight_x::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void tensor_weight_x::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void tensor_weight_x::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void tensor_weight_x::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void tensor_weight_x::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void tensor_weight_x::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void tensor_weight_x::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void tensor_weight_x::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void tensor_weight_x::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void tensor_weight_x::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln185_fu_301_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void tensor_weight_x::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void tensor_weight_x::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln185_fu_301_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void tensor_weight_x::thread_c_fu_331_p2() {
    c_fu_331_p2 = (!c_0_reg_241.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(c_0_reg_241.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void tensor_weight_x::thread_component_fu_482_p2() {
    component_fu_482_p2 = (!component_0_reg_275.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(component_0_reg_275.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void tensor_weight_x::thread_i_fu_394_p2() {
    i_fu_394_p2 = (!i_0_reg_264.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i_0_reg_264.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void tensor_weight_x::thread_icmp_ln185_fu_301_p2() {
    icmp_ln185_fu_301_p2 = (!r_0_reg_230.read().is_01() || !ap_const_lv9_1B4.is_01())? sc_lv<1>(): sc_lv<1>(r_0_reg_230.read() == ap_const_lv9_1B4);
}

void tensor_weight_x::thread_icmp_ln187_fu_325_p2() {
    icmp_ln187_fu_325_p2 = (!c_0_reg_241.read().is_01() || !ap_const_lv11_401.is_01())? sc_lv<1>(): sc_lv<1>(c_0_reg_241.read() == ap_const_lv11_401);
}

void tensor_weight_x::thread_icmp_ln190_fu_337_p2() {
    icmp_ln190_fu_337_p2 = (!k_0_reg_253.read().is_01() || !ap_const_lv3_6.is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_253.read() == ap_const_lv3_6);
}

void tensor_weight_x::thread_icmp_ln194_fu_364_p2() {
    icmp_ln194_fu_364_p2 = (!tmp_7_fu_354_p4.read().is_01() || !ap_const_lv10_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_7_fu_354_p4.read() == ap_const_lv10_0);
}

void tensor_weight_x::thread_icmp_ln196_fu_388_p2() {
    icmp_ln196_fu_388_p2 = (!i_0_reg_264.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_264.read() == ap_const_lv2_3);
}

void tensor_weight_x::thread_icmp_ln198_fu_476_p2() {
    icmp_ln198_fu_476_p2 = (!component_0_reg_275.read().is_01() || !ap_const_lv3_6.is_01())? sc_lv<1>(): sc_lv<1>(component_0_reg_275.read() == ap_const_lv3_6);
}

void tensor_weight_x::thread_icmp_ln204_fu_455_p2() {
    icmp_ln204_fu_455_p2 = (!c_0_reg_241.read().is_01() || !ap_const_lv11_0.is_01())? sc_lv<1>(): sc_lv<1>(c_0_reg_241.read() == ap_const_lv11_0);
}

void tensor_weight_x::thread_icmp_ln7_fu_441_p2() {
    icmp_ln7_fu_441_p2 = (!i_0_reg_264.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_264.read() == ap_const_lv2_1);
}

void tensor_weight_x::thread_k_fu_343_p2() {
    k_fu_343_p2 = (!k_0_reg_253.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(k_0_reg_253.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void tensor_weight_x::thread_or_ln194_fu_378_p2() {
    or_ln194_fu_378_p2 = (tmp_9_fu_370_p3.read() | icmp_ln194_fu_364_p2.read());
}

void tensor_weight_x::thread_p_shl_cast_fu_415_p3() {
    p_shl_cast_fu_415_p3 = esl_concat<20,3>(add_ln200_fu_410_p2.read(), ap_const_lv3_0);
}

void tensor_weight_x::thread_r_fu_307_p2() {
    r_fu_307_p2 = (!r_0_reg_230.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(r_0_reg_230.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void tensor_weight_x::thread_select_ln7_fu_447_p3() {
    select_ln7_fu_447_p3 = (!icmp_ln7_fu_441_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln7_fu_441_p2.read()[0].to_bool())? ap_const_lv32_3EB3DD98: ap_const_lv32_3EA60AA6);
}

void tensor_weight_x::thread_sub_ln200_1_fu_435_p2() {
    sub_ln200_1_fu_435_p2 = (!p_shl_cast_fu_415_p3.read().is_01() || !zext_ln200_2_fu_431_p1.read().is_01())? sc_lv<23>(): (sc_biguint<23>(p_shl_cast_fu_415_p3.read()) - sc_biguint<23>(zext_ln200_2_fu_431_p1.read()));
}

void tensor_weight_x::thread_sub_ln200_fu_400_p2() {
    sub_ln200_fu_400_p2 = (!c_0_reg_241.read().is_01() || !zext_ln196_fu_384_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(c_0_reg_241.read()) - sc_biguint<11>(zext_ln196_fu_384_p1.read()));
}

void tensor_weight_x::thread_tensor_0_val_address0() {
    tensor_0_val_address0 =  (sc_lv<19>) (zext_ln206_1_fu_507_p1.read());
}

void tensor_weight_x::thread_tensor_0_val_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        tensor_0_val_ce0 = ap_const_logic_1;
    } else {
        tensor_0_val_ce0 = ap_const_logic_0;
    }
}

void tensor_weight_x::thread_tensor_0_val_d0() {
    tensor_0_val_d0 = reg_295.read();
}

void tensor_weight_x::thread_tensor_0_val_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        tensor_0_val_we0 = ap_const_logic_1;
    } else {
        tensor_0_val_we0 = ap_const_logic_0;
    }
}

void tensor_weight_x::thread_tensor_1_val_address0() {
    tensor_1_val_address0 =  (sc_lv<19>) (zext_ln206_1_fu_507_p1.read());
}

void tensor_weight_x::thread_tensor_1_val_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        tensor_1_val_ce0 = ap_const_logic_1;
    } else {
        tensor_1_val_ce0 = ap_const_logic_0;
    }
}

void tensor_weight_x::thread_tensor_1_val_d0() {
    tensor_1_val_d0 = acc_val_q0.read();
}

void tensor_weight_x::thread_tensor_1_val_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        tensor_1_val_we0 = ap_const_logic_1;
    } else {
        tensor_1_val_we0 = ap_const_logic_0;
    }
}

void tensor_weight_x::thread_tensor_3_val_address0() {
    tensor_3_val_address0 =  (sc_lv<19>) (zext_ln206_1_fu_507_p1.read());
}

void tensor_weight_x::thread_tensor_3_val_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        tensor_3_val_ce0 = ap_const_logic_1;
    } else {
        tensor_3_val_ce0 = ap_const_logic_0;
    }
}

void tensor_weight_x::thread_tensor_3_val_d0() {
    tensor_3_val_d0 = acc_val_q1.read();
}

void tensor_weight_x::thread_tensor_3_val_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        tensor_3_val_we0 = ap_const_logic_1;
    } else {
        tensor_3_val_we0 = ap_const_logic_0;
    }
}

void tensor_weight_x::thread_tensor_4_val_address0() {
    tensor_4_val_address0 =  (sc_lv<19>) (zext_ln206_1_reg_632.read());
}

void tensor_weight_x::thread_tensor_4_val_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        tensor_4_val_ce0 = ap_const_logic_1;
    } else {
        tensor_4_val_ce0 = ap_const_logic_0;
    }
}

void tensor_weight_x::thread_tensor_4_val_d0() {
    tensor_4_val_d0 = acc_val_q1.read();
}

void tensor_weight_x::thread_tensor_4_val_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln204_reg_590.read()))) {
        tensor_4_val_we0 = ap_const_logic_1;
    } else {
        tensor_4_val_we0 = ap_const_logic_0;
    }
}

void tensor_weight_x::thread_tensor_5_val_address0() {
    tensor_5_val_address0 =  (sc_lv<19>) (zext_ln206_1_reg_632.read());
}

void tensor_weight_x::thread_tensor_5_val_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        tensor_5_val_ce0 = ap_const_logic_1;
    } else {
        tensor_5_val_ce0 = ap_const_logic_0;
    }
}

void tensor_weight_x::thread_tensor_5_val_d0() {
    tensor_5_val_d0 = acc_val_q0.read();
}

void tensor_weight_x::thread_tensor_5_val_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln204_reg_590.read()))) {
        tensor_5_val_we0 = ap_const_logic_1;
    } else {
        tensor_5_val_we0 = ap_const_logic_0;
    }
}

void tensor_weight_x::thread_tensor_y_val_address0() {
    tensor_y_val_address0 =  (sc_lv<22>) (zext_ln200_4_fu_497_p1.read());
}

void tensor_weight_x::thread_tensor_y_val_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        tensor_y_val_ce0 = ap_const_logic_1;
    } else {
        tensor_y_val_ce0 = ap_const_logic_0;
    }
}

void tensor_weight_x::thread_tmp_10_fu_423_p3() {
    tmp_10_fu_423_p3 = esl_concat<20,1>(add_ln200_fu_410_p2.read(), ap_const_lv1_0);
}

void tensor_weight_x::thread_tmp_7_fu_354_p4() {
    tmp_7_fu_354_p4 = c_0_reg_241.read().range(10, 1);
}

void tensor_weight_x::thread_tmp_8_fu_313_p3() {
    tmp_8_fu_313_p3 = esl_concat<9,10>(r_0_reg_230.read(), ap_const_lv10_0);
}

void tensor_weight_x::thread_tmp_9_fu_370_p3() {
    tmp_9_fu_370_p3 = c_0_reg_241.read().range(10, 10);
}

void tensor_weight_x::thread_zext_ln187_fu_321_p1() {
    zext_ln187_fu_321_p1 = esl_zext<20,19>(tmp_8_fu_313_p3.read());
}

void tensor_weight_x::thread_zext_ln192_fu_349_p1() {
    zext_ln192_fu_349_p1 = esl_zext<64,3>(k_0_reg_253.read());
}

void tensor_weight_x::thread_zext_ln196_fu_384_p1() {
    zext_ln196_fu_384_p1 = esl_zext<11,2>(i_0_reg_264.read());
}

void tensor_weight_x::thread_zext_ln200_1_fu_502_p1() {
    zext_ln200_1_fu_502_p1 = esl_zext<64,3>(component_0_reg_275.read());
}

void tensor_weight_x::thread_zext_ln200_2_fu_431_p1() {
    zext_ln200_2_fu_431_p1 = esl_zext<23,21>(tmp_10_fu_423_p3.read());
}

void tensor_weight_x::thread_zext_ln200_3_fu_488_p1() {
    zext_ln200_3_fu_488_p1 = esl_zext<23,3>(component_0_reg_275.read());
}

void tensor_weight_x::thread_zext_ln200_4_fu_497_p1() {
    zext_ln200_4_fu_497_p1 = esl_zext<64,23>(add_ln200_1_fu_492_p2.read());
}

void tensor_weight_x::thread_zext_ln200_fu_406_p1() {
    zext_ln200_fu_406_p1 = esl_zext<20,11>(sub_ln200_fu_400_p2.read());
}

void tensor_weight_x::thread_zext_ln206_1_fu_507_p1() {
    zext_ln206_1_fu_507_p1 = esl_zext<64,20>(add_ln206_1_reg_594.read());
}

void tensor_weight_x::thread_zext_ln206_fu_467_p1() {
    zext_ln206_fu_467_p1 = esl_zext<20,11>(add_ln206_fu_461_p2.read());
}

void tensor_weight_x::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln185_fu_301_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln187_fu_325_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln190_fu_337_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && ((esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln196_fu_388_p2.read()) && 
   esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln204_fu_455_p2.read())) || 
  (esl_seteq<1,1,1>(or_ln194_reg_568.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln204_fu_455_p2.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state20;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && ((esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln196_fu_388_p2.read()) && 
   esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln204_fu_455_p2.read())) || 
  (esl_seteq<1,1,1>(or_ln194_reg_568.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln204_fu_455_p2.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state18;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln198_fu_476_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<20>) ("XXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

