// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tensor_weight_x (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tensor_0_val_address0,
        tensor_0_val_ce0,
        tensor_0_val_we0,
        tensor_0_val_d0,
        tensor_1_val_address0,
        tensor_1_val_ce0,
        tensor_1_val_we0,
        tensor_1_val_d0,
        tensor_3_val_address0,
        tensor_3_val_ce0,
        tensor_3_val_we0,
        tensor_3_val_d0,
        tensor_4_val_address0,
        tensor_4_val_ce0,
        tensor_4_val_we0,
        tensor_4_val_d0,
        tensor_5_val_address0,
        tensor_5_val_ce0,
        tensor_5_val_we0,
        tensor_5_val_d0,
        tensor_y_val_address0,
        tensor_y_val_ce0,
        tensor_y_val_q0
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_state3 = 20'd4;
parameter    ap_ST_fsm_state4 = 20'd8;
parameter    ap_ST_fsm_state5 = 20'd16;
parameter    ap_ST_fsm_state6 = 20'd32;
parameter    ap_ST_fsm_state7 = 20'd64;
parameter    ap_ST_fsm_state8 = 20'd128;
parameter    ap_ST_fsm_state9 = 20'd256;
parameter    ap_ST_fsm_state10 = 20'd512;
parameter    ap_ST_fsm_state11 = 20'd1024;
parameter    ap_ST_fsm_state12 = 20'd2048;
parameter    ap_ST_fsm_state13 = 20'd4096;
parameter    ap_ST_fsm_state14 = 20'd8192;
parameter    ap_ST_fsm_state15 = 20'd16384;
parameter    ap_ST_fsm_state16 = 20'd32768;
parameter    ap_ST_fsm_state17 = 20'd65536;
parameter    ap_ST_fsm_state18 = 20'd131072;
parameter    ap_ST_fsm_state19 = 20'd262144;
parameter    ap_ST_fsm_state20 = 20'd524288;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [18:0] tensor_0_val_address0;
output   tensor_0_val_ce0;
output   tensor_0_val_we0;
output  [31:0] tensor_0_val_d0;
output  [18:0] tensor_1_val_address0;
output   tensor_1_val_ce0;
output   tensor_1_val_we0;
output  [31:0] tensor_1_val_d0;
output  [18:0] tensor_3_val_address0;
output   tensor_3_val_ce0;
output   tensor_3_val_we0;
output  [31:0] tensor_3_val_d0;
output  [18:0] tensor_4_val_address0;
output   tensor_4_val_ce0;
output   tensor_4_val_we0;
output  [31:0] tensor_4_val_d0;
output  [18:0] tensor_5_val_address0;
output   tensor_5_val_ce0;
output   tensor_5_val_we0;
output  [31:0] tensor_5_val_d0;
output  [21:0] tensor_y_val_address0;
output   tensor_y_val_ce0;
input  [31:0] tensor_y_val_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg tensor_0_val_ce0;
reg tensor_0_val_we0;
reg tensor_1_val_ce0;
reg tensor_1_val_we0;
reg tensor_3_val_ce0;
reg tensor_3_val_we0;
reg tensor_4_val_ce0;
reg tensor_4_val_we0;
reg tensor_5_val_ce0;
reg tensor_5_val_we0;
reg tensor_y_val_ce0;

(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] acc_val_q0;
reg   [31:0] reg_295;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state18;
wire   [8:0] r_fu_307_p2;
reg   [8:0] r_reg_541;
wire    ap_CS_fsm_state2;
wire   [19:0] zext_ln187_fu_321_p1;
reg   [19:0] zext_ln187_reg_546;
wire   [0:0] icmp_ln185_fu_301_p2;
wire   [10:0] c_fu_331_p2;
reg   [10:0] c_reg_555;
wire    ap_CS_fsm_state3;
wire   [2:0] k_fu_343_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] or_ln194_fu_378_p2;
reg   [0:0] or_ln194_reg_568;
wire   [0:0] icmp_ln190_fu_337_p2;
wire   [1:0] i_fu_394_p2;
reg   [1:0] i_reg_575;
wire    ap_CS_fsm_state5;
wire   [22:0] sub_ln200_1_fu_435_p2;
reg   [22:0] sub_ln200_1_reg_580;
wire   [0:0] icmp_ln196_fu_388_p2;
wire   [31:0] select_ln7_fu_447_p3;
reg   [31:0] select_ln7_reg_585;
wire   [0:0] icmp_ln204_fu_455_p2;
reg   [0:0] icmp_ln204_reg_590;
wire   [19:0] add_ln206_1_fu_471_p2;
reg   [19:0] add_ln206_1_reg_594;
wire   [2:0] component_fu_482_p2;
reg   [2:0] component_reg_602;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln198_fu_476_p2;
reg   [31:0] tensor_y_val_load_reg_612;
wire    ap_CS_fsm_state9;
reg   [2:0] acc_val_addr_13_reg_617;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_291_p2;
reg   [31:0] tmp_reg_622;
wire   [31:0] grp_fu_287_p2;
reg   [31:0] tmp_2_reg_627;
wire    ap_CS_fsm_state16;
wire   [63:0] zext_ln206_1_fu_507_p1;
reg   [63:0] zext_ln206_1_reg_632;
wire    ap_CS_fsm_state19;
reg   [2:0] acc_val_address0;
reg    acc_val_ce0;
reg    acc_val_we0;
reg   [31:0] acc_val_d0;
reg   [2:0] acc_val_address1;
reg    acc_val_ce1;
wire   [31:0] acc_val_q1;
reg   [8:0] r_0_reg_230;
wire   [0:0] icmp_ln187_fu_325_p2;
reg   [10:0] c_0_reg_241;
wire    ap_CS_fsm_state20;
reg   [2:0] k_0_reg_253;
reg   [1:0] i_0_reg_264;
reg   [2:0] component_0_reg_275;
wire    ap_CS_fsm_state17;
wire   [63:0] zext_ln192_fu_349_p1;
wire   [63:0] zext_ln200_4_fu_497_p1;
wire   [63:0] zext_ln200_1_fu_502_p1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state10;
wire   [18:0] tmp_8_fu_313_p3;
wire   [9:0] tmp_7_fu_354_p4;
wire   [0:0] tmp_9_fu_370_p3;
wire   [0:0] icmp_ln194_fu_364_p2;
wire   [10:0] zext_ln196_fu_384_p1;
wire   [10:0] sub_ln200_fu_400_p2;
wire   [19:0] zext_ln200_fu_406_p1;
wire   [19:0] add_ln200_fu_410_p2;
wire   [20:0] tmp_10_fu_423_p3;
wire   [22:0] p_shl_cast_fu_415_p3;
wire   [22:0] zext_ln200_2_fu_431_p1;
wire   [0:0] icmp_ln7_fu_441_p2;
wire   [10:0] add_ln206_fu_461_p2;
wire   [19:0] zext_ln206_fu_467_p1;
wire   [22:0] zext_ln200_3_fu_488_p1;
wire   [22:0] add_ln200_1_fu_492_p2;
reg   [19:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 20'd1;
end

tensor_weight_y_acc_val #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
acc_val_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(acc_val_address0),
    .ce0(acc_val_ce0),
    .we0(acc_val_we0),
    .d0(acc_val_d0),
    .q0(acc_val_q0),
    .address1(acc_val_address1),
    .ce1(acc_val_ce1),
    .q1(acc_val_q1)
);

optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_295),
    .din1(tmp_reg_622),
    .ce(1'b1),
    .dout(grp_fu_287_p2)
);

optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tensor_y_val_load_reg_612),
    .din1(select_ln7_reg_585),
    .ce(1'b1),
    .dout(grp_fu_291_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln185_fu_301_p2 == 1'd0))) begin
        c_0_reg_241 <= 11'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        c_0_reg_241 <= c_reg_555;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln196_fu_388_p2 == 1'd0) & (or_ln194_reg_568 == 1'd0))) begin
        component_0_reg_275 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        component_0_reg_275 <= component_reg_602;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln190_fu_337_p2 == 1'd1) & (or_ln194_fu_378_p2 == 1'd0))) begin
        i_0_reg_264 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln198_fu_476_p2 == 1'd1))) begin
        i_0_reg_264 <= i_reg_575;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln187_fu_325_p2 == 1'd0))) begin
        k_0_reg_253 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln190_fu_337_p2 == 1'd0))) begin
        k_0_reg_253 <= k_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln187_fu_325_p2 == 1'd1))) begin
        r_0_reg_230 <= r_reg_541;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_230 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        acc_val_addr_13_reg_617 <= zext_ln200_1_fu_502_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (((or_ln194_reg_568 == 1'd1) & (icmp_ln204_fu_455_p2 == 1'd0)) | ((icmp_ln196_fu_388_p2 == 1'd1) & (icmp_ln204_fu_455_p2 == 1'd0))))) begin
        add_ln206_1_reg_594 <= add_ln206_1_fu_471_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_555 <= c_fu_331_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        component_reg_602 <= component_fu_482_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (or_ln194_reg_568 == 1'd0))) begin
        i_reg_575 <= i_fu_394_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & ((icmp_ln196_fu_388_p2 == 1'd1) | (or_ln194_reg_568 == 1'd1)))) begin
        icmp_ln204_reg_590 <= icmp_ln204_fu_455_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln190_fu_337_p2 == 1'd1))) begin
        or_ln194_reg_568 <= or_ln194_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_541 <= r_fu_307_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_295 <= acc_val_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln196_fu_388_p2 == 1'd0) & (or_ln194_reg_568 == 1'd0))) begin
        select_ln7_reg_585[5 : 1] <= select_ln7_fu_447_p3[5 : 1];
select_ln7_reg_585[10 : 8] <= select_ln7_fu_447_p3[10 : 8];
select_ln7_reg_585[12] <= select_ln7_fu_447_p3[12];
select_ln7_reg_585[16 : 14] <= select_ln7_fu_447_p3[16 : 14];
select_ln7_reg_585[18] <= select_ln7_fu_447_p3[18];
select_ln7_reg_585[20] <= select_ln7_fu_447_p3[20];
        sub_ln200_1_reg_580[22 : 1] <= sub_ln200_1_fu_435_p2[22 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tensor_y_val_load_reg_612 <= tensor_y_val_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_2_reg_627 <= grp_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_reg_622 <= grp_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln185_fu_301_p2 == 1'd0))) begin
        zext_ln187_reg_546[18 : 10] <= zext_ln187_fu_321_p1[18 : 10];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        zext_ln206_1_reg_632[19 : 0] <= zext_ln206_1_fu_507_p1[19 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        acc_val_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        acc_val_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        acc_val_address0 = acc_val_addr_13_reg_617;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        acc_val_address0 = zext_ln200_1_fu_502_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        acc_val_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        acc_val_address0 = zext_ln192_fu_349_p1;
    end else begin
        acc_val_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        acc_val_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        acc_val_address1 = 64'd3;
    end else begin
        acc_val_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        acc_val_ce0 = 1'b1;
    end else begin
        acc_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19))) begin
        acc_val_ce1 = 1'b1;
    end else begin
        acc_val_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        acc_val_d0 = tmp_2_reg_627;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        acc_val_d0 = 32'd0;
    end else begin
        acc_val_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln190_fu_337_p2 == 1'd0)))) begin
        acc_val_we0 = 1'b1;
    end else begin
        acc_val_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln185_fu_301_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln185_fu_301_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tensor_0_val_ce0 = 1'b1;
    end else begin
        tensor_0_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tensor_0_val_we0 = 1'b1;
    end else begin
        tensor_0_val_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tensor_1_val_ce0 = 1'b1;
    end else begin
        tensor_1_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tensor_1_val_we0 = 1'b1;
    end else begin
        tensor_1_val_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tensor_3_val_ce0 = 1'b1;
    end else begin
        tensor_3_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tensor_3_val_we0 = 1'b1;
    end else begin
        tensor_3_val_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tensor_4_val_ce0 = 1'b1;
    end else begin
        tensor_4_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln204_reg_590 == 1'd0))) begin
        tensor_4_val_we0 = 1'b1;
    end else begin
        tensor_4_val_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tensor_5_val_ce0 = 1'b1;
    end else begin
        tensor_5_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln204_reg_590 == 1'd0))) begin
        tensor_5_val_we0 = 1'b1;
    end else begin
        tensor_5_val_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6))) begin
        tensor_y_val_ce0 = 1'b1;
    end else begin
        tensor_y_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln185_fu_301_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln187_fu_325_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln190_fu_337_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (((icmp_ln204_fu_455_p2 == 1'd1) & (or_ln194_reg_568 == 1'd1)) | ((icmp_ln204_fu_455_p2 == 1'd1) & (icmp_ln196_fu_388_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else if (((1'b1 == ap_CS_fsm_state5) & (((or_ln194_reg_568 == 1'd1) & (icmp_ln204_fu_455_p2 == 1'd0)) | ((icmp_ln196_fu_388_p2 == 1'd1) & (icmp_ln204_fu_455_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln198_fu_476_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln200_1_fu_492_p2 = (sub_ln200_1_reg_580 + zext_ln200_3_fu_488_p1);

assign add_ln200_fu_410_p2 = (zext_ln200_fu_406_p1 + zext_ln187_reg_546);

assign add_ln206_1_fu_471_p2 = (zext_ln187_reg_546 + zext_ln206_fu_467_p1);

assign add_ln206_fu_461_p2 = ($signed(c_0_reg_241) + $signed(11'd2047));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_fu_331_p2 = (c_0_reg_241 + 11'd1);

assign component_fu_482_p2 = (component_0_reg_275 + 3'd1);

assign i_fu_394_p2 = (i_0_reg_264 + 2'd1);

assign icmp_ln185_fu_301_p2 = ((r_0_reg_230 == 9'd436) ? 1'b1 : 1'b0);

assign icmp_ln187_fu_325_p2 = ((c_0_reg_241 == 11'd1025) ? 1'b1 : 1'b0);

assign icmp_ln190_fu_337_p2 = ((k_0_reg_253 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln194_fu_364_p2 = ((tmp_7_fu_354_p4 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln196_fu_388_p2 = ((i_0_reg_264 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln198_fu_476_p2 = ((component_0_reg_275 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln204_fu_455_p2 = ((c_0_reg_241 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_441_p2 = ((i_0_reg_264 == 2'd1) ? 1'b1 : 1'b0);

assign k_fu_343_p2 = (k_0_reg_253 + 3'd1);

assign or_ln194_fu_378_p2 = (tmp_9_fu_370_p3 | icmp_ln194_fu_364_p2);

assign p_shl_cast_fu_415_p3 = {{add_ln200_fu_410_p2}, {3'd0}};

assign r_fu_307_p2 = (r_0_reg_230 + 9'd1);

assign select_ln7_fu_447_p3 = ((icmp_ln7_fu_441_p2[0:0] === 1'b1) ? 32'd1051975064 : 32'd1051069094);

assign sub_ln200_1_fu_435_p2 = (p_shl_cast_fu_415_p3 - zext_ln200_2_fu_431_p1);

assign sub_ln200_fu_400_p2 = (c_0_reg_241 - zext_ln196_fu_384_p1);

assign tensor_0_val_address0 = zext_ln206_1_fu_507_p1;

assign tensor_0_val_d0 = reg_295;

assign tensor_1_val_address0 = zext_ln206_1_fu_507_p1;

assign tensor_1_val_d0 = acc_val_q0;

assign tensor_3_val_address0 = zext_ln206_1_fu_507_p1;

assign tensor_3_val_d0 = acc_val_q1;

assign tensor_4_val_address0 = zext_ln206_1_reg_632;

assign tensor_4_val_d0 = acc_val_q1;

assign tensor_5_val_address0 = zext_ln206_1_reg_632;

assign tensor_5_val_d0 = acc_val_q0;

assign tensor_y_val_address0 = zext_ln200_4_fu_497_p1;

assign tmp_10_fu_423_p3 = {{add_ln200_fu_410_p2}, {1'd0}};

assign tmp_7_fu_354_p4 = {{c_0_reg_241[10:1]}};

assign tmp_8_fu_313_p3 = {{r_0_reg_230}, {10'd0}};

assign tmp_9_fu_370_p3 = c_0_reg_241[32'd10];

assign zext_ln187_fu_321_p1 = tmp_8_fu_313_p3;

assign zext_ln192_fu_349_p1 = k_0_reg_253;

assign zext_ln196_fu_384_p1 = i_0_reg_264;

assign zext_ln200_1_fu_502_p1 = component_0_reg_275;

assign zext_ln200_2_fu_431_p1 = tmp_10_fu_423_p3;

assign zext_ln200_3_fu_488_p1 = component_0_reg_275;

assign zext_ln200_4_fu_497_p1 = add_ln200_1_fu_492_p2;

assign zext_ln200_fu_406_p1 = sub_ln200_fu_400_p2;

assign zext_ln206_1_fu_507_p1 = add_ln206_1_reg_594;

assign zext_ln206_fu_467_p1 = add_ln206_fu_461_p2;

always @ (posedge ap_clk) begin
    zext_ln187_reg_546[9:0] <= 10'b0000000000;
    zext_ln187_reg_546[19] <= 1'b0;
    sub_ln200_1_reg_580[0] <= 1'b0;
    select_ln7_reg_585[0] <= 1'b0;
    select_ln7_reg_585[7:6] <= 2'b10;
    select_ln7_reg_585[11:11] <= 1'b1;
    select_ln7_reg_585[13:13] <= 1'b0;
    select_ln7_reg_585[17:17] <= 1'b1;
    select_ln7_reg_585[19:19] <= 1'b0;
    select_ln7_reg_585[31:21] <= 11'b00111110101;
    zext_ln206_1_reg_632[63:20] <= 44'b00000000000000000000000000000000000000000000;
end

endmodule //tensor_weight_x
