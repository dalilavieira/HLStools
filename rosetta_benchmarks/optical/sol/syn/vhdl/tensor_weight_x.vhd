-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tensor_weight_x is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tensor_0_val_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    tensor_0_val_ce0 : OUT STD_LOGIC;
    tensor_0_val_we0 : OUT STD_LOGIC;
    tensor_0_val_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tensor_1_val_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    tensor_1_val_ce0 : OUT STD_LOGIC;
    tensor_1_val_we0 : OUT STD_LOGIC;
    tensor_1_val_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tensor_3_val_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    tensor_3_val_ce0 : OUT STD_LOGIC;
    tensor_3_val_we0 : OUT STD_LOGIC;
    tensor_3_val_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tensor_4_val_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    tensor_4_val_ce0 : OUT STD_LOGIC;
    tensor_4_val_we0 : OUT STD_LOGIC;
    tensor_4_val_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tensor_5_val_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    tensor_5_val_ce0 : OUT STD_LOGIC;
    tensor_5_val_we0 : OUT STD_LOGIC;
    tensor_5_val_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tensor_y_val_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    tensor_y_val_ce0 : OUT STD_LOGIC;
    tensor_y_val_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of tensor_weight_x is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv9_1B4 : STD_LOGIC_VECTOR (8 downto 0) := "110110100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_401 : STD_LOGIC_VECTOR (10 downto 0) := "10000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3EB3DD98 : STD_LOGIC_VECTOR (31 downto 0) := "00111110101100111101110110011000";
    constant ap_const_lv32_3EA60AA6 : STD_LOGIC_VECTOR (31 downto 0) := "00111110101001100000101010100110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal acc_val_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_295 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal r_fu_307_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_reg_541 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln187_fu_321_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln187_reg_546 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln185_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_331_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_reg_555 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal k_fu_343_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal or_ln194_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln194_reg_568 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln190_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_394_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_575 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sub_ln200_1_fu_435_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln200_1_reg_580 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln196_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln7_fu_447_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln7_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln204_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln204_reg_590 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln206_1_fu_471_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln206_1_reg_594 : STD_LOGIC_VECTOR (19 downto 0);
    signal component_fu_482_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal component_reg_602 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln198_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tensor_y_val_load_reg_612 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal acc_val_addr_13_reg_617 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_622 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_627 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal zext_ln206_1_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln206_1_reg_632 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal acc_val_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_val_ce0 : STD_LOGIC;
    signal acc_val_we0 : STD_LOGIC;
    signal acc_val_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_val_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_val_ce1 : STD_LOGIC;
    signal acc_val_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_0_reg_230 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln187_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_0_reg_241 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal k_0_reg_253 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_reg_264 : STD_LOGIC_VECTOR (1 downto 0);
    signal component_0_reg_275 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln192_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln200_4_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln200_1_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_8_fu_313_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_7_fu_354_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_370_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln194_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln196_fu_384_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln200_fu_400_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln200_fu_406_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln200_fu_410_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_10_fu_423_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_shl_cast_fu_415_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln200_2_fu_431_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln7_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln206_fu_461_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln206_fu_467_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln200_3_fu_488_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln200_1_fu_492_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);

    component optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component tensor_weight_y_acc_val IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    acc_val_U : component tensor_weight_y_acc_val
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_val_address0,
        ce0 => acc_val_ce0,
        we0 => acc_val_we0,
        d0 => acc_val_d0,
        q0 => acc_val_q0,
        address1 => acc_val_address1,
        ce1 => acc_val_ce1,
        q1 => acc_val_q1);

    optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1_U46 : component optical_flow_sw_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_295,
        din1 => tmp_reg_622,
        ce => ap_const_logic_1,
        dout => grp_fu_287_p2);

    optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1_U47 : component optical_flow_sw_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tensor_y_val_load_reg_612,
        din1 => select_ln7_reg_585,
        ce => ap_const_logic_1,
        dout => grp_fu_291_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln185_fu_301_p2 = ap_const_lv1_0))) then 
                c_0_reg_241 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                c_0_reg_241 <= c_reg_555;
            end if; 
        end if;
    end process;

    component_0_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln196_fu_388_p2 = ap_const_lv1_0) and (or_ln194_reg_568 = ap_const_lv1_0))) then 
                component_0_reg_275 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                component_0_reg_275 <= component_reg_602;
            end if; 
        end if;
    end process;

    i_0_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln190_fu_337_p2 = ap_const_lv1_1) and (or_ln194_fu_378_p2 = ap_const_lv1_0))) then 
                i_0_reg_264 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln198_fu_476_p2 = ap_const_lv1_1))) then 
                i_0_reg_264 <= i_reg_575;
            end if; 
        end if;
    end process;

    k_0_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln187_fu_325_p2 = ap_const_lv1_0))) then 
                k_0_reg_253 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln190_fu_337_p2 = ap_const_lv1_0))) then 
                k_0_reg_253 <= k_fu_343_p2;
            end if; 
        end if;
    end process;

    r_0_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln187_fu_325_p2 = ap_const_lv1_1))) then 
                r_0_reg_230 <= r_reg_541;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_230 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                acc_val_addr_13_reg_617 <= zext_ln200_1_fu_502_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (((or_ln194_reg_568 = ap_const_lv1_1) and (icmp_ln204_fu_455_p2 = ap_const_lv1_0)) or ((icmp_ln196_fu_388_p2 = ap_const_lv1_1) and (icmp_ln204_fu_455_p2 = ap_const_lv1_0))))) then
                add_ln206_1_reg_594 <= add_ln206_1_fu_471_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_555 <= c_fu_331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                component_reg_602 <= component_fu_482_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (or_ln194_reg_568 = ap_const_lv1_0))) then
                i_reg_575 <= i_fu_394_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln196_fu_388_p2 = ap_const_lv1_1) or (or_ln194_reg_568 = ap_const_lv1_1)))) then
                icmp_ln204_reg_590 <= icmp_ln204_fu_455_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln190_fu_337_p2 = ap_const_lv1_1))) then
                or_ln194_reg_568 <= or_ln194_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_reg_541 <= r_fu_307_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_295 <= acc_val_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln196_fu_388_p2 = ap_const_lv1_0) and (or_ln194_reg_568 = ap_const_lv1_0))) then
                    select_ln7_reg_585(5 downto 1) <= select_ln7_fu_447_p3(5 downto 1);    select_ln7_reg_585(10 downto 8) <= select_ln7_fu_447_p3(10 downto 8);    select_ln7_reg_585(12) <= select_ln7_fu_447_p3(12);    select_ln7_reg_585(16 downto 14) <= select_ln7_fu_447_p3(16 downto 14);    select_ln7_reg_585(18) <= select_ln7_fu_447_p3(18);    select_ln7_reg_585(20) <= select_ln7_fu_447_p3(20);
                    sub_ln200_1_reg_580(22 downto 1) <= sub_ln200_1_fu_435_p2(22 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tensor_y_val_load_reg_612 <= tensor_y_val_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_2_reg_627 <= grp_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_reg_622 <= grp_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln185_fu_301_p2 = ap_const_lv1_0))) then
                    zext_ln187_reg_546(18 downto 10) <= zext_ln187_fu_321_p1(18 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                    zext_ln206_1_reg_632(19 downto 0) <= zext_ln206_1_fu_507_p1(19 downto 0);
            end if;
        end if;
    end process;
    zext_ln187_reg_546(9 downto 0) <= "0000000000";
    zext_ln187_reg_546(19) <= '0';
    sub_ln200_1_reg_580(0) <= '0';
    select_ln7_reg_585(0) <= '0';
    select_ln7_reg_585(7 downto 6) <= "10";
    select_ln7_reg_585(11 downto 11) <= "1";
    select_ln7_reg_585(13 downto 13) <= "0";
    select_ln7_reg_585(17 downto 17) <= "1";
    select_ln7_reg_585(19 downto 19) <= "0";
    select_ln7_reg_585(31 downto 21) <= "00111110101";
    zext_ln206_1_reg_632(63 downto 20) <= "00000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln185_fu_301_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, or_ln194_reg_568, icmp_ln190_fu_337_p2, ap_CS_fsm_state5, icmp_ln196_fu_388_p2, icmp_ln204_fu_455_p2, ap_CS_fsm_state6, icmp_ln198_fu_476_p2, icmp_ln187_fu_325_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln185_fu_301_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln187_fu_325_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln190_fu_337_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (((icmp_ln204_fu_455_p2 = ap_const_lv1_1) and (or_ln194_reg_568 = ap_const_lv1_1)) or ((icmp_ln204_fu_455_p2 = ap_const_lv1_1) and (icmp_ln196_fu_388_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (((or_ln194_reg_568 = ap_const_lv1_1) and (icmp_ln204_fu_455_p2 = ap_const_lv1_0)) or ((icmp_ln196_fu_388_p2 = ap_const_lv1_1) and (icmp_ln204_fu_455_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln198_fu_476_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    acc_val_address0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state4, ap_CS_fsm_state5, acc_val_addr_13_reg_617, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state17, zext_ln192_fu_349_p1, zext_ln200_1_fu_502_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            acc_val_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            acc_val_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            acc_val_address0 <= acc_val_addr_13_reg_617;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            acc_val_address0 <= zext_ln200_1_fu_502_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            acc_val_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            acc_val_address0 <= zext_ln192_fu_349_p1(3 - 1 downto 0);
        else 
            acc_val_address0 <= "XXX";
        end if; 
    end process;


    acc_val_address1_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            acc_val_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            acc_val_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        else 
            acc_val_address1 <= "XXX";
        end if; 
    end process;


    acc_val_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            acc_val_ce0 <= ap_const_logic_1;
        else 
            acc_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    acc_val_ce1_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            acc_val_ce1 <= ap_const_logic_1;
        else 
            acc_val_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    acc_val_d0_assign_proc : process(ap_CS_fsm_state4, tmp_2_reg_627, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            acc_val_d0 <= tmp_2_reg_627;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            acc_val_d0 <= ap_const_lv32_0;
        else 
            acc_val_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    acc_val_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln190_fu_337_p2, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln190_fu_337_p2 = ap_const_lv1_0)))) then 
            acc_val_we0 <= ap_const_logic_1;
        else 
            acc_val_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln200_1_fu_492_p2 <= std_logic_vector(unsigned(sub_ln200_1_reg_580) + unsigned(zext_ln200_3_fu_488_p1));
    add_ln200_fu_410_p2 <= std_logic_vector(unsigned(zext_ln200_fu_406_p1) + unsigned(zext_ln187_reg_546));
    add_ln206_1_fu_471_p2 <= std_logic_vector(unsigned(zext_ln187_reg_546) + unsigned(zext_ln206_fu_467_p1));
    add_ln206_fu_461_p2 <= std_logic_vector(unsigned(c_0_reg_241) + unsigned(ap_const_lv11_7FF));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln185_fu_301_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln185_fu_301_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln185_fu_301_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln185_fu_301_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_331_p2 <= std_logic_vector(unsigned(c_0_reg_241) + unsigned(ap_const_lv11_1));
    component_fu_482_p2 <= std_logic_vector(unsigned(component_0_reg_275) + unsigned(ap_const_lv3_1));
    i_fu_394_p2 <= std_logic_vector(unsigned(i_0_reg_264) + unsigned(ap_const_lv2_1));
    icmp_ln185_fu_301_p2 <= "1" when (r_0_reg_230 = ap_const_lv9_1B4) else "0";
    icmp_ln187_fu_325_p2 <= "1" when (c_0_reg_241 = ap_const_lv11_401) else "0";
    icmp_ln190_fu_337_p2 <= "1" when (k_0_reg_253 = ap_const_lv3_6) else "0";
    icmp_ln194_fu_364_p2 <= "1" when (tmp_7_fu_354_p4 = ap_const_lv10_0) else "0";
    icmp_ln196_fu_388_p2 <= "1" when (i_0_reg_264 = ap_const_lv2_3) else "0";
    icmp_ln198_fu_476_p2 <= "1" when (component_0_reg_275 = ap_const_lv3_6) else "0";
    icmp_ln204_fu_455_p2 <= "1" when (c_0_reg_241 = ap_const_lv11_0) else "0";
    icmp_ln7_fu_441_p2 <= "1" when (i_0_reg_264 = ap_const_lv2_1) else "0";
    k_fu_343_p2 <= std_logic_vector(unsigned(k_0_reg_253) + unsigned(ap_const_lv3_1));
    or_ln194_fu_378_p2 <= (tmp_9_fu_370_p3 or icmp_ln194_fu_364_p2);
    p_shl_cast_fu_415_p3 <= (add_ln200_fu_410_p2 & ap_const_lv3_0);
    r_fu_307_p2 <= std_logic_vector(unsigned(r_0_reg_230) + unsigned(ap_const_lv9_1));
    select_ln7_fu_447_p3 <= 
        ap_const_lv32_3EB3DD98 when (icmp_ln7_fu_441_p2(0) = '1') else 
        ap_const_lv32_3EA60AA6;
    sub_ln200_1_fu_435_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_415_p3) - unsigned(zext_ln200_2_fu_431_p1));
    sub_ln200_fu_400_p2 <= std_logic_vector(unsigned(c_0_reg_241) - unsigned(zext_ln196_fu_384_p1));
    tensor_0_val_address0 <= zext_ln206_1_fu_507_p1(19 - 1 downto 0);

    tensor_0_val_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            tensor_0_val_ce0 <= ap_const_logic_1;
        else 
            tensor_0_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tensor_0_val_d0 <= reg_295;

    tensor_0_val_we0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            tensor_0_val_we0 <= ap_const_logic_1;
        else 
            tensor_0_val_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tensor_1_val_address0 <= zext_ln206_1_fu_507_p1(19 - 1 downto 0);

    tensor_1_val_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            tensor_1_val_ce0 <= ap_const_logic_1;
        else 
            tensor_1_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tensor_1_val_d0 <= acc_val_q0;

    tensor_1_val_we0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            tensor_1_val_we0 <= ap_const_logic_1;
        else 
            tensor_1_val_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tensor_3_val_address0 <= zext_ln206_1_fu_507_p1(19 - 1 downto 0);

    tensor_3_val_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            tensor_3_val_ce0 <= ap_const_logic_1;
        else 
            tensor_3_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tensor_3_val_d0 <= acc_val_q1;

    tensor_3_val_we0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            tensor_3_val_we0 <= ap_const_logic_1;
        else 
            tensor_3_val_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tensor_4_val_address0 <= zext_ln206_1_reg_632(19 - 1 downto 0);

    tensor_4_val_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            tensor_4_val_ce0 <= ap_const_logic_1;
        else 
            tensor_4_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tensor_4_val_d0 <= acc_val_q1;

    tensor_4_val_we0_assign_proc : process(icmp_ln204_reg_590, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln204_reg_590 = ap_const_lv1_0))) then 
            tensor_4_val_we0 <= ap_const_logic_1;
        else 
            tensor_4_val_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tensor_5_val_address0 <= zext_ln206_1_reg_632(19 - 1 downto 0);

    tensor_5_val_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            tensor_5_val_ce0 <= ap_const_logic_1;
        else 
            tensor_5_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tensor_5_val_d0 <= acc_val_q0;

    tensor_5_val_we0_assign_proc : process(icmp_ln204_reg_590, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln204_reg_590 = ap_const_lv1_0))) then 
            tensor_5_val_we0 <= ap_const_logic_1;
        else 
            tensor_5_val_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tensor_y_val_address0 <= zext_ln200_4_fu_497_p1(22 - 1 downto 0);

    tensor_y_val_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            tensor_y_val_ce0 <= ap_const_logic_1;
        else 
            tensor_y_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_423_p3 <= (add_ln200_fu_410_p2 & ap_const_lv1_0);
    tmp_7_fu_354_p4 <= c_0_reg_241(10 downto 1);
    tmp_8_fu_313_p3 <= (r_0_reg_230 & ap_const_lv10_0);
    tmp_9_fu_370_p3 <= c_0_reg_241(10 downto 10);
    zext_ln187_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_313_p3),20));
    zext_ln192_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_253),64));
    zext_ln196_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_264),11));
    zext_ln200_1_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(component_0_reg_275),64));
    zext_ln200_2_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_423_p3),23));
    zext_ln200_3_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(component_0_reg_275),23));
    zext_ln200_4_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln200_1_fu_492_p2),64));
    zext_ln200_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln200_fu_400_p2),20));
    zext_ln206_1_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln206_1_reg_594),64));
    zext_ln206_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln206_fu_461_p2),20));
end behav;
