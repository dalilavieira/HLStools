// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module update_knn (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        train_inst_address0,
        train_inst_ce0,
        train_inst_q0,
        train_inst_offset,
        test_inst_address0,
        test_inst_ce0,
        test_inst_q0,
        test_inst_offset,
        dists_0_read_5,
        dists_0_read,
        dists_1_read_5,
        dists_1_read,
        dists_2_read_5,
        dists_2_read,
        labels_0_read,
        labels_1_read,
        labels_2_read,
        label_r,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [16:0] train_inst_address0;
output   train_inst_ce0;
input  [63:0] train_inst_q0;
input  [16:0] train_inst_offset;
output  [12:0] test_inst_address0;
output   test_inst_ce0;
input  [63:0] test_inst_q0;
input  [12:0] test_inst_offset;
input  [31:0] dists_0_read_5;
input  [31:0] dists_0_read;
input  [31:0] dists_1_read_5;
input  [31:0] dists_1_read;
input  [31:0] dists_2_read_5;
input  [31:0] dists_2_read;
input  [31:0] labels_0_read;
input  [31:0] labels_1_read;
input  [31:0] labels_2_read;
input  [3:0] label_r;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg train_inst_ce0;
reg test_inst_ce0;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;
reg[31:0] ap_return_3;
reg[31:0] ap_return_4;
reg[31:0] ap_return_5;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] label_cast_fu_468_p1;
reg   [31:0] label_cast_reg_1986;
wire   [2:0] i_fu_478_p2;
reg   [2:0] i_reg_1996;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln33_fu_472_p2;
wire   [31:0] zext_ln33_fu_512_p1;
reg   [31:0] zext_ln33_reg_2011;
wire   [1:0] trunc_ln21_fu_918_p1;
reg   [1:0] trunc_ln21_reg_2019;
wire    ap_CS_fsm_state3;
wire   [1:0] tmp_32_fu_932_p4;
reg   [1:0] tmp_32_reg_2025;
wire   [1:0] tmp_33_fu_942_p4;
reg   [1:0] tmp_33_reg_2030;
wire   [1:0] tmp_34_fu_952_p4;
reg   [1:0] tmp_34_reg_2035;
wire   [1:0] tmp_35_fu_962_p4;
reg   [1:0] tmp_35_reg_2040;
wire   [1:0] tmp_36_fu_972_p4;
reg   [1:0] tmp_36_reg_2045;
wire   [1:0] tmp_37_fu_982_p4;
reg   [1:0] tmp_37_reg_2050;
wire   [1:0] tmp_38_fu_992_p4;
reg   [1:0] tmp_38_reg_2055;
wire   [1:0] tmp_39_fu_1002_p4;
reg   [1:0] tmp_39_reg_2060;
wire   [1:0] tmp_40_fu_1012_p4;
reg   [1:0] tmp_40_reg_2065;
wire   [1:0] tmp_41_fu_1022_p4;
reg   [1:0] tmp_41_reg_2070;
wire   [1:0] tmp_42_fu_1032_p4;
reg   [1:0] tmp_42_reg_2075;
wire   [1:0] tmp_43_fu_1042_p4;
reg   [1:0] tmp_43_reg_2080;
wire   [1:0] tmp_44_fu_1052_p4;
reg   [1:0] tmp_44_reg_2085;
wire   [1:0] tmp_45_fu_1062_p4;
reg   [1:0] tmp_45_reg_2090;
wire   [1:0] trunc_ln21_2_fu_1142_p4;
reg   [1:0] trunc_ln21_2_reg_2095;
wire   [1:0] tmp_47_fu_1162_p4;
reg   [1:0] tmp_47_reg_2101;
wire   [1:0] tmp_48_fu_1172_p4;
reg   [1:0] tmp_48_reg_2106;
wire   [1:0] tmp_49_fu_1182_p4;
reg   [1:0] tmp_49_reg_2111;
wire   [1:0] tmp_50_fu_1192_p4;
reg   [1:0] tmp_50_reg_2116;
wire   [1:0] tmp_51_fu_1202_p4;
reg   [1:0] tmp_51_reg_2121;
wire   [1:0] tmp_52_fu_1212_p4;
reg   [1:0] tmp_52_reg_2126;
wire   [1:0] tmp_53_fu_1222_p4;
reg   [1:0] tmp_53_reg_2131;
wire   [1:0] tmp_54_fu_1232_p4;
reg   [1:0] tmp_54_reg_2136;
wire   [1:0] tmp_55_fu_1242_p4;
reg   [1:0] tmp_55_reg_2141;
wire   [1:0] tmp_56_fu_1252_p4;
reg   [1:0] tmp_56_reg_2146;
wire   [1:0] tmp_57_fu_1262_p4;
reg   [1:0] tmp_57_reg_2151;
wire   [1:0] tmp_58_fu_1272_p4;
reg   [1:0] tmp_58_reg_2156;
wire   [1:0] tmp_59_fu_1282_p4;
reg   [1:0] tmp_59_reg_2161;
wire   [1:0] tmp_60_fu_1292_p4;
reg   [1:0] tmp_60_reg_2166;
reg   [58:0] tmp_61_reg_2171;
reg   [3:0] trunc_ln1_reg_2176;
wire   [3:0] add_ln22_2_fu_1528_p2;
reg   [3:0] add_ln22_2_reg_2181;
wire    ap_CS_fsm_state4;
wire   [3:0] tmp_68_fu_1594_p4;
reg   [3:0] tmp_68_reg_2186;
wire   [6:0] add_ln26_2_fu_1736_p2;
reg   [6:0] add_ln26_2_reg_2191;
wire   [8:0] dist_fu_1767_p2;
wire    ap_CS_fsm_state5;
wire   [1:0] k_fu_1783_p2;
wire    ap_CS_fsm_state6;
wire   [31:0] select_ln45_fu_1804_p3;
wire   [0:0] icmp_ln43_fu_1777_p2;
wire   [31:0] select_ln45_1_fu_1812_p3;
wire   [0:0] write_flag_fu_1829_p6;
wire   [0:0] icmp_ln53_fu_1820_p2;
wire   [0:0] write_flag7_fu_1843_p6;
wire   [0:0] write_flag4_fu_1857_p6;
reg   [8:0] dists_0_0_reg_328;
reg   [2:0] i_0_reg_340;
reg   [31:0] max_dist_0_reg_351;
reg   [31:0] max_dist_id_0_reg_362;
reg   [1:0] max_dist_id_reg_373;
reg   [0:0] write_flag4_1_reg_384;
wire   [1:0] trunc_ln55_fu_1825_p1;
reg   [0:0] write_flag7_1_reg_399;
reg   [0:0] write_flag_1_reg_414;
reg   [31:0] phi_ln59_reg_429;
reg   [31:0] phi_ln59_1_reg_442;
reg   [31:0] phi_ln59_2_reg_455;
wire   [63:0] zext_ln35_2_fu_497_p1;
wire   [63:0] zext_ln35_3_fu_507_p1;
wire   [12:0] zext_ln35_1_fu_488_p1;
wire   [12:0] add_ln35_fu_492_p2;
wire   [16:0] zext_ln35_fu_484_p1;
wire   [16:0] add_ln35_1_fu_502_p2;
wire   [63:0] diff_fu_516_p2;
wire   [0:0] tmp_fu_522_p3;
wire   [0:0] tmp_1_fu_530_p3;
wire   [0:0] tmp_2_fu_538_p3;
wire   [0:0] tmp_3_fu_546_p3;
wire   [0:0] tmp_4_fu_554_p3;
wire   [0:0] tmp_5_fu_562_p3;
wire   [0:0] tmp_6_fu_570_p3;
wire   [0:0] tmp_7_fu_578_p3;
wire   [0:0] tmp_8_fu_586_p3;
wire   [0:0] tmp_9_fu_594_p3;
wire   [0:0] tmp_10_fu_602_p3;
wire   [0:0] tmp_11_fu_610_p3;
wire   [0:0] tmp_12_fu_618_p3;
wire   [0:0] tmp_13_fu_626_p3;
wire   [0:0] tmp_14_fu_634_p3;
wire   [0:0] tmp_15_fu_642_p3;
wire   [0:0] tmp_16_fu_650_p3;
wire   [0:0] tmp_17_fu_658_p3;
wire   [0:0] tmp_18_fu_666_p3;
wire   [0:0] tmp_19_fu_674_p3;
wire   [0:0] tmp_20_fu_682_p3;
wire   [0:0] tmp_21_fu_690_p3;
wire   [0:0] tmp_22_fu_698_p3;
wire   [0:0] tmp_23_fu_706_p3;
wire   [0:0] tmp_24_fu_714_p3;
wire   [0:0] tmp_25_fu_722_p3;
wire   [0:0] tmp_26_fu_730_p3;
wire   [0:0] tmp_27_fu_738_p3;
wire   [0:0] tmp_28_fu_746_p3;
wire   [0:0] tmp_29_fu_754_p3;
wire   [0:0] tmp_30_fu_762_p3;
wire   [0:0] tmp_31_fu_770_p3;
wire   [62:0] and_ln_fu_778_p64;
wire   [63:0] zext_ln20_fu_908_p1;
wire   [63:0] sub_ln20_fu_912_p2;
wire   [1:0] tmp_s_fu_922_p4;
wire   [61:0] and_ln1_fu_1072_p32;
wire   [1:0] tmp_46_fu_1152_p4;
wire   [61:0] and_ln21_1_fu_1302_p32;
wire   [62:0] zext_ln21_fu_1138_p1;
wire   [62:0] zext_ln21_1_fu_1368_p1;
wire   [62:0] add_ln21_1_fu_1378_p2;
wire   [61:0] add_ln21_fu_1372_p2;
wire   [59:0] trunc_ln21_3_fu_1410_p31;
wire   [59:0] trunc_ln21_4_fu_1459_p31;
wire   [59:0] add_ln22_fu_1508_p2;
wire   [59:0] zext_ln22_3_fu_1514_p1;
wire   [3:0] zext_ln22_1_fu_1407_p1;
wire   [3:0] add_ln22_3_fu_1523_p2;
wire   [3:0] zext_ln22_fu_1404_p1;
wire   [59:0] add_ln22_1_fu_1517_p2;
wire   [3:0] tmp_62_fu_1534_p4;
wire   [3:0] tmp_63_fu_1544_p4;
wire   [3:0] tmp_64_fu_1554_p4;
wire   [3:0] tmp_65_fu_1564_p4;
wire   [3:0] tmp_66_fu_1574_p4;
wire   [3:0] tmp_67_fu_1584_p4;
wire   [3:0] trunc_ln22_fu_1604_p1;
wire   [59:0] x_assign_3_fu_1608_p16;
wire   [51:0] lshr_ln_fu_1646_p14;
wire   [59:0] zext_ln23_1_fu_1676_p1;
wire   [60:0] zext_ln22_2_fu_1642_p1;
wire   [60:0] zext_ln23_fu_1680_p1;
wire   [60:0] add_ln23_1_fu_1690_p2;
wire   [44:0] lshr_ln1_fu_1696_p4;
wire   [59:0] add_ln23_fu_1684_p2;
wire   [60:0] zext_ln24_fu_1706_p1;
wire   [60:0] add_ln24_fu_1720_p2;
wire   [6:0] trunc_ln26_1_fu_1710_p4;
wire   [6:0] trunc_ln26_2_fu_1726_p4;
wire   [6:0] trunc_ln2_fu_1745_p3;
wire   [6:0] zext_ln26_fu_1742_p1;
wire   [6:0] add_ln26_1_fu_1752_p2;
wire   [6:0] add_ln26_fu_1758_p2;
wire   [8:0] zext_ln26_1_fu_1763_p1;
wire   [31:0] max_dist_fu_1789_p5;
wire   [0:0] icmp_ln45_fu_1798_p2;
wire   [31:0] zext_ln48_fu_1773_p1;
wire    ap_CS_fsm_state7;
wire   [31:0] select_ln59_fu_1871_p3;
wire   [31:0] select_ln59_1_fu_1877_p3;
wire   [31:0] select_ln59_2_fu_1883_p3;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [31:0] ap_return_3_preg;
reg   [31:0] ap_return_4_preg;
reg   [31:0] ap_return_5_preg;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
#0 ap_return_3_preg = 32'd0;
#0 ap_return_4_preg = 32'd0;
#0 ap_return_5_preg = 32'd0;
end

DigitRec_sw_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
DigitRec_sw_mux_32_32_1_1_U1(
    .din0(dists_0_read),
    .din1(dists_1_read),
    .din2(dists_2_read),
    .din3(max_dist_id_reg_373),
    .dout(max_dist_fu_1789_p5)
);

DigitRec_sw_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
DigitRec_sw_mux_42_1_1_1_U2(
    .din0(1'd1),
    .din1(1'd0),
    .din2(1'd0),
    .din3(1'd0),
    .din4(trunc_ln55_fu_1825_p1),
    .dout(write_flag_fu_1829_p6)
);

DigitRec_sw_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
DigitRec_sw_mux_42_1_1_1_U3(
    .din0(1'd0),
    .din1(1'd0),
    .din2(1'd1),
    .din3(1'd1),
    .din4(trunc_ln55_fu_1825_p1),
    .dout(write_flag7_fu_1843_p6)
);

DigitRec_sw_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
DigitRec_sw_mux_42_1_1_1_U4(
    .din0(1'd0),
    .din1(1'd1),
    .din2(1'd0),
    .din3(1'd0),
    .din4(trunc_ln55_fu_1825_p1),
    .dout(write_flag4_fu_1857_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_return_0_preg <= phi_ln59_2_reg_455;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_return_1_preg <= phi_ln59_1_reg_442;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_return_2_preg <= phi_ln59_reg_429;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_return_3_preg <= select_ln59_fu_1871_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_return_4_preg <= select_ln59_1_fu_1877_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_return_5_preg <= select_ln59_2_fu_1883_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dists_0_0_reg_328 <= dist_fu_1767_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        dists_0_0_reg_328 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_340 <= i_reg_1996;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_340 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_472_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        max_dist_0_reg_351 <= 32'd0;
    end else if (((icmp_ln43_fu_1777_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        max_dist_0_reg_351 <= select_ln45_fu_1804_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_472_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        max_dist_id_0_reg_362 <= 32'd4;
    end else if (((icmp_ln43_fu_1777_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        max_dist_id_0_reg_362 <= select_ln45_1_fu_1812_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_472_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        max_dist_id_reg_373 <= 2'd0;
    end else if (((icmp_ln43_fu_1777_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        max_dist_id_reg_373 <= k_fu_1783_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln55_fu_1825_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln53_fu_1820_p2 == 1'd1) & (icmp_ln43_fu_1777_p2 == 1'd1))) begin
        phi_ln59_1_reg_442 <= label_cast_reg_1986;
    end else if ((((icmp_ln53_fu_1820_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln43_fu_1777_p2 == 1'd1)) | (~(trunc_ln55_fu_1825_p1 == 2'd1) & ~(trunc_ln55_fu_1825_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln53_fu_1820_p2 == 1'd1) & (icmp_ln43_fu_1777_p2 == 1'd1)) | ((trunc_ln55_fu_1825_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln53_fu_1820_p2 == 1'd1) & (icmp_ln43_fu_1777_p2 == 1'd1)))) begin
        phi_ln59_1_reg_442 <= labels_1_read;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln55_fu_1825_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln53_fu_1820_p2 == 1'd1) & (icmp_ln43_fu_1777_p2 == 1'd1))) begin
        phi_ln59_2_reg_455 <= label_cast_reg_1986;
    end else if ((((icmp_ln53_fu_1820_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln43_fu_1777_p2 == 1'd1)) | ((trunc_ln55_fu_1825_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln53_fu_1820_p2 == 1'd1) & (icmp_ln43_fu_1777_p2 == 1'd1)) | (~(trunc_ln55_fu_1825_p1 == 2'd1) & ~(trunc_ln55_fu_1825_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln53_fu_1820_p2 == 1'd1) & (icmp_ln43_fu_1777_p2 == 1'd1)))) begin
        phi_ln59_2_reg_455 <= labels_0_read;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln53_fu_1820_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln43_fu_1777_p2 == 1'd1)) | ((trunc_ln55_fu_1825_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln53_fu_1820_p2 == 1'd1) & (icmp_ln43_fu_1777_p2 == 1'd1)) | ((trunc_ln55_fu_1825_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln53_fu_1820_p2 == 1'd1) & (icmp_ln43_fu_1777_p2 == 1'd1)))) begin
        phi_ln59_reg_429 <= labels_2_read;
    end else if ((~(trunc_ln55_fu_1825_p1 == 2'd1) & ~(trunc_ln55_fu_1825_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln53_fu_1820_p2 == 1'd1) & (icmp_ln43_fu_1777_p2 == 1'd1))) begin
        phi_ln59_reg_429 <= label_cast_reg_1986;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_1820_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln43_fu_1777_p2 == 1'd1))) begin
        write_flag4_1_reg_384 <= 1'd0;
    end else if ((((trunc_ln55_fu_1825_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln53_fu_1820_p2 == 1'd1) & (icmp_ln43_fu_1777_p2 == 1'd1)) | (~(trunc_ln55_fu_1825_p1 == 2'd1) & ~(trunc_ln55_fu_1825_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln53_fu_1820_p2 == 1'd1) & (icmp_ln43_fu_1777_p2 == 1'd1)) | ((trunc_ln55_fu_1825_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln53_fu_1820_p2 == 1'd1) & (icmp_ln43_fu_1777_p2 == 1'd1)))) begin
        write_flag4_1_reg_384 <= write_flag4_fu_1857_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_1820_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln43_fu_1777_p2 == 1'd1))) begin
        write_flag7_1_reg_399 <= 1'd0;
    end else if ((((trunc_ln55_fu_1825_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln53_fu_1820_p2 == 1'd1) & (icmp_ln43_fu_1777_p2 == 1'd1)) | (~(trunc_ln55_fu_1825_p1 == 2'd1) & ~(trunc_ln55_fu_1825_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln53_fu_1820_p2 == 1'd1) & (icmp_ln43_fu_1777_p2 == 1'd1)) | ((trunc_ln55_fu_1825_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln53_fu_1820_p2 == 1'd1) & (icmp_ln43_fu_1777_p2 == 1'd1)))) begin
        write_flag7_1_reg_399 <= write_flag7_fu_1843_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_1820_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln43_fu_1777_p2 == 1'd1))) begin
        write_flag_1_reg_414 <= 1'd0;
    end else if ((((trunc_ln55_fu_1825_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln53_fu_1820_p2 == 1'd1) & (icmp_ln43_fu_1777_p2 == 1'd1)) | (~(trunc_ln55_fu_1825_p1 == 2'd1) & ~(trunc_ln55_fu_1825_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln53_fu_1820_p2 == 1'd1) & (icmp_ln43_fu_1777_p2 == 1'd1)) | ((trunc_ln55_fu_1825_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln53_fu_1820_p2 == 1'd1) & (icmp_ln43_fu_1777_p2 == 1'd1)))) begin
        write_flag_1_reg_414 <= write_flag_fu_1829_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln22_2_reg_2181 <= add_ln22_2_fu_1528_p2;
        add_ln26_2_reg_2191 <= add_ln26_2_fu_1736_p2;
        tmp_68_reg_2186 <= {{add_ln22_1_fu_1517_p2[11:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_1996 <= i_fu_478_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        label_cast_reg_1986[3 : 0] <= label_cast_fu_468_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_32_reg_2025 <= {{sub_ln20_fu_912_p2[57:56]}};
        tmp_33_reg_2030 <= {{sub_ln20_fu_912_p2[53:52]}};
        tmp_34_reg_2035 <= {{sub_ln20_fu_912_p2[49:48]}};
        tmp_35_reg_2040 <= {{sub_ln20_fu_912_p2[45:44]}};
        tmp_36_reg_2045 <= {{sub_ln20_fu_912_p2[41:40]}};
        tmp_37_reg_2050 <= {{sub_ln20_fu_912_p2[37:36]}};
        tmp_38_reg_2055 <= {{sub_ln20_fu_912_p2[33:32]}};
        tmp_39_reg_2060 <= {{sub_ln20_fu_912_p2[29:28]}};
        tmp_40_reg_2065 <= {{sub_ln20_fu_912_p2[25:24]}};
        tmp_41_reg_2070 <= {{sub_ln20_fu_912_p2[21:20]}};
        tmp_42_reg_2075 <= {{sub_ln20_fu_912_p2[17:16]}};
        tmp_43_reg_2080 <= {{sub_ln20_fu_912_p2[13:12]}};
        tmp_44_reg_2085 <= {{sub_ln20_fu_912_p2[9:8]}};
        tmp_45_reg_2090 <= {{sub_ln20_fu_912_p2[5:4]}};
        tmp_47_reg_2101 <= {{sub_ln20_fu_912_p2[59:58]}};
        tmp_48_reg_2106 <= {{sub_ln20_fu_912_p2[55:54]}};
        tmp_49_reg_2111 <= {{sub_ln20_fu_912_p2[51:50]}};
        tmp_50_reg_2116 <= {{sub_ln20_fu_912_p2[47:46]}};
        tmp_51_reg_2121 <= {{sub_ln20_fu_912_p2[43:42]}};
        tmp_52_reg_2126 <= {{sub_ln20_fu_912_p2[39:38]}};
        tmp_53_reg_2131 <= {{sub_ln20_fu_912_p2[35:34]}};
        tmp_54_reg_2136 <= {{sub_ln20_fu_912_p2[31:30]}};
        tmp_55_reg_2141 <= {{sub_ln20_fu_912_p2[27:26]}};
        tmp_56_reg_2146 <= {{sub_ln20_fu_912_p2[23:22]}};
        tmp_57_reg_2151 <= {{sub_ln20_fu_912_p2[19:18]}};
        tmp_58_reg_2156 <= {{sub_ln20_fu_912_p2[15:14]}};
        tmp_59_reg_2161 <= {{sub_ln20_fu_912_p2[11:10]}};
        tmp_60_reg_2166 <= {{sub_ln20_fu_912_p2[7:6]}};
        tmp_61_reg_2171 <= {{add_ln21_1_fu_1378_p2[62:4]}};
        trunc_ln1_reg_2176 <= {{add_ln21_fu_1372_p2[7:4]}};
        trunc_ln21_2_reg_2095 <= {{sub_ln20_fu_912_p2[3:2]}};
        trunc_ln21_reg_2019 <= trunc_ln21_fu_918_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_472_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln33_reg_2011[8 : 0] <= zext_ln33_fu_512_p1[8 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_return_0 = phi_ln59_2_reg_455;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_return_1 = phi_ln59_1_reg_442;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_return_2 = phi_ln59_reg_429;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_return_3 = select_ln59_fu_1871_p3;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_return_4 = select_ln59_1_fu_1877_p3;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_return_5 = select_ln59_2_fu_1883_p3;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        test_inst_ce0 = 1'b1;
    end else begin
        test_inst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        train_inst_ce0 = 1'b1;
    end else begin
        train_inst_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln33_fu_472_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln43_fu_1777_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_1_fu_1378_p2 = (zext_ln21_fu_1138_p1 + zext_ln21_1_fu_1368_p1);

assign add_ln21_fu_1372_p2 = (and_ln21_1_fu_1302_p32 + and_ln1_fu_1072_p32);

assign add_ln22_1_fu_1517_p2 = (add_ln22_fu_1508_p2 + zext_ln22_3_fu_1514_p1);

assign add_ln22_2_fu_1528_p2 = (add_ln22_3_fu_1523_p2 + zext_ln22_fu_1404_p1);

assign add_ln22_3_fu_1523_p2 = (zext_ln22_1_fu_1407_p1 + trunc_ln1_reg_2176);

assign add_ln22_fu_1508_p2 = (trunc_ln21_3_fu_1410_p31 + trunc_ln21_4_fu_1459_p31);

assign add_ln23_1_fu_1690_p2 = (zext_ln22_2_fu_1642_p1 + zext_ln23_fu_1680_p1);

assign add_ln23_fu_1684_p2 = (zext_ln23_1_fu_1676_p1 + x_assign_3_fu_1608_p16);

assign add_ln24_fu_1720_p2 = (add_ln23_1_fu_1690_p2 + zext_ln24_fu_1706_p1);

assign add_ln26_1_fu_1752_p2 = (trunc_ln2_fu_1745_p3 + zext_ln26_fu_1742_p1);

assign add_ln26_2_fu_1736_p2 = (trunc_ln26_1_fu_1710_p4 + trunc_ln26_2_fu_1726_p4);

assign add_ln26_fu_1758_p2 = (add_ln26_2_reg_2191 + add_ln26_1_fu_1752_p2);

assign add_ln35_1_fu_502_p2 = (train_inst_offset + zext_ln35_fu_484_p1);

assign add_ln35_fu_492_p2 = (test_inst_offset + zext_ln35_1_fu_488_p1);

assign and_ln1_fu_1072_p32 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{tmp_s_fu_922_p4}, {2'd0}}, {tmp_32_fu_932_p4}}, {2'd0}}, {tmp_33_fu_942_p4}}, {2'd0}}, {tmp_34_fu_952_p4}}, {2'd0}}, {tmp_35_fu_962_p4}}, {2'd0}}, {tmp_36_fu_972_p4}}, {2'd0}}, {tmp_37_fu_982_p4}}, {2'd0}}, {tmp_38_fu_992_p4}}, {2'd0}}, {tmp_39_fu_1002_p4}}, {2'd0}}, {tmp_40_fu_1012_p4}}, {2'd0}}, {tmp_41_fu_1022_p4}}, {2'd0}}, {tmp_42_fu_1032_p4}}, {2'd0}}, {tmp_43_fu_1042_p4}}, {2'd0}}, {tmp_44_fu_1052_p4}}, {2'd0}}, {tmp_45_fu_1062_p4}}, {2'd0}}, {trunc_ln21_fu_918_p1}};

assign and_ln21_1_fu_1302_p32 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{tmp_46_fu_1152_p4}, {2'd0}}, {tmp_47_fu_1162_p4}}, {2'd0}}, {tmp_48_fu_1172_p4}}, {2'd0}}, {tmp_49_fu_1182_p4}}, {2'd0}}, {tmp_50_fu_1192_p4}}, {2'd0}}, {tmp_51_fu_1202_p4}}, {2'd0}}, {tmp_52_fu_1212_p4}}, {2'd0}}, {tmp_53_fu_1222_p4}}, {2'd0}}, {tmp_54_fu_1232_p4}}, {2'd0}}, {tmp_55_fu_1242_p4}}, {2'd0}}, {tmp_56_fu_1252_p4}}, {2'd0}}, {tmp_57_fu_1262_p4}}, {2'd0}}, {tmp_58_fu_1272_p4}}, {2'd0}}, {tmp_59_fu_1282_p4}}, {2'd0}}, {tmp_60_fu_1292_p4}}, {2'd0}}, {trunc_ln21_2_fu_1142_p4}};

assign and_ln_fu_778_p64 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{tmp_fu_522_p3}, {1'd0}}, {tmp_1_fu_530_p3}}, {1'd0}}, {tmp_2_fu_538_p3}}, {1'd0}}, {tmp_3_fu_546_p3}}, {1'd0}}, {tmp_4_fu_554_p3}}, {1'd0}}, {tmp_5_fu_562_p3}}, {1'd0}}, {tmp_6_fu_570_p3}}, {1'd0}}, {tmp_7_fu_578_p3}}, {1'd0}}, {tmp_8_fu_586_p3}}, {1'd0}}, {tmp_9_fu_594_p3}}, {1'd0}}, {tmp_10_fu_602_p3}}, {1'd0}}, {tmp_11_fu_610_p3}}, {1'd0}}, {tmp_12_fu_618_p3}}, {1'd0}}, {tmp_13_fu_626_p3}}, {1'd0}}, {tmp_14_fu_634_p3}}, {1'd0}}, {tmp_15_fu_642_p3}}, {1'd0}}, {tmp_16_fu_650_p3}}, {1'd0}}, {tmp_17_fu_658_p3}}, {1'd0}}, {tmp_18_fu_666_p3}}, {1'd0}}, {tmp_19_fu_674_p3}}, {1'd0}}, {tmp_20_fu_682_p3}}, {1'd0}}, {tmp_21_fu_690_p3}}, {1'd0}}, {tmp_22_fu_698_p3}}, {1'd0}}, {tmp_23_fu_706_p3}}, {1'd0}}, {tmp_24_fu_714_p3}}, {1'd0}}, {tmp_25_fu_722_p3}}, {1'd0}}, {tmp_26_fu_730_p3}}, {1'd0}}, {tmp_27_fu_738_p3}}, {1'd0}}, {tmp_28_fu_746_p3}}, {1'd0}}, {tmp_29_fu_754_p3}}, {1'd0}}, {tmp_30_fu_762_p3}}, {1'd0}}, {tmp_31_fu_770_p3}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign diff_fu_516_p2 = (train_inst_q0 ^ test_inst_q0);

assign dist_fu_1767_p2 = (zext_ln26_1_fu_1763_p1 + dists_0_0_reg_328);

assign i_fu_478_p2 = (i_0_reg_340 + 3'd1);

assign icmp_ln33_fu_472_p2 = ((i_0_reg_340 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_1777_p2 = ((max_dist_id_reg_373 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_1798_p2 = (($signed(max_dist_fu_1789_p5) > $signed(max_dist_0_reg_351)) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_1820_p2 = (($signed(zext_ln33_reg_2011) < $signed(max_dist_0_reg_351)) ? 1'b1 : 1'b0);

assign k_fu_1783_p2 = (max_dist_id_reg_373 + 2'd1);

assign label_cast_fu_468_p1 = label_r;

assign lshr_ln1_fu_1696_p4 = {{add_ln23_1_fu_1690_p2[60:16]}};

assign lshr_ln_fu_1646_p14 = {{{{{{{{{{{{{tmp_62_fu_1534_p4}, {4'd0}}, {tmp_63_fu_1544_p4}}, {4'd0}}, {tmp_64_fu_1554_p4}}, {4'd0}}, {tmp_65_fu_1564_p4}}, {4'd0}}, {tmp_66_fu_1574_p4}}, {4'd0}}, {tmp_67_fu_1584_p4}}, {4'd0}}, {tmp_68_fu_1594_p4}};

assign select_ln45_1_fu_1812_p3 = ((icmp_ln45_fu_1798_p2[0:0] === 1'b1) ? zext_ln48_fu_1773_p1 : max_dist_id_0_reg_362);

assign select_ln45_fu_1804_p3 = ((icmp_ln45_fu_1798_p2[0:0] === 1'b1) ? max_dist_fu_1789_p5 : max_dist_0_reg_351);

assign select_ln59_1_fu_1877_p3 = ((write_flag4_1_reg_384[0:0] === 1'b1) ? zext_ln33_reg_2011 : dists_1_read_5);

assign select_ln59_2_fu_1883_p3 = ((write_flag7_1_reg_399[0:0] === 1'b1) ? zext_ln33_reg_2011 : dists_2_read_5);

assign select_ln59_fu_1871_p3 = ((write_flag_1_reg_414[0:0] === 1'b1) ? zext_ln33_reg_2011 : dists_0_read_5);

assign sub_ln20_fu_912_p2 = (diff_fu_516_p2 - zext_ln20_fu_908_p1);

assign test_inst_address0 = zext_ln35_2_fu_497_p1;

assign tmp_10_fu_602_p3 = diff_fu_516_p2[32'd43];

assign tmp_11_fu_610_p3 = diff_fu_516_p2[32'd41];

assign tmp_12_fu_618_p3 = diff_fu_516_p2[32'd39];

assign tmp_13_fu_626_p3 = diff_fu_516_p2[32'd37];

assign tmp_14_fu_634_p3 = diff_fu_516_p2[32'd35];

assign tmp_15_fu_642_p3 = diff_fu_516_p2[32'd33];

assign tmp_16_fu_650_p3 = diff_fu_516_p2[32'd31];

assign tmp_17_fu_658_p3 = diff_fu_516_p2[32'd29];

assign tmp_18_fu_666_p3 = diff_fu_516_p2[32'd27];

assign tmp_19_fu_674_p3 = diff_fu_516_p2[32'd25];

assign tmp_1_fu_530_p3 = diff_fu_516_p2[32'd61];

assign tmp_20_fu_682_p3 = diff_fu_516_p2[32'd23];

assign tmp_21_fu_690_p3 = diff_fu_516_p2[32'd21];

assign tmp_22_fu_698_p3 = diff_fu_516_p2[32'd19];

assign tmp_23_fu_706_p3 = diff_fu_516_p2[32'd17];

assign tmp_24_fu_714_p3 = diff_fu_516_p2[32'd15];

assign tmp_25_fu_722_p3 = diff_fu_516_p2[32'd13];

assign tmp_26_fu_730_p3 = diff_fu_516_p2[32'd11];

assign tmp_27_fu_738_p3 = diff_fu_516_p2[32'd9];

assign tmp_28_fu_746_p3 = diff_fu_516_p2[32'd7];

assign tmp_29_fu_754_p3 = diff_fu_516_p2[32'd5];

assign tmp_2_fu_538_p3 = diff_fu_516_p2[32'd59];

assign tmp_30_fu_762_p3 = diff_fu_516_p2[32'd3];

assign tmp_31_fu_770_p3 = diff_fu_516_p2[32'd1];

assign tmp_32_fu_932_p4 = {{sub_ln20_fu_912_p2[57:56]}};

assign tmp_33_fu_942_p4 = {{sub_ln20_fu_912_p2[53:52]}};

assign tmp_34_fu_952_p4 = {{sub_ln20_fu_912_p2[49:48]}};

assign tmp_35_fu_962_p4 = {{sub_ln20_fu_912_p2[45:44]}};

assign tmp_36_fu_972_p4 = {{sub_ln20_fu_912_p2[41:40]}};

assign tmp_37_fu_982_p4 = {{sub_ln20_fu_912_p2[37:36]}};

assign tmp_38_fu_992_p4 = {{sub_ln20_fu_912_p2[33:32]}};

assign tmp_39_fu_1002_p4 = {{sub_ln20_fu_912_p2[29:28]}};

assign tmp_3_fu_546_p3 = diff_fu_516_p2[32'd57];

assign tmp_40_fu_1012_p4 = {{sub_ln20_fu_912_p2[25:24]}};

assign tmp_41_fu_1022_p4 = {{sub_ln20_fu_912_p2[21:20]}};

assign tmp_42_fu_1032_p4 = {{sub_ln20_fu_912_p2[17:16]}};

assign tmp_43_fu_1042_p4 = {{sub_ln20_fu_912_p2[13:12]}};

assign tmp_44_fu_1052_p4 = {{sub_ln20_fu_912_p2[9:8]}};

assign tmp_45_fu_1062_p4 = {{sub_ln20_fu_912_p2[5:4]}};

assign tmp_46_fu_1152_p4 = {{sub_ln20_fu_912_p2[63:62]}};

assign tmp_47_fu_1162_p4 = {{sub_ln20_fu_912_p2[59:58]}};

assign tmp_48_fu_1172_p4 = {{sub_ln20_fu_912_p2[55:54]}};

assign tmp_49_fu_1182_p4 = {{sub_ln20_fu_912_p2[51:50]}};

assign tmp_4_fu_554_p3 = diff_fu_516_p2[32'd55];

assign tmp_50_fu_1192_p4 = {{sub_ln20_fu_912_p2[47:46]}};

assign tmp_51_fu_1202_p4 = {{sub_ln20_fu_912_p2[43:42]}};

assign tmp_52_fu_1212_p4 = {{sub_ln20_fu_912_p2[39:38]}};

assign tmp_53_fu_1222_p4 = {{sub_ln20_fu_912_p2[35:34]}};

assign tmp_54_fu_1232_p4 = {{sub_ln20_fu_912_p2[31:30]}};

assign tmp_55_fu_1242_p4 = {{sub_ln20_fu_912_p2[27:26]}};

assign tmp_56_fu_1252_p4 = {{sub_ln20_fu_912_p2[23:22]}};

assign tmp_57_fu_1262_p4 = {{sub_ln20_fu_912_p2[19:18]}};

assign tmp_58_fu_1272_p4 = {{sub_ln20_fu_912_p2[15:14]}};

assign tmp_59_fu_1282_p4 = {{sub_ln20_fu_912_p2[11:10]}};

assign tmp_5_fu_562_p3 = diff_fu_516_p2[32'd53];

assign tmp_60_fu_1292_p4 = {{sub_ln20_fu_912_p2[7:6]}};

assign tmp_62_fu_1534_p4 = {{add_ln22_1_fu_1517_p2[59:56]}};

assign tmp_63_fu_1544_p4 = {{add_ln22_1_fu_1517_p2[51:48]}};

assign tmp_64_fu_1554_p4 = {{add_ln22_1_fu_1517_p2[43:40]}};

assign tmp_65_fu_1564_p4 = {{add_ln22_1_fu_1517_p2[35:32]}};

assign tmp_66_fu_1574_p4 = {{add_ln22_1_fu_1517_p2[27:24]}};

assign tmp_67_fu_1584_p4 = {{add_ln22_1_fu_1517_p2[19:16]}};

assign tmp_68_fu_1594_p4 = {{add_ln22_1_fu_1517_p2[11:8]}};

assign tmp_6_fu_570_p3 = diff_fu_516_p2[32'd51];

assign tmp_7_fu_578_p3 = diff_fu_516_p2[32'd49];

assign tmp_8_fu_586_p3 = diff_fu_516_p2[32'd47];

assign tmp_9_fu_594_p3 = diff_fu_516_p2[32'd45];

assign tmp_fu_522_p3 = diff_fu_516_p2[32'd63];

assign tmp_s_fu_922_p4 = {{sub_ln20_fu_912_p2[61:60]}};

assign train_inst_address0 = zext_ln35_3_fu_507_p1;

assign trunc_ln21_2_fu_1142_p4 = {{sub_ln20_fu_912_p2[3:2]}};

assign trunc_ln21_3_fu_1410_p31 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{2'd0}, {tmp_47_reg_2101}}}, {2'd0}}}, {tmp_48_reg_2106}}}, {2'd0}}}, {tmp_49_reg_2111}}}, {2'd0}}}, {tmp_50_reg_2116}}}, {2'd0}}}, {tmp_51_reg_2121}}}, {2'd0}}}, {tmp_52_reg_2126}}}, {2'd0}}}, {tmp_53_reg_2131}}}, {2'd0}}}, {tmp_54_reg_2136}}}, {2'd0}}}, {tmp_55_reg_2141}}}, {2'd0}}}, {tmp_56_reg_2146}}}, {2'd0}}}, {tmp_57_reg_2151}}}, {2'd0}}}, {tmp_58_reg_2156}}}, {2'd0}}}, {tmp_59_reg_2161}}}, {2'd0}}}, {tmp_60_reg_2166}}}, {2'd0}}}, {trunc_ln21_2_reg_2095}};

assign trunc_ln21_4_fu_1459_p31 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{2'd0}, {tmp_32_reg_2025}}}, {2'd0}}}, {tmp_33_reg_2030}}}, {2'd0}}}, {tmp_34_reg_2035}}}, {2'd0}}}, {tmp_35_reg_2040}}}, {2'd0}}}, {tmp_36_reg_2045}}}, {2'd0}}}, {tmp_37_reg_2050}}}, {2'd0}}}, {tmp_38_reg_2055}}}, {2'd0}}}, {tmp_39_reg_2060}}}, {2'd0}}}, {tmp_40_reg_2065}}}, {2'd0}}}, {tmp_41_reg_2070}}}, {2'd0}}}, {tmp_42_reg_2075}}}, {2'd0}}}, {tmp_43_reg_2080}}}, {2'd0}}}, {tmp_44_reg_2085}}}, {2'd0}}}, {tmp_45_reg_2090}}}, {2'd0}}}, {trunc_ln21_reg_2019}};

assign trunc_ln21_fu_918_p1 = sub_ln20_fu_912_p2[1:0];

assign trunc_ln22_fu_1604_p1 = add_ln22_1_fu_1517_p2[3:0];

assign trunc_ln26_1_fu_1710_p4 = {{add_ln23_fu_1684_p2[22:16]}};

assign trunc_ln26_2_fu_1726_p4 = {{add_ln24_fu_1720_p2[38:32]}};

assign trunc_ln2_fu_1745_p3 = {{3'd0}, {tmp_68_reg_2186}};

assign trunc_ln55_fu_1825_p1 = max_dist_id_0_reg_362[1:0];

assign x_assign_3_fu_1608_p16 = {{{{{{{{{{{{{{{tmp_62_fu_1534_p4}, {4'd0}}, {tmp_63_fu_1544_p4}}, {4'd0}}, {tmp_64_fu_1554_p4}}, {4'd0}}, {tmp_65_fu_1564_p4}}, {4'd0}}, {tmp_66_fu_1574_p4}}, {4'd0}}, {tmp_67_fu_1584_p4}}, {4'd0}}, {tmp_68_fu_1594_p4}}, {4'd0}}, {trunc_ln22_fu_1604_p1}};

assign zext_ln20_fu_908_p1 = and_ln_fu_778_p64;

assign zext_ln21_1_fu_1368_p1 = and_ln21_1_fu_1302_p32;

assign zext_ln21_fu_1138_p1 = and_ln1_fu_1072_p32;

assign zext_ln22_1_fu_1407_p1 = trunc_ln21_reg_2019;

assign zext_ln22_2_fu_1642_p1 = x_assign_3_fu_1608_p16;

assign zext_ln22_3_fu_1514_p1 = tmp_61_reg_2171;

assign zext_ln22_fu_1404_p1 = trunc_ln21_2_reg_2095;

assign zext_ln23_1_fu_1676_p1 = lshr_ln_fu_1646_p14;

assign zext_ln23_fu_1680_p1 = lshr_ln_fu_1646_p14;

assign zext_ln24_fu_1706_p1 = lshr_ln1_fu_1696_p4;

assign zext_ln26_1_fu_1763_p1 = add_ln26_fu_1758_p2;

assign zext_ln26_fu_1742_p1 = add_ln22_2_reg_2181;

assign zext_ln33_fu_512_p1 = dists_0_0_reg_328;

assign zext_ln35_1_fu_488_p1 = i_0_reg_340;

assign zext_ln35_2_fu_497_p1 = add_ln35_fu_492_p2;

assign zext_ln35_3_fu_507_p1 = add_ln35_1_fu_502_p2;

assign zext_ln35_fu_484_p1 = i_0_reg_340;

assign zext_ln48_fu_1773_p1 = max_dist_id_reg_373;

always @ (posedge ap_clk) begin
    label_cast_reg_1986[31:4] <= 28'b0000000000000000000000000000;
    zext_ln33_reg_2011[31:9] <= 23'b00000000000000000000000;
end

endmodule //update_knn
